///////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2007 Esper Team. All rights reserved.                                /
// http://esper.codehaus.org                                                          /
// ---------------------------------------------------------------------------------- /
// The software in this package is published under the terms of the GPL license       /
// a copy of which has been included with this distribution in the license.txt file.  /
///////////////////////////////////////////////////////////////////////////////////////

using System;

using com.espertech.esper.compat;
using com.espertech.esper.epl.expression;
using com.espertech.esper.epl.variable;
using com.espertech.esper.events;

namespace com.espertech.esper.filter
{
	/// <summary>
	/// Adapter for use by <see cref="FilterParamIndexBooleanExpr"/> to evaluate bool expressions, providing
	/// events per stream to expression nodes. Generated by @{link FilterSpecParamExprNode} for
	/// bool expression filter parameters.
	/// </summary>

    public class ExprNodeAdapter
	{
	    private readonly ExprNode exprNode;
        private readonly EventBean[] prototype;
        private readonly VariableService variableService;

	    private readonly ThreadLocal<EventBean[]> arrayPerThread;

        /// <summary>
        /// Creates a local data object.
        /// </summary>
        /// <returns></returns>
        private EventBean[] CreateLocalData()
        {
            EventBean[] eventsPerStream = new EventBean[prototype.Length];
            Array.Copy(prototype, 0, eventsPerStream, 0, prototype.Length);
            return eventsPerStream;
        }

        /// <summary>
        /// Ctor.
        /// </summary>
        /// <param name="exprNode">is the boolean expression</param>
        /// <param name="prototype">is the row of events the we are matching on</param>
        /// <param name="variableService">for setting variable version for evaluating variables, if required</param>
        public ExprNodeAdapter(ExprNode exprNode, EventBean[] prototype,
                               VariableService variableService)
        {
            this.exprNode = exprNode;
            this.variableService = variableService;
            this.arrayPerThread = new FastThreadLocal<EventBean[]>(CreateLocalData);

            if (prototype == null)
            {
                this.prototype = new EventBean[1];
            }
            else
            {
                this.prototype = prototype;
            }
        }

	    /// <summary>
	    /// Provides the prototype events-per-stream where stream zero is the current stream
	    /// and is filled when the expression is evaluated.
	    /// </summary>
        public EventBean[] Prototype
	    {
            get { return this.prototype; }
	    }

	    /// <summary>
	    /// Evaluate the bool expression given the event as a stream zero event.
	    /// </summary>
	    /// <param name="_event">is the stream zero event (current event)</param>
	    /// <returns>bool result of the expression</returns>
	    public bool Evaluate(EventBean _event)
	    {
            if (variableService != null)
            {
                variableService.SetLocalVersion();
            }
	        EventBean[] eventsPerStream = arrayPerThread.GetOrCreate();
	        eventsPerStream[0] = _event;
            bool? result = (bool?)exprNode.Evaluate(eventsPerStream, true);
	        return result ?? false;
	    }
	}
} // End of namespace
