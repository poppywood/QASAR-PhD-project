// $ANTLR 3.1 EsperEPL2Grammar.g 2008-08-20 22:37:59
// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
namespace 
	com.espertech.esper.epl.generated

{

  using System;
  using System.Collections.Generic;
  using com.espertech.esper.compat;

using Antlr.Runtime;
using IList 		= System.Collections.IList;
using ArrayList 	= System.Collections.ArrayList;
using Stack 		= Antlr.Runtime.Collections.StackList;

using IDictionary	= System.Collections.IDictionary;
using Hashtable 	= System.Collections.Hashtable;


using Antlr.Runtime.Tree;

public partial class EsperEPL2GrammarParser : Parser
{
    public static readonly string[] tokenNames = new string[] 
	{
        "<invalid>", 
		"<EOR>", 
		"<DOWN>", 
		"<UP>", 
		"CREATE", 
		"WINDOW", 
		"IN_SET", 
		"BETWEEN", 
		"LIKE", 
		"REGEXP", 
		"ESCAPE", 
		"OR_EXPR", 
		"AND_EXPR", 
		"NOT_EXPR", 
		"EVERY_EXPR", 
		"WHERE", 
		"AS", 
		"SUM", 
		"AVG", 
		"MAX", 
		"MIN", 
		"COALESCE", 
		"MEDIAN", 
		"STDDEV", 
		"AVEDEV", 
		"COUNT", 
		"SELECT", 
		"CASE", 
		"CASE2", 
		"ELSE", 
		"WHEN", 
		"THEN", 
		"END", 
		"FROM", 
		"OUTER", 
		"JOIN", 
		"LEFT", 
		"RIGHT", 
		"FULL", 
		"ON", 
		"IS", 
		"BY", 
		"GROUP", 
		"HAVING", 
		"DISTINCT", 
		"ALL", 
		"OUTPUT", 
		"EVENTS", 
		"SECONDS", 
		"MINUTES", 
		"FIRST", 
		"LAST", 
		"INSERT", 
		"INTO", 
		"ORDER", 
		"ASC", 
		"DESC", 
		"RSTREAM", 
		"ISTREAM", 
		"IRSTREAM", 
		"UNIDIRECTIONAL", 
		"PATTERN", 
		"SQL", 
		"METADATASQL", 
		"PREVIOUS", 
		"PRIOR", 
		"EXISTS", 
		"WEEKDAY", 
		"LW", 
		"INSTANCEOF", 
		"CAST", 
		"CURRENT_TIMESTAMP", 
		"DELETE", 
		"SNAPSHOT", 
		"SET", 
		"VARIABLE", 
		"NUMERIC_PARAM_RANGE", 
		"NUMERIC_PARAM_LIST", 
		"NUMERIC_PARAM_FREQUENCY", 
		"FOLLOWED_BY_EXPR", 
		"ARRAY_PARAM_LIST", 
		"EVENT_FILTER_EXPR", 
		"EVENT_FILTER_IDENT", 
		"EVENT_FILTER_PARAM", 
		"EVENT_FILTER_RANGE", 
		"EVENT_FILTER_NOT_RANGE", 
		"EVENT_FILTER_IN", 
		"EVENT_FILTER_NOT_IN", 
		"EVENT_FILTER_BETWEEN", 
		"EVENT_FILTER_NOT_BETWEEN", 
		"CLASS_IDENT", 
		"GUARD_EXPR", 
		"OBSERVER_EXPR", 
		"VIEW_EXPR", 
		"PATTERN_INCL_EXPR", 
		"DATABASE_JOIN_EXPR", 
		"WHERE_EXPR", 
		"HAVING_EXPR", 
		"EVAL_BITWISE_EXPR", 
		"EVAL_AND_EXPR", 
		"EVAL_OR_EXPR", 
		"EVAL_EQUALS_EXPR", 
		"EVAL_NOTEQUALS_EXPR", 
		"EVAL_IDENT", 
		"SELECTION_EXPR", 
		"SELECTION_ELEMENT_EXPR", 
		"SELECTION_STREAM", 
		"STREAM_EXPR", 
		"OUTERJOIN_EXPR", 
		"LEFT_OUTERJOIN_EXPR", 
		"RIGHT_OUTERJOIN_EXPR", 
		"FULL_OUTERJOIN_EXPR", 
		"GROUP_BY_EXPR", 
		"ORDER_BY_EXPR", 
		"ORDER_ELEMENT_EXPR", 
		"EVENT_PROP_EXPR", 
		"EVENT_PROP_SIMPLE", 
		"EVENT_PROP_MAPPED", 
		"EVENT_PROP_INDEXED", 
		"EVENT_PROP_DYNAMIC_SIMPLE", 
		"EVENT_PROP_DYNAMIC_INDEXED", 
		"EVENT_PROP_DYNAMIC_MAPPED", 
		"EVENT_LIMIT_EXPR", 
		"SEC_LIMIT_EXPR", 
		"MIN_LIMIT_EXPR", 
		"TIMEPERIOD_LIMIT_EXPR", 
		"INSERTINTO_EXPR", 
		"INSERTINTO_EXPRCOL", 
		"CONCAT", 
		"LIB_FUNCTION", 
		"UNARY_MINUS", 
		"TIME_PERIOD", 
		"ARRAY_EXPR", 
		"DAY_PART", 
		"HOUR_PART", 
		"MINUTE_PART", 
		"SECOND_PART", 
		"MILLISECOND_PART", 
		"NOT_IN_SET", 
		"NOT_BETWEEN", 
		"NOT_LIKE", 
		"NOT_REGEXP", 
		"DBSELECT_EXPR", 
		"DBFROM_CLAUSE", 
		"DBWHERE_CLAUSE", 
		"WILDCARD_SELECT", 
		"INSERTINTO_STREAM_NAME", 
		"IN_RANGE", 
		"NOT_IN_RANGE", 
		"SUBSELECT_EXPR", 
		"EXISTS_SUBSELECT_EXPR", 
		"IN_SUBSELECT_EXPR", 
		"NOT_IN_SUBSELECT_EXPR", 
		"IN_SUBSELECT_QUERY_EXPR", 
		"LAST_OPERATOR", 
		"WEEKDAY_OPERATOR", 
		"SUBSTITUTION", 
		"CAST_EXPR", 
		"CREATE_WINDOW_EXPR", 
		"CREATE_WINDOW_SELECT_EXPR", 
		"ON_EXPR", 
		"ON_DELETE_EXPR", 
		"ON_SELECT_EXPR", 
		"ON_EXPR_FROM", 
		"ON_SET_EXPR", 
		"CREATE_VARIABLE_EXPR", 
		"METHOD_JOIN_EXPR", 
		"INT_TYPE", 
		"LONG_TYPE", 
		"FLOAT_TYPE", 
		"DOUBLE_TYPE", 
		"STRING_TYPE", 
		"BOOL_TYPE", 
		"NULL_TYPE", 
		"NUM_DOUBLE", 
		"EPL_EXPR", 
		"NUM_INT", 
		"NUM_LONG", 
		"NUM_FLOAT", 
		"QUESTION", 
		"MINUS", 
		"PLUS", 
		"STRING_LITERAL", 
		"QUOTED_STRING_LITERAL", 
		"IDENT", 
		"COMMA", 
		"EQUALS", 
		"DOT", 
		"STAR", 
		"LPAREN", 
		"RPAREN", 
		"LBRACK", 
		"RBRACK", 
		"COLON", 
		"BAND", 
		"BOR", 
		"BXOR", 
		"SQL_NE", 
		"NOT_EQUAL", 
		"LT", 
		"GT", 
		"LE", 
		"GE", 
		"LOR", 
		"DIV", 
		"MOD", 
		"LCURLY", 
		"RCURLY", 
		"FOLLOWED_BY", 
		"ESCAPECHAR", 
		"EQUAL", 
		"LNOT", 
		"BNOT", 
		"DIV_ASSIGN", 
		"PLUS_ASSIGN", 
		"INC", 
		"MINUS_ASSIGN", 
		"DEC", 
		"STAR_ASSIGN", 
		"MOD_ASSIGN", 
		"SR", 
		"SR_ASSIGN", 
		"BSR", 
		"BSR_ASSIGN", 
		"SL", 
		"SL_ASSIGN", 
		"BXOR_ASSIGN", 
		"BOR_ASSIGN", 
		"BAND_ASSIGN", 
		"LAND", 
		"SEMI", 
		"WS", 
		"SL_COMMENT", 
		"ML_COMMENT", 
		"ESC", 
		"HEX_DIGIT", 
		"EXPONENT", 
		"FLOAT_SUFFIX", 
		"'true'", 
		"'false'", 
		"'null'", 
		"'days'", 
		"'day'", 
		"'hours'", 
		"'hour'", 
		"'minute'", 
		"'second'", 
		"'sec'", 
		"'milliseconds'", 
		"'millisecond'", 
		"'msec'"
    };

    public const int FLOAT_SUFFIX = 237;
    public const int STAR = 188;
    public const int NUMERIC_PARAM_LIST = 77;
    public const int MOD = 205;
    public const int ISTREAM = 58;
    public const int OUTERJOIN_EXPR = 108;
    public const int BSR = 222;
    public const int EOF = -1;
    public const int LIB_FUNCTION = 129;
    public const int FULL_OUTERJOIN_EXPR = 111;
    public const int INC = 215;
    public const int LNOT = 211;
    public const int RPAREN = 190;
    public const int CREATE = 4;
    public const int STRING_LITERAL = 182;
    public const int BSR_ASSIGN = 223;
    public const int STREAM_EXPR = 107;
    public const int CAST_EXPR = 157;
    public const int T__247 = 247;
    public const int NOT_EQUAL = 198;
    public const int METADATASQL = 63;
    public const int T__246 = 246;
    public const int T__249 = 249;
    public const int T__248 = 248;
    public const int REGEXP = 9;
    public const int T__250 = 250;
    public const int FOLLOWED_BY_EXPR = 79;
    public const int FOLLOWED_BY = 208;
    public const int HOUR_PART = 134;
    public const int RBRACK = 192;
    public const int GE = 202;
    public const int MIN_LIMIT_EXPR = 124;
    public const int METHOD_JOIN_EXPR = 166;
    public const int ASC = 55;
    public const int IN_SET = 6;
    public const int EVENT_FILTER_EXPR = 81;
    public const int MINUS_ASSIGN = 216;
    public const int ELSE = 29;
    public const int EVENT_FILTER_NOT_IN = 87;
    public const int INSERTINTO_STREAM_NAME = 146;
    public const int NUM_DOUBLE = 174;
    public const int LCURLY = 206;
    public const int UNARY_MINUS = 130;
    public const int DBWHERE_CLAUSE = 144;
    public const int MEDIAN = 22;
    public const int EVENTS = 47;
    public const int AND_EXPR = 12;
    public const int GROUP = 42;
    public const int EVENT_FILTER_NOT_RANGE = 85;
    public const int WS = 231;
    public const int ESCAPECHAR = 209;
    public const int SL_COMMENT = 232;
    public const int NULL_TYPE = 173;
    public const int GT = 200;
    public const int BNOT = 212;
    public const int WHERE_EXPR = 96;
    public const int END = 32;
    public const int LAND = 229;
    public const int NOT_REGEXP = 141;
    public const int EVENT_PROP_EXPR = 115;
    public const int LBRACK = 191;
    public const int VIEW_EXPR = 93;
    public const int LONG_TYPE = 168;
    public const int ON_SELECT_EXPR = 162;
    public const int MINUTE_PART = 135;
    public const int SQL_NE = 197;
    public const int SUM = 17;
    public const int LPAREN = 189;
    public const int IN_SUBSELECT_EXPR = 151;
    public const int AS = 16;
    public const int OR_EXPR = 11;
    public const int THEN = 31;
    public const int NOT_IN_RANGE = 148;
    public const int LEFT = 36;
    public const int AVG = 18;
    public const int PREVIOUS = 64;
    public const int SECOND_PART = 136;
    public const int IDENT = 184;
    public const int DATABASE_JOIN_EXPR = 95;
    public const int BXOR = 196;
    public const int PLUS = 181;
    public const int CASE2 = 28;
    public const int EXISTS = 66;
    public const int EVENT_PROP_INDEXED = 118;
    public const int EVAL_NOTEQUALS_EXPR = 102;
    public const int CREATE_VARIABLE_EXPR = 165;
    public const int LIKE = 8;
    public const int OUTER = 34;
    public const int BY = 41;
    public const int T__239 = 239;
    public const int ARRAY_PARAM_LIST = 80;
    public const int RIGHT_OUTERJOIN_EXPR = 110;
    public const int T__238 = 238;
    public const int LAST_OPERATOR = 154;
    public const int EVAL_AND_EXPR = 99;
    public const int LEFT_OUTERJOIN_EXPR = 109;
    public const int HEX_DIGIT = 235;
    public const int EPL_EXPR = 175;
    public const int GROUP_BY_EXPR = 112;
    public const int SET = 74;
    public const int RIGHT = 37;
    public const int HAVING = 43;
    public const int INSTANCEOF = 69;
    public const int MIN = 20;
    public const int EVENT_PROP_SIMPLE = 116;
    public const int MINUS = 180;
    public const int T__245 = 245;
    public const int T__244 = 244;
    public const int SEMI = 230;
    public const int T__243 = 243;
    public const int STAR_ASSIGN = 218;
    public const int T__242 = 242;
    public const int T__241 = 241;
    public const int T__240 = 240;
    public const int COLON = 193;
    public const int MINUTES = 49;
    public const int BAND_ASSIGN = 228;
    public const int NOT_IN_SET = 138;
    public const int EVENT_PROP_DYNAMIC_SIMPLE = 119;
    public const int SL = 224;
    public const int WHEN = 30;
    public const int NOT_IN_SUBSELECT_EXPR = 152;
    public const int GUARD_EXPR = 91;
    public const int SR = 220;
    public const int RCURLY = 207;
    public const int PLUS_ASSIGN = 214;
    public const int DAY_PART = 133;
    public const int EXISTS_SUBSELECT_EXPR = 150;
    public const int EVENT_FILTER_IN = 86;
    public const int DIV = 204;
    public const int BETWEEN = 7;
    public const int MILLISECOND_PART = 137;
    public const int PRIOR = 65;
    public const int FIRST = 50;
    public const int SELECTION_EXPR = 104;
    public const int LOR = 203;
    public const int CAST = 70;
    public const int LW = 68;
    public const int WILDCARD_SELECT = 145;
    public const int EXPONENT = 236;
    public const int LT = 199;
    public const int PATTERN_INCL_EXPR = 94;
    public const int ORDER_BY_EXPR = 113;
    public const int BOOL_TYPE = 172;
    public const int MOD_ASSIGN = 219;
    public const int CASE = 27;
    public const int IN_SUBSELECT_QUERY_EXPR = 153;
    public const int EQUALS = 186;
    public const int COUNT = 25;
    public const int DIV_ASSIGN = 213;
    public const int SL_ASSIGN = 225;
    public const int PATTERN = 61;
    public const int SQL = 62;
    public const int WEEKDAY = 67;
    public const int FULL = 38;
    public const int INSERT = 52;
    public const int ESCAPE = 10;
    public const int ARRAY_EXPR = 132;
    public const int LAST = 51;
    public const int SELECT = 26;
    public const int INTO = 53;
    public const int COALESCE = 21;
    public const int EVENT_FILTER_BETWEEN = 88;
    public const int FLOAT_TYPE = 169;
    public const int SUBSELECT_EXPR = 149;
    public const int NUMERIC_PARAM_RANGE = 76;
    public const int CONCAT = 128;
    public const int CLASS_IDENT = 90;
    public const int ON_EXPR = 160;
    public const int CREATE_WINDOW_EXPR = 158;
    public const int ON_DELETE_EXPR = 161;
    public const int NUM_LONG = 177;
    public const int ON = 39;
    public const int TIME_PERIOD = 131;
    public const int DOUBLE_TYPE = 170;
    public const int DELETE = 72;
    public const int INT_TYPE = 167;
    public const int EVERY_EXPR = 14;
    public const int EVAL_BITWISE_EXPR = 98;
    public const int ORDER_ELEMENT_EXPR = 114;
    public const int VARIABLE = 75;
    public const int SUBSTITUTION = 156;
    public const int STRING_TYPE = 171;
    public const int NUM_INT = 176;
    public const int ON_SET_EXPR = 164;
    public const int STDDEV = 23;
    public const int NUM_FLOAT = 178;
    public const int ON_EXPR_FROM = 163;
    public const int FROM = 33;
    public const int DISTINCT = 44;
    public const int OUTPUT = 46;
    public const int WEEKDAY_OPERATOR = 155;
    public const int DEC = 217;
    public const int WHERE = 15;
    public const int SEC_LIMIT_EXPR = 123;
    public const int BXOR_ASSIGN = 226;
    public const int NUMERIC_PARAM_FREQUENCY = 78;
    public const int SNAPSHOT = 73;
    public const int ORDER = 54;
    public const int ESC = 234;
    public const int EVENT_FILTER_PARAM = 83;
    public const int EVENT_PROP_DYNAMIC_MAPPED = 121;
    public const int IRSTREAM = 59;
    public const int MAX = 19;
    public const int SECONDS = 48;
    public const int EVENT_FILTER_RANGE = 84;
    public const int ML_COMMENT = 233;
    public const int EVENT_PROP_DYNAMIC_INDEXED = 120;
    public const int BOR_ASSIGN = 227;
    public const int COMMA = 185;
    public const int IS = 40;
    public const int TIMEPERIOD_LIMIT_EXPR = 125;
    public const int EQUAL = 210;
    public const int BOR = 195;
    public const int ALL = 45;
    public const int EVENT_FILTER_NOT_BETWEEN = 89;
    public const int IN_RANGE = 147;
    public const int DOT = 187;
    public const int CURRENT_TIMESTAMP = 71;
    public const int INSERTINTO_EXPR = 126;
    public const int UNIDIRECTIONAL = 60;
    public const int HAVING_EXPR = 97;
    public const int EVAL_EQUALS_EXPR = 101;
    public const int RSTREAM = 57;
    public const int NOT_LIKE = 140;
    public const int EVENT_LIMIT_EXPR = 122;
    public const int NOT_BETWEEN = 139;
    public const int EVAL_OR_EXPR = 100;
    public const int BAND = 194;
    public const int QUOTED_STRING_LITERAL = 183;
    public const int JOIN = 35;
    public const int NOT_EXPR = 13;
    public const int QUESTION = 179;
    public const int OBSERVER_EXPR = 92;
    public const int EVENT_FILTER_IDENT = 82;
    public const int EVENT_PROP_MAPPED = 117;
    public const int AVEDEV = 24;
    public const int DBSELECT_EXPR = 142;
    public const int SELECTION_ELEMENT_EXPR = 105;
    public const int CREATE_WINDOW_SELECT_EXPR = 159;
    public const int WINDOW = 5;
    public const int INSERTINTO_EXPRCOL = 127;
    public const int DESC = 56;
    public const int SELECTION_STREAM = 106;
    public const int SR_ASSIGN = 221;
    public const int LE = 201;
    public const int DBFROM_CLAUSE = 143;
    public const int EVAL_IDENT = 103;

    // delegates
    // delegators



        public EsperEPL2GrammarParser(ITokenStream input)
    		: this(input, new RecognizerSharedState()) {
        }

        public EsperEPL2GrammarParser(ITokenStream input, RecognizerSharedState state)
    		: base(input, state) {
    		InitializeCyclicDFAs();
             
        }
        
    protected ITreeAdaptor adaptor = new CommonTreeAdaptor();

    public ITreeAdaptor TreeAdaptor
    {
        get { return this.adaptor; }
        set {
    	this.adaptor = value;
    	}
    }

    override public string[] TokenNames {
		get { return EsperEPL2GrammarParser.tokenNames; }
    }

    override public string GrammarFileName {
		get { return "EsperEPL2Grammar.g"; }
    }


      // provide nice error messages
      private Stack<string> paraphrases = new Stack<string>();
      private Map<int, string> lexerTokenParaphases = new HashMap<int, string>();
      private Map<int, string> parserTokenParaphases = new HashMap<int, string>();
      
      public Stack<string> getParaphrases() {
        return paraphrases;
      }
      
      public Map<int, string> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.Count == 0) {
          	lexerTokenParaphases.Put(IDENT, "an identifier");
          	lexerTokenParaphases.Put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.Put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.Put(EQUALS, "an equals '='");
    	lexerTokenParaphases.Put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.Put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.Put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.Put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.Put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.Put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.Put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.Put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.Put(COLON, "a colon ':'");
    	lexerTokenParaphases.Put(COMMA, "a comma ','");
    	lexerTokenParaphases.Put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.Put(LNOT, "a not '!'");
    	lexerTokenParaphases.Put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.Put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.Put(DIV, "a division operator '\'");
    	lexerTokenParaphases.Put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.Put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.Put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.Put(INC, "an increment operator '++'");
    	lexerTokenParaphases.Put(MINUS, "a minus '-'");
    	lexerTokenParaphases.Put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.Put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.Put(STAR, "a star '*'");
    	lexerTokenParaphases.Put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.Put(MOD, "a modulo");
    	lexerTokenParaphases.Put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.Put(SR, "a shift right '>>'");
    	lexerTokenParaphases.Put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.Put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.Put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.Put(GE, "a greater equals '>='");
    	lexerTokenParaphases.Put(GT, "a greater then '>'");
    	lexerTokenParaphases.Put(SL, "a shift left '<<'");
    	lexerTokenParaphases.Put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.Put(LE, "a less equals '<='");
    	lexerTokenParaphases.Put(LT, "a lesser then '<'");
    	lexerTokenParaphases.Put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.Put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.Put(BOR, "a binary or '|'");
    	lexerTokenParaphases.Put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.Put(LOR, "a logical or '||'");
    	lexerTokenParaphases.Put(BAND, "a binary and '&'");
    	lexerTokenParaphases.Put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.Put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.Put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.Put(DOT, "a dot '.'");	
        }
        return lexerTokenParaphases;
      }
      
      public Map<int, string> getParserTokenParaphrases() {
        if (parserTokenParaphases.Count == 0) {
    	parserTokenParaphases.Put(CREATE, "'create'");
    	parserTokenParaphases.Put(WINDOW, "'window'");
    	parserTokenParaphases.Put(IN_SET, "'in'");
    	parserTokenParaphases.Put(BETWEEN, "'between'");
    	parserTokenParaphases.Put(LIKE, "'like'");
    	parserTokenParaphases.Put(REGEXP, "'regexp'");
    	parserTokenParaphases.Put(ESCAPE, "'escape'");
    	parserTokenParaphases.Put(OR_EXPR, "'or'");
    	parserTokenParaphases.Put(AND_EXPR, "'and'");
    	parserTokenParaphases.Put(NOT_EXPR, "'not'");
    	parserTokenParaphases.Put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.Put(WHERE, "'where'");
    	parserTokenParaphases.Put(AS, "'as'");	
    	parserTokenParaphases.Put(SUM, "'sum'");
    	parserTokenParaphases.Put(AVG, "'avg'");
    	parserTokenParaphases.Put(MAX, "'max'");
    	parserTokenParaphases.Put(MIN, "'min'");
    	parserTokenParaphases.Put(COALESCE, "'coalesce'");
    	parserTokenParaphases.Put(MEDIAN, "'median'");
    	parserTokenParaphases.Put(STDDEV, "'stddev'");
    	parserTokenParaphases.Put(AVEDEV, "'avedev'");
    	parserTokenParaphases.Put(COUNT, "'count'");
    	parserTokenParaphases.Put(SELECT, "'select'");
    	parserTokenParaphases.Put(CASE, "'case'");
    	parserTokenParaphases.Put(CASE2, "'case'");
    	parserTokenParaphases.Put(ELSE, "'else'");
    	parserTokenParaphases.Put(WHEN, "'when'");
    	parserTokenParaphases.Put(THEN, "'then'");
    	parserTokenParaphases.Put(END, "'end'");
    	parserTokenParaphases.Put(FROM, "'from'");
    	parserTokenParaphases.Put(OUTER, "'outer'");
    	parserTokenParaphases.Put(JOIN, "'join'");
    	parserTokenParaphases.Put(LEFT, "'left'");
    	parserTokenParaphases.Put(RIGHT, "'right'");
    	parserTokenParaphases.Put(FULL, "'full'");
    	parserTokenParaphases.Put(ON, "'on'");	
    	parserTokenParaphases.Put(IS, "'is'");
    	parserTokenParaphases.Put(BY, "'by'");
    	parserTokenParaphases.Put(GROUP, "'group'");
    	parserTokenParaphases.Put(HAVING, "'having'");
    	parserTokenParaphases.Put(DISTINCT, "'distinct'");
    	parserTokenParaphases.Put(ALL, "'all'");
    	parserTokenParaphases.Put(OUTPUT, "'output'");
    	parserTokenParaphases.Put(EVENTS, "'events'");
    	parserTokenParaphases.Put(SECONDS, "'seconds'");
    	parserTokenParaphases.Put(MINUTES, "'minutes'");
    	parserTokenParaphases.Put(FIRST, "'first'");
    	parserTokenParaphases.Put(LAST, "'last'");
    	parserTokenParaphases.Put(INSERT, "'insert'");
    	parserTokenParaphases.Put(INTO, "'into'");
    	parserTokenParaphases.Put(ORDER, "'order'");
    	parserTokenParaphases.Put(ASC, "'asc'");
    	parserTokenParaphases.Put(DESC, "'desc'");
    	parserTokenParaphases.Put(RSTREAM, "'rstream'");
    	parserTokenParaphases.Put(ISTREAM, "'istream'");
    	parserTokenParaphases.Put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.Put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.Put(PATTERN, "'pattern'");
    	parserTokenParaphases.Put(SQL, "'sql'");
    	parserTokenParaphases.Put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.Put(PREVIOUS, "'prev'");
    	parserTokenParaphases.Put(PRIOR, "'prior'");
    	parserTokenParaphases.Put(EXISTS, "'exists'");
    	parserTokenParaphases.Put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.Put(LW, "'lastweekday'");
    	parserTokenParaphases.Put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.Put(CAST, "'cast'");
    	parserTokenParaphases.Put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.Put(DELETE, "'delete'");
    	parserTokenParaphases.Put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.Put(SET, "'set'");
    	parserTokenParaphases.Put(VARIABLE, "'variable'");
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IIntStream input, int ttype, BitSet follow) {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IIntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) {
        throw recognitionException;
      }

      public void recoverFromMismatchedSet(IIntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw recognitionException;
      }

      protected bool recoverFromMismatchedElement(IIntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new ApplicationException("Error recovering from mismatched element: " + recognitionException.Message, recognitionException);
      }


    public class startPatternExpressionRule_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:384:1: startPatternExpressionRule : patternExpression EOF ;
    public EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken EOF2 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression1 = default(EsperEPL2GrammarParser.patternExpression_return);


        CommonTree EOF2_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:385:2: ( patternExpression EOF )
            // EsperEPL2Grammar.g:385:4: patternExpression EOF
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1123);
            	patternExpression1 = patternExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, patternExpression1.Tree);
            	EOF2=(IToken)Match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1127); if (state.failed) return retval;

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public class startEPLExpressionRule_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:389:1: startEPLExpressionRule : eplExpression EOF -> ^( EPL_EXPR eplExpression ) ;
    public EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken EOF4 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression3 = default(EsperEPL2GrammarParser.eplExpression_return);


        CommonTree EOF4_tree=null;
        RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_eplExpression = new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try 
    	{
            // EsperEPL2Grammar.g:390:2: ( eplExpression EOF -> ^( EPL_EXPR eplExpression ) )
            // EsperEPL2Grammar.g:390:4: eplExpression EOF
            {
            	PushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1141);
            	eplExpression3 = eplExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_eplExpression.Add(eplExpression3.Tree);
            	EOF4=(IToken)Match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1145); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_EOF.Add(EOF4);



            	// AST REWRITE
            	// elements:          eplExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 392:3: -> ^( EPL_EXPR eplExpression )
            	{
            	    // EsperEPL2Grammar.g:392:6: ^( EPL_EXPR eplExpression )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EPL_EXPR, "EPL_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_eplExpression.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public class startEventPropertyRule_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:395:1: startEventPropertyRule : eventProperty EOF ;
    public EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken EOF6 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty5 = default(EsperEPL2GrammarParser.eventProperty_return);


        CommonTree EOF6_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:396:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:396:4: eventProperty EOF
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1168);
            	eventProperty5 = eventProperty();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, eventProperty5.Tree);
            	EOF6=(IToken)Match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1172); if (state.failed) return retval;

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public class number_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:400:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public EsperEPL2GrammarParser.number_return number() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken ni = null;
        IToken nl = null;
        IToken nf = null;
        IToken nd = null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG = new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE = new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT = new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT = new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try 
    	{
            // EsperEPL2Grammar.g:401:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt1 = 4;
            switch ( input.LA(1) ) 
            {
            case NUM_INT:
            	{
                alt1 = 1;
                }
                break;
            case NUM_LONG:
            	{
                alt1 = 2;
                }
                break;
            case NUM_FLOAT:
            	{
                alt1 = 3;
                }
                break;
            case NUM_DOUBLE:
            	{
                alt1 = 4;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d1s0 =
            	        new NoViableAltException("", 1, 0, input);

            	    throw nvae_d1s0;
            }

            switch (alt1) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:401:9: ni= NUM_INT
                    {
                    	ni=(IToken)Match(input,NUM_INT,FOLLOW_NUM_INT_in_number1191); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_NUM_INT.Add(ni);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 401:20: -> INT_TYPE[$ni]
                    	{
                    	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(INT_TYPE, ni));

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:402:9: nl= NUM_LONG
                    {
                    	nl=(IToken)Match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number1208); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_NUM_LONG.Add(nl);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 402:21: -> LONG_TYPE[$nl]
                    	{
                    	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(LONG_TYPE, nl));

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:403:9: nf= NUM_FLOAT
                    {
                    	nf=(IToken)Match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number1225); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_NUM_FLOAT.Add(nf);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 403:22: -> FLOAT_TYPE[$nf]
                    	{
                    	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(FLOAT_TYPE, nf));

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:404:9: nd= NUM_DOUBLE
                    {
                    	nd=(IToken)Match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number1242); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_NUM_DOUBLE.Add(nd);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 404:23: -> DOUBLE_TYPE[$nd]
                    	{
                    	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(DOUBLE_TYPE, nd));

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "number"

    public class substitution_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:407:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public EsperEPL2GrammarParser.substitution_return substitution() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken q = null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION = new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try 
    	{
            // EsperEPL2Grammar.g:408:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:408:4: q= QUESTION
            {
            	q=(IToken)Match(input,QUESTION,FOLLOW_QUESTION_in_substitution1263); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_QUESTION.Add(q);



            	// AST REWRITE
            	// elements:          
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 408:15: -> SUBSTITUTION[$q]
            	{
            	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SUBSTITUTION, q));

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public class constant_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:411:1: constant : ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number | stringconstant | t= 'true' -> ^( BOOL_TYPE[$t] ) | f= 'false' -> ^( BOOL_TYPE[$f] ) | nu= 'null' -> ^( NULL_TYPE[$nu] ) );
    public EsperEPL2GrammarParser.constant_return constant() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken m = null;
        IToken p = null;
        IToken t = null;
        IToken f = null;
        IToken nu = null;
        EsperEPL2GrammarParser.number_return number7 = default(EsperEPL2GrammarParser.number_return);

        EsperEPL2GrammarParser.stringconstant_return stringconstant8 = default(EsperEPL2GrammarParser.stringconstant_return);


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_239 = new RewriteRuleTokenStream(adaptor,"token 239");
        RewriteRuleTokenStream stream_PLUS = new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_240 = new RewriteRuleTokenStream(adaptor,"token 240");
        RewriteRuleTokenStream stream_MINUS = new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_238 = new RewriteRuleTokenStream(adaptor,"token 238");
        RewriteRuleSubtreeStream stream_number = new RewriteRuleSubtreeStream(adaptor,"rule number");
        try 
    	{
            // EsperEPL2Grammar.g:412:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number | stringconstant | t= 'true' -> ^( BOOL_TYPE[$t] ) | f= 'false' -> ^( BOOL_TYPE[$f] ) | nu= 'null' -> ^( NULL_TYPE[$nu] ) )
            int alt3 = 5;
            alt3 = dfa3.Predict(input);
            switch (alt3) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:412:5: (m= MINUS | p= PLUS )? number
                    {
                    	// EsperEPL2Grammar.g:412:5: (m= MINUS | p= PLUS )?
                    	int alt2 = 3;
                    	int LA2_0 = input.LA(1);

                    	if ( (LA2_0 == MINUS) )
                    	{
                    	    alt2 = 1;
                    	}
                    	else if ( (LA2_0 == PLUS) )
                    	{
                    	    alt2 = 2;
                    	}
                    	switch (alt2) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:412:6: m= MINUS
                    	        {
                    	        	m=(IToken)Match(input,MINUS,FOLLOW_MINUS_in_constant1284); if (state.failed) return retval; 
                    	        	if ( state.backtracking==0 ) stream_MINUS.Add(m);


                    	        }
                    	        break;
                    	    case 2 :
                    	        // EsperEPL2Grammar.g:412:16: p= PLUS
                    	        {
                    	        	p=(IToken)Match(input,PLUS,FOLLOW_PLUS_in_constant1290); if (state.failed) return retval; 
                    	        	if ( state.backtracking==0 ) stream_PLUS.Add(p);


                    	        }
                    	        break;

                    	}

                    	PushFollow(FOLLOW_number_in_constant1294);
                    	number7 = number();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking==0 ) stream_number.Add(number7.Tree);


                    	// AST REWRITE
                    	// elements:          number
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 413:3: -> {$m != null}?
                    	if (m != null)
                    	{
                    	    adaptor.AddChild(root_0, adaptor.Create(((number7 != null) ? ((CommonTree)number7.Tree) : null).Type, "-" + ((number7 != null) ? input.ToString((IToken)(number7.Start),(IToken)(number7.Stop)) : null)));

                    	}
                    	else // 414:3: -> number
                    	{
                    	    adaptor.AddChild(root_0, stream_number.NextTree());

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:415:6: stringconstant
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_stringconstant_in_constant1315);
                    	stringconstant8 = stringconstant();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, stringconstant8.Tree);

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:416:10: t= 'true'
                    {
                    	t=(IToken)Match(input,238,FOLLOW_238_in_constant1328); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_238.Add(t);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 416:19: -> ^( BOOL_TYPE[$t] )
                    	{
                    	    // EsperEPL2Grammar.g:416:22: ^( BOOL_TYPE[$t] )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BOOL_TYPE, t), root_1);

                    	    adaptor.AddChild(root_0, root_1);
                    	    }

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:417:10: f= 'false'
                    {
                    	f=(IToken)Match(input,239,FOLLOW_239_in_constant1348); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_239.Add(f);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 417:20: -> ^( BOOL_TYPE[$f] )
                    	{
                    	    // EsperEPL2Grammar.g:417:23: ^( BOOL_TYPE[$f] )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BOOL_TYPE, f), root_1);

                    	    adaptor.AddChild(root_0, root_1);
                    	    }

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:418:10: nu= 'null'
                    {
                    	nu=(IToken)Match(input,240,FOLLOW_240_in_constant1368); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_240.Add(nu);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 418:20: -> ^( NULL_TYPE[$nu] )
                    	{
                    	    // EsperEPL2Grammar.g:418:23: ^( NULL_TYPE[$nu] )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NULL_TYPE, nu), root_1);

                    	    adaptor.AddChild(root_0, root_1);
                    	    }

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "constant"

    public class stringconstant_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:421:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public EsperEPL2GrammarParser.stringconstant_return stringconstant() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken sl = null;
        IToken qsl = null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL = new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL = new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try 
    	{
            // EsperEPL2Grammar.g:422:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt4 = 2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0 == STRING_LITERAL) )
            {
                alt4 = 1;
            }
            else if ( (LA4_0 == QUOTED_STRING_LITERAL) )
            {
                alt4 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d4s0 =
                    new NoViableAltException("", 4, 0, input);

                throw nvae_d4s0;
            }
            switch (alt4) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:422:6: sl= STRING_LITERAL
                    {
                    	sl=(IToken)Match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant1390); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_STRING_LITERAL.Add(sl);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 422:24: -> ^( STRING_TYPE[$sl] )
                    	{
                    	    // EsperEPL2Grammar.g:422:27: ^( STRING_TYPE[$sl] )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STRING_TYPE, sl), root_1);

                    	    adaptor.AddChild(root_0, root_1);
                    	    }

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:423:6: qsl= QUOTED_STRING_LITERAL
                    {
                    	qsl=(IToken)Match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant1406); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.Add(qsl);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 423:32: -> ^( STRING_TYPE[$qsl] )
                    	{
                    	    // EsperEPL2Grammar.g:423:35: ^( STRING_TYPE[$qsl] )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STRING_TYPE, qsl), root_1);

                    	    adaptor.AddChild(root_0, root_1);
                    	    }

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    public class eplExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:429:1: eplExpression : ( selectExpr | createWindowExpr | createVariableExpr | onExpr );
    public EsperEPL2GrammarParser.eplExpression_return eplExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr9 = default(EsperEPL2GrammarParser.selectExpr_return);

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr10 = default(EsperEPL2GrammarParser.createWindowExpr_return);

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr11 = default(EsperEPL2GrammarParser.createVariableExpr_return);

        EsperEPL2GrammarParser.onExpr_return onExpr12 = default(EsperEPL2GrammarParser.onExpr_return);



        try 
    	{
            // EsperEPL2Grammar.g:430:2: ( selectExpr | createWindowExpr | createVariableExpr | onExpr )
            int alt5 = 4;
            switch ( input.LA(1) ) 
            {
            case SELECT:
            case INSERT:
            	{
                alt5 = 1;
                }
                break;
            case CREATE:
            	{
                int LA5_3 = input.LA(2);

                if ( (LA5_3 == WINDOW) )
                {
                    alt5 = 2;
                }
                else if ( (LA5_3 == VARIABLE) )
                {
                    alt5 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d5s3 =
                        new NoViableAltException("", 5, 3, input);

                    throw nvae_d5s3;
                }
                }
                break;
            case ON:
            	{
                alt5 = 4;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d5s0 =
            	        new NoViableAltException("", 5, 0, input);

            	    throw nvae_d5s0;
            }

            switch (alt5) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:430:4: selectExpr
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_selectExpr_in_eplExpression1428);
                    	selectExpr9 = selectExpr();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, selectExpr9.Tree);

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:431:4: createWindowExpr
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_createWindowExpr_in_eplExpression1433);
                    	createWindowExpr10 = createWindowExpr();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, createWindowExpr10.Tree);

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:432:4: createVariableExpr
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_createVariableExpr_in_eplExpression1438);
                    	createVariableExpr11 = createVariableExpr();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, createVariableExpr11.Tree);

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:433:4: onExpr
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_onExpr_in_eplExpression1443);
                    	onExpr12 = onExpr();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, onExpr12.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public class selectExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:436:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ;
    public EsperEPL2GrammarParser.selectExpr_return selectExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken INSERT13 = null;
        IToken SELECT15 = null;
        IToken FROM17 = null;
        IToken WHERE19 = null;
        IToken GROUP21 = null;
        IToken BY22 = null;
        IToken HAVING24 = null;
        IToken OUTPUT26 = null;
        IToken ORDER28 = null;
        IToken BY29 = null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr14 = default(EsperEPL2GrammarParser.insertIntoExpr_return);

        EsperEPL2GrammarParser.selectClause_return selectClause16 = default(EsperEPL2GrammarParser.selectClause_return);

        EsperEPL2GrammarParser.fromClause_return fromClause18 = default(EsperEPL2GrammarParser.fromClause_return);

        EsperEPL2GrammarParser.whereClause_return whereClause20 = default(EsperEPL2GrammarParser.whereClause_return);

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr23 = default(EsperEPL2GrammarParser.groupByListExpr_return);

        EsperEPL2GrammarParser.havingClause_return havingClause25 = default(EsperEPL2GrammarParser.havingClause_return);

        EsperEPL2GrammarParser.outputLimit_return outputLimit27 = default(EsperEPL2GrammarParser.outputLimit_return);

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr30 = default(EsperEPL2GrammarParser.orderByListExpr_return);


        CommonTree INSERT13_tree=null;
        CommonTree SELECT15_tree=null;
        CommonTree FROM17_tree=null;
        CommonTree WHERE19_tree=null;
        CommonTree GROUP21_tree=null;
        CommonTree BY22_tree=null;
        CommonTree HAVING24_tree=null;
        CommonTree OUTPUT26_tree=null;
        CommonTree ORDER28_tree=null;
        CommonTree BY29_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:437:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? )
            // EsperEPL2Grammar.g:437:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	// EsperEPL2Grammar.g:437:4: ( INSERT insertIntoExpr )?
            	int alt6 = 2;
            	int LA6_0 = input.LA(1);

            	if ( (LA6_0 == INSERT) )
            	{
            	    alt6 = 1;
            	}
            	switch (alt6) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:437:5: INSERT insertIntoExpr
            	        {
            	        	INSERT13=(IToken)Match(input,INSERT,FOLLOW_INSERT_in_selectExpr1456); if (state.failed) return retval;
            	        	PushFollow(FOLLOW_insertIntoExpr_in_selectExpr1459);
            	        	insertIntoExpr14 = insertIntoExpr();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, insertIntoExpr14.Tree);

            	        }
            	        break;

            	}

            	SELECT15=(IToken)Match(input,SELECT,FOLLOW_SELECT_in_selectExpr1465); if (state.failed) return retval;
            	PushFollow(FOLLOW_selectClause_in_selectExpr1468);
            	selectClause16 = selectClause();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, selectClause16.Tree);
            	FROM17=(IToken)Match(input,FROM,FOLLOW_FROM_in_selectExpr1472); if (state.failed) return retval;
            	PushFollow(FOLLOW_fromClause_in_selectExpr1475);
            	fromClause18 = fromClause();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fromClause18.Tree);
            	// EsperEPL2Grammar.g:440:3: ( WHERE whereClause )?
            	int alt7 = 2;
            	int LA7_0 = input.LA(1);

            	if ( (LA7_0 == WHERE) )
            	{
            	    alt7 = 1;
            	}
            	switch (alt7) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:440:4: WHERE whereClause
            	        {
            	        	WHERE19=(IToken)Match(input,WHERE,FOLLOW_WHERE_in_selectExpr1480); if (state.failed) return retval;
            	        	PushFollow(FOLLOW_whereClause_in_selectExpr1483);
            	        	whereClause20 = whereClause();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, whereClause20.Tree);

            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:441:3: ( GROUP BY groupByListExpr )?
            	int alt8 = 2;
            	int LA8_0 = input.LA(1);

            	if ( (LA8_0 == GROUP) )
            	{
            	    alt8 = 1;
            	}
            	switch (alt8) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:441:4: GROUP BY groupByListExpr
            	        {
            	        	GROUP21=(IToken)Match(input,GROUP,FOLLOW_GROUP_in_selectExpr1490); if (state.failed) return retval;
            	        	BY22=(IToken)Match(input,BY,FOLLOW_BY_in_selectExpr1493); if (state.failed) return retval;
            	        	PushFollow(FOLLOW_groupByListExpr_in_selectExpr1496);
            	        	groupByListExpr23 = groupByListExpr();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, groupByListExpr23.Tree);

            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:442:3: ( HAVING havingClause )?
            	int alt9 = 2;
            	int LA9_0 = input.LA(1);

            	if ( (LA9_0 == HAVING) )
            	{
            	    alt9 = 1;
            	}
            	switch (alt9) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:442:4: HAVING havingClause
            	        {
            	        	HAVING24=(IToken)Match(input,HAVING,FOLLOW_HAVING_in_selectExpr1503); if (state.failed) return retval;
            	        	PushFollow(FOLLOW_havingClause_in_selectExpr1506);
            	        	havingClause25 = havingClause();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, havingClause25.Tree);

            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:443:3: ( OUTPUT outputLimit )?
            	int alt10 = 2;
            	int LA10_0 = input.LA(1);

            	if ( (LA10_0 == OUTPUT) )
            	{
            	    alt10 = 1;
            	}
            	switch (alt10) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:443:4: OUTPUT outputLimit
            	        {
            	        	OUTPUT26=(IToken)Match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr1513); if (state.failed) return retval;
            	        	PushFollow(FOLLOW_outputLimit_in_selectExpr1516);
            	        	outputLimit27 = outputLimit();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, outputLimit27.Tree);

            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:444:3: ( ORDER BY orderByListExpr )?
            	int alt11 = 2;
            	int LA11_0 = input.LA(1);

            	if ( (LA11_0 == ORDER) )
            	{
            	    alt11 = 1;
            	}
            	switch (alt11) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:444:4: ORDER BY orderByListExpr
            	        {
            	        	ORDER28=(IToken)Match(input,ORDER,FOLLOW_ORDER_in_selectExpr1523); if (state.failed) return retval;
            	        	BY29=(IToken)Match(input,BY,FOLLOW_BY_in_selectExpr1526); if (state.failed) return retval;
            	        	PushFollow(FOLLOW_orderByListExpr_in_selectExpr1529);
            	        	orderByListExpr30 = orderByListExpr();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, orderByListExpr30.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public class onExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:447:1: onExpr : ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? ) ;
    public EsperEPL2GrammarParser.onExpr_return onExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken i = null;
        IToken ON31 = null;
        IToken AS34 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression32 = default(EsperEPL2GrammarParser.eventFilterExpression_return);

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression33 = default(EsperEPL2GrammarParser.patternInclusionExpression_return);

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr35 = default(EsperEPL2GrammarParser.onDeleteExpr_return);

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr36 = default(EsperEPL2GrammarParser.onSelectExpr_return);

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr37 = default(EsperEPL2GrammarParser.onSetExpr_return);


        CommonTree i_tree=null;
        CommonTree ON31_tree=null;
        CommonTree AS34_tree=null;
        RewriteRuleTokenStream stream_ON = new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_onSelectExpr = new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr = new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_eventFilterExpression = new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_onSetExpr = new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_patternInclusionExpression = new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try 
    	{
            // EsperEPL2Grammar.g:448:2: ( ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:448:4: ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr | onSetExpr )
            {
            	ON31=(IToken)Match(input,ON,FOLLOW_ON_in_onExpr1544); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_ON.Add(ON31);

            	// EsperEPL2Grammar.g:448:7: ( eventFilterExpression | patternInclusionExpression )
            	int alt12 = 2;
            	int LA12_0 = input.LA(1);

            	if ( (LA12_0 == IDENT) )
            	{
            	    alt12 = 1;
            	}
            	else if ( (LA12_0 == PATTERN) )
            	{
            	    alt12 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d12s0 =
            	        new NoViableAltException("", 12, 0, input);

            	    throw nvae_d12s0;
            	}
            	switch (alt12) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:448:8: eventFilterExpression
            	        {
            	        	PushFollow(FOLLOW_eventFilterExpression_in_onExpr1547);
            	        	eventFilterExpression32 = eventFilterExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_eventFilterExpression.Add(eventFilterExpression32.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:448:32: patternInclusionExpression
            	        {
            	        	PushFollow(FOLLOW_patternInclusionExpression_in_onExpr1551);
            	        	patternInclusionExpression33 = patternInclusionExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_patternInclusionExpression.Add(patternInclusionExpression33.Tree);

            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:448:60: ( AS i= IDENT | i= IDENT )?
            	int alt13 = 3;
            	int LA13_0 = input.LA(1);

            	if ( (LA13_0 == AS) )
            	{
            	    alt13 = 1;
            	}
            	else if ( (LA13_0 == IDENT) )
            	{
            	    alt13 = 2;
            	}
            	switch (alt13) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:448:61: AS i= IDENT
            	        {
            	        	AS34=(IToken)Match(input,AS,FOLLOW_AS_in_onExpr1555); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_AS.Add(AS34);

            	        	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_onExpr1559); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_IDENT.Add(i);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:448:74: i= IDENT
            	        {
            	        	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_onExpr1565); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_IDENT.Add(i);


            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:449:3: ( onDeleteExpr | onSelectExpr | onSetExpr )
            	int alt14 = 3;
            	switch ( input.LA(1) ) 
            	{
            	case DELETE:
            		{
            	    alt14 = 1;
            	    }
            	    break;
            	case SELECT:
            	case INSERT:
            		{
            	    alt14 = 2;
            	    }
            	    break;
            	case SET:
            		{
            	    alt14 = 3;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d14s0 =
            		        new NoViableAltException("", 14, 0, input);

            		    throw nvae_d14s0;
            	}

            	switch (alt14) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:449:4: onDeleteExpr
            	        {
            	        	PushFollow(FOLLOW_onDeleteExpr_in_onExpr1573);
            	        	onDeleteExpr35 = onDeleteExpr();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_onDeleteExpr.Add(onDeleteExpr35.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:449:19: onSelectExpr
            	        {
            	        	PushFollow(FOLLOW_onSelectExpr_in_onExpr1577);
            	        	onSelectExpr36 = onSelectExpr();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_onSelectExpr.Add(onSelectExpr36.Tree);

            	        }
            	        break;
            	    case 3 :
            	        // EsperEPL2Grammar.g:449:34: onSetExpr
            	        {
            	        	PushFollow(FOLLOW_onSetExpr_in_onExpr1581);
            	        	onSetExpr37 = onSetExpr();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_onSetExpr.Add(onSetExpr37.Tree);

            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          eventFilterExpression, onDeleteExpr, onSetExpr, patternInclusionExpression, i, onSelectExpr
            	// token labels:      i
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_i = new RewriteRuleTokenStream(adaptor, "token i", i);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 450:3: -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? )
            	{
            	    // EsperEPL2Grammar.g:450:6: ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ON_EXPR, "ON_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:450:16: ( eventFilterExpression )?
            	    if ( stream_eventFilterExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_eventFilterExpression.NextTree());

            	    }
            	    stream_eventFilterExpression.Reset();
            	    // EsperEPL2Grammar.g:450:39: ( patternInclusionExpression )?
            	    if ( stream_patternInclusionExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_patternInclusionExpression.NextTree());

            	    }
            	    stream_patternInclusionExpression.Reset();
            	    // EsperEPL2Grammar.g:450:67: ( $i)?
            	    if ( stream_i.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_i.NextNode());

            	    }
            	    stream_i.Reset();
            	    // EsperEPL2Grammar.g:450:71: ( onDeleteExpr )?
            	    if ( stream_onDeleteExpr.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_onDeleteExpr.NextTree());

            	    }
            	    stream_onDeleteExpr.Reset();
            	    // EsperEPL2Grammar.g:450:85: ( onSelectExpr )?
            	    if ( stream_onSelectExpr.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_onSelectExpr.NextTree());

            	    }
            	    stream_onSelectExpr.Reset();
            	    // EsperEPL2Grammar.g:450:99: ( onSetExpr )?
            	    if ( stream_onSetExpr.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_onSetExpr.NextTree());

            	    }
            	    stream_onSetExpr.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public class onSelectExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:453:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT selectionList onExprFrom ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) ;
    public EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken INSERT38 = null;
        IToken SELECT40 = null;
        IToken WHERE43 = null;
        IToken GROUP45 = null;
        IToken BY46 = null;
        IToken HAVING48 = null;
        IToken ORDER50 = null;
        IToken BY51 = null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr39 = default(EsperEPL2GrammarParser.insertIntoExpr_return);

        EsperEPL2GrammarParser.selectionList_return selectionList41 = default(EsperEPL2GrammarParser.selectionList_return);

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom42 = default(EsperEPL2GrammarParser.onExprFrom_return);

        EsperEPL2GrammarParser.whereClause_return whereClause44 = default(EsperEPL2GrammarParser.whereClause_return);

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr47 = default(EsperEPL2GrammarParser.groupByListExpr_return);

        EsperEPL2GrammarParser.havingClause_return havingClause49 = default(EsperEPL2GrammarParser.havingClause_return);

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr52 = default(EsperEPL2GrammarParser.orderByListExpr_return);


        CommonTree INSERT38_tree=null;
        CommonTree SELECT40_tree=null;
        CommonTree WHERE43_tree=null;
        CommonTree GROUP45_tree=null;
        CommonTree BY46_tree=null;
        CommonTree HAVING48_tree=null;
        CommonTree ORDER50_tree=null;
        CommonTree BY51_tree=null;
        RewriteRuleTokenStream stream_WHERE = new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP = new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY = new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING = new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT = new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER = new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT = new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause = new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr = new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr = new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr = new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList = new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom = new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause = new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
         paraphrases.Push("on-select clause"); 
        try 
    	{
            // EsperEPL2Grammar.g:456:2: ( ( INSERT insertIntoExpr )? SELECT selectionList onExprFrom ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) )
            // EsperEPL2Grammar.g:456:4: ( INSERT insertIntoExpr )? SELECT selectionList onExprFrom ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )?
            {
            	// EsperEPL2Grammar.g:456:4: ( INSERT insertIntoExpr )?
            	int alt15 = 2;
            	int LA15_0 = input.LA(1);

            	if ( (LA15_0 == INSERT) )
            	{
            	    alt15 = 1;
            	}
            	switch (alt15) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:456:5: INSERT insertIntoExpr
            	        {
            	        	INSERT38=(IToken)Match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr1634); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_INSERT.Add(INSERT38);

            	        	PushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr1636);
            	        	insertIntoExpr39 = insertIntoExpr();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_insertIntoExpr.Add(insertIntoExpr39.Tree);

            	        }
            	        break;

            	}

            	SELECT40=(IToken)Match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr1642); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_SELECT.Add(SELECT40);

            	PushFollow(FOLLOW_selectionList_in_onSelectExpr1644);
            	selectionList41 = selectionList();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_selectionList.Add(selectionList41.Tree);
            	PushFollow(FOLLOW_onExprFrom_in_onSelectExpr1648);
            	onExprFrom42 = onExprFrom();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_onExprFrom.Add(onExprFrom42.Tree);
            	// EsperEPL2Grammar.g:459:3: ( WHERE whereClause )?
            	int alt16 = 2;
            	int LA16_0 = input.LA(1);

            	if ( (LA16_0 == WHERE) )
            	{
            	    alt16 = 1;
            	}
            	switch (alt16) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:459:4: WHERE whereClause
            	        {
            	        	WHERE43=(IToken)Match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr1653); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_WHERE.Add(WHERE43);

            	        	PushFollow(FOLLOW_whereClause_in_onSelectExpr1655);
            	        	whereClause44 = whereClause();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_whereClause.Add(whereClause44.Tree);

            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:460:3: ( GROUP BY groupByListExpr )?
            	int alt17 = 2;
            	int LA17_0 = input.LA(1);

            	if ( (LA17_0 == GROUP) )
            	{
            	    alt17 = 1;
            	}
            	switch (alt17) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:460:4: GROUP BY groupByListExpr
            	        {
            	        	GROUP45=(IToken)Match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr1664); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_GROUP.Add(GROUP45);

            	        	BY46=(IToken)Match(input,BY,FOLLOW_BY_in_onSelectExpr1666); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_BY.Add(BY46);

            	        	PushFollow(FOLLOW_groupByListExpr_in_onSelectExpr1668);
            	        	groupByListExpr47 = groupByListExpr();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_groupByListExpr.Add(groupByListExpr47.Tree);

            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:461:3: ( HAVING havingClause )?
            	int alt18 = 2;
            	int LA18_0 = input.LA(1);

            	if ( (LA18_0 == HAVING) )
            	{
            	    alt18 = 1;
            	}
            	switch (alt18) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:461:4: HAVING havingClause
            	        {
            	        	HAVING48=(IToken)Match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr1675); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_HAVING.Add(HAVING48);

            	        	PushFollow(FOLLOW_havingClause_in_onSelectExpr1677);
            	        	havingClause49 = havingClause();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_havingClause.Add(havingClause49.Tree);

            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:462:3: ( ORDER BY orderByListExpr )?
            	int alt19 = 2;
            	int LA19_0 = input.LA(1);

            	if ( (LA19_0 == ORDER) )
            	{
            	    alt19 = 1;
            	}
            	switch (alt19) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:462:4: ORDER BY orderByListExpr
            	        {
            	        	ORDER50=(IToken)Match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr1684); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_ORDER.Add(ORDER50);

            	        	BY51=(IToken)Match(input,BY,FOLLOW_BY_in_onSelectExpr1686); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_BY.Add(BY51);

            	        	PushFollow(FOLLOW_orderByListExpr_in_onSelectExpr1688);
            	        	orderByListExpr52 = orderByListExpr();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_orderByListExpr.Add(orderByListExpr52.Tree);

            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          orderByListExpr, groupByListExpr, onExprFrom, insertIntoExpr, selectionList, whereClause, havingClause
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 463:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
            	{
            	    // EsperEPL2Grammar.g:463:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:463:23: ( insertIntoExpr )?
            	    if ( stream_insertIntoExpr.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_insertIntoExpr.NextTree());

            	    }
            	    stream_insertIntoExpr.Reset();
            	    adaptor.AddChild(root_1, stream_selectionList.NextTree());
            	    adaptor.AddChild(root_1, stream_onExprFrom.NextTree());
            	    // EsperEPL2Grammar.g:463:64: ( whereClause )?
            	    if ( stream_whereClause.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_whereClause.NextTree());

            	    }
            	    stream_whereClause.Reset();
            	    // EsperEPL2Grammar.g:463:77: ( groupByListExpr )?
            	    if ( stream_groupByListExpr.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_groupByListExpr.NextTree());

            	    }
            	    stream_groupByListExpr.Reset();
            	    // EsperEPL2Grammar.g:463:94: ( havingClause )?
            	    if ( stream_havingClause.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_havingClause.NextTree());

            	    }
            	    stream_havingClause.Reset();
            	    // EsperEPL2Grammar.g:463:108: ( orderByListExpr )?
            	    if ( stream_orderByListExpr.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_orderByListExpr.NextTree());

            	    }
            	    stream_orderByListExpr.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public class onDeleteExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:466:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken DELETE53 = null;
        IToken WHERE55 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom54 = default(EsperEPL2GrammarParser.onExprFrom_return);

        EsperEPL2GrammarParser.whereClause_return whereClause56 = default(EsperEPL2GrammarParser.whereClause_return);


        CommonTree DELETE53_tree=null;
        CommonTree WHERE55_tree=null;
        RewriteRuleTokenStream stream_WHERE = new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE = new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause = new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom = new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.Push("on-delete clause"); 
        try 
    	{
            // EsperEPL2Grammar.g:469:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:469:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            	DELETE53=(IToken)Match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr1741); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_DELETE.Add(DELETE53);

            	PushFollow(FOLLOW_onExprFrom_in_onDeleteExpr1745);
            	onExprFrom54 = onExprFrom();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_onExprFrom.Add(onExprFrom54.Tree);
            	// EsperEPL2Grammar.g:471:3: ( WHERE whereClause )?
            	int alt20 = 2;
            	int LA20_0 = input.LA(1);

            	if ( (LA20_0 == WHERE) )
            	{
            	    alt20 = 1;
            	}
            	switch (alt20) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:471:4: WHERE whereClause
            	        {
            	        	WHERE55=(IToken)Match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr1750); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_WHERE.Add(WHERE55);

            	        	PushFollow(FOLLOW_whereClause_in_onDeleteExpr1752);
            	        	whereClause56 = whereClause();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_whereClause.Add(whereClause56.Tree);

            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          whereClause, onExprFrom
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 472:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            	{
            	    // EsperEPL2Grammar.g:472:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_onExprFrom.NextTree());
            	    // EsperEPL2Grammar.g:472:34: ( whereClause )?
            	    if ( stream_whereClause.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_whereClause.NextTree());

            	    }
            	    stream_whereClause.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public class onSetExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:475:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public EsperEPL2GrammarParser.onSetExpr_return onSetExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken SET57 = null;
        IToken COMMA59 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment58 = default(EsperEPL2GrammarParser.onSetAssignment_return);

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment60 = default(EsperEPL2GrammarParser.onSetAssignment_return);


        CommonTree SET57_tree=null;
        CommonTree COMMA59_tree=null;
        RewriteRuleTokenStream stream_SET = new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment = new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.Push("on-set clause"); 
        try 
    	{
            // EsperEPL2Grammar.g:478:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:478:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            	SET57=(IToken)Match(input,SET,FOLLOW_SET_in_onSetExpr1792); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_SET.Add(SET57);

            	PushFollow(FOLLOW_onSetAssignment_in_onSetExpr1794);
            	onSetAssignment58 = onSetAssignment();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_onSetAssignment.Add(onSetAssignment58.Tree);
            	// EsperEPL2Grammar.g:478:24: ( COMMA onSetAssignment )*
            	do 
            	{
            	    int alt21 = 2;
            	    int LA21_0 = input.LA(1);

            	    if ( (LA21_0 == COMMA) )
            	    {
            	        alt21 = 1;
            	    }


            	    switch (alt21) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:478:25: COMMA onSetAssignment
            			    {
            			    	COMMA59=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_onSetExpr1797); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_COMMA.Add(COMMA59);

            			    	PushFollow(FOLLOW_onSetAssignment_in_onSetExpr1799);
            			    	onSetAssignment60 = onSetAssignment();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking==0 ) stream_onSetAssignment.Add(onSetAssignment60.Tree);

            			    }
            			    break;

            			default:
            			    goto loop21;
            	    }
            	} while (true);

            	loop21:
            		;	// Stops C# compiler whining that label 'loop21' has no statements



            	// AST REWRITE
            	// elements:          onSetAssignment
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 479:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            	{
            	    // EsperEPL2Grammar.g:479:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

            	    if ( !(stream_onSetAssignment.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_onSetAssignment.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_onSetAssignment.NextTree());

            	    }
            	    stream_onSetAssignment.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public class onSetAssignment_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:482:1: onSetAssignment : IDENT EQUALS expression ;
    public EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken IDENT61 = null;
        IToken EQUALS62 = null;
        EsperEPL2GrammarParser.expression_return expression63 = default(EsperEPL2GrammarParser.expression_return);


        CommonTree IDENT61_tree=null;
        CommonTree EQUALS62_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:483:2: ( IDENT EQUALS expression )
            // EsperEPL2Grammar.g:483:4: IDENT EQUALS expression
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	IDENT61=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_onSetAssignment1824); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{IDENT61_tree = (CommonTree)adaptor.Create(IDENT61);
            		adaptor.AddChild(root_0, IDENT61_tree);
            	}
            	EQUALS62=(IToken)Match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment1826); if (state.failed) return retval;
            	PushFollow(FOLLOW_expression_in_onSetAssignment1829);
            	expression63 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression63.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public class onExprFrom_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:486:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public EsperEPL2GrammarParser.onExprFrom_return onExprFrom() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken n = null;
        IToken i = null;
        IToken FROM64 = null;
        IToken AS65 = null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM64_tree=null;
        CommonTree AS65_tree=null;
        RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM = new RewriteRuleTokenStream(adaptor,"token FROM");

        try 
    	{
            // EsperEPL2Grammar.g:487:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:487:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            	FROM64=(IToken)Match(input,FROM,FOLLOW_FROM_in_onExprFrom1842); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_FROM.Add(FROM64);

            	n=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_onExprFrom1846); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(n);

            	// EsperEPL2Grammar.g:487:17: ( AS i= IDENT | i= IDENT )?
            	int alt22 = 3;
            	int LA22_0 = input.LA(1);

            	if ( (LA22_0 == AS) )
            	{
            	    alt22 = 1;
            	}
            	else if ( (LA22_0 == IDENT) )
            	{
            	    alt22 = 2;
            	}
            	switch (alt22) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:487:18: AS i= IDENT
            	        {
            	        	AS65=(IToken)Match(input,AS,FOLLOW_AS_in_onExprFrom1849); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_AS.Add(AS65);

            	        	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_onExprFrom1853); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_IDENT.Add(i);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:487:31: i= IDENT
            	        {
            	        	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_onExprFrom1859); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_IDENT.Add(i);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          i, n
            	// token labels:      n, i
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_n = new RewriteRuleTokenStream(adaptor, "token n", n);
            	RewriteRuleTokenStream stream_i = new RewriteRuleTokenStream(adaptor, "token i", i);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 488:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            	{
            	    // EsperEPL2Grammar.g:488:6: ^( ON_EXPR_FROM $n ( $i)? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

            	    adaptor.AddChild(root_1, stream_n.NextNode());
            	    // EsperEPL2Grammar.g:488:24: ( $i)?
            	    if ( stream_i.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_i.NextNode());

            	    }
            	    stream_i.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public class createWindowExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:491:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? AS ( SELECT createSelectionList FROM )? classIdentifier -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( createSelectionList )? classIdentifier ) ;
    public EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken i = null;
        IToken CREATE66 = null;
        IToken WINDOW67 = null;
        IToken DOT68 = null;
        IToken DOT70 = null;
        IToken AS72 = null;
        IToken SELECT73 = null;
        IToken FROM75 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression69 = default(EsperEPL2GrammarParser.viewExpression_return);

        EsperEPL2GrammarParser.viewExpression_return viewExpression71 = default(EsperEPL2GrammarParser.viewExpression_return);

        EsperEPL2GrammarParser.createSelectionList_return createSelectionList74 = default(EsperEPL2GrammarParser.createSelectionList_return);

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier76 = default(EsperEPL2GrammarParser.classIdentifier_return);


        CommonTree i_tree=null;
        CommonTree CREATE66_tree=null;
        CommonTree WINDOW67_tree=null;
        CommonTree DOT68_tree=null;
        CommonTree DOT70_tree=null;
        CommonTree AS72_tree=null;
        CommonTree SELECT73_tree=null;
        CommonTree FROM75_tree=null;
        RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE = new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW = new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_FROM = new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT = new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_viewExpression = new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_createSelectionList = new RewriteRuleSubtreeStream(adaptor,"rule createSelectionList");
        RewriteRuleSubtreeStream stream_classIdentifier = new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try 
    	{
            // EsperEPL2Grammar.g:492:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? AS ( SELECT createSelectionList FROM )? classIdentifier -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( createSelectionList )? classIdentifier ) )
            // EsperEPL2Grammar.g:492:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? AS ( SELECT createSelectionList FROM )? classIdentifier
            {
            	CREATE66=(IToken)Match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr1887); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_CREATE.Add(CREATE66);

            	WINDOW67=(IToken)Match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr1889); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_WINDOW.Add(WINDOW67);

            	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr1893); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(i);

            	// EsperEPL2Grammar.g:492:26: ( DOT viewExpression ( DOT viewExpression )* )?
            	int alt24 = 2;
            	int LA24_0 = input.LA(1);

            	if ( (LA24_0 == DOT) )
            	{
            	    alt24 = 1;
            	}
            	switch (alt24) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:492:27: DOT viewExpression ( DOT viewExpression )*
            	        {
            	        	DOT68=(IToken)Match(input,DOT,FOLLOW_DOT_in_createWindowExpr1896); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_DOT.Add(DOT68);

            	        	PushFollow(FOLLOW_viewExpression_in_createWindowExpr1898);
            	        	viewExpression69 = viewExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_viewExpression.Add(viewExpression69.Tree);
            	        	// EsperEPL2Grammar.g:492:46: ( DOT viewExpression )*
            	        	do 
            	        	{
            	        	    int alt23 = 2;
            	        	    int LA23_0 = input.LA(1);

            	        	    if ( (LA23_0 == DOT) )
            	        	    {
            	        	        alt23 = 1;
            	        	    }


            	        	    switch (alt23) 
            	        		{
            	        			case 1 :
            	        			    // EsperEPL2Grammar.g:492:47: DOT viewExpression
            	        			    {
            	        			    	DOT70=(IToken)Match(input,DOT,FOLLOW_DOT_in_createWindowExpr1901); if (state.failed) return retval; 
            	        			    	if ( state.backtracking==0 ) stream_DOT.Add(DOT70);

            	        			    	PushFollow(FOLLOW_viewExpression_in_createWindowExpr1903);
            	        			    	viewExpression71 = viewExpression();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking==0 ) stream_viewExpression.Add(viewExpression71.Tree);

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop23;
            	        	    }
            	        	} while (true);

            	        	loop23:
            	        		;	// Stops C# compiler whining that label 'loop23' has no statements


            	        }
            	        break;

            	}

            	AS72=(IToken)Match(input,AS,FOLLOW_AS_in_createWindowExpr1909); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_AS.Add(AS72);

            	// EsperEPL2Grammar.g:492:73: ( SELECT createSelectionList FROM )?
            	int alt25 = 2;
            	int LA25_0 = input.LA(1);

            	if ( (LA25_0 == SELECT) )
            	{
            	    alt25 = 1;
            	}
            	switch (alt25) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:492:74: SELECT createSelectionList FROM
            	        {
            	        	SELECT73=(IToken)Match(input,SELECT,FOLLOW_SELECT_in_createWindowExpr1912); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_SELECT.Add(SELECT73);

            	        	PushFollow(FOLLOW_createSelectionList_in_createWindowExpr1914);
            	        	createSelectionList74 = createSelectionList();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_createSelectionList.Add(createSelectionList74.Tree);
            	        	FROM75=(IToken)Match(input,FROM,FOLLOW_FROM_in_createWindowExpr1916); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_FROM.Add(FROM75);


            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_classIdentifier_in_createWindowExpr1920);
            	classIdentifier76 = classIdentifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_classIdentifier.Add(classIdentifier76.Tree);


            	// AST REWRITE
            	// elements:          viewExpression, createSelectionList, classIdentifier, i
            	// token labels:      i
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_i = new RewriteRuleTokenStream(adaptor, "token i", i);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 493:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( createSelectionList )? classIdentifier )
            	{
            	    // EsperEPL2Grammar.g:493:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( createSelectionList )? classIdentifier )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_i.NextNode());
            	    // EsperEPL2Grammar.g:493:30: ( viewExpression )*
            	    while ( stream_viewExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_viewExpression.NextTree());

            	    }
            	    stream_viewExpression.Reset();
            	    // EsperEPL2Grammar.g:493:46: ( createSelectionList )?
            	    if ( stream_createSelectionList.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_createSelectionList.NextTree());

            	    }
            	    stream_createSelectionList.Reset();
            	    adaptor.AddChild(root_1, stream_classIdentifier.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public class createVariableExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:496:1: createVariableExpr : CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) ;
    public EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken t = null;
        IToken n = null;
        IToken CREATE77 = null;
        IToken VARIABLE78 = null;
        IToken EQUALS79 = null;
        EsperEPL2GrammarParser.expression_return expression80 = default(EsperEPL2GrammarParser.expression_return);


        CommonTree t_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE77_tree=null;
        CommonTree VARIABLE78_tree=null;
        CommonTree EQUALS79_tree=null;
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE = new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS = new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE = new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try 
    	{
            // EsperEPL2Grammar.g:497:2: ( CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) )
            // EsperEPL2Grammar.g:497:4: CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )?
            {
            	CREATE77=(IToken)Match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr1952); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_CREATE.Add(CREATE77);

            	VARIABLE78=(IToken)Match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr1954); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_VARIABLE.Add(VARIABLE78);

            	t=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr1958); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(t);

            	n=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr1962); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(n);

            	// EsperEPL2Grammar.g:497:36: ( EQUALS expression )?
            	int alt26 = 2;
            	int LA26_0 = input.LA(1);

            	if ( (LA26_0 == EQUALS) )
            	{
            	    alt26 = 1;
            	}
            	switch (alt26) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:497:37: EQUALS expression
            	        {
            	        	EQUALS79=(IToken)Match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr1965); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_EQUALS.Add(EQUALS79);

            	        	PushFollow(FOLLOW_expression_in_createVariableExpr1967);
            	        	expression80 = expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_expression.Add(expression80.Tree);

            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          n, t, expression
            	// token labels:      t, n
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(adaptor, "token t", t);
            	RewriteRuleTokenStream stream_n = new RewriteRuleTokenStream(adaptor, "token n", n);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 498:3: -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
            	{
            	    // EsperEPL2Grammar.g:498:6: ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_t.NextNode());
            	    adaptor.AddChild(root_1, stream_n.NextNode());
            	    // EsperEPL2Grammar.g:498:35: ( expression )?
            	    if ( stream_expression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_expression.NextTree());

            	    }
            	    stream_expression.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public class createSelectionList_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:501:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public EsperEPL2GrammarParser.createSelectionList_return createSelectionList() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken COMMA82 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement81 = default(EsperEPL2GrammarParser.createSelectionListElement_return);

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement83 = default(EsperEPL2GrammarParser.createSelectionListElement_return);


        CommonTree COMMA82_tree=null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement = new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.Push("select clause"); 
        try 
    	{
            // EsperEPL2Grammar.g:504:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:504:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            	PushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2010);
            	createSelectionListElement81 = createSelectionListElement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_createSelectionListElement.Add(createSelectionListElement81.Tree);
            	// EsperEPL2Grammar.g:504:31: ( COMMA createSelectionListElement )*
            	do 
            	{
            	    int alt27 = 2;
            	    int LA27_0 = input.LA(1);

            	    if ( (LA27_0 == COMMA) )
            	    {
            	        alt27 = 1;
            	    }


            	    switch (alt27) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:504:32: COMMA createSelectionListElement
            			    {
            			    	COMMA82=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_createSelectionList2013); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_COMMA.Add(COMMA82);

            			    	PushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2015);
            			    	createSelectionListElement83 = createSelectionListElement();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking==0 ) stream_createSelectionListElement.Add(createSelectionListElement83.Tree);

            			    }
            			    break;

            			default:
            			    goto loop27;
            	    }
            	} while (true);

            	loop27:
            		;	// Stops C# compiler whining that label 'loop27' has no statements



            	// AST REWRITE
            	// elements:          createSelectionListElement
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 505:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            	{
            	    // EsperEPL2Grammar.g:505:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

            	    if ( !(stream_createSelectionListElement.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_createSelectionListElement.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_createSelectionListElement.NextTree());

            	    }
            	    stream_createSelectionListElement.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public class createSelectionListElement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:508:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) );
    public EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken s = null;
        IToken i = null;
        IToken AS85 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty84 = default(EsperEPL2GrammarParser.eventProperty_return);


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS85_tree=null;
        RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR = new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_eventProperty = new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try 
    	{
            // EsperEPL2Grammar.g:509:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) )
            int alt29 = 2;
            alt29 = dfa29.Predict(input);
            switch (alt29) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:509:7: s= STAR
                    {
                    	s=(IToken)Match(input,STAR,FOLLOW_STAR_in_createSelectionListElement2044); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_STAR.Add(s);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 510:3: -> WILDCARD_SELECT[$s]
                    	{
                    	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(WILDCARD_SELECT, s));

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:511:4: eventProperty ( AS i= IDENT )?
                    {
                    	PushFollow(FOLLOW_eventProperty_in_createSelectionListElement2056);
                    	eventProperty84 = eventProperty();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking==0 ) stream_eventProperty.Add(eventProperty84.Tree);
                    	// EsperEPL2Grammar.g:511:18: ( AS i= IDENT )?
                    	int alt28 = 2;
                    	int LA28_0 = input.LA(1);

                    	if ( (LA28_0 == AS) )
                    	{
                    	    alt28 = 1;
                    	}
                    	switch (alt28) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:511:19: AS i= IDENT
                    	        {
                    	        	AS85=(IToken)Match(input,AS,FOLLOW_AS_in_createSelectionListElement2059); if (state.failed) return retval; 
                    	        	if ( state.backtracking==0 ) stream_AS.Add(AS85);

                    	        	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement2063); if (state.failed) return retval; 
                    	        	if ( state.backtracking==0 ) stream_IDENT.Add(i);


                    	        }
                    	        break;

                    	}



                    	// AST REWRITE
                    	// elements:          i, eventProperty
                    	// token labels:      i
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleTokenStream stream_i = new RewriteRuleTokenStream(adaptor, "token i", i);
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 512:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    	{
                    	    // EsperEPL2Grammar.g:512:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                    	    adaptor.AddChild(root_1, stream_eventProperty.NextTree());
                    	    // EsperEPL2Grammar.g:512:45: ( $i)?
                    	    if ( stream_i.HasNext() )
                    	    {
                    	        adaptor.AddChild(root_1, stream_i.NextNode());

                    	    }
                    	    stream_i.Reset();

                    	    adaptor.AddChild(root_0, root_1);
                    	    }

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public class insertIntoExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:515:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) ;
    public EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken s = null;
        IToken i = null;
        IToken INTO86 = null;
        EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList87 = default(EsperEPL2GrammarParser.insertIntoColumnList_return);


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO86_tree=null;
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ISTREAM = new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO = new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM = new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_insertIntoColumnList = new RewriteRuleSubtreeStream(adaptor,"rule insertIntoColumnList");
         paraphrases.Push("insert-into clause"); 
        try 
    	{
            // EsperEPL2Grammar.g:518:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) )
            // EsperEPL2Grammar.g:518:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )?
            {
            	// EsperEPL2Grammar.g:518:4: (s= ISTREAM | s= RSTREAM )?
            	int alt30 = 3;
            	int LA30_0 = input.LA(1);

            	if ( (LA30_0 == ISTREAM) )
            	{
            	    alt30 = 1;
            	}
            	else if ( (LA30_0 == RSTREAM) )
            	{
            	    alt30 = 2;
            	}
            	switch (alt30) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:518:5: s= ISTREAM
            	        {
            	        	s=(IToken)Match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr2104); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_ISTREAM.Add(s);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:518:17: s= RSTREAM
            	        {
            	        	s=(IToken)Match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr2110); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_RSTREAM.Add(s);


            	        }
            	        break;

            	}

            	INTO86=(IToken)Match(input,INTO,FOLLOW_INTO_in_insertIntoExpr2114); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_INTO.Add(INTO86);

            	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr2118); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(i);

            	// EsperEPL2Grammar.g:518:42: ( insertIntoColumnList )?
            	int alt31 = 2;
            	int LA31_0 = input.LA(1);

            	if ( (LA31_0 == LPAREN) )
            	{
            	    alt31 = 1;
            	}
            	switch (alt31) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:518:43: insertIntoColumnList
            	        {
            	        	PushFollow(FOLLOW_insertIntoColumnList_in_insertIntoExpr2121);
            	        	insertIntoColumnList87 = insertIntoColumnList();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_insertIntoColumnList.Add(insertIntoColumnList87.Tree);

            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          i, s, insertIntoColumnList
            	// token labels:      s, i
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_s = new RewriteRuleTokenStream(adaptor, "token s", s);
            	RewriteRuleTokenStream stream_i = new RewriteRuleTokenStream(adaptor, "token i", i);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 519:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
            	{
            	    // EsperEPL2Grammar.g:519:6: ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:519:24: ( $s)?
            	    if ( stream_s.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_s.NextNode());

            	    }
            	    stream_s.Reset();
            	    adaptor.AddChild(root_1, stream_i.NextNode());
            	    // EsperEPL2Grammar.g:519:31: ( insertIntoColumnList )?
            	    if ( stream_insertIntoColumnList.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_insertIntoColumnList.NextTree());

            	    }
            	    stream_insertIntoColumnList.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public class insertIntoColumnList_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "insertIntoColumnList"
    // EsperEPL2Grammar.g:522:1: insertIntoColumnList : LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) ;
    public EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.insertIntoColumnList_return retval = new EsperEPL2GrammarParser.insertIntoColumnList_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken LPAREN88 = null;
        IToken IDENT89 = null;
        IToken COMMA90 = null;
        IToken IDENT91 = null;
        IToken RPAREN92 = null;

        CommonTree LPAREN88_tree=null;
        CommonTree IDENT89_tree=null;
        CommonTree COMMA90_tree=null;
        CommonTree IDENT91_tree=null;
        CommonTree RPAREN92_tree=null;
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");

        try 
    	{
            // EsperEPL2Grammar.g:523:2: ( LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:523:5: LPAREN IDENT ( COMMA IDENT )* RPAREN
            {
            	LPAREN88=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoColumnList2155); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_LPAREN.Add(LPAREN88);

            	IDENT89=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList2157); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(IDENT89);

            	// EsperEPL2Grammar.g:523:18: ( COMMA IDENT )*
            	do 
            	{
            	    int alt32 = 2;
            	    int LA32_0 = input.LA(1);

            	    if ( (LA32_0 == COMMA) )
            	    {
            	        alt32 = 1;
            	    }


            	    switch (alt32) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:523:19: COMMA IDENT
            			    {
            			    	COMMA90=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_insertIntoColumnList2160); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_COMMA.Add(COMMA90);

            			    	IDENT91=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList2162); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_IDENT.Add(IDENT91);


            			    }
            			    break;

            			default:
            			    goto loop32;
            	    }
            	} while (true);

            	loop32:
            		;	// Stops C# compiler whining that label 'loop32' has no statements

            	RPAREN92=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoColumnList2166); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_RPAREN.Add(RPAREN92);



            	// AST REWRITE
            	// elements:          IDENT
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 524:3: -> ^( INSERTINTO_EXPRCOL ( IDENT )* )
            	{
            	    // EsperEPL2Grammar.g:524:6: ^( INSERTINTO_EXPRCOL ( IDENT )* )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERTINTO_EXPRCOL, "INSERTINTO_EXPRCOL"), root_1);

            	    // EsperEPL2Grammar.g:524:27: ( IDENT )*
            	    while ( stream_IDENT.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_IDENT.NextNode());

            	    }
            	    stream_IDENT.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "insertIntoColumnList"

    public class fromClause_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:527:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public EsperEPL2GrammarParser.fromClause_return fromClause() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression93 = default(EsperEPL2GrammarParser.streamExpression_return);

        EsperEPL2GrammarParser.regularJoin_return regularJoin94 = default(EsperEPL2GrammarParser.regularJoin_return);

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList95 = default(EsperEPL2GrammarParser.outerJoinList_return);



         paraphrases.Push("from clause"); 
        try 
    	{
            // EsperEPL2Grammar.g:530:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:530:4: streamExpression ( regularJoin | outerJoinList )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_streamExpression_in_fromClause2201);
            	streamExpression93 = streamExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, streamExpression93.Tree);
            	// EsperEPL2Grammar.g:530:21: ( regularJoin | outerJoinList )
            	int alt33 = 2;
            	alt33 = dfa33.Predict(input);
            	switch (alt33) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:530:22: regularJoin
            	        {
            	        	PushFollow(FOLLOW_regularJoin_in_fromClause2204);
            	        	regularJoin94 = regularJoin();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, regularJoin94.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:530:36: outerJoinList
            	        {
            	        	PushFollow(FOLLOW_outerJoinList_in_fromClause2208);
            	        	outerJoinList95 = outerJoinList();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, outerJoinList95.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public class regularJoin_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:533:1: regularJoin : ( COMMA streamExpression )* ;
    public EsperEPL2GrammarParser.regularJoin_return regularJoin() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken COMMA96 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression97 = default(EsperEPL2GrammarParser.streamExpression_return);


        CommonTree COMMA96_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:534:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:534:4: ( COMMA streamExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	// EsperEPL2Grammar.g:534:4: ( COMMA streamExpression )*
            	do 
            	{
            	    int alt34 = 2;
            	    int LA34_0 = input.LA(1);

            	    if ( (LA34_0 == COMMA) )
            	    {
            	        alt34 = 1;
            	    }


            	    switch (alt34) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:534:5: COMMA streamExpression
            			    {
            			    	COMMA96=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_regularJoin2222); if (state.failed) return retval;
            			    	PushFollow(FOLLOW_streamExpression_in_regularJoin2225);
            			    	streamExpression97 = streamExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, streamExpression97.Tree);

            			    }
            			    break;

            			default:
            			    goto loop34;
            	    }
            	} while (true);

            	loop34:
            		;	// Stops C# compiler whining that label 'loop34' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public class outerJoinList_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:537:1: outerJoinList : outerJoin ( outerJoin )* ;
    public EsperEPL2GrammarParser.outerJoinList_return outerJoinList() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin98 = default(EsperEPL2GrammarParser.outerJoin_return);

        EsperEPL2GrammarParser.outerJoin_return outerJoin99 = default(EsperEPL2GrammarParser.outerJoin_return);



        try 
    	{
            // EsperEPL2Grammar.g:538:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:538:4: outerJoin ( outerJoin )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_outerJoin_in_outerJoinList2239);
            	outerJoin98 = outerJoin();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, outerJoin98.Tree);
            	// EsperEPL2Grammar.g:538:14: ( outerJoin )*
            	do 
            	{
            	    int alt35 = 2;
            	    alt35 = dfa35.Predict(input);
            	    switch (alt35) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:538:15: outerJoin
            			    {
            			    	PushFollow(FOLLOW_outerJoin_in_outerJoinList2242);
            			    	outerJoin99 = outerJoin();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, outerJoin99.Tree);

            			    }
            			    break;

            			default:
            			    goto loop35;
            	    }
            	} while (true);

            	loop35:
            		;	// Stops C# compiler whining that label 'loop35' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public class outerJoin_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:541:1: outerJoin : (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER JOIN streamExpression outerJoinIdent -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public EsperEPL2GrammarParser.outerJoin_return outerJoin() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken tl = null;
        IToken tr = null;
        IToken tf = null;
        IToken OUTER100 = null;
        IToken JOIN101 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression102 = default(EsperEPL2GrammarParser.streamExpression_return);

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent103 = default(EsperEPL2GrammarParser.outerJoinIdent_return);


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree OUTER100_tree=null;
        CommonTree JOIN101_tree=null;
        RewriteRuleTokenStream stream_OUTER = new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT = new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL = new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_LEFT = new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN = new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression = new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent = new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.Push("outer join"); 
        try 
    	{
            // EsperEPL2Grammar.g:544:2: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER JOIN streamExpression outerJoinIdent -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:544:4: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER JOIN streamExpression outerJoinIdent
            {
            	// EsperEPL2Grammar.g:544:4: (tl= LEFT | tr= RIGHT | tf= FULL )
            	int alt36 = 3;
            	switch ( input.LA(1) ) 
            	{
            	case LEFT:
            		{
            	    alt36 = 1;
            	    }
            	    break;
            	case RIGHT:
            		{
            	    alt36 = 2;
            	    }
            	    break;
            	case FULL:
            		{
            	    alt36 = 3;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d36s0 =
            		        new NoViableAltException("", 36, 0, input);

            		    throw nvae_d36s0;
            	}

            	switch (alt36) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:544:5: tl= LEFT
            	        {
            	        	tl=(IToken)Match(input,LEFT,FOLLOW_LEFT_in_outerJoin2269); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_LEFT.Add(tl);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:544:13: tr= RIGHT
            	        {
            	        	tr=(IToken)Match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin2273); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_RIGHT.Add(tr);


            	        }
            	        break;
            	    case 3 :
            	        // EsperEPL2Grammar.g:544:22: tf= FULL
            	        {
            	        	tf=(IToken)Match(input,FULL,FOLLOW_FULL_in_outerJoin2277); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_FULL.Add(tf);


            	        }
            	        break;

            	}

            	OUTER100=(IToken)Match(input,OUTER,FOLLOW_OUTER_in_outerJoin2280); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_OUTER.Add(OUTER100);

            	JOIN101=(IToken)Match(input,JOIN,FOLLOW_JOIN_in_outerJoin2282); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_JOIN.Add(JOIN101);

            	PushFollow(FOLLOW_streamExpression_in_outerJoin2284);
            	streamExpression102 = streamExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_streamExpression.Add(streamExpression102.Tree);
            	PushFollow(FOLLOW_outerJoinIdent_in_outerJoin2286);
            	outerJoinIdent103 = outerJoinIdent();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_outerJoinIdent.Add(outerJoinIdent103.Tree);


            	// AST REWRITE
            	// elements:          streamExpression, outerJoinIdent, outerJoinIdent, streamExpression, outerJoinIdent, streamExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 545:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            	if (tl != null)
            	{
            	    adaptor.AddChild(root_0, stream_streamExpression.NextTree());
            	    // EsperEPL2Grammar.g:545:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_outerJoinIdent.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 546:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            	if (tr != null)
            	{
            	    adaptor.AddChild(root_0, stream_streamExpression.NextTree());
            	    // EsperEPL2Grammar.g:546:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_outerJoinIdent.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 547:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            	{
            	    adaptor.AddChild(root_0, stream_streamExpression.NextTree());
            	    // EsperEPL2Grammar.g:547:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_outerJoinIdent.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public class outerJoinIdent_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:550:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken ON104 = null;
        IToken AND_EXPR106 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair105 = default(EsperEPL2GrammarParser.outerJoinIdentPair_return);

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair107 = default(EsperEPL2GrammarParser.outerJoinIdentPair_return);


        CommonTree ON104_tree=null;
        CommonTree AND_EXPR106_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:551:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:551:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	ON104=(IToken)Match(input,ON,FOLLOW_ON_in_outerJoinIdent2337); if (state.failed) return retval;
            	PushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent2340);
            	outerJoinIdentPair105 = outerJoinIdentPair();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, outerJoinIdentPair105.Tree);
            	// EsperEPL2Grammar.g:551:27: ( AND_EXPR outerJoinIdentPair )*
            	do 
            	{
            	    int alt37 = 2;
            	    alt37 = dfa37.Predict(input);
            	    switch (alt37) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:551:28: AND_EXPR outerJoinIdentPair
            			    {
            			    	AND_EXPR106=(IToken)Match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent2343); if (state.failed) return retval;
            			    	PushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent2346);
            			    	outerJoinIdentPair107 = outerJoinIdentPair();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, outerJoinIdentPair107.Tree);

            			    }
            			    break;

            			default:
            			    goto loop37;
            	    }
            	} while (true);

            	loop37:
            		;	// Stops C# compiler whining that label 'loop37' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public class outerJoinIdentPair_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:554:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken EQUALS109 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty108 = default(EsperEPL2GrammarParser.eventProperty_return);

        EsperEPL2GrammarParser.eventProperty_return eventProperty110 = default(EsperEPL2GrammarParser.eventProperty_return);


        CommonTree EQUALS109_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:555:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:555:4: eventProperty EQUALS eventProperty
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair2361);
            	eventProperty108 = eventProperty();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, eventProperty108.Tree);
            	EQUALS109=(IToken)Match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair2363); if (state.failed) return retval;
            	PushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair2366);
            	eventProperty110 = eventProperty();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, eventProperty110.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public class whereClause_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:558:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public EsperEPL2GrammarParser.whereClause_return whereClause() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression111 = default(EsperEPL2GrammarParser.evalOrExpression_return);


        RewriteRuleSubtreeStream stream_evalOrExpression = new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.Push("where clause"); 
        try 
    	{
            // EsperEPL2Grammar.g:561:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:561:4: evalOrExpression
            {
            	PushFollow(FOLLOW_evalOrExpression_in_whereClause2388);
            	evalOrExpression111 = evalOrExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_evalOrExpression.Add(evalOrExpression111.Tree);


            	// AST REWRITE
            	// elements:          evalOrExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 562:3: -> ^( WHERE_EXPR evalOrExpression )
            	{
            	    // EsperEPL2Grammar.g:562:6: ^( WHERE_EXPR evalOrExpression )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHERE_EXPR, "WHERE_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_evalOrExpression.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public class selectClause_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:565:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) ;
    public EsperEPL2GrammarParser.selectClause_return selectClause() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken s = null;
        EsperEPL2GrammarParser.selectionList_return selectionList112 = default(EsperEPL2GrammarParser.selectionList_return);


        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM = new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM = new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_RSTREAM = new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList = new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.Push("select clause"); 
        try 
    	{
            // EsperEPL2Grammar.g:568:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) )
            // EsperEPL2Grammar.g:568:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList
            {
            	// EsperEPL2Grammar.g:568:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            	int alt38 = 4;
            	alt38 = dfa38.Predict(input);
            	switch (alt38) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:568:5: s= RSTREAM
            	        {
            	        	s=(IToken)Match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause2424); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_RSTREAM.Add(s);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:568:17: s= ISTREAM
            	        {
            	        	s=(IToken)Match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause2430); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_ISTREAM.Add(s);


            	        }
            	        break;
            	    case 3 :
            	        // EsperEPL2Grammar.g:568:29: s= IRSTREAM
            	        {
            	        	s=(IToken)Match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause2436); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_IRSTREAM.Add(s);


            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_selectionList_in_selectClause2440);
            	selectionList112 = selectionList();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_selectionList.Add(selectionList112.Tree);


            	// AST REWRITE
            	// elements:          selectionList, s
            	// token labels:      s
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_s = new RewriteRuleTokenStream(adaptor, "token s", s);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 569:3: -> ^( SELECTION_EXPR ( $s)? selectionList )
            	{
            	    // EsperEPL2Grammar.g:569:6: ^( SELECTION_EXPR ( $s)? selectionList )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:569:23: ( $s)?
            	    if ( stream_s.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_s.NextNode());

            	    }
            	    stream_s.Reset();
            	    adaptor.AddChild(root_1, stream_selectionList.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public class selectionList_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:572:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public EsperEPL2GrammarParser.selectionList_return selectionList() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken COMMA114 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement113 = default(EsperEPL2GrammarParser.selectionListElement_return);

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement115 = default(EsperEPL2GrammarParser.selectionListElement_return);


        CommonTree COMMA114_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:573:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:573:4: selectionListElement ( COMMA selectionListElement )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_selectionListElement_in_selectionList2467);
            	selectionListElement113 = selectionListElement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, selectionListElement113.Tree);
            	// EsperEPL2Grammar.g:573:25: ( COMMA selectionListElement )*
            	do 
            	{
            	    int alt39 = 2;
            	    int LA39_0 = input.LA(1);

            	    if ( (LA39_0 == COMMA) )
            	    {
            	        alt39 = 1;
            	    }


            	    switch (alt39) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:573:26: COMMA selectionListElement
            			    {
            			    	COMMA114=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_selectionList2470); if (state.failed) return retval;
            			    	PushFollow(FOLLOW_selectionListElement_in_selectionList2473);
            			    	selectionListElement115 = selectionListElement();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, selectionListElement115.Tree);

            			    }
            			    break;

            			default:
            			    goto loop39;
            	    }
            	} while (true);

            	loop39:
            		;	// Stops C# compiler whining that label 'loop39' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public class selectionListElement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:576:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public EsperEPL2GrammarParser.selectionListElement_return selectionListElement() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken s = null;
        IToken AS118 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = default(EsperEPL2GrammarParser.keywordAllowedIdent_return);

        EsperEPL2GrammarParser.streamSelector_return streamSelector116 = default(EsperEPL2GrammarParser.streamSelector_return);

        EsperEPL2GrammarParser.expression_return expression117 = default(EsperEPL2GrammarParser.expression_return);


        CommonTree s_tree=null;
        CommonTree AS118_tree=null;
        RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR = new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent = new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try 
    	{
            // EsperEPL2Grammar.g:578:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt41 = 3;
            alt41 = dfa41.Predict(input);
            switch (alt41) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:578:7: s= STAR
                    {
                    	s=(IToken)Match(input,STAR,FOLLOW_STAR_in_selectionListElement2499); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_STAR.Add(s);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 578:14: -> WILDCARD_SELECT[$s]
                    	{
                    	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(WILDCARD_SELECT, s));

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:579:4: ( streamSelector )=> streamSelector
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_streamSelector_in_selectionListElement2515);
                    	streamSelector116 = streamSelector();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, streamSelector116.Tree);

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:580:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    	PushFollow(FOLLOW_expression_in_selectionListElement2520);
                    	expression117 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking==0 ) stream_expression.Add(expression117.Tree);
                    	// EsperEPL2Grammar.g:580:15: ( AS i= keywordAllowedIdent )?
                    	int alt40 = 2;
                    	int LA40_0 = input.LA(1);

                    	if ( (LA40_0 == AS) )
                    	{
                    	    alt40 = 1;
                    	}
                    	switch (alt40) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:580:16: AS i= keywordAllowedIdent
                    	        {
                    	        	AS118=(IToken)Match(input,AS,FOLLOW_AS_in_selectionListElement2523); if (state.failed) return retval; 
                    	        	if ( state.backtracking==0 ) stream_AS.Add(AS118);

                    	        	PushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement2527);
                    	        	i = keywordAllowedIdent();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking==0 ) stream_keywordAllowedIdent.Add(i.Tree);
                    	        	if ( state.backtracking == 0 ) 
                    	        	{
                    	        	   identifier = i.Tree.ToString(); 
                    	        	}

                    	        }
                    	        break;

                    	}



                    	// AST REWRITE
                    	// elements:          expression, expression, expression
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 581:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    	if (identifier != null)
                    	{
                    	    // EsperEPL2Grammar.g:581:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                    	    adaptor.AddChild(root_1, stream_expression.NextTree());
                    	    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(IDENT, identifier));

                    	    adaptor.AddChild(root_0, root_1);
                    	    }

                    	}
                    	else // 582:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    	if (identifier == null)
                    	{
                    	    // EsperEPL2Grammar.g:582:28: ^( SELECTION_ELEMENT_EXPR expression )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                    	    adaptor.AddChild(root_1, stream_expression.NextTree());

                    	    adaptor.AddChild(root_0, root_1);
                    	    }

                    	}
                    	else // 583:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    	{
                    	    // EsperEPL2Grammar.g:583:6: ^( SELECTION_ELEMENT_EXPR expression )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                    	    adaptor.AddChild(root_1, stream_expression.NextTree());

                    	    adaptor.AddChild(root_0, root_1);
                    	    }

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public class streamSelector_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:586:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public EsperEPL2GrammarParser.streamSelector_return streamSelector() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken s = null;
        IToken i = null;
        IToken DOT119 = null;
        IToken STAR120 = null;
        IToken AS121 = null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT119_tree=null;
        CommonTree STAR120_tree=null;
        CommonTree AS121_tree=null;
        RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR = new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");

        try 
    	{
            // EsperEPL2Grammar.g:587:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:587:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            	s=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_streamSelector2583); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(s);

            	DOT119=(IToken)Match(input,DOT,FOLLOW_DOT_in_streamSelector2585); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_DOT.Add(DOT119);

            	STAR120=(IToken)Match(input,STAR,FOLLOW_STAR_in_streamSelector2587); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_STAR.Add(STAR120);

            	// EsperEPL2Grammar.g:587:21: ( AS i= IDENT )?
            	int alt42 = 2;
            	int LA42_0 = input.LA(1);

            	if ( (LA42_0 == AS) )
            	{
            	    alt42 = 1;
            	}
            	switch (alt42) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:587:22: AS i= IDENT
            	        {
            	        	AS121=(IToken)Match(input,AS,FOLLOW_AS_in_streamSelector2590); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_AS.Add(AS121);

            	        	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_streamSelector2594); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_IDENT.Add(i);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          i, s
            	// token labels:      s, i
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_s = new RewriteRuleTokenStream(adaptor, "token s", s);
            	RewriteRuleTokenStream stream_i = new RewriteRuleTokenStream(adaptor, "token i", i);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 588:3: -> ^( SELECTION_STREAM $s ( $i)? )
            	{
            	    // EsperEPL2Grammar.g:588:6: ^( SELECTION_STREAM $s ( $i)? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

            	    adaptor.AddChild(root_1, stream_s.NextNode());
            	    // EsperEPL2Grammar.g:588:28: ( $i)?
            	    if ( stream_i.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_i.NextNode());

            	    }
            	    stream_i.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public class streamExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:591:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ) ;
    public EsperEPL2GrammarParser.streamExpression_return streamExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken i = null;
        IToken u = null;
        IToken DOT126 = null;
        IToken DOT128 = null;
        IToken AS130 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression122 = default(EsperEPL2GrammarParser.eventFilterExpression_return);

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression123 = default(EsperEPL2GrammarParser.patternInclusionExpression_return);

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression124 = default(EsperEPL2GrammarParser.databaseJoinExpression_return);

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression125 = default(EsperEPL2GrammarParser.methodJoinExpression_return);

        EsperEPL2GrammarParser.viewExpression_return viewExpression127 = default(EsperEPL2GrammarParser.viewExpression_return);

        EsperEPL2GrammarParser.viewExpression_return viewExpression129 = default(EsperEPL2GrammarParser.viewExpression_return);


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree DOT126_tree=null;
        CommonTree DOT128_tree=null;
        CommonTree AS130_tree=null;
        RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL = new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression = new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression = new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression = new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression = new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression = new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try 
    	{
            // EsperEPL2Grammar.g:592:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ) )
            // EsperEPL2Grammar.g:592:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )?
            {
            	// EsperEPL2Grammar.g:592:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            	int alt43 = 4;
            	alt43 = dfa43.Predict(input);
            	switch (alt43) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:592:5: eventFilterExpression
            	        {
            	        	PushFollow(FOLLOW_eventFilterExpression_in_streamExpression2624);
            	        	eventFilterExpression122 = eventFilterExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_eventFilterExpression.Add(eventFilterExpression122.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:592:29: patternInclusionExpression
            	        {
            	        	PushFollow(FOLLOW_patternInclusionExpression_in_streamExpression2628);
            	        	patternInclusionExpression123 = patternInclusionExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_patternInclusionExpression.Add(patternInclusionExpression123.Tree);

            	        }
            	        break;
            	    case 3 :
            	        // EsperEPL2Grammar.g:592:58: databaseJoinExpression
            	        {
            	        	PushFollow(FOLLOW_databaseJoinExpression_in_streamExpression2632);
            	        	databaseJoinExpression124 = databaseJoinExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_databaseJoinExpression.Add(databaseJoinExpression124.Tree);

            	        }
            	        break;
            	    case 4 :
            	        // EsperEPL2Grammar.g:592:83: methodJoinExpression
            	        {
            	        	PushFollow(FOLLOW_methodJoinExpression_in_streamExpression2636);
            	        	methodJoinExpression125 = methodJoinExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_methodJoinExpression.Add(methodJoinExpression125.Tree);

            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:593:3: ( DOT viewExpression ( DOT viewExpression )* )?
            	int alt45 = 2;
            	alt45 = dfa45.Predict(input);
            	switch (alt45) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:593:4: DOT viewExpression ( DOT viewExpression )*
            	        {
            	        	DOT126=(IToken)Match(input,DOT,FOLLOW_DOT_in_streamExpression2642); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_DOT.Add(DOT126);

            	        	PushFollow(FOLLOW_viewExpression_in_streamExpression2644);
            	        	viewExpression127 = viewExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_viewExpression.Add(viewExpression127.Tree);
            	        	// EsperEPL2Grammar.g:593:23: ( DOT viewExpression )*
            	        	do 
            	        	{
            	        	    int alt44 = 2;
            	        	    alt44 = dfa44.Predict(input);
            	        	    switch (alt44) 
            	        		{
            	        			case 1 :
            	        			    // EsperEPL2Grammar.g:593:24: DOT viewExpression
            	        			    {
            	        			    	DOT128=(IToken)Match(input,DOT,FOLLOW_DOT_in_streamExpression2647); if (state.failed) return retval; 
            	        			    	if ( state.backtracking==0 ) stream_DOT.Add(DOT128);

            	        			    	PushFollow(FOLLOW_viewExpression_in_streamExpression2649);
            	        			    	viewExpression129 = viewExpression();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking==0 ) stream_viewExpression.Add(viewExpression129.Tree);

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop44;
            	        	    }
            	        	} while (true);

            	        	loop44:
            	        		;	// Stops C# compiler whining that label 'loop44' has no statements


            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:593:47: ( AS i= IDENT | i= IDENT )?
            	int alt46 = 3;
            	alt46 = dfa46.Predict(input);
            	switch (alt46) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:593:48: AS i= IDENT
            	        {
            	        	AS130=(IToken)Match(input,AS,FOLLOW_AS_in_streamExpression2656); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_AS.Add(AS130);

            	        	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_streamExpression2660); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_IDENT.Add(i);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:593:61: i= IDENT
            	        {
            	        	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_streamExpression2666); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_IDENT.Add(i);


            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:593:71: (u= UNIDIRECTIONAL )?
            	int alt47 = 2;
            	alt47 = dfa47.Predict(input);
            	switch (alt47) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:593:72: u= UNIDIRECTIONAL
            	        {
            	        	u=(IToken)Match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression2673); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.Add(u);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          viewExpression, methodJoinExpression, i, databaseJoinExpression, patternInclusionExpression, u, eventFilterExpression
            	// token labels:      u, i
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_u = new RewriteRuleTokenStream(adaptor, "token u", u);
            	RewriteRuleTokenStream stream_i = new RewriteRuleTokenStream(adaptor, "token i", i);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 594:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? )
            	{
            	    // EsperEPL2Grammar.g:594:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STREAM_EXPR, "STREAM_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:594:20: ( eventFilterExpression )?
            	    if ( stream_eventFilterExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_eventFilterExpression.NextTree());

            	    }
            	    stream_eventFilterExpression.Reset();
            	    // EsperEPL2Grammar.g:594:43: ( patternInclusionExpression )?
            	    if ( stream_patternInclusionExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_patternInclusionExpression.NextTree());

            	    }
            	    stream_patternInclusionExpression.Reset();
            	    // EsperEPL2Grammar.g:594:71: ( databaseJoinExpression )?
            	    if ( stream_databaseJoinExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_databaseJoinExpression.NextTree());

            	    }
            	    stream_databaseJoinExpression.Reset();
            	    // EsperEPL2Grammar.g:594:95: ( methodJoinExpression )?
            	    if ( stream_methodJoinExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_methodJoinExpression.NextTree());

            	    }
            	    stream_methodJoinExpression.Reset();
            	    // EsperEPL2Grammar.g:595:3: ( viewExpression )*
            	    while ( stream_viewExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_viewExpression.NextTree());

            	    }
            	    stream_viewExpression.Reset();
            	    // EsperEPL2Grammar.g:595:19: ( $i)?
            	    if ( stream_i.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_i.NextNode());

            	    }
            	    stream_i.Reset();
            	    // EsperEPL2Grammar.g:595:23: ( $u)?
            	    if ( stream_u.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_u.NextNode());

            	    }
            	    stream_u.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public class patternInclusionExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:598:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken PATTERN131 = null;
        IToken LBRACK132 = null;
        IToken RBRACK134 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression133 = default(EsperEPL2GrammarParser.patternExpression_return);


        CommonTree PATTERN131_tree=null;
        CommonTree LBRACK132_tree=null;
        CommonTree RBRACK134_tree=null;
        RewriteRuleTokenStream stream_PATTERN = new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression = new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try 
    	{
            // EsperEPL2Grammar.g:599:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:599:4: PATTERN LBRACK patternExpression RBRACK
            {
            	PATTERN131=(IToken)Match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression2722); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_PATTERN.Add(PATTERN131);

            	LBRACK132=(IToken)Match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression2724); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_LBRACK.Add(LBRACK132);

            	PushFollow(FOLLOW_patternExpression_in_patternInclusionExpression2726);
            	patternExpression133 = patternExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_patternExpression.Add(patternExpression133.Tree);
            	RBRACK134=(IToken)Match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression2728); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_RBRACK.Add(RBRACK134);



            	// AST REWRITE
            	// elements:          patternExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 600:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            	{
            	    // EsperEPL2Grammar.g:600:6: ^( PATTERN_INCL_EXPR patternExpression )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_patternExpression.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public class databaseJoinExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:603:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken i = null;
        IToken s = null;
        IToken s2 = null;
        IToken SQL135 = null;
        IToken COLON136 = null;
        IToken LBRACK137 = null;
        IToken METADATASQL138 = null;
        IToken RBRACK139 = null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL135_tree=null;
        CommonTree COLON136_tree=null;
        CommonTree LBRACK137_tree=null;
        CommonTree METADATASQL138_tree=null;
        CommonTree RBRACK139_tree=null;
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL = new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL = new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL = new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL = new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.Push("relational data join"); 
        try 
    	{
            // EsperEPL2Grammar.g:606:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:606:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            	SQL135=(IToken)Match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression2761); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_SQL.Add(SQL135);

            	COLON136=(IToken)Match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression2763); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_COLON.Add(COLON136);

            	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression2767); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(i);

            	LBRACK137=(IToken)Match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression2769); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_LBRACK.Add(LBRACK137);

            	// EsperEPL2Grammar.g:606:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            	int alt48 = 2;
            	int LA48_0 = input.LA(1);

            	if ( (LA48_0 == STRING_LITERAL) )
            	{
            	    alt48 = 1;
            	}
            	else if ( (LA48_0 == QUOTED_STRING_LITERAL) )
            	{
            	    alt48 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d48s0 =
            	        new NoViableAltException("", 48, 0, input);

            	    throw nvae_d48s0;
            	}
            	switch (alt48) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:606:30: s= STRING_LITERAL
            	        {
            	        	s=(IToken)Match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression2774); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_STRING_LITERAL.Add(s);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:606:49: s= QUOTED_STRING_LITERAL
            	        {
            	        	s=(IToken)Match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression2780); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.Add(s);


            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:606:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            	int alt50 = 2;
            	int LA50_0 = input.LA(1);

            	if ( (LA50_0 == METADATASQL) )
            	{
            	    alt50 = 1;
            	}
            	switch (alt50) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:606:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
            	        {
            	        	METADATASQL138=(IToken)Match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression2784); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_METADATASQL.Add(METADATASQL138);

            	        	// EsperEPL2Grammar.g:606:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
            	        	int alt49 = 2;
            	        	int LA49_0 = input.LA(1);

            	        	if ( (LA49_0 == STRING_LITERAL) )
            	        	{
            	        	    alt49 = 1;
            	        	}
            	        	else if ( (LA49_0 == QUOTED_STRING_LITERAL) )
            	        	{
            	        	    alt49 = 2;
            	        	}
            	        	else 
            	        	{
            	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	    NoViableAltException nvae_d49s0 =
            	        	        new NoViableAltException("", 49, 0, input);

            	        	    throw nvae_d49s0;
            	        	}
            	        	switch (alt49) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:606:88: s2= STRING_LITERAL
            	        	        {
            	        	        	s2=(IToken)Match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression2789); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_STRING_LITERAL.Add(s2);


            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // EsperEPL2Grammar.g:606:108: s2= QUOTED_STRING_LITERAL
            	        	        {
            	        	        	s2=(IToken)Match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression2795); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.Add(s2);


            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}

            	RBRACK139=(IToken)Match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression2800); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_RBRACK.Add(RBRACK139);



            	// AST REWRITE
            	// elements:          s, s2, i
            	// token labels:      s2, s, i
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_s2 = new RewriteRuleTokenStream(adaptor, "token s2", s2);
            	RewriteRuleTokenStream stream_s = new RewriteRuleTokenStream(adaptor, "token s", s);
            	RewriteRuleTokenStream stream_i = new RewriteRuleTokenStream(adaptor, "token i", i);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 607:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            	{
            	    // EsperEPL2Grammar.g:607:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_i.NextNode());
            	    adaptor.AddChild(root_1, stream_s.NextNode());
            	    // EsperEPL2Grammar.g:607:33: ( $s2)?
            	    if ( stream_s2.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_s2.NextNode());

            	    }
            	    stream_s2.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public class methodJoinExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:610:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken i = null;
        IToken COLON140 = null;
        IToken LPAREN142 = null;
        IToken RPAREN144 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier141 = default(EsperEPL2GrammarParser.classIdentifier_return);

        EsperEPL2GrammarParser.expressionList_return expressionList143 = default(EsperEPL2GrammarParser.expressionList_return);


        CommonTree i_tree=null;
        CommonTree COLON140_tree=null;
        CommonTree LPAREN142_tree=null;
        CommonTree RPAREN144_tree=null;
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList = new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier = new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.Push("method invocation join"); 
        try 
    	{
            // EsperEPL2Grammar.g:613:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:613:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression2851); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(i);

            	COLON140=(IToken)Match(input,COLON,FOLLOW_COLON_in_methodJoinExpression2853); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_COLON.Add(COLON140);

            	PushFollow(FOLLOW_classIdentifier_in_methodJoinExpression2855);
            	classIdentifier141 = classIdentifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_classIdentifier.Add(classIdentifier141.Tree);
            	// EsperEPL2Grammar.g:613:41: ( LPAREN ( expressionList )? RPAREN )?
            	int alt52 = 2;
            	alt52 = dfa52.Predict(input);
            	switch (alt52) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:613:42: LPAREN ( expressionList )? RPAREN
            	        {
            	        	LPAREN142=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression2858); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_LPAREN.Add(LPAREN142);

            	        	// EsperEPL2Grammar.g:613:49: ( expressionList )?
            	        	int alt51 = 2;
            	        	alt51 = dfa51.Predict(input);
            	        	switch (alt51) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:613:49: expressionList
            	        	        {
            	        	        	PushFollow(FOLLOW_expressionList_in_methodJoinExpression2860);
            	        	        	expressionList143 = expressionList();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_expressionList.Add(expressionList143.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	RPAREN144=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression2863); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_RPAREN.Add(RPAREN144);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          expressionList, i, classIdentifier
            	// token labels:      i
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_i = new RewriteRuleTokenStream(adaptor, "token i", i);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 614:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            	{
            	    // EsperEPL2Grammar.g:614:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_i.NextNode());
            	    adaptor.AddChild(root_1, stream_classIdentifier.NextTree());
            	    // EsperEPL2Grammar.g:614:51: ( expressionList )?
            	    if ( stream_expressionList.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_expressionList.NextTree());

            	    }
            	    stream_expressionList.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public class viewExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:617:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( parameterSet )? RPAREN -> ^( VIEW_EXPR $ns $nm ( parameterSet )? ) ;
    public EsperEPL2GrammarParser.viewExpression_return viewExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken ns = null;
        IToken nm = null;
        IToken COLON145 = null;
        IToken LPAREN146 = null;
        IToken RPAREN148 = null;
        EsperEPL2GrammarParser.parameterSet_return parameterSet147 = default(EsperEPL2GrammarParser.parameterSet_return);


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON145_tree=null;
        CommonTree LPAREN146_tree=null;
        CommonTree RPAREN148_tree=null;
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_parameterSet = new RewriteRuleSubtreeStream(adaptor,"rule parameterSet");
         paraphrases.Push("view specifications"); 
        try 
    	{
            // EsperEPL2Grammar.g:620:2: (ns= IDENT COLON nm= IDENT LPAREN ( parameterSet )? RPAREN -> ^( VIEW_EXPR $ns $nm ( parameterSet )? ) )
            // EsperEPL2Grammar.g:620:4: ns= IDENT COLON nm= IDENT LPAREN ( parameterSet )? RPAREN
            {
            	ns=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_viewExpression2916); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(ns);

            	COLON145=(IToken)Match(input,COLON,FOLLOW_COLON_in_viewExpression2918); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_COLON.Add(COLON145);

            	nm=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_viewExpression2922); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(nm);

            	LPAREN146=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression2924); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_LPAREN.Add(LPAREN146);

            	// EsperEPL2Grammar.g:620:35: ( parameterSet )?
            	int alt53 = 2;
            	alt53 = dfa53.Predict(input);
            	switch (alt53) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:620:35: parameterSet
            	        {
            	        	PushFollow(FOLLOW_parameterSet_in_viewExpression2926);
            	        	parameterSet147 = parameterSet();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_parameterSet.Add(parameterSet147.Tree);

            	        }
            	        break;

            	}

            	RPAREN148=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression2929); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_RPAREN.Add(RPAREN148);



            	// AST REWRITE
            	// elements:          nm, parameterSet, ns
            	// token labels:      ns, nm
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_ns = new RewriteRuleTokenStream(adaptor, "token ns", ns);
            	RewriteRuleTokenStream stream_nm = new RewriteRuleTokenStream(adaptor, "token nm", nm);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 621:3: -> ^( VIEW_EXPR $ns $nm ( parameterSet )? )
            	{
            	    // EsperEPL2Grammar.g:621:6: ^( VIEW_EXPR $ns $nm ( parameterSet )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VIEW_EXPR, "VIEW_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_ns.NextNode());
            	    adaptor.AddChild(root_1, stream_nm.NextNode());
            	    // EsperEPL2Grammar.g:621:26: ( parameterSet )?
            	    if ( stream_parameterSet.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_parameterSet.NextTree());

            	    }
            	    stream_parameterSet.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public class groupByListExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:624:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken COMMA150 = null;
        EsperEPL2GrammarParser.expression_return expression149 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression151 = default(EsperEPL2GrammarParser.expression_return);


        CommonTree COMMA150_tree=null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.Push("group-by clause"); 
        try 
    	{
            // EsperEPL2Grammar.g:627:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:627:4: expression ( COMMA expression )*
            {
            	PushFollow(FOLLOW_expression_in_groupByListExpr2968);
            	expression149 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_expression.Add(expression149.Tree);
            	// EsperEPL2Grammar.g:627:15: ( COMMA expression )*
            	do 
            	{
            	    int alt54 = 2;
            	    int LA54_0 = input.LA(1);

            	    if ( (LA54_0 == COMMA) )
            	    {
            	        alt54 = 1;
            	    }


            	    switch (alt54) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:627:16: COMMA expression
            			    {
            			    	COMMA150=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr2971); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_COMMA.Add(COMMA150);

            			    	PushFollow(FOLLOW_expression_in_groupByListExpr2973);
            			    	expression151 = expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking==0 ) stream_expression.Add(expression151.Tree);

            			    }
            			    break;

            			default:
            			    goto loop54;
            	    }
            	} while (true);

            	loop54:
            		;	// Stops C# compiler whining that label 'loop54' has no statements



            	// AST REWRITE
            	// elements:          expression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 628:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            	{
            	    // EsperEPL2Grammar.g:628:6: ^( GROUP_BY_EXPR ( expression )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

            	    if ( !(stream_expression.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_expression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_expression.NextTree());

            	    }
            	    stream_expression.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public class orderByListExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:631:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken COMMA153 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement152 = default(EsperEPL2GrammarParser.orderByListElement_return);

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement154 = default(EsperEPL2GrammarParser.orderByListElement_return);


        CommonTree COMMA153_tree=null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement = new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.Push("order by clause"); 
        try 
    	{
            // EsperEPL2Grammar.g:634:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:634:4: orderByListElement ( COMMA orderByListElement )*
            {
            	PushFollow(FOLLOW_orderByListElement_in_orderByListExpr3008);
            	orderByListElement152 = orderByListElement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_orderByListElement.Add(orderByListElement152.Tree);
            	// EsperEPL2Grammar.g:634:23: ( COMMA orderByListElement )*
            	do 
            	{
            	    int alt55 = 2;
            	    int LA55_0 = input.LA(1);

            	    if ( (LA55_0 == COMMA) )
            	    {
            	        alt55 = 1;
            	    }


            	    switch (alt55) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:634:24: COMMA orderByListElement
            			    {
            			    	COMMA153=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr3011); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_COMMA.Add(COMMA153);

            			    	PushFollow(FOLLOW_orderByListElement_in_orderByListExpr3013);
            			    	orderByListElement154 = orderByListElement();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking==0 ) stream_orderByListElement.Add(orderByListElement154.Tree);

            			    }
            			    break;

            			default:
            			    goto loop55;
            	    }
            	} while (true);

            	loop55:
            		;	// Stops C# compiler whining that label 'loop55' has no statements



            	// AST REWRITE
            	// elements:          orderByListElement
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 635:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            	{
            	    // EsperEPL2Grammar.g:635:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

            	    if ( !(stream_orderByListElement.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_orderByListElement.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_orderByListElement.NextTree());

            	    }
            	    stream_orderByListElement.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public class orderByListElement_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:638:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public EsperEPL2GrammarParser.orderByListElement_return orderByListElement() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken d = null;
        EsperEPL2GrammarParser.expression_return expression155 = default(EsperEPL2GrammarParser.expression_return);


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC = new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC = new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try 
    	{
            // EsperEPL2Grammar.g:639:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:639:4: expression (d= ASC | d= DESC )?
            {
            	PushFollow(FOLLOW_expression_in_orderByListElement3038);
            	expression155 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_expression.Add(expression155.Tree);
            	// EsperEPL2Grammar.g:639:15: (d= ASC | d= DESC )?
            	int alt56 = 3;
            	int LA56_0 = input.LA(1);

            	if ( (LA56_0 == ASC) )
            	{
            	    alt56 = 1;
            	}
            	else if ( (LA56_0 == DESC) )
            	{
            	    alt56 = 2;
            	}
            	switch (alt56) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:639:16: d= ASC
            	        {
            	        	d=(IToken)Match(input,ASC,FOLLOW_ASC_in_orderByListElement3043); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_ASC.Add(d);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:639:22: d= DESC
            	        {
            	        	d=(IToken)Match(input,DESC,FOLLOW_DESC_in_orderByListElement3047); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_DESC.Add(d);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          expression, d
            	// token labels:      d
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_d = new RewriteRuleTokenStream(adaptor, "token d", d);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 640:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            	{
            	    // EsperEPL2Grammar.g:640:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_expression.NextTree());
            	    // EsperEPL2Grammar.g:640:38: ( $d)?
            	    if ( stream_d.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_d.NextNode());

            	    }
            	    stream_d.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public class havingClause_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:643:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public EsperEPL2GrammarParser.havingClause_return havingClause() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression156 = default(EsperEPL2GrammarParser.evalOrExpression_return);


        RewriteRuleSubtreeStream stream_evalOrExpression = new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.Push("having clause"); 
        try 
    	{
            // EsperEPL2Grammar.g:646:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:646:4: evalOrExpression
            {
            	PushFollow(FOLLOW_evalOrExpression_in_havingClause3085);
            	evalOrExpression156 = evalOrExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_evalOrExpression.Add(evalOrExpression156.Tree);


            	// AST REWRITE
            	// elements:          evalOrExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 647:3: -> ^( HAVING_EXPR evalOrExpression )
            	{
            	    // EsperEPL2Grammar.g:647:6: ^( HAVING_EXPR evalOrExpression )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(HAVING_EXPR, "HAVING_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_evalOrExpression.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public class outputLimit_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:650:1: outputLimit : (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? EVERY_EXPR ( ( time_period )=> time_period | ( number | i= IDENT ) (e= EVENTS | sec= SECONDS | min= MINUTES ) ) -> {$e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$sec != null}? ^( SEC_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$min != null}? ^( MIN_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> ^( TIMEPERIOD_LIMIT_EXPR ( $k)? time_period ) ;
    public EsperEPL2GrammarParser.outputLimit_return outputLimit() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken k = null;
        IToken i = null;
        IToken e = null;
        IToken sec = null;
        IToken min = null;
        IToken EVERY_EXPR157 = null;
        EsperEPL2GrammarParser.time_period_return time_period158 = default(EsperEPL2GrammarParser.time_period_return);

        EsperEPL2GrammarParser.number_return number159 = default(EsperEPL2GrammarParser.number_return);


        CommonTree k_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree sec_tree=null;
        CommonTree min_tree=null;
        CommonTree EVERY_EXPR157_tree=null;
        RewriteRuleTokenStream stream_MINUTES = new RewriteRuleTokenStream(adaptor,"token MINUTES");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_SECONDS = new RewriteRuleTokenStream(adaptor,"token SECONDS");
        RewriteRuleTokenStream stream_LAST = new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT = new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS = new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_EVERY_EXPR = new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL = new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST = new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_time_period = new RewriteRuleSubtreeStream(adaptor,"rule time_period");
        RewriteRuleSubtreeStream stream_number = new RewriteRuleSubtreeStream(adaptor,"rule number");
         paraphrases.Push("output rate clause"); 
        try 
    	{
            // EsperEPL2Grammar.g:653:2: ( (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? EVERY_EXPR ( ( time_period )=> time_period | ( number | i= IDENT ) (e= EVENTS | sec= SECONDS | min= MINUTES ) ) -> {$e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$sec != null}? ^( SEC_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$min != null}? ^( MIN_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> ^( TIMEPERIOD_LIMIT_EXPR ( $k)? time_period ) )
            // EsperEPL2Grammar.g:653:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? EVERY_EXPR ( ( time_period )=> time_period | ( number | i= IDENT ) (e= EVENTS | sec= SECONDS | min= MINUTES ) )
            {
            	// EsperEPL2Grammar.g:653:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            	int alt57 = 5;
            	switch ( input.LA(1) ) 
            	{
            	    case ALL:
            	    	{
            	        alt57 = 1;
            	        }
            	        break;
            	    case FIRST:
            	    	{
            	        alt57 = 2;
            	        }
            	        break;
            	    case LAST:
            	    	{
            	        alt57 = 3;
            	        }
            	        break;
            	    case SNAPSHOT:
            	    	{
            	        alt57 = 4;
            	        }
            	        break;
            	}

            	switch (alt57) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:653:7: k= ALL
            	        {
            	        	k=(IToken)Match(input,ALL,FOLLOW_ALL_in_outputLimit3123); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_ALL.Add(k);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:653:13: k= FIRST
            	        {
            	        	k=(IToken)Match(input,FIRST,FOLLOW_FIRST_in_outputLimit3127); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_FIRST.Add(k);


            	        }
            	        break;
            	    case 3 :
            	        // EsperEPL2Grammar.g:653:21: k= LAST
            	        {
            	        	k=(IToken)Match(input,LAST,FOLLOW_LAST_in_outputLimit3131); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_LAST.Add(k);


            	        }
            	        break;
            	    case 4 :
            	        // EsperEPL2Grammar.g:653:28: k= SNAPSHOT
            	        {
            	        	k=(IToken)Match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit3135); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_SNAPSHOT.Add(k);


            	        }
            	        break;

            	}

            	EVERY_EXPR157=(IToken)Match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit3139); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_EVERY_EXPR.Add(EVERY_EXPR157);

            	// EsperEPL2Grammar.g:654:3: ( ( time_period )=> time_period | ( number | i= IDENT ) (e= EVENTS | sec= SECONDS | min= MINUTES ) )
            	int alt60 = 2;
            	alt60 = dfa60.Predict(input);
            	switch (alt60) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:655:5: ( time_period )=> time_period
            	        {
            	        	PushFollow(FOLLOW_time_period_in_outputLimit3157);
            	        	time_period158 = time_period();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_time_period.Add(time_period158.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:656:5: ( number | i= IDENT ) (e= EVENTS | sec= SECONDS | min= MINUTES )
            	        {
            	        	// EsperEPL2Grammar.g:656:5: ( number | i= IDENT )
            	        	int alt58 = 2;
            	        	int LA58_0 = input.LA(1);

            	        	if ( (LA58_0 == NUM_DOUBLE || (LA58_0 >= NUM_INT && LA58_0 <= NUM_FLOAT)) )
            	        	{
            	        	    alt58 = 1;
            	        	}
            	        	else if ( (LA58_0 == IDENT) )
            	        	{
            	        	    alt58 = 2;
            	        	}
            	        	else 
            	        	{
            	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	    NoViableAltException nvae_d58s0 =
            	        	        new NoViableAltException("", 58, 0, input);

            	        	    throw nvae_d58s0;
            	        	}
            	        	switch (alt58) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:656:6: number
            	        	        {
            	        	        	PushFollow(FOLLOW_number_in_outputLimit3164);
            	        	        	number159 = number();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_number.Add(number159.Tree);

            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // EsperEPL2Grammar.g:656:15: i= IDENT
            	        	        {
            	        	        	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_outputLimit3170); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_IDENT.Add(i);


            	        	        }
            	        	        break;

            	        	}

            	        	// EsperEPL2Grammar.g:656:24: (e= EVENTS | sec= SECONDS | min= MINUTES )
            	        	int alt59 = 3;
            	        	switch ( input.LA(1) ) 
            	        	{
            	        	case EVENTS:
            	        		{
            	        	    alt59 = 1;
            	        	    }
            	        	    break;
            	        	case SECONDS:
            	        		{
            	        	    alt59 = 2;
            	        	    }
            	        	    break;
            	        	case MINUTES:
            	        		{
            	        	    alt59 = 3;
            	        	    }
            	        	    break;
            	        		default:
            	        		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        		    NoViableAltException nvae_d59s0 =
            	        		        new NoViableAltException("", 59, 0, input);

            	        		    throw nvae_d59s0;
            	        	}

            	        	switch (alt59) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:656:25: e= EVENTS
            	        	        {
            	        	        	e=(IToken)Match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit3176); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_EVENTS.Add(e);


            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // EsperEPL2Grammar.g:656:34: sec= SECONDS
            	        	        {
            	        	        	sec=(IToken)Match(input,SECONDS,FOLLOW_SECONDS_in_outputLimit3180); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_SECONDS.Add(sec);


            	        	        }
            	        	        break;
            	        	    case 3 :
            	        	        // EsperEPL2Grammar.g:656:46: min= MINUTES
            	        	        {
            	        	        	min=(IToken)Match(input,MINUTES,FOLLOW_MINUTES_in_outputLimit3184); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_MINUTES.Add(min);


            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          i, k, number, k, i, k, k, time_period, number, number, i
            	// token labels:      k, i
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_k = new RewriteRuleTokenStream(adaptor, "token k", k);
            	RewriteRuleTokenStream stream_i = new RewriteRuleTokenStream(adaptor, "token i", i);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 658:6: -> {$e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            	if (e != null)
            	{
            	    // EsperEPL2Grammar.g:658:23: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:658:42: ( $k)?
            	    if ( stream_k.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_k.NextNode());

            	    }
            	    stream_k.Reset();
            	    // EsperEPL2Grammar.g:658:46: ( number )?
            	    if ( stream_number.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_number.NextTree());

            	    }
            	    stream_number.Reset();
            	    // EsperEPL2Grammar.g:658:54: ( $i)?
            	    if ( stream_i.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_i.NextNode());

            	    }
            	    stream_i.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 659:6: -> {$sec != null}? ^( SEC_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            	if (sec != null)
            	{
            	    // EsperEPL2Grammar.g:659:25: ^( SEC_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SEC_LIMIT_EXPR, "SEC_LIMIT_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:659:42: ( $k)?
            	    if ( stream_k.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_k.NextNode());

            	    }
            	    stream_k.Reset();
            	    // EsperEPL2Grammar.g:659:46: ( number )?
            	    if ( stream_number.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_number.NextTree());

            	    }
            	    stream_number.Reset();
            	    // EsperEPL2Grammar.g:659:54: ( $i)?
            	    if ( stream_i.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_i.NextNode());

            	    }
            	    stream_i.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 660:6: -> {$min != null}? ^( MIN_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            	if (min != null)
            	{
            	    // EsperEPL2Grammar.g:660:25: ^( MIN_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MIN_LIMIT_EXPR, "MIN_LIMIT_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:660:42: ( $k)?
            	    if ( stream_k.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_k.NextNode());

            	    }
            	    stream_k.Reset();
            	    // EsperEPL2Grammar.g:660:46: ( number )?
            	    if ( stream_number.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_number.NextTree());

            	    }
            	    stream_number.Reset();
            	    // EsperEPL2Grammar.g:660:54: ( $i)?
            	    if ( stream_i.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_i.NextNode());

            	    }
            	    stream_i.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 661:6: -> ^( TIMEPERIOD_LIMIT_EXPR ( $k)? time_period )
            	{
            	    // EsperEPL2Grammar.g:661:9: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? time_period )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:661:33: ( $k)?
            	    if ( stream_k.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_k.NextNode());

            	    }
            	    stream_k.Reset();
            	    adaptor.AddChild(root_1, stream_time_period.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public class whenClause_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:664:1: whenClause : ( WHEN expression THEN expression ) ;
    public EsperEPL2GrammarParser.whenClause_return whenClause() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken WHEN160 = null;
        IToken THEN162 = null;
        EsperEPL2GrammarParser.expression_return expression161 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression163 = default(EsperEPL2GrammarParser.expression_return);


        CommonTree WHEN160_tree=null;
        CommonTree THEN162_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:665:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:665:4: ( WHEN expression THEN expression )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	// EsperEPL2Grammar.g:665:4: ( WHEN expression THEN expression )
            	// EsperEPL2Grammar.g:665:5: WHEN expression THEN expression
            	{
            		WHEN160=(IToken)Match(input,WHEN,FOLLOW_WHEN_in_whenClause3292); if (state.failed) return retval;
            		PushFollow(FOLLOW_expression_in_whenClause3295);
            		expression161 = expression();
            		state.followingStackPointer--;
            		if (state.failed) return retval;
            		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression161.Tree);
            		THEN162=(IToken)Match(input,THEN,FOLLOW_THEN_in_whenClause3297); if (state.failed) return retval;
            		PushFollow(FOLLOW_expression_in_whenClause3300);
            		expression163 = expression();
            		state.followingStackPointer--;
            		if (state.failed) return retval;
            		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression163.Tree);

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public class elseClause_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:668:1: elseClause : ( ELSE expression ) ;
    public EsperEPL2GrammarParser.elseClause_return elseClause() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken ELSE164 = null;
        EsperEPL2GrammarParser.expression_return expression165 = default(EsperEPL2GrammarParser.expression_return);


        CommonTree ELSE164_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:669:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:669:4: ( ELSE expression )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	// EsperEPL2Grammar.g:669:4: ( ELSE expression )
            	// EsperEPL2Grammar.g:669:5: ELSE expression
            	{
            		ELSE164=(IToken)Match(input,ELSE,FOLLOW_ELSE_in_elseClause3313); if (state.failed) return retval;
            		PushFollow(FOLLOW_expression_in_elseClause3316);
            		expression165 = expression();
            		state.followingStackPointer--;
            		if (state.failed) return retval;
            		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression165.Tree);

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public class expression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:673:1: expression : caseExpression ;
    public EsperEPL2GrammarParser.expression_return expression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression166 = default(EsperEPL2GrammarParser.caseExpression_return);



        try 
    	{
            // EsperEPL2Grammar.g:674:2: ( caseExpression )
            // EsperEPL2Grammar.g:674:4: caseExpression
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_caseExpression_in_expression3329);
            	caseExpression166 = caseExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, caseExpression166.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "expression"

    public class caseExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:677:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public EsperEPL2GrammarParser.caseExpression_return caseExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken CASE167 = null;
        IToken END170 = null;
        IToken CASE171 = null;
        IToken END175 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause168 = default(EsperEPL2GrammarParser.whenClause_return);

        EsperEPL2GrammarParser.elseClause_return elseClause169 = default(EsperEPL2GrammarParser.elseClause_return);

        EsperEPL2GrammarParser.expression_return expression172 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.whenClause_return whenClause173 = default(EsperEPL2GrammarParser.whenClause_return);

        EsperEPL2GrammarParser.elseClause_return elseClause174 = default(EsperEPL2GrammarParser.elseClause_return);

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression176 = default(EsperEPL2GrammarParser.evalOrExpression_return);


        CommonTree CASE167_tree=null;
        CommonTree END170_tree=null;
        CommonTree CASE171_tree=null;
        CommonTree END175_tree=null;
        RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE = new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause = new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause = new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try 
    	{
            // EsperEPL2Grammar.g:678:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt65 = 3;
            alt65 = dfa65.Predict(input);
            switch (alt65) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:678:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	if ( state.backtracking == 0 ) 
                    	{
                    	   paraphrases.Push("case expression"); 
                    	}
                    	CASE167=(IToken)Match(input,CASE,FOLLOW_CASE_in_caseExpression3343); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{CASE167_tree = (CommonTree)adaptor.Create(CASE167);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(CASE167_tree, root_0);
                    	}
                    	// EsperEPL2Grammar.g:678:52: ( whenClause )+
                    	int cnt61 = 0;
                    	do 
                    	{
                    	    int alt61 = 2;
                    	    int LA61_0 = input.LA(1);

                    	    if ( (LA61_0 == WHEN) )
                    	    {
                    	        alt61 = 1;
                    	    }


                    	    switch (alt61) 
                    		{
                    			case 1 :
                    			    // EsperEPL2Grammar.g:678:52: whenClause
                    			    {
                    			    	PushFollow(FOLLOW_whenClause_in_caseExpression3346);
                    			    	whenClause168 = whenClause();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, whenClause168.Tree);

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt61 >= 1 ) goto loop61;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee =
                    		                new EarlyExitException(61, input);
                    		            throw eee;
                    	    }
                    	    cnt61++;
                    	} while (true);

                    	loop61:
                    		;	// Stops C# compiler whinging that label 'loop61' has no statements

                    	// EsperEPL2Grammar.g:678:64: ( elseClause )?
                    	int alt62 = 2;
                    	int LA62_0 = input.LA(1);

                    	if ( (LA62_0 == ELSE) )
                    	{
                    	    alt62 = 1;
                    	}
                    	switch (alt62) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:678:64: elseClause
                    	        {
                    	        	PushFollow(FOLLOW_elseClause_in_caseExpression3349);
                    	        	elseClause169 = elseClause();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, elseClause169.Tree);

                    	        }
                    	        break;

                    	}

                    	END170=(IToken)Match(input,END,FOLLOW_END_in_caseExpression3352); if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   paraphrases.Pop(); 
                    	}

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:679:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   paraphrases.Push("case expression"); 
                    	}
                    	CASE171=(IToken)Match(input,CASE,FOLLOW_CASE_in_caseExpression3363); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_CASE.Add(CASE171);

                    	PushFollow(FOLLOW_expression_in_caseExpression3365);
                    	expression172 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking==0 ) stream_expression.Add(expression172.Tree);
                    	// EsperEPL2Grammar.g:679:62: ( whenClause )+
                    	int cnt63 = 0;
                    	do 
                    	{
                    	    int alt63 = 2;
                    	    int LA63_0 = input.LA(1);

                    	    if ( (LA63_0 == WHEN) )
                    	    {
                    	        alt63 = 1;
                    	    }


                    	    switch (alt63) 
                    		{
                    			case 1 :
                    			    // EsperEPL2Grammar.g:679:62: whenClause
                    			    {
                    			    	PushFollow(FOLLOW_whenClause_in_caseExpression3367);
                    			    	whenClause173 = whenClause();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking==0 ) stream_whenClause.Add(whenClause173.Tree);

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt63 >= 1 ) goto loop63;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee =
                    		                new EarlyExitException(63, input);
                    		            throw eee;
                    	    }
                    	    cnt63++;
                    	} while (true);

                    	loop63:
                    		;	// Stops C# compiler whinging that label 'loop63' has no statements

                    	// EsperEPL2Grammar.g:679:74: ( elseClause )?
                    	int alt64 = 2;
                    	int LA64_0 = input.LA(1);

                    	if ( (LA64_0 == ELSE) )
                    	{
                    	    alt64 = 1;
                    	}
                    	switch (alt64) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:679:74: elseClause
                    	        {
                    	        	PushFollow(FOLLOW_elseClause_in_caseExpression3370);
                    	        	elseClause174 = elseClause();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking==0 ) stream_elseClause.Add(elseClause174.Tree);

                    	        }
                    	        break;

                    	}

                    	END175=(IToken)Match(input,END,FOLLOW_END_in_caseExpression3373); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_END.Add(END175);

                    	if ( state.backtracking == 0 ) 
                    	{
                    	   paraphrases.Pop(); 
                    	}


                    	// AST REWRITE
                    	// elements:          whenClause, expression, elseClause
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 680:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    	{
                    	    // EsperEPL2Grammar.g:680:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE2, "CASE2"), root_1);

                    	    adaptor.AddChild(root_1, stream_expression.NextTree());
                    	    if ( !(stream_whenClause.HasNext()) ) {
                    	        throw new RewriteEarlyExitException();
                    	    }
                    	    while ( stream_whenClause.HasNext() )
                    	    {
                    	        adaptor.AddChild(root_1, stream_whenClause.NextTree());

                    	    }
                    	    stream_whenClause.Reset();
                    	    // EsperEPL2Grammar.g:680:38: ( elseClause )?
                    	    if ( stream_elseClause.HasNext() )
                    	    {
                    	        adaptor.AddChild(root_1, stream_elseClause.NextTree());

                    	    }
                    	    stream_elseClause.Reset();

                    	    adaptor.AddChild(root_0, root_1);
                    	    }

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:681:4: evalOrExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_evalOrExpression_in_caseExpression3397);
                    	evalOrExpression176 = evalOrExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, evalOrExpression176.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public class evalOrExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:684:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken op = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression177 = default(EsperEPL2GrammarParser.evalAndExpression_return);

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression178 = default(EsperEPL2GrammarParser.evalAndExpression_return);


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR = new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression = new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try 
    	{
            // EsperEPL2Grammar.g:685:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:685:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            	PushFollow(FOLLOW_evalAndExpression_in_evalOrExpression3408);
            	evalAndExpression177 = evalAndExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_evalAndExpression.Add(evalAndExpression177.Tree);
            	// EsperEPL2Grammar.g:685:22: (op= OR_EXPR evalAndExpression )*
            	do 
            	{
            	    int alt66 = 2;
            	    alt66 = dfa66.Predict(input);
            	    switch (alt66) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:685:23: op= OR_EXPR evalAndExpression
            			    {
            			    	op=(IToken)Match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression3413); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_OR_EXPR.Add(op);

            			    	PushFollow(FOLLOW_evalAndExpression_in_evalOrExpression3415);
            			    	evalAndExpression178 = evalAndExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking==0 ) stream_evalAndExpression.Add(evalAndExpression178.Tree);

            			    }
            			    break;

            			default:
            			    goto loop66;
            	    }
            	} while (true);

            	loop66:
            		;	// Stops C# compiler whining that label 'loop66' has no statements



            	// AST REWRITE
            	// elements:          evalAndExpression, evalAndExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 686:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            	if (op != null)
            	{
            	    // EsperEPL2Grammar.g:686:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:686:36: ( evalAndExpression )*
            	    while ( stream_evalAndExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_evalAndExpression.NextTree());

            	    }
            	    stream_evalAndExpression.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 687:3: -> evalAndExpression
            	{
            	    adaptor.AddChild(root_0, stream_evalAndExpression.NextTree());

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public class evalAndExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:690:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken op = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression179 = default(EsperEPL2GrammarParser.bitWiseExpression_return);

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression180 = default(EsperEPL2GrammarParser.bitWiseExpression_return);


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR = new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression = new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try 
    	{
            // EsperEPL2Grammar.g:691:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:691:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            	PushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression3447);
            	bitWiseExpression179 = bitWiseExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_bitWiseExpression.Add(bitWiseExpression179.Tree);
            	// EsperEPL2Grammar.g:691:22: (op= AND_EXPR bitWiseExpression )*
            	do 
            	{
            	    int alt67 = 2;
            	    alt67 = dfa67.Predict(input);
            	    switch (alt67) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:691:23: op= AND_EXPR bitWiseExpression
            			    {
            			    	op=(IToken)Match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression3452); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_AND_EXPR.Add(op);

            			    	PushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression3454);
            			    	bitWiseExpression180 = bitWiseExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking==0 ) stream_bitWiseExpression.Add(bitWiseExpression180.Tree);

            			    }
            			    break;

            			default:
            			    goto loop67;
            	    }
            	} while (true);

            	loop67:
            		;	// Stops C# compiler whining that label 'loop67' has no statements



            	// AST REWRITE
            	// elements:          bitWiseExpression, bitWiseExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 692:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            	if (op != null)
            	{
            	    // EsperEPL2Grammar.g:692:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

            	    if ( !(stream_bitWiseExpression.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_bitWiseExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_bitWiseExpression.NextTree());

            	    }
            	    stream_bitWiseExpression.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 693:3: -> bitWiseExpression
            	{
            	    adaptor.AddChild(root_0, stream_bitWiseExpression.NextTree());

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public class bitWiseExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:696:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken BAND182 = null;
        IToken BOR183 = null;
        IToken BXOR184 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression181 = default(EsperEPL2GrammarParser.negatedExpression_return);

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression185 = default(EsperEPL2GrammarParser.negatedExpression_return);


        CommonTree BAND182_tree=null;
        CommonTree BOR183_tree=null;
        CommonTree BXOR184_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:697:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:697:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_negatedExpression_in_bitWiseExpression3486);
            	negatedExpression181 = negatedExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, negatedExpression181.Tree);
            	// EsperEPL2Grammar.g:697:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            	do 
            	{
            	    int alt69 = 2;
            	    alt69 = dfa69.Predict(input);
            	    switch (alt69) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:697:24: ( BAND | BOR | BXOR ) negatedExpression
            			    {
            			    	// EsperEPL2Grammar.g:697:24: ( BAND | BOR | BXOR )
            			    	int alt68 = 3;
            			    	switch ( input.LA(1) ) 
            			    	{
            			    	case BAND:
            			    		{
            			    	    alt68 = 1;
            			    	    }
            			    	    break;
            			    	case BOR:
            			    		{
            			    	    alt68 = 2;
            			    	    }
            			    	    break;
            			    	case BXOR:
            			    		{
            			    	    alt68 = 3;
            			    	    }
            			    	    break;
            			    		default:
            			    		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    		    NoViableAltException nvae_d68s0 =
            			    		        new NoViableAltException("", 68, 0, input);

            			    		    throw nvae_d68s0;
            			    	}

            			    	switch (alt68) 
            			    	{
            			    	    case 1 :
            			    	        // EsperEPL2Grammar.g:697:25: BAND
            			    	        {
            			    	        	BAND182=(IToken)Match(input,BAND,FOLLOW_BAND_in_bitWiseExpression3491); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{BAND182_tree = (CommonTree)adaptor.Create(BAND182);
            			    	        		root_0 = (CommonTree)adaptor.BecomeRoot(BAND182_tree, root_0);
            			    	        	}

            			    	        }
            			    	        break;
            			    	    case 2 :
            			    	        // EsperEPL2Grammar.g:697:31: BOR
            			    	        {
            			    	        	BOR183=(IToken)Match(input,BOR,FOLLOW_BOR_in_bitWiseExpression3494); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{BOR183_tree = (CommonTree)adaptor.Create(BOR183);
            			    	        		root_0 = (CommonTree)adaptor.BecomeRoot(BOR183_tree, root_0);
            			    	        	}

            			    	        }
            			    	        break;
            			    	    case 3 :
            			    	        // EsperEPL2Grammar.g:697:36: BXOR
            			    	        {
            			    	        	BXOR184=(IToken)Match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression3497); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{BXOR184_tree = (CommonTree)adaptor.Create(BXOR184);
            			    	        		root_0 = (CommonTree)adaptor.BecomeRoot(BXOR184_tree, root_0);
            			    	        	}

            			    	        }
            			    	        break;

            			    	}

            			    	PushFollow(FOLLOW_negatedExpression_in_bitWiseExpression3501);
            			    	negatedExpression185 = negatedExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, negatedExpression185.Tree);

            			    }
            			    break;

            			default:
            			    goto loop69;
            	    }
            	} while (true);

            	loop69:
            		;	// Stops C# compiler whining that label 'loop69' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public class negatedExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:700:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public EsperEPL2GrammarParser.negatedExpression_return negatedExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken NOT_EXPR187 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression186 = default(EsperEPL2GrammarParser.evalEqualsExpression_return);

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression188 = default(EsperEPL2GrammarParser.evalEqualsExpression_return);


        CommonTree NOT_EXPR187_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:701:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt70 = 2;
            alt70 = dfa70.Predict(input);
            switch (alt70) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:701:4: evalEqualsExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression3516);
                    	evalEqualsExpression186 = evalEqualsExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, evalEqualsExpression186.Tree);

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:702:4: NOT_EXPR evalEqualsExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	NOT_EXPR187=(IToken)Match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression3522); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{NOT_EXPR187_tree = (CommonTree)adaptor.Create(NOT_EXPR187);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(NOT_EXPR187_tree, root_0);
                    	}
                    	PushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression3525);
                    	evalEqualsExpression188 = evalEqualsExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, evalEqualsExpression188.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public class evalEqualsExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:705:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is_= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) evalRelationalExpression )* -> {$eq != null || $is_ != null}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$isnot != null || $sqlne != null || $ne != null}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> ( evalRelationalExpression )+ ;
    public EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken eq = null;
        IToken is_ = null;
        IToken isnot = null;
        IToken sqlne = null;
        IToken ne = null;
        IToken NOT_EXPR190 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression189 = default(EsperEPL2GrammarParser.evalRelationalExpression_return);

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression191 = default(EsperEPL2GrammarParser.evalRelationalExpression_return);


        CommonTree eq_tree=null;
        CommonTree is__tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree NOT_EXPR190_tree=null;
        RewriteRuleTokenStream stream_EQUALS = new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_NOT_EXPR = new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE = new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL = new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS = new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleSubtreeStream stream_evalRelationalExpression = new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try 
    	{
            // EsperEPL2Grammar.g:706:2: ( evalRelationalExpression ( (eq= EQUALS | is_= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) evalRelationalExpression )* -> {$eq != null || $is_ != null}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$isnot != null || $sqlne != null || $ne != null}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:706:4: evalRelationalExpression ( (eq= EQUALS | is_= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) evalRelationalExpression )*
            {
            	PushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression3538);
            	evalRelationalExpression189 = evalRelationalExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_evalRelationalExpression.Add(evalRelationalExpression189.Tree);
            	// EsperEPL2Grammar.g:706:29: ( (eq= EQUALS | is_= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) evalRelationalExpression )*
            	do 
            	{
            	    int alt72 = 2;
            	    alt72 = dfa72.Predict(input);
            	    switch (alt72) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:707:6: (eq= EQUALS | is_= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) evalRelationalExpression
            			    {
            			    	// EsperEPL2Grammar.g:707:6: (eq= EQUALS | is_= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            			    	int alt71 = 5;
            			    	alt71 = dfa71.Predict(input);
            			    	switch (alt71) 
            			    	{
            			    	    case 1 :
            			    	        // EsperEPL2Grammar.g:707:7: eq= EQUALS
            			    	        {
            			    	        	eq=(IToken)Match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression3551); if (state.failed) return retval; 
            			    	        	if ( state.backtracking==0 ) stream_EQUALS.Add(eq);


            			    	        }
            			    	        break;
            			    	    case 2 :
            			    	        // EsperEPL2Grammar.g:708:15: is_= IS
            			    	        {
            			    	        	is_=(IToken)Match(input,IS,FOLLOW_IS_in_evalEqualsExpression3569); if (state.failed) return retval; 
            			    	        	if ( state.backtracking==0 ) stream_IS.Add(is_);


            			    	        }
            			    	        break;
            			    	    case 3 :
            			    	        // EsperEPL2Grammar.g:709:11: isnot= IS NOT_EXPR
            			    	        {
            			    	        	isnot=(IToken)Match(input,IS,FOLLOW_IS_in_evalEqualsExpression3583); if (state.failed) return retval; 
            			    	        	if ( state.backtracking==0 ) stream_IS.Add(isnot);

            			    	        	NOT_EXPR190=(IToken)Match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression3585); if (state.failed) return retval; 
            			    	        	if ( state.backtracking==0 ) stream_NOT_EXPR.Add(NOT_EXPR190);


            			    	        }
            			    	        break;
            			    	    case 4 :
            			    	        // EsperEPL2Grammar.g:710:11: sqlne= SQL_NE
            			    	        {
            			    	        	sqlne=(IToken)Match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression3599); if (state.failed) return retval; 
            			    	        	if ( state.backtracking==0 ) stream_SQL_NE.Add(sqlne);


            			    	        }
            			    	        break;
            			    	    case 5 :
            			    	        // EsperEPL2Grammar.g:711:11: ne= NOT_EQUAL
            			    	        {
            			    	        	ne=(IToken)Match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression3613); if (state.failed) return retval; 
            			    	        	if ( state.backtracking==0 ) stream_NOT_EQUAL.Add(ne);


            			    	        }
            			    	        break;

            			    	}

            			    	PushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression3623);
            			    	evalRelationalExpression191 = evalRelationalExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking==0 ) stream_evalRelationalExpression.Add(evalRelationalExpression191.Tree);

            			    }
            			    break;

            			default:
            			    goto loop72;
            	    }
            	} while (true);

            	loop72:
            		;	// Stops C# compiler whining that label 'loop72' has no statements



            	// AST REWRITE
            	// elements:          evalRelationalExpression, evalRelationalExpression, evalRelationalExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 713:6: -> {$eq != null || $is_ != null}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            	if (eq != null || is_ != null)
            	{
            	    // EsperEPL2Grammar.g:713:40: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

            	    if ( !(stream_evalRelationalExpression.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_evalRelationalExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_evalRelationalExpression.NextTree());

            	    }
            	    stream_evalRelationalExpression.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 714:6: -> {$isnot != null || $sqlne != null || $ne != null}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            	if (isnot != null || sqlne != null || ne != null)
            	{
            	    // EsperEPL2Grammar.g:714:60: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

            	    if ( !(stream_evalRelationalExpression.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_evalRelationalExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_evalRelationalExpression.NextTree());

            	    }
            	    stream_evalRelationalExpression.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 715:6: -> ( evalRelationalExpression )+
            	{
            	    if ( !(stream_evalRelationalExpression.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_evalRelationalExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_0, stream_evalRelationalExpression.NextTree());

            	    }
            	    stream_evalRelationalExpression.Reset();

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public class evalRelationalExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:718:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken r = null;
        IToken n = null;
        IToken i = null;
        IToken l = null;
        IToken col = null;
        IToken COMMA196 = null;
        IToken IN_SET198 = null;
        IToken BETWEEN200 = null;
        IToken LIKE202 = null;
        IToken ESCAPE204 = null;
        IToken REGEXP206 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr192 = default(EsperEPL2GrammarParser.concatenationExpr_return);

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr193 = default(EsperEPL2GrammarParser.concatenationExpr_return);

        EsperEPL2GrammarParser.expression_return expression194 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression195 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression197 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery199 = default(EsperEPL2GrammarParser.inSubSelectQuery_return);

        EsperEPL2GrammarParser.betweenList_return betweenList201 = default(EsperEPL2GrammarParser.betweenList_return);

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr203 = default(EsperEPL2GrammarParser.concatenationExpr_return);

        EsperEPL2GrammarParser.stringconstant_return stringconstant205 = default(EsperEPL2GrammarParser.stringconstant_return);

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr207 = default(EsperEPL2GrammarParser.concatenationExpr_return);


        CommonTree r_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree COMMA196_tree=null;
        CommonTree IN_SET198_tree=null;
        CommonTree BETWEEN200_tree=null;
        CommonTree LIKE202_tree=null;
        CommonTree ESCAPE204_tree=null;
        CommonTree REGEXP206_tree=null;
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_GE = new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT = new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR = new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE = new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET = new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_REGEXP = new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT = new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN = new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE = new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE = new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery = new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr = new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_stringconstant = new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList = new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try 
    	{
            // EsperEPL2Grammar.g:719:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:719:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            	PushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression3684);
            	concatenationExpr192 = concatenationExpr();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_concatenationExpr.Add(concatenationExpr192.Tree);
            	// EsperEPL2Grammar.g:720:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            	int alt82 = 2;
            	alt82 = dfa82.Predict(input);
            	switch (alt82) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:721:4: ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ )
            	        {
            	        	// EsperEPL2Grammar.g:721:4: ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ )
            	        	// EsperEPL2Grammar.g:722:6: ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )*
            	        	{
            	        		// EsperEPL2Grammar.g:722:6: ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )*
            	        		do 
            	        		{
            	        		    int alt74 = 2;
            	        		    alt74 = dfa74.Predict(input);
            	        		    switch (alt74) 
            	        			{
            	        				case 1 :
            	        				    // EsperEPL2Grammar.g:723:8: (r= LT | r= GT | r= LE | r= GE ) concatenationExpr
            	        				    {
            	        				    	// EsperEPL2Grammar.g:723:8: (r= LT | r= GT | r= LE | r= GE )
            	        				    	int alt73 = 4;
            	        				    	switch ( input.LA(1) ) 
            	        				    	{
            	        				    	case LT:
            	        				    		{
            	        				    	    alt73 = 1;
            	        				    	    }
            	        				    	    break;
            	        				    	case GT:
            	        				    		{
            	        				    	    alt73 = 2;
            	        				    	    }
            	        				    	    break;
            	        				    	case LE:
            	        				    		{
            	        				    	    alt73 = 3;
            	        				    	    }
            	        				    	    break;
            	        				    	case GE:
            	        				    		{
            	        				    	    alt73 = 4;
            	        				    	    }
            	        				    	    break;
            	        				    		default:
            	        				    		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        				    		    NoViableAltException nvae_d73s0 =
            	        				    		        new NoViableAltException("", 73, 0, input);

            	        				    		    throw nvae_d73s0;
            	        				    	}

            	        				    	switch (alt73) 
            	        				    	{
            	        				    	    case 1 :
            	        				    	        // EsperEPL2Grammar.g:723:9: r= LT
            	        				    	        {
            	        				    	        	r=(IToken)Match(input,LT,FOLLOW_LT_in_evalRelationalExpression3716); if (state.failed) return retval; 
            	        				    	        	if ( state.backtracking==0 ) stream_LT.Add(r);


            	        				    	        }
            	        				    	        break;
            	        				    	    case 2 :
            	        				    	        // EsperEPL2Grammar.g:723:14: r= GT
            	        				    	        {
            	        				    	        	r=(IToken)Match(input,GT,FOLLOW_GT_in_evalRelationalExpression3720); if (state.failed) return retval; 
            	        				    	        	if ( state.backtracking==0 ) stream_GT.Add(r);


            	        				    	        }
            	        				    	        break;
            	        				    	    case 3 :
            	        				    	        // EsperEPL2Grammar.g:723:19: r= LE
            	        				    	        {
            	        				    	        	r=(IToken)Match(input,LE,FOLLOW_LE_in_evalRelationalExpression3724); if (state.failed) return retval; 
            	        				    	        	if ( state.backtracking==0 ) stream_LE.Add(r);


            	        				    	        }
            	        				    	        break;
            	        				    	    case 4 :
            	        				    	        // EsperEPL2Grammar.g:723:24: r= GE
            	        				    	        {
            	        				    	        	r=(IToken)Match(input,GE,FOLLOW_GE_in_evalRelationalExpression3728); if (state.failed) return retval; 
            	        				    	        	if ( state.backtracking==0 ) stream_GE.Add(r);


            	        				    	        }
            	        				    	        break;

            	        				    	}

            	        				    	PushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression3731);
            	        				    	concatenationExpr193 = concatenationExpr();
            	        				    	state.followingStackPointer--;
            	        				    	if (state.failed) return retval;
            	        				    	if ( state.backtracking==0 ) stream_concatenationExpr.Add(concatenationExpr193.Tree);

            	        				    }
            	        				    break;

            	        				default:
            	        				    goto loop74;
            	        		    }
            	        		} while (true);

            	        		loop74:
            	        			;	// Stops C# compiler whining that label 'loop74' has no statements



            	        		// AST REWRITE
            	        		// elements:          concatenationExpr, concatenationExpr
            	        		// token labels:      
            	        		// rule labels:       retval
            	        		// token list labels: 
            	        		// rule list labels:  
            	        		if ( state.backtracking==0 ) {
            	        		retval.Tree = root_0;
            	        		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	        		root_0 = (CommonTree)adaptor.GetNilNode();
            	        		// 725:6: -> {$r != null}? ^( ( concatenationExpr )+ )
            	        		if (r != null)
            	        		{
            	        		    // EsperEPL2Grammar.g:725:23: ^( ( concatenationExpr )+ )
            	        		    {
            	        		    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        		    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(r), root_1);

            	        		    if ( !(stream_concatenationExpr.HasNext()) ) {
            	        		        throw new RewriteEarlyExitException();
            	        		    }
            	        		    while ( stream_concatenationExpr.HasNext() )
            	        		    {
            	        		        adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());

            	        		    }
            	        		    stream_concatenationExpr.Reset();

            	        		    adaptor.AddChild(root_0, root_1);
            	        		    }

            	        		}
            	        		else // 726:6: -> ( concatenationExpr )+
            	        		{
            	        		    if ( !(stream_concatenationExpr.HasNext()) ) {
            	        		        throw new RewriteEarlyExitException();
            	        		    }
            	        		    while ( stream_concatenationExpr.HasNext() )
            	        		    {
            	        		        adaptor.AddChild(root_0, stream_concatenationExpr.NextTree());

            	        		    }
            	        		    stream_concatenationExpr.Reset();

            	        		}

            	        		retval.Tree = root_0;retval.Tree = root_0;}
            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:728:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
            	        {
            	        	// EsperEPL2Grammar.g:728:6: (n= NOT_EXPR )?
            	        	int alt75 = 2;
            	        	int LA75_0 = input.LA(1);

            	        	if ( (LA75_0 == NOT_EXPR) )
            	        	{
            	        	    alt75 = 1;
            	        	}
            	        	switch (alt75) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:728:7: n= NOT_EXPR
            	        	        {
            	        	        	n=(IToken)Match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression3782); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_NOT_EXPR.Add(n);


            	        	        }
            	        	        break;

            	        	}

            	        	// EsperEPL2Grammar.g:729:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
            	        	int alt81 = 5;
            	        	alt81 = dfa81.Predict(input);
            	        	switch (alt81) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:732:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
            	        	        {
            	        	        	// EsperEPL2Grammar.g:732:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
            	        	        	// EsperEPL2Grammar.g:732:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
            	        	        	{
            	        	        		i=(IToken)Match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression3809); if (state.failed) return retval; 
            	        	        		if ( state.backtracking==0 ) stream_IN_SET.Add(i);

            	        	        		// EsperEPL2Grammar.g:733:8: (l= LPAREN | l= LBRACK )
            	        	        		int alt76 = 2;
            	        	        		int LA76_0 = input.LA(1);

            	        	        		if ( (LA76_0 == LPAREN) )
            	        	        		{
            	        	        		    alt76 = 1;
            	        	        		}
            	        	        		else if ( (LA76_0 == LBRACK) )
            	        	        		{
            	        	        		    alt76 = 2;
            	        	        		}
            	        	        		else 
            	        	        		{
            	        	        		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	        		    NoViableAltException nvae_d76s0 =
            	        	        		        new NoViableAltException("", 76, 0, input);

            	        	        		    throw nvae_d76s0;
            	        	        		}
            	        	        		switch (alt76) 
            	        	        		{
            	        	        		    case 1 :
            	        	        		        // EsperEPL2Grammar.g:733:9: l= LPAREN
            	        	        		        {
            	        	        		        	l=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression3821); if (state.failed) return retval; 
            	        	        		        	if ( state.backtracking==0 ) stream_LPAREN.Add(l);


            	        	        		        }
            	        	        		        break;
            	        	        		    case 2 :
            	        	        		        // EsperEPL2Grammar.g:733:20: l= LBRACK
            	        	        		        {
            	        	        		        	l=(IToken)Match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression3827); if (state.failed) return retval; 
            	        	        		        	if ( state.backtracking==0 ) stream_LBRACK.Add(l);


            	        	        		        }
            	        	        		        break;

            	        	        		}

            	        	        		PushFollow(FOLLOW_expression_in_evalRelationalExpression3830);
            	        	        		expression194 = expression();
            	        	        		state.followingStackPointer--;
            	        	        		if (state.failed) return retval;
            	        	        		if ( state.backtracking==0 ) stream_expression.Add(expression194.Tree);
            	        	        		// EsperEPL2Grammar.g:734:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
            	        	        		int alt78 = 2;
            	        	        		int LA78_0 = input.LA(1);

            	        	        		if ( (LA78_0 == COLON) )
            	        	        		{
            	        	        		    alt78 = 1;
            	        	        		}
            	        	        		else if ( (LA78_0 == COMMA || LA78_0 == RPAREN || LA78_0 == RBRACK) )
            	        	        		{
            	        	        		    alt78 = 2;
            	        	        		}
            	        	        		else 
            	        	        		{
            	        	        		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	        		    NoViableAltException nvae_d78s0 =
            	        	        		        new NoViableAltException("", 78, 0, input);

            	        	        		    throw nvae_d78s0;
            	        	        		}
            	        	        		switch (alt78) 
            	        	        		{
            	        	        		    case 1 :
            	        	        		        // EsperEPL2Grammar.g:735:8: (col= COLON ( expression ) )
            	        	        		        {
            	        	        		        	// EsperEPL2Grammar.g:735:8: (col= COLON ( expression ) )
            	        	        		        	// EsperEPL2Grammar.g:735:10: col= COLON ( expression )
            	        	        		        	{
            	        	        		        		col=(IToken)Match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression3852); if (state.failed) return retval; 
            	        	        		        		if ( state.backtracking==0 ) stream_COLON.Add(col);

            	        	        		        		// EsperEPL2Grammar.g:735:20: ( expression )
            	        	        		        		// EsperEPL2Grammar.g:735:21: expression
            	        	        		        		{
            	        	        		        			PushFollow(FOLLOW_expression_in_evalRelationalExpression3855);
            	        	        		        			expression195 = expression();
            	        	        		        			state.followingStackPointer--;
            	        	        		        			if (state.failed) return retval;
            	        	        		        			if ( state.backtracking==0 ) stream_expression.Add(expression195.Tree);

            	        	        		        		}


            	        	        		        	}


            	        	        		        }
            	        	        		        break;
            	        	        		    case 2 :
            	        	        		        // EsperEPL2Grammar.g:737:8: ( ( COMMA expression )* )
            	        	        		        {
            	        	        		        	// EsperEPL2Grammar.g:737:8: ( ( COMMA expression )* )
            	        	        		        	// EsperEPL2Grammar.g:737:10: ( COMMA expression )*
            	        	        		        	{
            	        	        		        		// EsperEPL2Grammar.g:737:10: ( COMMA expression )*
            	        	        		        		do 
            	        	        		        		{
            	        	        		        		    int alt77 = 2;
            	        	        		        		    int LA77_0 = input.LA(1);

            	        	        		        		    if ( (LA77_0 == COMMA) )
            	        	        		        		    {
            	        	        		        		        alt77 = 1;
            	        	        		        		    }


            	        	        		        		    switch (alt77) 
            	        	        		        			{
            	        	        		        				case 1 :
            	        	        		        				    // EsperEPL2Grammar.g:737:11: COMMA expression
            	        	        		        				    {
            	        	        		        				    	COMMA196=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression3881); if (state.failed) return retval; 
            	        	        		        				    	if ( state.backtracking==0 ) stream_COMMA.Add(COMMA196);

            	        	        		        				    	PushFollow(FOLLOW_expression_in_evalRelationalExpression3883);
            	        	        		        				    	expression197 = expression();
            	        	        		        				    	state.followingStackPointer--;
            	        	        		        				    	if (state.failed) return retval;
            	        	        		        				    	if ( state.backtracking==0 ) stream_expression.Add(expression197.Tree);

            	        	        		        				    }
            	        	        		        				    break;

            	        	        		        				default:
            	        	        		        				    goto loop77;
            	        	        		        		    }
            	        	        		        		} while (true);

            	        	        		        		loop77:
            	        	        		        			;	// Stops C# compiler whining that label 'loop77' has no statements


            	        	        		        	}


            	        	        		        }
            	        	        		        break;

            	        	        		}

            	        	        		// EsperEPL2Grammar.g:739:8: (r= RPAREN | r= RBRACK )
            	        	        		int alt79 = 2;
            	        	        		int LA79_0 = input.LA(1);

            	        	        		if ( (LA79_0 == RPAREN) )
            	        	        		{
            	        	        		    alt79 = 1;
            	        	        		}
            	        	        		else if ( (LA79_0 == RBRACK) )
            	        	        		{
            	        	        		    alt79 = 2;
            	        	        		}
            	        	        		else 
            	        	        		{
            	        	        		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	        		    NoViableAltException nvae_d79s0 =
            	        	        		        new NoViableAltException("", 79, 0, input);

            	        	        		    throw nvae_d79s0;
            	        	        		}
            	        	        		switch (alt79) 
            	        	        		{
            	        	        		    case 1 :
            	        	        		        // EsperEPL2Grammar.g:739:9: r= RPAREN
            	        	        		        {
            	        	        		        	r=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression3909); if (state.failed) return retval; 
            	        	        		        	if ( state.backtracking==0 ) stream_RPAREN.Add(r);


            	        	        		        }
            	        	        		        break;
            	        	        		    case 2 :
            	        	        		        // EsperEPL2Grammar.g:739:20: r= RBRACK
            	        	        		        {
            	        	        		        	r=(IToken)Match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression3915); if (state.failed) return retval; 
            	        	        		        	if ( state.backtracking==0 ) stream_RBRACK.Add(r);


            	        	        		        }
            	        	        		        break;

            	        	        		}


            	        	        	}



            	        	        	// AST REWRITE
            	        	        	// elements:          l, l, IN_SET, concatenationExpr, r, r, r, expression, expression, l, expression, concatenationExpr, concatenationExpr, concatenationExpr, expression, l, r
            	        	        	// token labels:      r, l
            	        	        	// rule labels:       retval
            	        	        	// token list labels: 
            	        	        	// rule list labels:  
            	        	        	if ( state.backtracking==0 ) {
            	        	        	retval.Tree = root_0;
            	        	        	RewriteRuleTokenStream stream_r = new RewriteRuleTokenStream(adaptor, "token r", r);
            	        	        	RewriteRuleTokenStream stream_l = new RewriteRuleTokenStream(adaptor, "token l", l);
            	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	        	        	root_0 = (CommonTree)adaptor.GetNilNode();
            	        	        	// 741:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
            	        	        	if (col == null && n == null)
            	        	        	{
            	        	        	    // EsperEPL2Grammar.g:741:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
            	        	        	    {
            	        	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_IN_SET.NextNode(), root_1);

            	        	        	    adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());
            	        	        	    adaptor.AddChild(root_1, stream_l.NextNode());
            	        	        	    if ( !(stream_expression.HasNext()) ) {
            	        	        	        throw new RewriteEarlyExitException();
            	        	        	    }
            	        	        	    while ( stream_expression.HasNext() )
            	        	        	    {
            	        	        	        adaptor.AddChild(root_1, stream_expression.NextTree());

            	        	        	    }
            	        	        	    stream_expression.Reset();
            	        	        	    adaptor.AddChild(root_1, stream_r.NextNode());

            	        	        	    adaptor.AddChild(root_0, root_1);
            	        	        	    }

            	        	        	}
            	        	        	else // 742:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
            	        	        	if (col == null && n != null)
            	        	        	{
            	        	        	    // EsperEPL2Grammar.g:742:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
            	        	        	    {
            	        	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NOT_IN_SET, "NOT_IN_SET"), root_1);

            	        	        	    adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());
            	        	        	    adaptor.AddChild(root_1, stream_l.NextNode());
            	        	        	    if ( !(stream_expression.HasNext()) ) {
            	        	        	        throw new RewriteEarlyExitException();
            	        	        	    }
            	        	        	    while ( stream_expression.HasNext() )
            	        	        	    {
            	        	        	        adaptor.AddChild(root_1, stream_expression.NextTree());

            	        	        	    }
            	        	        	    stream_expression.Reset();
            	        	        	    adaptor.AddChild(root_1, stream_r.NextNode());

            	        	        	    adaptor.AddChild(root_0, root_1);
            	        	        	    }

            	        	        	}
            	        	        	else // 743:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
            	        	        	if (col != null && n == null)
            	        	        	{
            	        	        	    // EsperEPL2Grammar.g:743:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
            	        	        	    {
            	        	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IN_RANGE, "IN_RANGE"), root_1);

            	        	        	    adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());
            	        	        	    adaptor.AddChild(root_1, stream_l.NextNode());
            	        	        	    if ( !(stream_expression.HasNext()) ) {
            	        	        	        throw new RewriteEarlyExitException();
            	        	        	    }
            	        	        	    while ( stream_expression.HasNext() )
            	        	        	    {
            	        	        	        adaptor.AddChild(root_1, stream_expression.NextTree());

            	        	        	    }
            	        	        	    stream_expression.Reset();
            	        	        	    adaptor.AddChild(root_1, stream_r.NextNode());

            	        	        	    adaptor.AddChild(root_0, root_1);
            	        	        	    }

            	        	        	}
            	        	        	else // 744:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
            	        	        	{
            	        	        	    // EsperEPL2Grammar.g:744:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
            	        	        	    {
            	        	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

            	        	        	    adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());
            	        	        	    adaptor.AddChild(root_1, stream_l.NextNode());
            	        	        	    if ( !(stream_expression.HasNext()) ) {
            	        	        	        throw new RewriteEarlyExitException();
            	        	        	    }
            	        	        	    while ( stream_expression.HasNext() )
            	        	        	    {
            	        	        	        adaptor.AddChild(root_1, stream_expression.NextTree());

            	        	        	    }
            	        	        	    stream_expression.Reset();
            	        	        	    adaptor.AddChild(root_1, stream_r.NextNode());

            	        	        	    adaptor.AddChild(root_0, root_1);
            	        	        	    }

            	        	        	}

            	        	        	retval.Tree = root_0;retval.Tree = root_0;}
            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // EsperEPL2Grammar.g:745:7: IN_SET inSubSelectQuery
            	        	        {
            	        	        	IN_SET198=(IToken)Match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression4038); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_IN_SET.Add(IN_SET198);

            	        	        	PushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression4040);
            	        	        	inSubSelectQuery199 = inSubSelectQuery();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_inSubSelectQuery.Add(inSubSelectQuery199.Tree);


            	        	        	// AST REWRITE
            	        	        	// elements:          concatenationExpr, inSubSelectQuery, concatenationExpr, inSubSelectQuery
            	        	        	// token labels:      
            	        	        	// rule labels:       retval
            	        	        	// token list labels: 
            	        	        	// rule list labels:  
            	        	        	if ( state.backtracking==0 ) {
            	        	        	retval.Tree = root_0;
            	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	        	        	root_0 = (CommonTree)adaptor.GetNilNode();
            	        	        	// 746:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
            	        	        	if (n == null)
            	        	        	{
            	        	        	    // EsperEPL2Grammar.g:746:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
            	        	        	    {
            	        	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

            	        	        	    adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());
            	        	        	    adaptor.AddChild(root_1, stream_inSubSelectQuery.NextTree());

            	        	        	    adaptor.AddChild(root_0, root_1);
            	        	        	    }

            	        	        	}
            	        	        	else // 747:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
            	        	        	{
            	        	        	    // EsperEPL2Grammar.g:747:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
            	        	        	    {
            	        	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

            	        	        	    adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());
            	        	        	    adaptor.AddChild(root_1, stream_inSubSelectQuery.NextTree());

            	        	        	    adaptor.AddChild(root_0, root_1);
            	        	        	    }

            	        	        	}

            	        	        	retval.Tree = root_0;retval.Tree = root_0;}
            	        	        }
            	        	        break;
            	        	    case 3 :
            	        	        // EsperEPL2Grammar.g:748:7: BETWEEN betweenList
            	        	        {
            	        	        	BETWEEN200=(IToken)Match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression4086); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_BETWEEN.Add(BETWEEN200);

            	        	        	PushFollow(FOLLOW_betweenList_in_evalRelationalExpression4088);
            	        	        	betweenList201 = betweenList();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_betweenList.Add(betweenList201.Tree);


            	        	        	// AST REWRITE
            	        	        	// elements:          concatenationExpr, BETWEEN, betweenList, concatenationExpr, betweenList
            	        	        	// token labels:      
            	        	        	// rule labels:       retval
            	        	        	// token list labels: 
            	        	        	// rule list labels:  
            	        	        	if ( state.backtracking==0 ) {
            	        	        	retval.Tree = root_0;
            	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	        	        	root_0 = (CommonTree)adaptor.GetNilNode();
            	        	        	// 749:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
            	        	        	if (n == null)
            	        	        	{
            	        	        	    // EsperEPL2Grammar.g:749:26: ^( BETWEEN concatenationExpr betweenList )
            	        	        	    {
            	        	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_BETWEEN.NextNode(), root_1);

            	        	        	    adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());
            	        	        	    adaptor.AddChild(root_1, stream_betweenList.NextTree());

            	        	        	    adaptor.AddChild(root_0, root_1);
            	        	        	    }

            	        	        	}
            	        	        	else // 750:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
            	        	        	{
            	        	        	    // EsperEPL2Grammar.g:750:12: ^( NOT_BETWEEN concatenationExpr betweenList )
            	        	        	    {
            	        	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

            	        	        	    adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());
            	        	        	    adaptor.AddChild(root_1, stream_betweenList.NextTree());

            	        	        	    adaptor.AddChild(root_0, root_1);
            	        	        	    }

            	        	        	}

            	        	        	retval.Tree = root_0;retval.Tree = root_0;}
            	        	        }
            	        	        break;
            	        	    case 4 :
            	        	        // EsperEPL2Grammar.g:751:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
            	        	        {
            	        	        	LIKE202=(IToken)Match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression4138); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_LIKE.Add(LIKE202);

            	        	        	PushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression4140);
            	        	        	concatenationExpr203 = concatenationExpr();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_concatenationExpr.Add(concatenationExpr203.Tree);
            	        	        	// EsperEPL2Grammar.g:751:30: ( ESCAPE stringconstant )?
            	        	        	int alt80 = 2;
            	        	        	alt80 = dfa80.Predict(input);
            	        	        	switch (alt80) 
            	        	        	{
            	        	        	    case 1 :
            	        	        	        // EsperEPL2Grammar.g:751:31: ESCAPE stringconstant
            	        	        	        {
            	        	        	        	ESCAPE204=(IToken)Match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression4143); if (state.failed) return retval; 
            	        	        	        	if ( state.backtracking==0 ) stream_ESCAPE.Add(ESCAPE204);

            	        	        	        	PushFollow(FOLLOW_stringconstant_in_evalRelationalExpression4145);
            	        	        	        	stringconstant205 = stringconstant();
            	        	        	        	state.followingStackPointer--;
            	        	        	        	if (state.failed) return retval;
            	        	        	        	if ( state.backtracking==0 ) stream_stringconstant.Add(stringconstant205.Tree);

            	        	        	        }
            	        	        	        break;

            	        	        	}



            	        	        	// AST REWRITE
            	        	        	// elements:          concatenationExpr, concatenationExpr, stringconstant, stringconstant, LIKE
            	        	        	// token labels:      
            	        	        	// rule labels:       retval
            	        	        	// token list labels: 
            	        	        	// rule list labels:  
            	        	        	if ( state.backtracking==0 ) {
            	        	        	retval.Tree = root_0;
            	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	        	        	root_0 = (CommonTree)adaptor.GetNilNode();
            	        	        	// 752:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
            	        	        	if (n == null)
            	        	        	{
            	        	        	    // EsperEPL2Grammar.g:752:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
            	        	        	    {
            	        	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_LIKE.NextNode(), root_1);

            	        	        	    // EsperEPL2Grammar.g:752:33: ( concatenationExpr )*
            	        	        	    while ( stream_concatenationExpr.HasNext() )
            	        	        	    {
            	        	        	        adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());

            	        	        	    }
            	        	        	    stream_concatenationExpr.Reset();
            	        	        	    // EsperEPL2Grammar.g:752:52: ( stringconstant )?
            	        	        	    if ( stream_stringconstant.HasNext() )
            	        	        	    {
            	        	        	        adaptor.AddChild(root_1, stream_stringconstant.NextTree());

            	        	        	    }
            	        	        	    stream_stringconstant.Reset();

            	        	        	    adaptor.AddChild(root_0, root_1);
            	        	        	    }

            	        	        	}
            	        	        	else // 753:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
            	        	        	{
            	        	        	    // EsperEPL2Grammar.g:753:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
            	        	        	    {
            	        	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NOT_LIKE, "NOT_LIKE"), root_1);

            	        	        	    // EsperEPL2Grammar.g:753:23: ( concatenationExpr )*
            	        	        	    while ( stream_concatenationExpr.HasNext() )
            	        	        	    {
            	        	        	        adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());

            	        	        	    }
            	        	        	    stream_concatenationExpr.Reset();
            	        	        	    // EsperEPL2Grammar.g:753:42: ( stringconstant )?
            	        	        	    if ( stream_stringconstant.HasNext() )
            	        	        	    {
            	        	        	        adaptor.AddChild(root_1, stream_stringconstant.NextTree());

            	        	        	    }
            	        	        	    stream_stringconstant.Reset();

            	        	        	    adaptor.AddChild(root_0, root_1);
            	        	        	    }

            	        	        	}

            	        	        	retval.Tree = root_0;retval.Tree = root_0;}
            	        	        }
            	        	        break;
            	        	    case 5 :
            	        	        // EsperEPL2Grammar.g:754:7: REGEXP concatenationExpr
            	        	        {
            	        	        	REGEXP206=(IToken)Match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression4197); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_REGEXP.Add(REGEXP206);

            	        	        	PushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression4199);
            	        	        	concatenationExpr207 = concatenationExpr();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_concatenationExpr.Add(concatenationExpr207.Tree);


            	        	        	// AST REWRITE
            	        	        	// elements:          REGEXP, concatenationExpr, concatenationExpr
            	        	        	// token labels:      
            	        	        	// rule labels:       retval
            	        	        	// token list labels: 
            	        	        	// rule list labels:  
            	        	        	if ( state.backtracking==0 ) {
            	        	        	retval.Tree = root_0;
            	        	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	        	        	root_0 = (CommonTree)adaptor.GetNilNode();
            	        	        	// 755:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
            	        	        	if (n == null)
            	        	        	{
            	        	        	    // EsperEPL2Grammar.g:755:26: ^( REGEXP ( concatenationExpr )+ )
            	        	        	    {
            	        	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_REGEXP.NextNode(), root_1);

            	        	        	    if ( !(stream_concatenationExpr.HasNext()) ) {
            	        	        	        throw new RewriteEarlyExitException();
            	        	        	    }
            	        	        	    while ( stream_concatenationExpr.HasNext() )
            	        	        	    {
            	        	        	        adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());

            	        	        	    }
            	        	        	    stream_concatenationExpr.Reset();

            	        	        	    adaptor.AddChild(root_0, root_1);
            	        	        	    }

            	        	        	}
            	        	        	else // 756:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
            	        	        	{
            	        	        	    // EsperEPL2Grammar.g:756:12: ^( NOT_REGEXP ( concatenationExpr )+ )
            	        	        	    {
            	        	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	        	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NOT_REGEXP, "NOT_REGEXP"), root_1);

            	        	        	    if ( !(stream_concatenationExpr.HasNext()) ) {
            	        	        	        throw new RewriteEarlyExitException();
            	        	        	    }
            	        	        	    while ( stream_concatenationExpr.HasNext() )
            	        	        	    {
            	        	        	        adaptor.AddChild(root_1, stream_concatenationExpr.NextTree());

            	        	        	    }
            	        	        	    stream_concatenationExpr.Reset();

            	        	        	    adaptor.AddChild(root_0, root_1);
            	        	        	    }

            	        	        	}

            	        	        	retval.Tree = root_0;retval.Tree = root_0;}
            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public class inSubSelectQuery_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:761:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr208 = default(EsperEPL2GrammarParser.subQueryExpr_return);


        RewriteRuleSubtreeStream stream_subQueryExpr = new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try 
    	{
            // EsperEPL2Grammar.g:762:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:762:4: subQueryExpr
            {
            	PushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery4261);
            	subQueryExpr208 = subQueryExpr();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_subQueryExpr.Add(subQueryExpr208.Tree);


            	// AST REWRITE
            	// elements:          subQueryExpr
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 763:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            	{
            	    // EsperEPL2Grammar.g:763:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_subQueryExpr.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public class concatenationExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:766:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken c = null;
        IToken LOR211 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression209 = default(EsperEPL2GrammarParser.additiveExpression_return);

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression210 = default(EsperEPL2GrammarParser.additiveExpression_return);

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression212 = default(EsperEPL2GrammarParser.additiveExpression_return);


        CommonTree c_tree=null;
        CommonTree LOR211_tree=null;
        RewriteRuleTokenStream stream_LOR = new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression = new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try 
    	{
            // EsperEPL2Grammar.g:767:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:767:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            	PushFollow(FOLLOW_additiveExpression_in_concatenationExpr4286);
            	additiveExpression209 = additiveExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_additiveExpression.Add(additiveExpression209.Tree);
            	// EsperEPL2Grammar.g:767:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            	int alt84 = 2;
            	alt84 = dfa84.Predict(input);
            	switch (alt84) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:767:25: c= LOR additiveExpression ( LOR additiveExpression )*
            	        {
            	        	c=(IToken)Match(input,LOR,FOLLOW_LOR_in_concatenationExpr4292); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_LOR.Add(c);

            	        	PushFollow(FOLLOW_additiveExpression_in_concatenationExpr4294);
            	        	additiveExpression210 = additiveExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_additiveExpression.Add(additiveExpression210.Tree);
            	        	// EsperEPL2Grammar.g:767:50: ( LOR additiveExpression )*
            	        	do 
            	        	{
            	        	    int alt83 = 2;
            	        	    alt83 = dfa83.Predict(input);
            	        	    switch (alt83) 
            	        		{
            	        			case 1 :
            	        			    // EsperEPL2Grammar.g:767:52: LOR additiveExpression
            	        			    {
            	        			    	LOR211=(IToken)Match(input,LOR,FOLLOW_LOR_in_concatenationExpr4298); if (state.failed) return retval; 
            	        			    	if ( state.backtracking==0 ) stream_LOR.Add(LOR211);

            	        			    	PushFollow(FOLLOW_additiveExpression_in_concatenationExpr4300);
            	        			    	additiveExpression212 = additiveExpression();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking==0 ) stream_additiveExpression.Add(additiveExpression212.Tree);

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop83;
            	        	    }
            	        	} while (true);

            	        	loop83:
            	        		;	// Stops C# compiler whining that label 'loop83' has no statements


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          additiveExpression, additiveExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 768:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            	if (c != null)
            	{
            	    // EsperEPL2Grammar.g:768:23: ^( CONCAT ( additiveExpression )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CONCAT, "CONCAT"), root_1);

            	    if ( !(stream_additiveExpression.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_additiveExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_additiveExpression.NextTree());

            	    }
            	    stream_additiveExpression.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 769:6: -> additiveExpression
            	{
            	    adaptor.AddChild(root_0, stream_additiveExpression.NextTree());

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public class additiveExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:772:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public EsperEPL2GrammarParser.additiveExpression_return additiveExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken PLUS214 = null;
        IToken MINUS215 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression213 = default(EsperEPL2GrammarParser.multiplyExpression_return);

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression216 = default(EsperEPL2GrammarParser.multiplyExpression_return);


        CommonTree PLUS214_tree=null;
        CommonTree MINUS215_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:773:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:773:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_multiplyExpression_in_additiveExpression4341);
            	multiplyExpression213 = multiplyExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, multiplyExpression213.Tree);
            	// EsperEPL2Grammar.g:773:23: ( ( PLUS | MINUS ) multiplyExpression )*
            	do 
            	{
            	    int alt86 = 2;
            	    alt86 = dfa86.Predict(input);
            	    switch (alt86) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:773:25: ( PLUS | MINUS ) multiplyExpression
            			    {
            			    	// EsperEPL2Grammar.g:773:25: ( PLUS | MINUS )
            			    	int alt85 = 2;
            			    	int LA85_0 = input.LA(1);

            			    	if ( (LA85_0 == PLUS) )
            			    	{
            			    	    alt85 = 1;
            			    	}
            			    	else if ( (LA85_0 == MINUS) )
            			    	{
            			    	    alt85 = 2;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    NoViableAltException nvae_d85s0 =
            			    	        new NoViableAltException("", 85, 0, input);

            			    	    throw nvae_d85s0;
            			    	}
            			    	switch (alt85) 
            			    	{
            			    	    case 1 :
            			    	        // EsperEPL2Grammar.g:773:26: PLUS
            			    	        {
            			    	        	PLUS214=(IToken)Match(input,PLUS,FOLLOW_PLUS_in_additiveExpression4346); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{PLUS214_tree = (CommonTree)adaptor.Create(PLUS214);
            			    	        		root_0 = (CommonTree)adaptor.BecomeRoot(PLUS214_tree, root_0);
            			    	        	}

            			    	        }
            			    	        break;
            			    	    case 2 :
            			    	        // EsperEPL2Grammar.g:773:32: MINUS
            			    	        {
            			    	        	MINUS215=(IToken)Match(input,MINUS,FOLLOW_MINUS_in_additiveExpression4349); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{MINUS215_tree = (CommonTree)adaptor.Create(MINUS215);
            			    	        		root_0 = (CommonTree)adaptor.BecomeRoot(MINUS215_tree, root_0);
            			    	        	}

            			    	        }
            			    	        break;

            			    	}

            			    	PushFollow(FOLLOW_multiplyExpression_in_additiveExpression4353);
            			    	multiplyExpression216 = multiplyExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, multiplyExpression216.Tree);

            			    }
            			    break;

            			default:
            			    goto loop86;
            	    }
            	} while (true);

            	loop86:
            		;	// Stops C# compiler whining that label 'loop86' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public class multiplyExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:776:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken STAR218 = null;
        IToken DIV219 = null;
        IToken MOD220 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression217 = default(EsperEPL2GrammarParser.unaryExpression_return);

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression221 = default(EsperEPL2GrammarParser.unaryExpression_return);


        CommonTree STAR218_tree=null;
        CommonTree DIV219_tree=null;
        CommonTree MOD220_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:777:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:777:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_unaryExpression_in_multiplyExpression4367);
            	unaryExpression217 = unaryExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unaryExpression217.Tree);
            	// EsperEPL2Grammar.g:777:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            	do 
            	{
            	    int alt88 = 2;
            	    alt88 = dfa88.Predict(input);
            	    switch (alt88) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:777:22: ( STAR | DIV | MOD ) unaryExpression
            			    {
            			    	// EsperEPL2Grammar.g:777:22: ( STAR | DIV | MOD )
            			    	int alt87 = 3;
            			    	switch ( input.LA(1) ) 
            			    	{
            			    	case STAR:
            			    		{
            			    	    alt87 = 1;
            			    	    }
            			    	    break;
            			    	case DIV:
            			    		{
            			    	    alt87 = 2;
            			    	    }
            			    	    break;
            			    	case MOD:
            			    		{
            			    	    alt87 = 3;
            			    	    }
            			    	    break;
            			    		default:
            			    		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    		    NoViableAltException nvae_d87s0 =
            			    		        new NoViableAltException("", 87, 0, input);

            			    		    throw nvae_d87s0;
            			    	}

            			    	switch (alt87) 
            			    	{
            			    	    case 1 :
            			    	        // EsperEPL2Grammar.g:777:23: STAR
            			    	        {
            			    	        	STAR218=(IToken)Match(input,STAR,FOLLOW_STAR_in_multiplyExpression4372); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{STAR218_tree = (CommonTree)adaptor.Create(STAR218);
            			    	        		root_0 = (CommonTree)adaptor.BecomeRoot(STAR218_tree, root_0);
            			    	        	}

            			    	        }
            			    	        break;
            			    	    case 2 :
            			    	        // EsperEPL2Grammar.g:777:29: DIV
            			    	        {
            			    	        	DIV219=(IToken)Match(input,DIV,FOLLOW_DIV_in_multiplyExpression4375); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{DIV219_tree = (CommonTree)adaptor.Create(DIV219);
            			    	        		root_0 = (CommonTree)adaptor.BecomeRoot(DIV219_tree, root_0);
            			    	        	}

            			    	        }
            			    	        break;
            			    	    case 3 :
            			    	        // EsperEPL2Grammar.g:777:34: MOD
            			    	        {
            			    	        	MOD220=(IToken)Match(input,MOD,FOLLOW_MOD_in_multiplyExpression4378); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{MOD220_tree = (CommonTree)adaptor.Create(MOD220);
            			    	        		root_0 = (CommonTree)adaptor.BecomeRoot(MOD220_tree, root_0);
            			    	        	}

            			    	        }
            			    	        break;

            			    	}

            			    	PushFollow(FOLLOW_unaryExpression_in_multiplyExpression4382);
            			    	unaryExpression221 = unaryExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unaryExpression221.Tree);

            			    }
            			    break;

            			default:
            			    goto loop88;
            	    }
            	} while (true);

            	loop88:
            		;	// Stops C# compiler whining that label 'loop88' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public class unaryExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:780:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public EsperEPL2GrammarParser.unaryExpression_return unaryExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken MINUS222 = null;
        IToken LPAREN226 = null;
        IToken RPAREN228 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty223 = default(EsperEPL2GrammarParser.eventProperty_return);

        EsperEPL2GrammarParser.constant_return constant224 = default(EsperEPL2GrammarParser.constant_return);

        EsperEPL2GrammarParser.substitution_return substitution225 = default(EsperEPL2GrammarParser.substitution_return);

        EsperEPL2GrammarParser.expression_return expression227 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction229 = default(EsperEPL2GrammarParser.eventPropertyOrLibFunction_return);

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc230 = default(EsperEPL2GrammarParser.builtinFunc_return);

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression231 = default(EsperEPL2GrammarParser.arrayExpression_return);

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression232 = default(EsperEPL2GrammarParser.subSelectExpression_return);

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression233 = default(EsperEPL2GrammarParser.existsSubSelectExpression_return);


        CommonTree MINUS222_tree=null;
        CommonTree LPAREN226_tree=null;
        CommonTree RPAREN228_tree=null;
        RewriteRuleTokenStream stream_MINUS = new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty = new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try 
    	{
            // EsperEPL2Grammar.g:781:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt89 = 9;
            alt89 = dfa89.Predict(input);
            switch (alt89) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:781:4: MINUS eventProperty
                    {
                    	MINUS222=(IToken)Match(input,MINUS,FOLLOW_MINUS_in_unaryExpression4397); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_MINUS.Add(MINUS222);

                    	PushFollow(FOLLOW_eventProperty_in_unaryExpression4399);
                    	eventProperty223 = eventProperty();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking==0 ) stream_eventProperty.Add(eventProperty223.Tree);


                    	// AST REWRITE
                    	// elements:          eventProperty
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 781:24: -> ^( UNARY_MINUS eventProperty )
                    	{
                    	    // EsperEPL2Grammar.g:781:27: ^( UNARY_MINUS eventProperty )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                    	    adaptor.AddChild(root_1, stream_eventProperty.NextTree());

                    	    adaptor.AddChild(root_0, root_1);
                    	    }

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:782:4: constant
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_constant_in_unaryExpression4412);
                    	constant224 = constant();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant224.Tree);

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:783:4: substitution
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_substitution_in_unaryExpression4417);
                    	substitution225 = substitution();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, substitution225.Tree);

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:784:4: LPAREN expression RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	LPAREN226=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression4422); if (state.failed) return retval;
                    	PushFollow(FOLLOW_expression_in_unaryExpression4425);
                    	expression227 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression227.Tree);
                    	RPAREN228=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression4427); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:785:4: eventPropertyOrLibFunction
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression4433);
                    	eventPropertyOrLibFunction229 = eventPropertyOrLibFunction();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, eventPropertyOrLibFunction229.Tree);

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:786:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	// EsperEPL2Grammar.g:786:21: ( builtinFunc )
                    	// EsperEPL2Grammar.g:786:22: builtinFunc
                    	{
                    		PushFollow(FOLLOW_builtinFunc_in_unaryExpression4445);
                    		builtinFunc230 = builtinFunc();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, builtinFunc230.Tree);

                    	}


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:787:4: arrayExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_arrayExpression_in_unaryExpression4451);
                    	arrayExpression231 = arrayExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arrayExpression231.Tree);

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:788:4: subSelectExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_subSelectExpression_in_unaryExpression4456);
                    	subSelectExpression232 = subSelectExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, subSelectExpression232.Tree);

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:789:4: existsSubSelectExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression4461);
                    	existsSubSelectExpression233 = existsSubSelectExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, existsSubSelectExpression233.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public class subSelectExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:792:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr234 = default(EsperEPL2GrammarParser.subQueryExpr_return);


        RewriteRuleSubtreeStream stream_subQueryExpr = new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try 
    	{
            // EsperEPL2Grammar.g:793:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:793:4: subQueryExpr
            {
            	PushFollow(FOLLOW_subQueryExpr_in_subSelectExpression4478);
            	subQueryExpr234 = subQueryExpr();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_subQueryExpr.Add(subQueryExpr234.Tree);


            	// AST REWRITE
            	// elements:          subQueryExpr
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 794:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            	{
            	    // EsperEPL2Grammar.g:794:6: ^( SUBSELECT_EXPR subQueryExpr )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_subQueryExpr.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public class existsSubSelectExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:797:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken EXISTS235 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr236 = default(EsperEPL2GrammarParser.subQueryExpr_return);


        CommonTree EXISTS235_tree=null;
        RewriteRuleTokenStream stream_EXISTS = new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr = new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try 
    	{
            // EsperEPL2Grammar.g:798:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:798:4: EXISTS subQueryExpr
            {
            	EXISTS235=(IToken)Match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression4500); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_EXISTS.Add(EXISTS235);

            	PushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression4502);
            	subQueryExpr236 = subQueryExpr();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_subQueryExpr.Add(subQueryExpr236.Tree);


            	// AST REWRITE
            	// elements:          subQueryExpr
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 799:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            	{
            	    // EsperEPL2Grammar.g:799:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_subQueryExpr.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public class subQueryExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:802:1: subQueryExpr : LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken LPAREN237 = null;
        IToken SELECT238 = null;
        IToken FROM240 = null;
        IToken WHERE242 = null;
        IToken RPAREN244 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement239 = default(EsperEPL2GrammarParser.selectionListElement_return);

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr241 = default(EsperEPL2GrammarParser.subSelectFilterExpr_return);

        EsperEPL2GrammarParser.whereClause_return whereClause243 = default(EsperEPL2GrammarParser.whereClause_return);


        CommonTree LPAREN237_tree=null;
        CommonTree SELECT238_tree=null;
        CommonTree FROM240_tree=null;
        CommonTree WHERE242_tree=null;
        CommonTree RPAREN244_tree=null;

         paraphrases.Push("subquery"); 
        try 
    	{
            // EsperEPL2Grammar.g:805:2: ( LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:805:4: LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	LPAREN237=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr4535); if (state.failed) return retval;
            	SELECT238=(IToken)Match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr4541); if (state.failed) return retval;
            	PushFollow(FOLLOW_selectionListElement_in_subQueryExpr4544);
            	selectionListElement239 = selectionListElement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, selectionListElement239.Tree);
            	FROM240=(IToken)Match(input,FROM,FOLLOW_FROM_in_subQueryExpr4551); if (state.failed) return retval;
            	PushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr4554);
            	subSelectFilterExpr241 = subSelectFilterExpr();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, subSelectFilterExpr241.Tree);
            	// EsperEPL2Grammar.g:808:6: ( WHERE whereClause )?
            	int alt90 = 2;
            	int LA90_0 = input.LA(1);

            	if ( (LA90_0 == WHERE) )
            	{
            	    alt90 = 1;
            	}
            	switch (alt90) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:808:7: WHERE whereClause
            	        {
            	        	WHERE242=(IToken)Match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr4562); if (state.failed) return retval;
            	        	PushFollow(FOLLOW_whereClause_in_subQueryExpr4565);
            	        	whereClause243 = whereClause();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, whereClause243.Tree);

            	        }
            	        break;

            	}

            	RPAREN244=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr4574); if (state.failed) return retval;

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public class subSelectFilterExpr_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:812:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ) ;
    public EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken i = null;
        IToken DOT246 = null;
        IToken DOT248 = null;
        IToken AS250 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression245 = default(EsperEPL2GrammarParser.eventFilterExpression_return);

        EsperEPL2GrammarParser.viewExpression_return viewExpression247 = default(EsperEPL2GrammarParser.viewExpression_return);

        EsperEPL2GrammarParser.viewExpression_return viewExpression249 = default(EsperEPL2GrammarParser.viewExpression_return);


        CommonTree i_tree=null;
        CommonTree DOT246_tree=null;
        CommonTree DOT248_tree=null;
        CommonTree AS250_tree=null;
        RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression = new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression = new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.Push("subquery filter specification"); 
        try 
    	{
            // EsperEPL2Grammar.g:815:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ) )
            // EsperEPL2Grammar.g:815:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )?
            {
            	PushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr4598);
            	eventFilterExpression245 = eventFilterExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_eventFilterExpression.Add(eventFilterExpression245.Tree);
            	// EsperEPL2Grammar.g:816:3: ( DOT viewExpression ( DOT viewExpression )* )?
            	int alt92 = 2;
            	int LA92_0 = input.LA(1);

            	if ( (LA92_0 == DOT) )
            	{
            	    alt92 = 1;
            	}
            	switch (alt92) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:816:4: DOT viewExpression ( DOT viewExpression )*
            	        {
            	        	DOT246=(IToken)Match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr4603); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_DOT.Add(DOT246);

            	        	PushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr4605);
            	        	viewExpression247 = viewExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_viewExpression.Add(viewExpression247.Tree);
            	        	// EsperEPL2Grammar.g:816:23: ( DOT viewExpression )*
            	        	do 
            	        	{
            	        	    int alt91 = 2;
            	        	    int LA91_0 = input.LA(1);

            	        	    if ( (LA91_0 == DOT) )
            	        	    {
            	        	        alt91 = 1;
            	        	    }


            	        	    switch (alt91) 
            	        		{
            	        			case 1 :
            	        			    // EsperEPL2Grammar.g:816:24: DOT viewExpression
            	        			    {
            	        			    	DOT248=(IToken)Match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr4608); if (state.failed) return retval; 
            	        			    	if ( state.backtracking==0 ) stream_DOT.Add(DOT248);

            	        			    	PushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr4610);
            	        			    	viewExpression249 = viewExpression();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking==0 ) stream_viewExpression.Add(viewExpression249.Tree);

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop91;
            	        	    }
            	        	} while (true);

            	        	loop91:
            	        		;	// Stops C# compiler whining that label 'loop91' has no statements


            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:816:47: ( AS i= IDENT | i= IDENT )?
            	int alt93 = 3;
            	int LA93_0 = input.LA(1);

            	if ( (LA93_0 == AS) )
            	{
            	    alt93 = 1;
            	}
            	else if ( (LA93_0 == IDENT) )
            	{
            	    alt93 = 2;
            	}
            	switch (alt93) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:816:48: AS i= IDENT
            	        {
            	        	AS250=(IToken)Match(input,AS,FOLLOW_AS_in_subSelectFilterExpr4617); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_AS.Add(AS250);

            	        	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr4621); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_IDENT.Add(i);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:816:61: i= IDENT
            	        {
            	        	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr4627); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_IDENT.Add(i);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          viewExpression, i, eventFilterExpression
            	// token labels:      i
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_i = new RewriteRuleTokenStream(adaptor, "token i", i);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 817:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? )
            	{
            	    // EsperEPL2Grammar.g:817:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STREAM_EXPR, "STREAM_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_eventFilterExpression.NextTree());
            	    // EsperEPL2Grammar.g:817:42: ( viewExpression )*
            	    while ( stream_viewExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_viewExpression.NextTree());

            	    }
            	    stream_viewExpression.Reset();
            	    // EsperEPL2Grammar.g:817:58: ( $i)?
            	    if ( stream_i.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_i.NextNode());

            	    }
            	    stream_i.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public class arrayExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:820:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public EsperEPL2GrammarParser.arrayExpression_return arrayExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken LCURLY251 = null;
        IToken COMMA253 = null;
        IToken RCURLY255 = null;
        EsperEPL2GrammarParser.expression_return expression252 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression254 = default(EsperEPL2GrammarParser.expression_return);


        CommonTree LCURLY251_tree=null;
        CommonTree COMMA253_tree=null;
        CommonTree RCURLY255_tree=null;
        RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try 
    	{
            // EsperEPL2Grammar.g:821:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:821:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            	LCURLY251=(IToken)Match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression4659); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_LCURLY.Add(LCURLY251);

            	// EsperEPL2Grammar.g:821:11: ( expression ( COMMA expression )* )?
            	int alt95 = 2;
            	alt95 = dfa95.Predict(input);
            	switch (alt95) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:821:12: expression ( COMMA expression )*
            	        {
            	        	PushFollow(FOLLOW_expression_in_arrayExpression4662);
            	        	expression252 = expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_expression.Add(expression252.Tree);
            	        	// EsperEPL2Grammar.g:821:23: ( COMMA expression )*
            	        	do 
            	        	{
            	        	    int alt94 = 2;
            	        	    int LA94_0 = input.LA(1);

            	        	    if ( (LA94_0 == COMMA) )
            	        	    {
            	        	        alt94 = 1;
            	        	    }


            	        	    switch (alt94) 
            	        		{
            	        			case 1 :
            	        			    // EsperEPL2Grammar.g:821:24: COMMA expression
            	        			    {
            	        			    	COMMA253=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_arrayExpression4665); if (state.failed) return retval; 
            	        			    	if ( state.backtracking==0 ) stream_COMMA.Add(COMMA253);

            	        			    	PushFollow(FOLLOW_expression_in_arrayExpression4667);
            	        			    	expression254 = expression();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking==0 ) stream_expression.Add(expression254.Tree);

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop94;
            	        	    }
            	        	} while (true);

            	        	loop94:
            	        		;	// Stops C# compiler whining that label 'loop94' has no statements


            	        }
            	        break;

            	}

            	RCURLY255=(IToken)Match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression4674); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_RCURLY.Add(RCURLY255);



            	// AST REWRITE
            	// elements:          expression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 822:4: -> ^( ARRAY_EXPR ( expression )* )
            	{
            	    // EsperEPL2Grammar.g:822:7: ^( ARRAY_EXPR ( expression )* )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:822:20: ( expression )*
            	    while ( stream_expression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_expression.NextTree());

            	    }
            	    stream_expression.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public class builtinFunc_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:825:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public EsperEPL2GrammarParser.builtinFunc_return builtinFunc() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken SUM256 = null;
        IToken LPAREN257 = null;
        IToken ALL258 = null;
        IToken DISTINCT259 = null;
        IToken RPAREN261 = null;
        IToken AVG262 = null;
        IToken LPAREN263 = null;
        IToken ALL264 = null;
        IToken DISTINCT265 = null;
        IToken RPAREN267 = null;
        IToken COUNT268 = null;
        IToken LPAREN269 = null;
        IToken ALL270 = null;
        IToken DISTINCT271 = null;
        IToken STAR273 = null;
        IToken RPAREN274 = null;
        IToken MEDIAN275 = null;
        IToken LPAREN276 = null;
        IToken ALL277 = null;
        IToken DISTINCT278 = null;
        IToken RPAREN280 = null;
        IToken STDDEV281 = null;
        IToken LPAREN282 = null;
        IToken ALL283 = null;
        IToken DISTINCT284 = null;
        IToken RPAREN286 = null;
        IToken AVEDEV287 = null;
        IToken LPAREN288 = null;
        IToken ALL289 = null;
        IToken DISTINCT290 = null;
        IToken RPAREN292 = null;
        IToken COALESCE293 = null;
        IToken LPAREN294 = null;
        IToken COMMA296 = null;
        IToken COMMA298 = null;
        IToken RPAREN300 = null;
        IToken PREVIOUS301 = null;
        IToken LPAREN302 = null;
        IToken COMMA304 = null;
        IToken RPAREN306 = null;
        IToken PRIOR307 = null;
        IToken LPAREN308 = null;
        IToken NUM_INT309 = null;
        IToken COMMA310 = null;
        IToken RPAREN312 = null;
        IToken INSTANCEOF313 = null;
        IToken LPAREN314 = null;
        IToken COMMA316 = null;
        IToken COMMA318 = null;
        IToken RPAREN320 = null;
        IToken CAST321 = null;
        IToken LPAREN322 = null;
        IToken COMMA324 = null;
        IToken AS325 = null;
        IToken RPAREN327 = null;
        IToken EXISTS328 = null;
        IToken LPAREN329 = null;
        IToken RPAREN331 = null;
        IToken CURRENT_TIMESTAMP332 = null;
        IToken LPAREN333 = null;
        IToken RPAREN334 = null;
        EsperEPL2GrammarParser.expression_return expression260 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression266 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression272 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression279 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression285 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression291 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression295 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression297 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression299 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression303 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.eventProperty_return eventProperty305 = default(EsperEPL2GrammarParser.eventProperty_return);

        EsperEPL2GrammarParser.eventProperty_return eventProperty311 = default(EsperEPL2GrammarParser.eventProperty_return);

        EsperEPL2GrammarParser.expression_return expression315 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier317 = default(EsperEPL2GrammarParser.classIdentifier_return);

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier319 = default(EsperEPL2GrammarParser.classIdentifier_return);

        EsperEPL2GrammarParser.expression_return expression323 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier326 = default(EsperEPL2GrammarParser.classIdentifier_return);

        EsperEPL2GrammarParser.eventProperty_return eventProperty330 = default(EsperEPL2GrammarParser.eventProperty_return);


        CommonTree SUM256_tree=null;
        CommonTree LPAREN257_tree=null;
        CommonTree ALL258_tree=null;
        CommonTree DISTINCT259_tree=null;
        CommonTree RPAREN261_tree=null;
        CommonTree AVG262_tree=null;
        CommonTree LPAREN263_tree=null;
        CommonTree ALL264_tree=null;
        CommonTree DISTINCT265_tree=null;
        CommonTree RPAREN267_tree=null;
        CommonTree COUNT268_tree=null;
        CommonTree LPAREN269_tree=null;
        CommonTree ALL270_tree=null;
        CommonTree DISTINCT271_tree=null;
        CommonTree STAR273_tree=null;
        CommonTree RPAREN274_tree=null;
        CommonTree MEDIAN275_tree=null;
        CommonTree LPAREN276_tree=null;
        CommonTree ALL277_tree=null;
        CommonTree DISTINCT278_tree=null;
        CommonTree RPAREN280_tree=null;
        CommonTree STDDEV281_tree=null;
        CommonTree LPAREN282_tree=null;
        CommonTree ALL283_tree=null;
        CommonTree DISTINCT284_tree=null;
        CommonTree RPAREN286_tree=null;
        CommonTree AVEDEV287_tree=null;
        CommonTree LPAREN288_tree=null;
        CommonTree ALL289_tree=null;
        CommonTree DISTINCT290_tree=null;
        CommonTree RPAREN292_tree=null;
        CommonTree COALESCE293_tree=null;
        CommonTree LPAREN294_tree=null;
        CommonTree COMMA296_tree=null;
        CommonTree COMMA298_tree=null;
        CommonTree RPAREN300_tree=null;
        CommonTree PREVIOUS301_tree=null;
        CommonTree LPAREN302_tree=null;
        CommonTree COMMA304_tree=null;
        CommonTree RPAREN306_tree=null;
        CommonTree PRIOR307_tree=null;
        CommonTree LPAREN308_tree=null;
        CommonTree NUM_INT309_tree=null;
        CommonTree COMMA310_tree=null;
        CommonTree RPAREN312_tree=null;
        CommonTree INSTANCEOF313_tree=null;
        CommonTree LPAREN314_tree=null;
        CommonTree COMMA316_tree=null;
        CommonTree COMMA318_tree=null;
        CommonTree RPAREN320_tree=null;
        CommonTree CAST321_tree=null;
        CommonTree LPAREN322_tree=null;
        CommonTree COMMA324_tree=null;
        CommonTree AS325_tree=null;
        CommonTree RPAREN327_tree=null;
        CommonTree EXISTS328_tree=null;
        CommonTree LPAREN329_tree=null;
        CommonTree RPAREN331_tree=null;
        CommonTree CURRENT_TIMESTAMP332_tree=null;
        CommonTree LPAREN333_tree=null;
        CommonTree RPAREN334_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:826:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt107 = 13;
            alt107 = dfa107.Predict(input);
            switch (alt107) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:826:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	SUM256=(IToken)Match(input,SUM,FOLLOW_SUM_in_builtinFunc4697); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{SUM256_tree = (CommonTree)adaptor.Create(SUM256);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(SUM256_tree, root_0);
                    	}
                    	LPAREN257=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc4700); if (state.failed) return retval;
                    	// EsperEPL2Grammar.g:826:17: ( ALL | DISTINCT )?
                    	int alt96 = 3;
                    	alt96 = dfa96.Predict(input);
                    	switch (alt96) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:826:18: ALL
                    	        {
                    	        	ALL258=(IToken)Match(input,ALL,FOLLOW_ALL_in_builtinFunc4704); if (state.failed) return retval;

                    	        }
                    	        break;
                    	    case 2 :
                    	        // EsperEPL2Grammar.g:826:25: DISTINCT
                    	        {
                    	        	DISTINCT259=(IToken)Match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc4709); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{DISTINCT259_tree = (CommonTree)adaptor.Create(DISTINCT259);
                    	        		adaptor.AddChild(root_0, DISTINCT259_tree);
                    	        	}

                    	        }
                    	        break;

                    	}

                    	PushFollow(FOLLOW_expression_in_builtinFunc4713);
                    	expression260 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression260.Tree);
                    	RPAREN261=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc4715); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:827:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	AVG262=(IToken)Match(input,AVG,FOLLOW_AVG_in_builtinFunc4721); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{AVG262_tree = (CommonTree)adaptor.Create(AVG262);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(AVG262_tree, root_0);
                    	}
                    	LPAREN263=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc4724); if (state.failed) return retval;
                    	// EsperEPL2Grammar.g:827:17: ( ALL | DISTINCT )?
                    	int alt97 = 3;
                    	alt97 = dfa97.Predict(input);
                    	switch (alt97) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:827:18: ALL
                    	        {
                    	        	ALL264=(IToken)Match(input,ALL,FOLLOW_ALL_in_builtinFunc4728); if (state.failed) return retval;

                    	        }
                    	        break;
                    	    case 2 :
                    	        // EsperEPL2Grammar.g:827:25: DISTINCT
                    	        {
                    	        	DISTINCT265=(IToken)Match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc4733); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{DISTINCT265_tree = (CommonTree)adaptor.Create(DISTINCT265);
                    	        		adaptor.AddChild(root_0, DISTINCT265_tree);
                    	        	}

                    	        }
                    	        break;

                    	}

                    	PushFollow(FOLLOW_expression_in_builtinFunc4737);
                    	expression266 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression266.Tree);
                    	RPAREN267=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc4739); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:828:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	COUNT268=(IToken)Match(input,COUNT,FOLLOW_COUNT_in_builtinFunc4745); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{COUNT268_tree = (CommonTree)adaptor.Create(COUNT268);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(COUNT268_tree, root_0);
                    	}
                    	LPAREN269=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc4748); if (state.failed) return retval;
                    	// EsperEPL2Grammar.g:829:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    	int alt99 = 2;
                    	alt99 = dfa99.Predict(input);
                    	switch (alt99) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:830:4: ( ( ALL | DISTINCT )? expression )
                    	        {
                    	        	// EsperEPL2Grammar.g:830:4: ( ( ALL | DISTINCT )? expression )
                    	        	// EsperEPL2Grammar.g:830:5: ( ALL | DISTINCT )? expression
                    	        	{
                    	        		// EsperEPL2Grammar.g:830:5: ( ALL | DISTINCT )?
                    	        		int alt98 = 3;
                    	        		alt98 = dfa98.Predict(input);
                    	        		switch (alt98) 
                    	        		{
                    	        		    case 1 :
                    	        		        // EsperEPL2Grammar.g:830:6: ALL
                    	        		        {
                    	        		        	ALL270=(IToken)Match(input,ALL,FOLLOW_ALL_in_builtinFunc4760); if (state.failed) return retval;

                    	        		        }
                    	        		        break;
                    	        		    case 2 :
                    	        		        // EsperEPL2Grammar.g:830:13: DISTINCT
                    	        		        {
                    	        		        	DISTINCT271=(IToken)Match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc4765); if (state.failed) return retval;
                    	        		        	if ( state.backtracking == 0 )
                    	        		        	{DISTINCT271_tree = (CommonTree)adaptor.Create(DISTINCT271);
                    	        		        		adaptor.AddChild(root_0, DISTINCT271_tree);
                    	        		        	}

                    	        		        }
                    	        		        break;

                    	        		}

                    	        		PushFollow(FOLLOW_expression_in_builtinFunc4769);
                    	        		expression272 = expression();
                    	        		state.followingStackPointer--;
                    	        		if (state.failed) return retval;
                    	        		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression272.Tree);

                    	        	}


                    	        }
                    	        break;
                    	    case 2 :
                    	        // EsperEPL2Grammar.g:832:4: ( STAR )
                    	        {
                    	        	// EsperEPL2Grammar.g:832:4: ( STAR )
                    	        	// EsperEPL2Grammar.g:832:5: STAR
                    	        	{
                    	        		STAR273=(IToken)Match(input,STAR,FOLLOW_STAR_in_builtinFunc4780); if (state.failed) return retval;

                    	        	}


                    	        }
                    	        break;

                    	}

                    	RPAREN274=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc4791); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:835:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	MEDIAN275=(IToken)Match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc4797); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{MEDIAN275_tree = (CommonTree)adaptor.Create(MEDIAN275);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(MEDIAN275_tree, root_0);
                    	}
                    	LPAREN276=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc4800); if (state.failed) return retval;
                    	// EsperEPL2Grammar.g:835:20: ( ALL | DISTINCT )?
                    	int alt100 = 3;
                    	alt100 = dfa100.Predict(input);
                    	switch (alt100) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:835:21: ALL
                    	        {
                    	        	ALL277=(IToken)Match(input,ALL,FOLLOW_ALL_in_builtinFunc4804); if (state.failed) return retval;

                    	        }
                    	        break;
                    	    case 2 :
                    	        // EsperEPL2Grammar.g:835:28: DISTINCT
                    	        {
                    	        	DISTINCT278=(IToken)Match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc4809); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{DISTINCT278_tree = (CommonTree)adaptor.Create(DISTINCT278);
                    	        		adaptor.AddChild(root_0, DISTINCT278_tree);
                    	        	}

                    	        }
                    	        break;

                    	}

                    	PushFollow(FOLLOW_expression_in_builtinFunc4813);
                    	expression279 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression279.Tree);
                    	RPAREN280=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc4815); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:836:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	STDDEV281=(IToken)Match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc4821); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{STDDEV281_tree = (CommonTree)adaptor.Create(STDDEV281);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(STDDEV281_tree, root_0);
                    	}
                    	LPAREN282=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc4824); if (state.failed) return retval;
                    	// EsperEPL2Grammar.g:836:20: ( ALL | DISTINCT )?
                    	int alt101 = 3;
                    	alt101 = dfa101.Predict(input);
                    	switch (alt101) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:836:21: ALL
                    	        {
                    	        	ALL283=(IToken)Match(input,ALL,FOLLOW_ALL_in_builtinFunc4828); if (state.failed) return retval;

                    	        }
                    	        break;
                    	    case 2 :
                    	        // EsperEPL2Grammar.g:836:28: DISTINCT
                    	        {
                    	        	DISTINCT284=(IToken)Match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc4833); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{DISTINCT284_tree = (CommonTree)adaptor.Create(DISTINCT284);
                    	        		adaptor.AddChild(root_0, DISTINCT284_tree);
                    	        	}

                    	        }
                    	        break;

                    	}

                    	PushFollow(FOLLOW_expression_in_builtinFunc4837);
                    	expression285 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression285.Tree);
                    	RPAREN286=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc4839); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:837:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	AVEDEV287=(IToken)Match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc4845); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{AVEDEV287_tree = (CommonTree)adaptor.Create(AVEDEV287);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(AVEDEV287_tree, root_0);
                    	}
                    	LPAREN288=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc4848); if (state.failed) return retval;
                    	// EsperEPL2Grammar.g:837:20: ( ALL | DISTINCT )?
                    	int alt102 = 3;
                    	alt102 = dfa102.Predict(input);
                    	switch (alt102) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:837:21: ALL
                    	        {
                    	        	ALL289=(IToken)Match(input,ALL,FOLLOW_ALL_in_builtinFunc4852); if (state.failed) return retval;

                    	        }
                    	        break;
                    	    case 2 :
                    	        // EsperEPL2Grammar.g:837:28: DISTINCT
                    	        {
                    	        	DISTINCT290=(IToken)Match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc4857); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{DISTINCT290_tree = (CommonTree)adaptor.Create(DISTINCT290);
                    	        		adaptor.AddChild(root_0, DISTINCT290_tree);
                    	        	}

                    	        }
                    	        break;

                    	}

                    	PushFollow(FOLLOW_expression_in_builtinFunc4861);
                    	expression291 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression291.Tree);
                    	RPAREN292=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc4863); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:838:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	COALESCE293=(IToken)Match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc4869); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{COALESCE293_tree = (CommonTree)adaptor.Create(COALESCE293);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(COALESCE293_tree, root_0);
                    	}
                    	LPAREN294=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc4872); if (state.failed) return retval;
                    	PushFollow(FOLLOW_expression_in_builtinFunc4875);
                    	expression295 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression295.Tree);
                    	COMMA296=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_builtinFunc4877); if (state.failed) return retval;
                    	PushFollow(FOLLOW_expression_in_builtinFunc4880);
                    	expression297 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression297.Tree);
                    	// EsperEPL2Grammar.g:838:51: ( COMMA expression )*
                    	do 
                    	{
                    	    int alt103 = 2;
                    	    int LA103_0 = input.LA(1);

                    	    if ( (LA103_0 == COMMA) )
                    	    {
                    	        alt103 = 1;
                    	    }


                    	    switch (alt103) 
                    		{
                    			case 1 :
                    			    // EsperEPL2Grammar.g:838:52: COMMA expression
                    			    {
                    			    	COMMA298=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_builtinFunc4883); if (state.failed) return retval;
                    			    	PushFollow(FOLLOW_expression_in_builtinFunc4886);
                    			    	expression299 = expression();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression299.Tree);

                    			    }
                    			    break;

                    			default:
                    			    goto loop103;
                    	    }
                    	} while (true);

                    	loop103:
                    		;	// Stops C# compiler whining that label 'loop103' has no statements

                    	RPAREN300=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc4890); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:839:4: PREVIOUS LPAREN expression COMMA eventProperty RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PREVIOUS301=(IToken)Match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc4896); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{PREVIOUS301_tree = (CommonTree)adaptor.Create(PREVIOUS301);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(PREVIOUS301_tree, root_0);
                    	}
                    	LPAREN302=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc4899); if (state.failed) return retval;
                    	PushFollow(FOLLOW_expression_in_builtinFunc4902);
                    	expression303 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression303.Tree);
                    	COMMA304=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_builtinFunc4904); if (state.failed) return retval;
                    	PushFollow(FOLLOW_eventProperty_in_builtinFunc4907);
                    	eventProperty305 = eventProperty();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, eventProperty305.Tree);
                    	RPAREN306=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc4909); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:840:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PRIOR307=(IToken)Match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc4915); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{PRIOR307_tree = (CommonTree)adaptor.Create(PRIOR307);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(PRIOR307_tree, root_0);
                    	}
                    	LPAREN308=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc4918); if (state.failed) return retval;
                    	NUM_INT309=(IToken)Match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc4921); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{NUM_INT309_tree = (CommonTree)adaptor.Create(NUM_INT309);
                    		adaptor.AddChild(root_0, NUM_INT309_tree);
                    	}
                    	COMMA310=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_builtinFunc4923); if (state.failed) return retval;
                    	PushFollow(FOLLOW_eventProperty_in_builtinFunc4926);
                    	eventProperty311 = eventProperty();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, eventProperty311.Tree);
                    	RPAREN312=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc4928); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:843:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	INSTANCEOF313=(IToken)Match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc4938); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{INSTANCEOF313_tree = (CommonTree)adaptor.Create(INSTANCEOF313);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(INSTANCEOF313_tree, root_0);
                    	}
                    	LPAREN314=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc4941); if (state.failed) return retval;
                    	PushFollow(FOLLOW_expression_in_builtinFunc4944);
                    	expression315 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression315.Tree);
                    	COMMA316=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_builtinFunc4946); if (state.failed) return retval;
                    	PushFollow(FOLLOW_classIdentifier_in_builtinFunc4949);
                    	classIdentifier317 = classIdentifier();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, classIdentifier317.Tree);
                    	// EsperEPL2Grammar.g:843:58: ( COMMA classIdentifier )*
                    	do 
                    	{
                    	    int alt104 = 2;
                    	    int LA104_0 = input.LA(1);

                    	    if ( (LA104_0 == COMMA) )
                    	    {
                    	        alt104 = 1;
                    	    }


                    	    switch (alt104) 
                    		{
                    			case 1 :
                    			    // EsperEPL2Grammar.g:843:59: COMMA classIdentifier
                    			    {
                    			    	COMMA318=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_builtinFunc4952); if (state.failed) return retval;
                    			    	PushFollow(FOLLOW_classIdentifier_in_builtinFunc4955);
                    			    	classIdentifier319 = classIdentifier();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, classIdentifier319.Tree);

                    			    }
                    			    break;

                    			default:
                    			    goto loop104;
                    	    }
                    	} while (true);

                    	loop104:
                    		;	// Stops C# compiler whining that label 'loop104' has no statements

                    	RPAREN320=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc4959); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:844:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	CAST321=(IToken)Match(input,CAST,FOLLOW_CAST_in_builtinFunc4965); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{CAST321_tree = (CommonTree)adaptor.Create(CAST321);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(CAST321_tree, root_0);
                    	}
                    	LPAREN322=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc4968); if (state.failed) return retval;
                    	PushFollow(FOLLOW_expression_in_builtinFunc4971);
                    	expression323 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression323.Tree);
                    	// EsperEPL2Grammar.g:844:29: ( COMMA | AS )
                    	int alt105 = 2;
                    	int LA105_0 = input.LA(1);

                    	if ( (LA105_0 == COMMA) )
                    	{
                    	    alt105 = 1;
                    	}
                    	else if ( (LA105_0 == AS) )
                    	{
                    	    alt105 = 2;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d105s0 =
                    	        new NoViableAltException("", 105, 0, input);

                    	    throw nvae_d105s0;
                    	}
                    	switch (alt105) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:844:30: COMMA
                    	        {
                    	        	COMMA324=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_builtinFunc4974); if (state.failed) return retval;

                    	        }
                    	        break;
                    	    case 2 :
                    	        // EsperEPL2Grammar.g:844:39: AS
                    	        {
                    	        	AS325=(IToken)Match(input,AS,FOLLOW_AS_in_builtinFunc4979); if (state.failed) return retval;

                    	        }
                    	        break;

                    	}

                    	PushFollow(FOLLOW_classIdentifier_in_builtinFunc4983);
                    	classIdentifier326 = classIdentifier();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, classIdentifier326.Tree);
                    	RPAREN327=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc4985); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:845:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	EXISTS328=(IToken)Match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc4991); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{EXISTS328_tree = (CommonTree)adaptor.Create(EXISTS328);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(EXISTS328_tree, root_0);
                    	}
                    	LPAREN329=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc4994); if (state.failed) return retval;
                    	PushFollow(FOLLOW_eventProperty_in_builtinFunc4997);
                    	eventProperty330 = eventProperty();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, eventProperty330.Tree);
                    	RPAREN331=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc4999); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:846:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	CURRENT_TIMESTAMP332=(IToken)Match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc5005); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{CURRENT_TIMESTAMP332_tree = (CommonTree)adaptor.Create(CURRENT_TIMESTAMP332);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(CURRENT_TIMESTAMP332_tree, root_0);
                    	}
                    	// EsperEPL2Grammar.g:846:23: ( LPAREN RPAREN )?
                    	int alt106 = 2;
                    	alt106 = dfa106.Predict(input);
                    	switch (alt106) 
                    	{
                    	    case 1 :
                    	        // EsperEPL2Grammar.g:846:24: LPAREN RPAREN
                    	        {
                    	        	LPAREN333=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5009); if (state.failed) return retval;
                    	        	RPAREN334=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5012); if (state.failed) return retval;

                    	        }
                    	        break;

                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public class maxFunc_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:849:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public EsperEPL2GrammarParser.maxFunc_return maxFunc() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken MAX335 = null;
        IToken MIN336 = null;
        IToken LPAREN337 = null;
        IToken COMMA339 = null;
        IToken COMMA341 = null;
        IToken RPAREN343 = null;
        EsperEPL2GrammarParser.expression_return expression338 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression340 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression342 = default(EsperEPL2GrammarParser.expression_return);


        CommonTree MAX335_tree=null;
        CommonTree MIN336_tree=null;
        CommonTree LPAREN337_tree=null;
        CommonTree COMMA339_tree=null;
        CommonTree COMMA341_tree=null;
        CommonTree RPAREN343_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:850:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:850:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	// EsperEPL2Grammar.g:850:4: ( MAX | MIN )
            	int alt108 = 2;
            	int LA108_0 = input.LA(1);

            	if ( (LA108_0 == MAX) )
            	{
            	    alt108 = 1;
            	}
            	else if ( (LA108_0 == MIN) )
            	{
            	    alt108 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d108s0 =
            	        new NoViableAltException("", 108, 0, input);

            	    throw nvae_d108s0;
            	}
            	switch (alt108) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:850:5: MAX
            	        {
            	        	MAX335=(IToken)Match(input,MAX,FOLLOW_MAX_in_maxFunc5028); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{MAX335_tree = (CommonTree)adaptor.Create(MAX335);
            	        		root_0 = (CommonTree)adaptor.BecomeRoot(MAX335_tree, root_0);
            	        	}

            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:850:12: MIN
            	        {
            	        	MIN336=(IToken)Match(input,MIN,FOLLOW_MIN_in_maxFunc5033); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{MIN336_tree = (CommonTree)adaptor.Create(MIN336);
            	        		root_0 = (CommonTree)adaptor.BecomeRoot(MIN336_tree, root_0);
            	        	}

            	        }
            	        break;

            	}

            	LPAREN337=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc5037); if (state.failed) return retval;
            	PushFollow(FOLLOW_expression_in_maxFunc5040);
            	expression338 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression338.Tree);
            	// EsperEPL2Grammar.g:850:37: ( COMMA expression ( COMMA expression )* )?
            	int alt110 = 2;
            	int LA110_0 = input.LA(1);

            	if ( (LA110_0 == COMMA) )
            	{
            	    alt110 = 1;
            	}
            	switch (alt110) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:850:38: COMMA expression ( COMMA expression )*
            	        {
            	        	COMMA339=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_maxFunc5043); if (state.failed) return retval;
            	        	PushFollow(FOLLOW_expression_in_maxFunc5046);
            	        	expression340 = expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression340.Tree);
            	        	// EsperEPL2Grammar.g:850:56: ( COMMA expression )*
            	        	do 
            	        	{
            	        	    int alt109 = 2;
            	        	    int LA109_0 = input.LA(1);

            	        	    if ( (LA109_0 == COMMA) )
            	        	    {
            	        	        alt109 = 1;
            	        	    }


            	        	    switch (alt109) 
            	        		{
            	        			case 1 :
            	        			    // EsperEPL2Grammar.g:850:57: COMMA expression
            	        			    {
            	        			    	COMMA341=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_maxFunc5049); if (state.failed) return retval;
            	        			    	PushFollow(FOLLOW_expression_in_maxFunc5052);
            	        			    	expression342 = expression();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression342.Tree);

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop109;
            	        	    }
            	        	} while (true);

            	        	loop109:
            	        		;	// Stops C# compiler whining that label 'loop109' has no statements


            	        }
            	        break;

            	}

            	RPAREN343=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc5059); if (state.failed) return retval;

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public class eventPropertyOrLibFunction_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:853:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty344 = default(EsperEPL2GrammarParser.eventProperty_return);

        EsperEPL2GrammarParser.libFunction_return libFunction345 = default(EsperEPL2GrammarParser.libFunction_return);



        try 
    	{
            // EsperEPL2Grammar.g:854:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt111 = 2;
            alt111 = dfa111.Predict(input);
            switch (alt111) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:854:4: ( eventProperty )=> eventProperty
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction5078);
                    	eventProperty344 = eventProperty();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, eventProperty344.Tree);

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:855:4: libFunction
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction5083);
                    	libFunction345 = libFunction();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, libFunction345.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public class libFunction_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:858:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public EsperEPL2GrammarParser.libFunction_return libFunction() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken DOT347 = null;
        IToken LPAREN349 = null;
        IToken RPAREN351 = null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy346 = default(EsperEPL2GrammarParser.classIdentifierNonGreedy_return);

        EsperEPL2GrammarParser.funcIdent_return funcIdent348 = default(EsperEPL2GrammarParser.funcIdent_return);

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs350 = default(EsperEPL2GrammarParser.libFunctionArgs_return);


        CommonTree DOT347_tree=null;
        CommonTree LPAREN349_tree=null;
        CommonTree RPAREN351_tree=null;
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs = new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy = new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent = new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try 
    	{
            // EsperEPL2Grammar.g:859:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:859:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            	// EsperEPL2Grammar.g:859:4: ( classIdentifierNonGreedy DOT )?
            	int alt112 = 2;
            	int LA112_0 = input.LA(1);

            	if ( (LA112_0 == IDENT) )
            	{
            	    int LA112_1 = input.LA(2);

            	    if ( (LA112_1 == DOT) )
            	    {
            	        alt112 = 1;
            	    }
            	}
            	switch (alt112) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:859:5: classIdentifierNonGreedy DOT
            	        {
            	        	PushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction5096);
            	        	classIdentifierNonGreedy346 = classIdentifierNonGreedy();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.Add(classIdentifierNonGreedy346.Tree);
            	        	DOT347=(IToken)Match(input,DOT,FOLLOW_DOT_in_libFunction5098); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_DOT.Add(DOT347);


            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_funcIdent_in_libFunction5102);
            	funcIdent348 = funcIdent();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_funcIdent.Add(funcIdent348.Tree);
            	LPAREN349=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_libFunction5104); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_LPAREN.Add(LPAREN349);

            	// EsperEPL2Grammar.g:859:53: ( libFunctionArgs )?
            	int alt113 = 2;
            	alt113 = dfa113.Predict(input);
            	switch (alt113) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:859:54: libFunctionArgs
            	        {
            	        	PushFollow(FOLLOW_libFunctionArgs_in_libFunction5107);
            	        	libFunctionArgs350 = libFunctionArgs();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_libFunctionArgs.Add(libFunctionArgs350.Tree);

            	        }
            	        break;

            	}

            	RPAREN351=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_libFunction5111); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_RPAREN.Add(RPAREN351);



            	// AST REWRITE
            	// elements:          classIdentifierNonGreedy, libFunctionArgs, funcIdent
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 860:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            	{
            	    // EsperEPL2Grammar.g:860:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

            	    // EsperEPL2Grammar.g:860:22: ( classIdentifierNonGreedy )?
            	    if ( stream_classIdentifierNonGreedy.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_classIdentifierNonGreedy.NextTree());

            	    }
            	    stream_classIdentifierNonGreedy.Reset();
            	    adaptor.AddChild(root_1, stream_funcIdent.NextTree());
            	    // EsperEPL2Grammar.g:860:58: ( libFunctionArgs )?
            	    if ( stream_libFunctionArgs.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_libFunctionArgs.NextTree());

            	    }
            	    stream_libFunctionArgs.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public class funcIdent_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:863:1: funcIdent : ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public EsperEPL2GrammarParser.funcIdent_return funcIdent() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken max = null;
        IToken min = null;
        IToken IDENT352 = null;

        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree IDENT352_tree=null;
        RewriteRuleTokenStream stream_MAX = new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN = new RewriteRuleTokenStream(adaptor,"token MIN");

        try 
    	{
            // EsperEPL2Grammar.g:864:2: ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt114 = 3;
            switch ( input.LA(1) ) 
            {
            case IDENT:
            	{
                alt114 = 1;
                }
                break;
            case MAX:
            	{
                alt114 = 2;
                }
                break;
            case MIN:
            	{
                alt114 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d114s0 =
            	        new NoViableAltException("", 114, 0, input);

            	    throw nvae_d114s0;
            }

            switch (alt114) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:864:4: IDENT
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	IDENT352=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_funcIdent5141); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{IDENT352_tree = (CommonTree)adaptor.Create(IDENT352);
                    		adaptor.AddChild(root_0, IDENT352_tree);
                    	}

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:865:4: max= MAX
                    {
                    	max=(IToken)Match(input,MAX,FOLLOW_MAX_in_funcIdent5148); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_MAX.Add(max);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 865:12: -> IDENT[$max]
                    	{
                    	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENT, max));

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:866:4: min= MIN
                    {
                    	min=(IToken)Match(input,MIN,FOLLOW_MIN_in_funcIdent5160); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_MIN.Add(min);



                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 866:12: -> IDENT[$min]
                    	{
                    	    adaptor.AddChild(root_0, (CommonTree)adaptor.Create(IDENT, min));

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public class libFunctionArgs_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:869:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken ALL353 = null;
        IToken DISTINCT354 = null;
        IToken COMMA356 = null;
        EsperEPL2GrammarParser.expression_return expression355 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression357 = default(EsperEPL2GrammarParser.expression_return);


        CommonTree ALL353_tree=null;
        CommonTree DISTINCT354_tree=null;
        CommonTree COMMA356_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:870:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:870:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	// EsperEPL2Grammar.g:870:4: ( ALL | DISTINCT )?
            	int alt115 = 3;
            	alt115 = dfa115.Predict(input);
            	switch (alt115) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:870:5: ALL
            	        {
            	        	ALL353=(IToken)Match(input,ALL,FOLLOW_ALL_in_libFunctionArgs5178); if (state.failed) return retval;

            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:870:12: DISTINCT
            	        {
            	        	DISTINCT354=(IToken)Match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs5183); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{DISTINCT354_tree = (CommonTree)adaptor.Create(DISTINCT354);
            	        		adaptor.AddChild(root_0, DISTINCT354_tree);
            	        	}

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_expression_in_libFunctionArgs5187);
            	expression355 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression355.Tree);
            	// EsperEPL2Grammar.g:870:34: ( COMMA expression )*
            	do 
            	{
            	    int alt116 = 2;
            	    int LA116_0 = input.LA(1);

            	    if ( (LA116_0 == COMMA) )
            	    {
            	        alt116 = 1;
            	    }


            	    switch (alt116) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:870:35: COMMA expression
            			    {
            			    	COMMA356=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs5190); if (state.failed) return retval;
            			    	PushFollow(FOLLOW_expression_in_libFunctionArgs5193);
            			    	expression357 = expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression357.Tree);

            			    }
            			    break;

            			default:
            			    goto loop116;
            	    }
            	} while (true);

            	loop116:
            		;	// Stops C# compiler whining that label 'loop116' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public class betweenList_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:873:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public EsperEPL2GrammarParser.betweenList_return betweenList() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken AND_EXPR359 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr358 = default(EsperEPL2GrammarParser.concatenationExpr_return);

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr360 = default(EsperEPL2GrammarParser.concatenationExpr_return);


        CommonTree AND_EXPR359_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:874:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:874:4: concatenationExpr AND_EXPR concatenationExpr
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_concatenationExpr_in_betweenList5207);
            	concatenationExpr358 = concatenationExpr();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, concatenationExpr358.Tree);
            	AND_EXPR359=(IToken)Match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList5209); if (state.failed) return retval;
            	PushFollow(FOLLOW_concatenationExpr_in_betweenList5212);
            	concatenationExpr360 = concatenationExpr();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, concatenationExpr360.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public class patternExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:883:1: patternExpression : followedByExpression ;
    public EsperEPL2GrammarParser.patternExpression_return patternExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression361 = default(EsperEPL2GrammarParser.followedByExpression_return);



         paraphrases.Push("pattern expression"); 
        try 
    	{
            // EsperEPL2Grammar.g:886:2: ( followedByExpression )
            // EsperEPL2Grammar.g:886:4: followedByExpression
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_followedByExpression_in_patternExpression5240);
            	followedByExpression361 = followedByExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, followedByExpression361.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public class followedByExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:889:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public EsperEPL2GrammarParser.followedByExpression_return followedByExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken f = null;
        EsperEPL2GrammarParser.orExpression_return orExpression362 = default(EsperEPL2GrammarParser.orExpression_return);

        EsperEPL2GrammarParser.orExpression_return orExpression363 = default(EsperEPL2GrammarParser.orExpression_return);


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY = new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression = new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try 
    	{
            // EsperEPL2Grammar.g:890:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:890:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            	PushFollow(FOLLOW_orExpression_in_followedByExpression5252);
            	orExpression362 = orExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_orExpression.Add(orExpression362.Tree);
            	// EsperEPL2Grammar.g:890:17: (f= FOLLOWED_BY orExpression )*
            	do 
            	{
            	    int alt117 = 2;
            	    int LA117_0 = input.LA(1);

            	    if ( (LA117_0 == FOLLOWED_BY) )
            	    {
            	        alt117 = 1;
            	    }


            	    switch (alt117) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:890:18: f= FOLLOWED_BY orExpression
            			    {
            			    	f=(IToken)Match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression5257); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_FOLLOWED_BY.Add(f);

            			    	PushFollow(FOLLOW_orExpression_in_followedByExpression5259);
            			    	orExpression363 = orExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking==0 ) stream_orExpression.Add(orExpression363.Tree);

            			    }
            			    break;

            			default:
            			    goto loop117;
            	    }
            	} while (true);

            	loop117:
            		;	// Stops C# compiler whining that label 'loop117' has no statements



            	// AST REWRITE
            	// elements:          orExpression, orExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 891:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            	if (f != null)
            	{
            	    // EsperEPL2Grammar.g:891:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

            	    if ( !(stream_orExpression.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_orExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_orExpression.NextTree());

            	    }
            	    stream_orExpression.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 892:6: -> orExpression
            	{
            	    adaptor.AddChild(root_0, stream_orExpression.NextTree());

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public class orExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:895:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public EsperEPL2GrammarParser.orExpression_return orExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken o = null;
        EsperEPL2GrammarParser.andExpression_return andExpression364 = default(EsperEPL2GrammarParser.andExpression_return);

        EsperEPL2GrammarParser.andExpression_return andExpression365 = default(EsperEPL2GrammarParser.andExpression_return);


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR = new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression = new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try 
    	{
            // EsperEPL2Grammar.g:896:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:896:4: andExpression (o= OR_EXPR andExpression )*
            {
            	PushFollow(FOLLOW_andExpression_in_orExpression5298);
            	andExpression364 = andExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_andExpression.Add(andExpression364.Tree);
            	// EsperEPL2Grammar.g:896:18: (o= OR_EXPR andExpression )*
            	do 
            	{
            	    int alt118 = 2;
            	    int LA118_0 = input.LA(1);

            	    if ( (LA118_0 == OR_EXPR) )
            	    {
            	        alt118 = 1;
            	    }


            	    switch (alt118) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:896:19: o= OR_EXPR andExpression
            			    {
            			    	o=(IToken)Match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression5303); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_OR_EXPR.Add(o);

            			    	PushFollow(FOLLOW_andExpression_in_orExpression5305);
            			    	andExpression365 = andExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking==0 ) stream_andExpression.Add(andExpression365.Tree);

            			    }
            			    break;

            			default:
            			    goto loop118;
            	    }
            	} while (true);

            	loop118:
            		;	// Stops C# compiler whining that label 'loop118' has no statements



            	// AST REWRITE
            	// elements:          OR_EXPR, andExpression, andExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 897:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            	if (o != null)
            	{
            	    // EsperEPL2Grammar.g:897:20: ^( OR_EXPR ( andExpression )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_OR_EXPR.NextNode(), root_1);

            	    if ( !(stream_andExpression.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_andExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_andExpression.NextTree());

            	    }
            	    stream_andExpression.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 898:3: -> andExpression
            	{
            	    adaptor.AddChild(root_0, stream_andExpression.NextTree());

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public class andExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:901:1: andExpression : qualifyExpression (a= AND_EXPR qualifyExpression )* -> {$a != null}? ^( AND_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public EsperEPL2GrammarParser.andExpression_return andExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken a = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression366 = default(EsperEPL2GrammarParser.qualifyExpression_return);

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression367 = default(EsperEPL2GrammarParser.qualifyExpression_return);


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR = new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_qualifyExpression = new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        try 
    	{
            // EsperEPL2Grammar.g:902:2: ( qualifyExpression (a= AND_EXPR qualifyExpression )* -> {$a != null}? ^( AND_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:902:4: qualifyExpression (a= AND_EXPR qualifyExpression )*
            {
            	PushFollow(FOLLOW_qualifyExpression_in_andExpression5337);
            	qualifyExpression366 = qualifyExpression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_qualifyExpression.Add(qualifyExpression366.Tree);
            	// EsperEPL2Grammar.g:902:22: (a= AND_EXPR qualifyExpression )*
            	do 
            	{
            	    int alt119 = 2;
            	    int LA119_0 = input.LA(1);

            	    if ( (LA119_0 == AND_EXPR) )
            	    {
            	        alt119 = 1;
            	    }


            	    switch (alt119) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:902:23: a= AND_EXPR qualifyExpression
            			    {
            			    	a=(IToken)Match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression5342); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_AND_EXPR.Add(a);

            			    	PushFollow(FOLLOW_qualifyExpression_in_andExpression5344);
            			    	qualifyExpression367 = qualifyExpression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking==0 ) stream_qualifyExpression.Add(qualifyExpression367.Tree);

            			    }
            			    break;

            			default:
            			    goto loop119;
            	    }
            	} while (true);

            	loop119:
            		;	// Stops C# compiler whining that label 'loop119' has no statements



            	// AST REWRITE
            	// elements:          AND_EXPR, qualifyExpression, qualifyExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 903:3: -> {$a != null}? ^( AND_EXPR ( qualifyExpression )+ )
            	if (a != null)
            	{
            	    // EsperEPL2Grammar.g:903:20: ^( AND_EXPR ( qualifyExpression )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_AND_EXPR.NextNode(), root_1);

            	    if ( !(stream_qualifyExpression.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_qualifyExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_qualifyExpression.NextTree());

            	    }
            	    stream_qualifyExpression.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 904:3: -> qualifyExpression
            	{
            	    adaptor.AddChild(root_0, stream_qualifyExpression.NextTree());

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public class qualifyExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:907:1: qualifyExpression : ( EVERY_EXPR | NOT_EXPR )? guardPostFix ;
    public EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken EVERY_EXPR368 = null;
        IToken NOT_EXPR369 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix370 = default(EsperEPL2GrammarParser.guardPostFix_return);


        CommonTree EVERY_EXPR368_tree=null;
        CommonTree NOT_EXPR369_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:908:2: ( ( EVERY_EXPR | NOT_EXPR )? guardPostFix )
            // EsperEPL2Grammar.g:908:4: ( EVERY_EXPR | NOT_EXPR )? guardPostFix
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	// EsperEPL2Grammar.g:908:4: ( EVERY_EXPR | NOT_EXPR )?
            	int alt120 = 3;
            	int LA120_0 = input.LA(1);

            	if ( (LA120_0 == EVERY_EXPR) )
            	{
            	    alt120 = 1;
            	}
            	else if ( (LA120_0 == NOT_EXPR) )
            	{
            	    alt120 = 2;
            	}
            	switch (alt120) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:908:5: EVERY_EXPR
            	        {
            	        	EVERY_EXPR368=(IToken)Match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression5377); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{EVERY_EXPR368_tree = (CommonTree)adaptor.Create(EVERY_EXPR368);
            	        		root_0 = (CommonTree)adaptor.BecomeRoot(EVERY_EXPR368_tree, root_0);
            	        	}

            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:908:19: NOT_EXPR
            	        {
            	        	NOT_EXPR369=(IToken)Match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression5382); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{NOT_EXPR369_tree = (CommonTree)adaptor.Create(NOT_EXPR369);
            	        		root_0 = (CommonTree)adaptor.BecomeRoot(NOT_EXPR369_tree, root_0);
            	        	}

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_guardPostFix_in_qualifyExpression5389);
            	guardPostFix370 = guardPostFix();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, guardPostFix370.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public class guardPostFix_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:912:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public EsperEPL2GrammarParser.guardPostFix_return guardPostFix() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken l = null;
        IToken w = null;
        IToken RPAREN373 = null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression371 = default(EsperEPL2GrammarParser.atomicExpression_return);

        EsperEPL2GrammarParser.patternExpression_return patternExpression372 = default(EsperEPL2GrammarParser.patternExpression_return);

        EsperEPL2GrammarParser.guardExpression_return guardExpression374 = default(EsperEPL2GrammarParser.guardExpression_return);


        CommonTree l_tree=null;
        CommonTree w_tree=null;
        CommonTree RPAREN373_tree=null;
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE = new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardExpression = new RewriteRuleSubtreeStream(adaptor,"rule guardExpression");
        RewriteRuleSubtreeStream stream_atomicExpression = new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_patternExpression = new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try 
    	{
            // EsperEPL2Grammar.g:913:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:913:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )?
            {
            	// EsperEPL2Grammar.g:913:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            	int alt121 = 2;
            	int LA121_0 = input.LA(1);

            	if ( (LA121_0 == IDENT) )
            	{
            	    alt121 = 1;
            	}
            	else if ( (LA121_0 == LPAREN) )
            	{
            	    alt121 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d121s0 =
            	        new NoViableAltException("", 121, 0, input);

            	    throw nvae_d121s0;
            	}
            	switch (alt121) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:913:5: atomicExpression
            	        {
            	        	PushFollow(FOLLOW_atomicExpression_in_guardPostFix5402);
            	        	atomicExpression371 = atomicExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_atomicExpression.Add(atomicExpression371.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:913:24: l= LPAREN patternExpression RPAREN
            	        {
            	        	l=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix5408); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_LPAREN.Add(l);

            	        	PushFollow(FOLLOW_patternExpression_in_guardPostFix5410);
            	        	patternExpression372 = patternExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_patternExpression.Add(patternExpression372.Tree);
            	        	RPAREN373=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix5412); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_RPAREN.Add(RPAREN373);


            	        }
            	        break;

            	}

            	// EsperEPL2Grammar.g:913:59: (w= WHERE guardExpression )?
            	int alt122 = 2;
            	int LA122_0 = input.LA(1);

            	if ( (LA122_0 == WHERE) )
            	{
            	    alt122 = 1;
            	}
            	switch (alt122) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:913:60: w= WHERE guardExpression
            	        {
            	        	w=(IToken)Match(input,WHERE,FOLLOW_WHERE_in_guardPostFix5418); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_WHERE.Add(w);

            	        	PushFollow(FOLLOW_guardExpression_in_guardPostFix5420);
            	        	guardExpression374 = guardExpression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_guardExpression.Add(guardExpression374.Tree);

            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          patternExpression, patternExpression, guardExpression, atomicExpression, atomicExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 914:3: -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            	if (w != null)
            	{
            	    // EsperEPL2Grammar.g:914:20: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GUARD_EXPR, "GUARD_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:914:33: ( atomicExpression )?
            	    if ( stream_atomicExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_atomicExpression.NextTree());

            	    }
            	    stream_atomicExpression.Reset();
            	    // EsperEPL2Grammar.g:914:51: ( patternExpression )?
            	    if ( stream_patternExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_patternExpression.NextTree());

            	    }
            	    stream_patternExpression.Reset();
            	    adaptor.AddChild(root_1, stream_guardExpression.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 915:3: -> ( atomicExpression )? ( patternExpression )?
            	{
            	    // EsperEPL2Grammar.g:915:6: ( atomicExpression )?
            	    if ( stream_atomicExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_0, stream_atomicExpression.NextTree());

            	    }
            	    stream_atomicExpression.Reset();
            	    // EsperEPL2Grammar.g:915:24: ( patternExpression )?
            	    if ( stream_patternExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_0, stream_patternExpression.NextTree());

            	    }
            	    stream_patternExpression.Reset();

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public class atomicExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:918:1: atomicExpression : ( observerExpression | eventFilterExpression );
    public EsperEPL2GrammarParser.atomicExpression_return atomicExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression375 = default(EsperEPL2GrammarParser.observerExpression_return);

        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression376 = default(EsperEPL2GrammarParser.eventFilterExpression_return);



        try 
    	{
            // EsperEPL2Grammar.g:919:2: ( observerExpression | eventFilterExpression )
            int alt123 = 2;
            alt123 = dfa123.Predict(input);
            switch (alt123) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:919:4: observerExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_observerExpression_in_atomicExpression5462);
                    	observerExpression375 = observerExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, observerExpression375.Tree);

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:919:25: eventFilterExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_eventFilterExpression_in_atomicExpression5466);
                    	eventFilterExpression376 = eventFilterExpression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, eventFilterExpression376.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public class observerExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:922:1: observerExpression : ns= IDENT COLON nm= IDENT LPAREN ( parameterSet )? RPAREN -> ^( OBSERVER_EXPR $ns $nm ( parameterSet )? ) ;
    public EsperEPL2GrammarParser.observerExpression_return observerExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken ns = null;
        IToken nm = null;
        IToken COLON377 = null;
        IToken LPAREN378 = null;
        IToken RPAREN380 = null;
        EsperEPL2GrammarParser.parameterSet_return parameterSet379 = default(EsperEPL2GrammarParser.parameterSet_return);


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON377_tree=null;
        CommonTree LPAREN378_tree=null;
        CommonTree RPAREN380_tree=null;
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_parameterSet = new RewriteRuleSubtreeStream(adaptor,"rule parameterSet");
        try 
    	{
            // EsperEPL2Grammar.g:923:2: (ns= IDENT COLON nm= IDENT LPAREN ( parameterSet )? RPAREN -> ^( OBSERVER_EXPR $ns $nm ( parameterSet )? ) )
            // EsperEPL2Grammar.g:923:4: ns= IDENT COLON nm= IDENT LPAREN ( parameterSet )? RPAREN
            {
            	ns=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_observerExpression5481); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(ns);

            	COLON377=(IToken)Match(input,COLON,FOLLOW_COLON_in_observerExpression5483); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_COLON.Add(COLON377);

            	nm=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_observerExpression5487); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(nm);

            	LPAREN378=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression5489); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_LPAREN.Add(LPAREN378);

            	// EsperEPL2Grammar.g:923:35: ( parameterSet )?
            	int alt124 = 2;
            	alt124 = dfa124.Predict(input);
            	switch (alt124) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:923:35: parameterSet
            	        {
            	        	PushFollow(FOLLOW_parameterSet_in_observerExpression5491);
            	        	parameterSet379 = parameterSet();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_parameterSet.Add(parameterSet379.Tree);

            	        }
            	        break;

            	}

            	RPAREN380=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression5494); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_RPAREN.Add(RPAREN380);



            	// AST REWRITE
            	// elements:          parameterSet, nm, ns
            	// token labels:      ns, nm
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_ns = new RewriteRuleTokenStream(adaptor, "token ns", ns);
            	RewriteRuleTokenStream stream_nm = new RewriteRuleTokenStream(adaptor, "token nm", nm);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 924:3: -> ^( OBSERVER_EXPR $ns $nm ( parameterSet )? )
            	{
            	    // EsperEPL2Grammar.g:924:6: ^( OBSERVER_EXPR $ns $nm ( parameterSet )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

            	    adaptor.AddChild(root_1, stream_ns.NextNode());
            	    adaptor.AddChild(root_1, stream_nm.NextNode());
            	    // EsperEPL2Grammar.g:924:30: ( parameterSet )?
            	    if ( stream_parameterSet.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_parameterSet.NextTree());

            	    }
            	    stream_parameterSet.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public class guardExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "guardExpression"
    // EsperEPL2Grammar.g:927:1: guardExpression : IDENT COLON IDENT LPAREN ( parameterSet )? RPAREN ;
    public EsperEPL2GrammarParser.guardExpression_return guardExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.guardExpression_return retval = new EsperEPL2GrammarParser.guardExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken IDENT381 = null;
        IToken COLON382 = null;
        IToken IDENT383 = null;
        IToken LPAREN384 = null;
        IToken RPAREN386 = null;
        EsperEPL2GrammarParser.parameterSet_return parameterSet385 = default(EsperEPL2GrammarParser.parameterSet_return);


        CommonTree IDENT381_tree=null;
        CommonTree COLON382_tree=null;
        CommonTree IDENT383_tree=null;
        CommonTree LPAREN384_tree=null;
        CommonTree RPAREN386_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:928:2: ( IDENT COLON IDENT LPAREN ( parameterSet )? RPAREN )
            // EsperEPL2Grammar.g:928:4: IDENT COLON IDENT LPAREN ( parameterSet )? RPAREN
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	IDENT381=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_guardExpression5522); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{IDENT381_tree = (CommonTree)adaptor.Create(IDENT381);
            		adaptor.AddChild(root_0, IDENT381_tree);
            	}
            	COLON382=(IToken)Match(input,COLON,FOLLOW_COLON_in_guardExpression5524); if (state.failed) return retval;
            	IDENT383=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_guardExpression5527); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{IDENT383_tree = (CommonTree)adaptor.Create(IDENT383);
            		adaptor.AddChild(root_0, IDENT383_tree);
            	}
            	LPAREN384=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_guardExpression5529); if (state.failed) return retval;
            	// EsperEPL2Grammar.g:928:31: ( parameterSet )?
            	int alt125 = 2;
            	alt125 = dfa125.Predict(input);
            	switch (alt125) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:928:32: parameterSet
            	        {
            	        	PushFollow(FOLLOW_parameterSet_in_guardExpression5533);
            	        	parameterSet385 = parameterSet();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, parameterSet385.Tree);

            	        }
            	        break;

            	}

            	RPAREN386=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_guardExpression5537); if (state.failed) return retval;

            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "guardExpression"

    public class parameterSet_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "parameterSet"
    // EsperEPL2Grammar.g:934:1: parameterSet : parameter ( COMMA parameter )* ;
    public EsperEPL2GrammarParser.parameterSet_return parameterSet() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.parameterSet_return retval = new EsperEPL2GrammarParser.parameterSet_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken COMMA388 = null;
        EsperEPL2GrammarParser.parameter_return parameter387 = default(EsperEPL2GrammarParser.parameter_return);

        EsperEPL2GrammarParser.parameter_return parameter389 = default(EsperEPL2GrammarParser.parameter_return);


        CommonTree COMMA388_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:935:2: ( parameter ( COMMA parameter )* )
            // EsperEPL2Grammar.g:935:4: parameter ( COMMA parameter )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_parameter_in_parameterSet5552);
            	parameter387 = parameter();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, parameter387.Tree);
            	// EsperEPL2Grammar.g:935:14: ( COMMA parameter )*
            	do 
            	{
            	    int alt126 = 2;
            	    int LA126_0 = input.LA(1);

            	    if ( (LA126_0 == COMMA) )
            	    {
            	        alt126 = 1;
            	    }


            	    switch (alt126) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:935:15: COMMA parameter
            			    {
            			    	COMMA388=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_parameterSet5555); if (state.failed) return retval;
            			    	PushFollow(FOLLOW_parameter_in_parameterSet5558);
            			    	parameter389 = parameter();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, parameter389.Tree);

            			    }
            			    break;

            			default:
            			    goto loop126;
            	    }
            	} while (true);

            	loop126:
            		;	// Stops C# compiler whining that label 'loop126' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "parameterSet"

    public class parameter_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "parameter"
    // EsperEPL2Grammar.g:938:1: parameter : ( ( singleParameter )=> singleParameter | ( numericParameterList )=> numericParameterList | ( arrayParameterList )=> arrayParameterList | eventProperty );
    public EsperEPL2GrammarParser.parameter_return parameter() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.parameter_return retval = new EsperEPL2GrammarParser.parameter_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.singleParameter_return singleParameter390 = default(EsperEPL2GrammarParser.singleParameter_return);

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList391 = default(EsperEPL2GrammarParser.numericParameterList_return);

        EsperEPL2GrammarParser.arrayParameterList_return arrayParameterList392 = default(EsperEPL2GrammarParser.arrayParameterList_return);

        EsperEPL2GrammarParser.eventProperty_return eventProperty393 = default(EsperEPL2GrammarParser.eventProperty_return);



        try 
    	{
            // EsperEPL2Grammar.g:939:2: ( ( singleParameter )=> singleParameter | ( numericParameterList )=> numericParameterList | ( arrayParameterList )=> arrayParameterList | eventProperty )
            int alt127 = 4;
            alt127 = dfa127.Predict(input);
            switch (alt127) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:939:4: ( singleParameter )=> singleParameter
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_singleParameter_in_parameter5581);
                    	singleParameter390 = singleParameter();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, singleParameter390.Tree);

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:940:5: ( numericParameterList )=> numericParameterList
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_numericParameterList_in_parameter5593);
                    	numericParameterList391 = numericParameterList();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, numericParameterList391.Tree);

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:941:4: ( arrayParameterList )=> arrayParameterList
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_arrayParameterList_in_parameter5604);
                    	arrayParameterList392 = arrayParameterList();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arrayParameterList392.Tree);

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:942:4: eventProperty
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_eventProperty_in_parameter5609);
                    	eventProperty393 = eventProperty();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, eventProperty393.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "parameter"

    public class singleParameter_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "singleParameter"
    // EsperEPL2Grammar.g:945:1: singleParameter : ( rangeOperand | frequencyOperand | lastOperator | weekDayOperator | LAST | LW | STAR | constant | time_period );
    public EsperEPL2GrammarParser.singleParameter_return singleParameter() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.singleParameter_return retval = new EsperEPL2GrammarParser.singleParameter_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken LAST398 = null;
        IToken LW399 = null;
        IToken STAR400 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand394 = default(EsperEPL2GrammarParser.rangeOperand_return);

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand395 = default(EsperEPL2GrammarParser.frequencyOperand_return);

        EsperEPL2GrammarParser.lastOperator_return lastOperator396 = default(EsperEPL2GrammarParser.lastOperator_return);

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator397 = default(EsperEPL2GrammarParser.weekDayOperator_return);

        EsperEPL2GrammarParser.constant_return constant401 = default(EsperEPL2GrammarParser.constant_return);

        EsperEPL2GrammarParser.time_period_return time_period402 = default(EsperEPL2GrammarParser.time_period_return);


        CommonTree LAST398_tree=null;
        CommonTree LW399_tree=null;
        CommonTree STAR400_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:946:2: ( rangeOperand | frequencyOperand | lastOperator | weekDayOperator | LAST | LW | STAR | constant | time_period )
            int alt128 = 9;
            alt128 = dfa128.Predict(input);
            switch (alt128) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:946:4: rangeOperand
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_rangeOperand_in_singleParameter5620);
                    	rangeOperand394 = rangeOperand();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rangeOperand394.Tree);

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:947:5: frequencyOperand
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_frequencyOperand_in_singleParameter5627);
                    	frequencyOperand395 = frequencyOperand();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, frequencyOperand395.Tree);

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:948:4: lastOperator
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_lastOperator_in_singleParameter5632);
                    	lastOperator396 = lastOperator();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, lastOperator396.Tree);

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:949:4: weekDayOperator
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_weekDayOperator_in_singleParameter5637);
                    	weekDayOperator397 = weekDayOperator();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, weekDayOperator397.Tree);

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:950:4: LAST
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	LAST398=(IToken)Match(input,LAST,FOLLOW_LAST_in_singleParameter5642); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{LAST398_tree = (CommonTree)adaptor.Create(LAST398);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(LAST398_tree, root_0);
                    	}

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:951:4: LW
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	LW399=(IToken)Match(input,LW,FOLLOW_LW_in_singleParameter5648); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{LW399_tree = (CommonTree)adaptor.Create(LW399);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(LW399_tree, root_0);
                    	}

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:952:4: STAR
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	STAR400=(IToken)Match(input,STAR,FOLLOW_STAR_in_singleParameter5654); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{STAR400_tree = (CommonTree)adaptor.Create(STAR400);
                    		root_0 = (CommonTree)adaptor.BecomeRoot(STAR400_tree, root_0);
                    	}

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:953:4: constant
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_constant_in_singleParameter5660);
                    	constant401 = constant();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant401.Tree);

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:954:4: time_period
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_time_period_in_singleParameter5665);
                    	time_period402 = time_period();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, time_period402.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "singleParameter"

    public class frequencyOperand_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:957:1: frequencyOperand : STAR DIV NUM_INT -> ^( NUMERIC_PARAM_FREQUENCY NUM_INT ) ;
    public EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken STAR403 = null;
        IToken DIV404 = null;
        IToken NUM_INT405 = null;

        CommonTree STAR403_tree=null;
        CommonTree DIV404_tree=null;
        CommonTree NUM_INT405_tree=null;
        RewriteRuleTokenStream stream_STAR = new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV = new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleTokenStream stream_NUM_INT = new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try 
    	{
            // EsperEPL2Grammar.g:958:2: ( STAR DIV NUM_INT -> ^( NUMERIC_PARAM_FREQUENCY NUM_INT ) )
            // EsperEPL2Grammar.g:958:4: STAR DIV NUM_INT
            {
            	STAR403=(IToken)Match(input,STAR,FOLLOW_STAR_in_frequencyOperand5676); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_STAR.Add(STAR403);

            	DIV404=(IToken)Match(input,DIV,FOLLOW_DIV_in_frequencyOperand5678); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_DIV.Add(DIV404);

            	NUM_INT405=(IToken)Match(input,NUM_INT,FOLLOW_NUM_INT_in_frequencyOperand5680); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_NUM_INT.Add(NUM_INT405);



            	// AST REWRITE
            	// elements:          NUM_INT
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 958:21: -> ^( NUMERIC_PARAM_FREQUENCY NUM_INT )
            	{
            	    // EsperEPL2Grammar.g:958:24: ^( NUMERIC_PARAM_FREQUENCY NUM_INT )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

            	    adaptor.AddChild(root_1, stream_NUM_INT.NextNode());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public class rangeOperand_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:961:1: rangeOperand : l= NUM_INT COLON u= NUM_INT -> ^( NUMERIC_PARAM_RANGE $l $u) ;
    public EsperEPL2GrammarParser.rangeOperand_return rangeOperand() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken l = null;
        IToken u = null;
        IToken COLON406 = null;

        CommonTree l_tree=null;
        CommonTree u_tree=null;
        CommonTree COLON406_tree=null;
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_NUM_INT = new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try 
    	{
            // EsperEPL2Grammar.g:962:2: (l= NUM_INT COLON u= NUM_INT -> ^( NUMERIC_PARAM_RANGE $l $u) )
            // EsperEPL2Grammar.g:962:4: l= NUM_INT COLON u= NUM_INT
            {
            	l=(IToken)Match(input,NUM_INT,FOLLOW_NUM_INT_in_rangeOperand5701); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_NUM_INT.Add(l);

            	COLON406=(IToken)Match(input,COLON,FOLLOW_COLON_in_rangeOperand5703); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_COLON.Add(COLON406);

            	u=(IToken)Match(input,NUM_INT,FOLLOW_NUM_INT_in_rangeOperand5707); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_NUM_INT.Add(u);



            	// AST REWRITE
            	// elements:          l, u
            	// token labels:      u, l
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_u = new RewriteRuleTokenStream(adaptor, "token u", u);
            	RewriteRuleTokenStream stream_l = new RewriteRuleTokenStream(adaptor, "token l", l);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 962:30: -> ^( NUMERIC_PARAM_RANGE $l $u)
            	{
            	    // EsperEPL2Grammar.g:962:33: ^( NUMERIC_PARAM_RANGE $l $u)
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

            	    adaptor.AddChild(root_1, stream_l.NextNode());
            	    adaptor.AddChild(root_1, stream_u.NextNode());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public class lastOperator_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:965:1: lastOperator : l= NUM_INT LAST -> ^( LAST_OPERATOR $l) ;
    public EsperEPL2GrammarParser.lastOperator_return lastOperator() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken l = null;
        IToken LAST407 = null;

        CommonTree l_tree=null;
        CommonTree LAST407_tree=null;
        RewriteRuleTokenStream stream_LAST = new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_NUM_INT = new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try 
    	{
            // EsperEPL2Grammar.g:966:2: (l= NUM_INT LAST -> ^( LAST_OPERATOR $l) )
            // EsperEPL2Grammar.g:966:4: l= NUM_INT LAST
            {
            	l=(IToken)Match(input,NUM_INT,FOLLOW_NUM_INT_in_lastOperator5732); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_NUM_INT.Add(l);

            	LAST407=(IToken)Match(input,LAST,FOLLOW_LAST_in_lastOperator5734); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_LAST.Add(LAST407);



            	// AST REWRITE
            	// elements:          l
            	// token labels:      l
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_l = new RewriteRuleTokenStream(adaptor, "token l", l);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 966:19: -> ^( LAST_OPERATOR $l)
            	{
            	    // EsperEPL2Grammar.g:966:22: ^( LAST_OPERATOR $l)
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

            	    adaptor.AddChild(root_1, stream_l.NextNode());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public class weekDayOperator_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:969:1: weekDayOperator : wd= NUM_INT WEEKDAY -> ^( WEEKDAY_OPERATOR $wd) ;
    public EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken wd = null;
        IToken WEEKDAY408 = null;

        CommonTree wd_tree=null;
        CommonTree WEEKDAY408_tree=null;
        RewriteRuleTokenStream stream_WEEKDAY = new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleTokenStream stream_NUM_INT = new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try 
    	{
            // EsperEPL2Grammar.g:969:16: (wd= NUM_INT WEEKDAY -> ^( WEEKDAY_OPERATOR $wd) )
            // EsperEPL2Grammar.g:970:3: wd= NUM_INT WEEKDAY
            {
            	wd=(IToken)Match(input,NUM_INT,FOLLOW_NUM_INT_in_weekDayOperator5756); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_NUM_INT.Add(wd);

            	WEEKDAY408=(IToken)Match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator5758); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_WEEKDAY.Add(WEEKDAY408);



            	// AST REWRITE
            	// elements:          wd
            	// token labels:      wd
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_wd = new RewriteRuleTokenStream(adaptor, "token wd", wd);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 970:22: -> ^( WEEKDAY_OPERATOR $wd)
            	{
            	    // EsperEPL2Grammar.g:970:25: ^( WEEKDAY_OPERATOR $wd)
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

            	    adaptor.AddChild(root_1, stream_wd.NextNode());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public class numericParameterList_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:973:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public EsperEPL2GrammarParser.numericParameterList_return numericParameterList() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken LBRACK409 = null;
        IToken COMMA411 = null;
        IToken RBRACK413 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter410 = default(EsperEPL2GrammarParser.numericListParameter_return);

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter412 = default(EsperEPL2GrammarParser.numericListParameter_return);


        CommonTree LBRACK409_tree=null;
        CommonTree COMMA411_tree=null;
        CommonTree RBRACK413_tree=null;
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter = new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try 
    	{
            // EsperEPL2Grammar.g:974:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:974:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            	LBRACK409=(IToken)Match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList5778); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_LBRACK.Add(LBRACK409);

            	PushFollow(FOLLOW_numericListParameter_in_numericParameterList5780);
            	numericListParameter410 = numericListParameter();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_numericListParameter.Add(numericListParameter410.Tree);
            	// EsperEPL2Grammar.g:974:32: ( COMMA numericListParameter )*
            	do 
            	{
            	    int alt129 = 2;
            	    int LA129_0 = input.LA(1);

            	    if ( (LA129_0 == COMMA) )
            	    {
            	        alt129 = 1;
            	    }


            	    switch (alt129) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:974:33: COMMA numericListParameter
            			    {
            			    	COMMA411=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_numericParameterList5783); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_COMMA.Add(COMMA411);

            			    	PushFollow(FOLLOW_numericListParameter_in_numericParameterList5785);
            			    	numericListParameter412 = numericListParameter();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking==0 ) stream_numericListParameter.Add(numericListParameter412.Tree);

            			    }
            			    break;

            			default:
            			    goto loop129;
            	    }
            	} while (true);

            	loop129:
            		;	// Stops C# compiler whining that label 'loop129' has no statements

            	RBRACK413=(IToken)Match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList5789); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_RBRACK.Add(RBRACK413);



            	// AST REWRITE
            	// elements:          numericListParameter
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 975:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            	{
            	    // EsperEPL2Grammar.g:975:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

            	    if ( !(stream_numericListParameter.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_numericListParameter.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_numericListParameter.NextTree());

            	    }
            	    stream_numericListParameter.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public class numericListParameter_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:978:1: numericListParameter : ( rangeOperand | frequencyOperand | NUM_INT );
    public EsperEPL2GrammarParser.numericListParameter_return numericListParameter() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken NUM_INT416 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand414 = default(EsperEPL2GrammarParser.rangeOperand_return);

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand415 = default(EsperEPL2GrammarParser.frequencyOperand_return);


        CommonTree NUM_INT416_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:979:2: ( rangeOperand | frequencyOperand | NUM_INT )
            int alt130 = 3;
            int LA130_0 = input.LA(1);

            if ( (LA130_0 == NUM_INT) )
            {
                int LA130_1 = input.LA(2);

                if ( (LA130_1 == COLON) )
                {
                    alt130 = 1;
                }
                else if ( (LA130_1 == COMMA || LA130_1 == RBRACK) )
                {
                    alt130 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d130s1 =
                        new NoViableAltException("", 130, 1, input);

                    throw nvae_d130s1;
                }
            }
            else if ( (LA130_0 == STAR) )
            {
                alt130 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d130s0 =
                    new NoViableAltException("", 130, 0, input);

                throw nvae_d130s0;
            }
            switch (alt130) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:979:4: rangeOperand
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_rangeOperand_in_numericListParameter5811);
                    	rangeOperand414 = rangeOperand();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rangeOperand414.Tree);

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:980:5: frequencyOperand
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_frequencyOperand_in_numericListParameter5817);
                    	frequencyOperand415 = frequencyOperand();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, frequencyOperand415.Tree);

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:981:4: NUM_INT
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	NUM_INT416=(IToken)Match(input,NUM_INT,FOLLOW_NUM_INT_in_numericListParameter5822); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{NUM_INT416_tree = (CommonTree)adaptor.Create(NUM_INT416);
                    		adaptor.AddChild(root_0, NUM_INT416_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public class arrayParameterList_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "arrayParameterList"
    // EsperEPL2Grammar.g:984:1: arrayParameterList : LCURLY ( constant ( COMMA constant )* )? RCURLY -> ^( ARRAY_PARAM_LIST ( constant )* ) ;
    public EsperEPL2GrammarParser.arrayParameterList_return arrayParameterList() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.arrayParameterList_return retval = new EsperEPL2GrammarParser.arrayParameterList_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken LCURLY417 = null;
        IToken COMMA419 = null;
        IToken RCURLY421 = null;
        EsperEPL2GrammarParser.constant_return constant418 = default(EsperEPL2GrammarParser.constant_return);

        EsperEPL2GrammarParser.constant_return constant420 = default(EsperEPL2GrammarParser.constant_return);


        CommonTree LCURLY417_tree=null;
        CommonTree COMMA419_tree=null;
        CommonTree RCURLY421_tree=null;
        RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_constant = new RewriteRuleSubtreeStream(adaptor,"rule constant");
        try 
    	{
            // EsperEPL2Grammar.g:985:2: ( LCURLY ( constant ( COMMA constant )* )? RCURLY -> ^( ARRAY_PARAM_LIST ( constant )* ) )
            // EsperEPL2Grammar.g:985:4: LCURLY ( constant ( COMMA constant )* )? RCURLY
            {
            	LCURLY417=(IToken)Match(input,LCURLY,FOLLOW_LCURLY_in_arrayParameterList5833); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_LCURLY.Add(LCURLY417);

            	// EsperEPL2Grammar.g:985:11: ( constant ( COMMA constant )* )?
            	int alt132 = 2;
            	alt132 = dfa132.Predict(input);
            	switch (alt132) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:985:12: constant ( COMMA constant )*
            	        {
            	        	PushFollow(FOLLOW_constant_in_arrayParameterList5836);
            	        	constant418 = constant();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_constant.Add(constant418.Tree);
            	        	// EsperEPL2Grammar.g:985:21: ( COMMA constant )*
            	        	do 
            	        	{
            	        	    int alt131 = 2;
            	        	    int LA131_0 = input.LA(1);

            	        	    if ( (LA131_0 == COMMA) )
            	        	    {
            	        	        alt131 = 1;
            	        	    }


            	        	    switch (alt131) 
            	        		{
            	        			case 1 :
            	        			    // EsperEPL2Grammar.g:985:22: COMMA constant
            	        			    {
            	        			    	COMMA419=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_arrayParameterList5839); if (state.failed) return retval; 
            	        			    	if ( state.backtracking==0 ) stream_COMMA.Add(COMMA419);

            	        			    	PushFollow(FOLLOW_constant_in_arrayParameterList5841);
            	        			    	constant420 = constant();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking==0 ) stream_constant.Add(constant420.Tree);

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop131;
            	        	    }
            	        	} while (true);

            	        	loop131:
            	        		;	// Stops C# compiler whining that label 'loop131' has no statements


            	        }
            	        break;

            	}

            	RCURLY421=(IToken)Match(input,RCURLY,FOLLOW_RCURLY_in_arrayParameterList5847); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_RCURLY.Add(RCURLY421);



            	// AST REWRITE
            	// elements:          constant
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 986:3: -> ^( ARRAY_PARAM_LIST ( constant )* )
            	{
            	    // EsperEPL2Grammar.g:986:6: ^( ARRAY_PARAM_LIST ( constant )* )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_PARAM_LIST, "ARRAY_PARAM_LIST"), root_1);

            	    // EsperEPL2Grammar.g:986:25: ( constant )*
            	    while ( stream_constant.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_constant.NextTree());

            	    }
            	    stream_constant.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "arrayParameterList"

    public class eventFilterExpression_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:994:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( expressionList )? ) ;
    public EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken i = null;
        IToken EQUALS422 = null;
        IToken LPAREN424 = null;
        IToken RPAREN426 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier423 = default(EsperEPL2GrammarParser.classIdentifier_return);

        EsperEPL2GrammarParser.expressionList_return expressionList425 = default(EsperEPL2GrammarParser.expressionList_return);


        CommonTree i_tree=null;
        CommonTree EQUALS422_tree=null;
        CommonTree LPAREN424_tree=null;
        CommonTree RPAREN426_tree=null;
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS = new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList = new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier = new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.Push("filter specification"); 
        try 
    	{
            // EsperEPL2Grammar.g:997:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:997:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            	// EsperEPL2Grammar.g:997:9: (i= IDENT EQUALS )?
            	int alt133 = 2;
            	alt133 = dfa133.Predict(input);
            	switch (alt133) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:997:10: i= IDENT EQUALS
            	        {
            	        	i=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression5893); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_IDENT.Add(i);

            	        	EQUALS422=(IToken)Match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression5895); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_EQUALS.Add(EQUALS422);


            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_classIdentifier_in_eventFilterExpression5904);
            	classIdentifier423 = classIdentifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_classIdentifier.Add(classIdentifier423.Tree);
            	// EsperEPL2Grammar.g:999:9: ( LPAREN ( expressionList )? RPAREN )?
            	int alt135 = 2;
            	alt135 = dfa135.Predict(input);
            	switch (alt135) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:999:10: LPAREN ( expressionList )? RPAREN
            	        {
            	        	LPAREN424=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression5915); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_LPAREN.Add(LPAREN424);

            	        	// EsperEPL2Grammar.g:999:17: ( expressionList )?
            	        	int alt134 = 2;
            	        	alt134 = dfa134.Predict(input);
            	        	switch (alt134) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:999:17: expressionList
            	        	        {
            	        	        	PushFollow(FOLLOW_expressionList_in_eventFilterExpression5917);
            	        	        	expressionList425 = expressionList();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_expressionList.Add(expressionList425.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	RPAREN426=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression5920); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_RPAREN.Add(RPAREN426);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          expressionList, classIdentifier, i
            	// token labels:      i
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_i = new RewriteRuleTokenStream(adaptor, "token i", i);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1000:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( expressionList )? )
            	{
            	    // EsperEPL2Grammar.g:1000:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( expressionList )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

            	    // EsperEPL2Grammar.g:1000:32: ( $i)?
            	    if ( stream_i.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_i.NextNode());

            	    }
            	    stream_i.Reset();
            	    adaptor.AddChild(root_1, stream_classIdentifier.NextTree());
            	    // EsperEPL2Grammar.g:1000:52: ( expressionList )?
            	    if ( stream_expressionList.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_expressionList.NextTree());

            	    }
            	    stream_expressionList.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( state.backtracking == 0 ) 
            {
               paraphrases.Pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public class classIdentifier_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1003:1: classIdentifier : i1= IDENT ( DOT i2= IDENT )* -> ^( CLASS_IDENT[identifier] ) ;
    public EsperEPL2GrammarParser.classIdentifier_return classIdentifier() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken i1 = null;
        IToken i2 = null;
        IToken DOT427 = null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree DOT427_tree=null;
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");

         String identifier = ""; 
        try 
    	{
            // EsperEPL2Grammar.g:1005:2: (i1= IDENT ( DOT i2= IDENT )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1005:4: i1= IDENT ( DOT i2= IDENT )*
            {
            	i1=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_classIdentifier5968); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(i1);

            	if ( state.backtracking == 0 ) 
            	{
            	   identifier = i1.Text; 
            	}
            	// EsperEPL2Grammar.g:1006:6: ( DOT i2= IDENT )*
            	do 
            	{
            	    int alt136 = 2;
            	    alt136 = dfa136.Predict(input);
            	    switch (alt136) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:1007:8: DOT i2= IDENT
            			    {
            			    	DOT427=(IToken)Match(input,DOT,FOLLOW_DOT_in_classIdentifier5987); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_DOT.Add(DOT427);

            			    	i2=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_classIdentifier5991); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_IDENT.Add(i2);

            			    	if ( state.backtracking == 0 ) 
            			    	{
            			    	   identifier += "." + i2.Text; 
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop136;
            	    }
            	} while (true);

            	loop136:
            		;	// Stops C# compiler whining that label 'loop136' has no statements



            	// AST REWRITE
            	// elements:          
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1009:6: -> ^( CLASS_IDENT[identifier] )
            	{
            	    // EsperEPL2Grammar.g:1009:9: ^( CLASS_IDENT[identifier] )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_IDENT, identifier), root_1);

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public class classIdentifierNonGreedy_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1012:1: classIdentifierNonGreedy : i1= IDENT ( options {greedy=false; } : DOT i2= IDENT )* -> ^( CLASS_IDENT[identifier] ) ;
    public EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken i1 = null;
        IToken i2 = null;
        IToken DOT428 = null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree DOT428_tree=null;
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");

         String identifier = ""; 
        try 
    	{
            // EsperEPL2Grammar.g:1014:2: (i1= IDENT ( options {greedy=false; } : DOT i2= IDENT )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1014:4: i1= IDENT ( options {greedy=false; } : DOT i2= IDENT )*
            {
            	i1=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_classIdentifierNonGreedy6036); if (state.failed) return retval; 
            	if ( state.backtracking==0 ) stream_IDENT.Add(i1);

            	if ( state.backtracking == 0 ) 
            	{
            	   identifier = i1.Text; 
            	}
            	// EsperEPL2Grammar.g:1015:6: ( options {greedy=false; } : DOT i2= IDENT )*
            	do 
            	{
            	    int alt137 = 2;
            	    int LA137_0 = input.LA(1);

            	    if ( (LA137_0 == DOT) )
            	    {
            	        int LA137_1 = input.LA(2);

            	        if ( (LA137_1 == IDENT) )
            	        {
            	            int LA137_2 = input.LA(3);

            	            if ( (LA137_2 == DOT) )
            	            {
            	                alt137 = 1;
            	            }
            	            else if ( (LA137_2 == LPAREN) )
            	            {
            	                alt137 = 2;
            	            }


            	        }
            	        else if ( ((LA137_1 >= MAX && LA137_1 <= MIN)) )
            	        {
            	            alt137 = 2;
            	        }


            	    }


            	    switch (alt137) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:1017:8: DOT i2= IDENT
            			    {
            			    	DOT428=(IToken)Match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy6071); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_DOT.Add(DOT428);

            			    	i2=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_classIdentifierNonGreedy6075); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_IDENT.Add(i2);

            			    	if ( state.backtracking == 0 ) 
            			    	{
            			    	   identifier += "." + i2.Text; 
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop137;
            	    }
            	} while (true);

            	loop137:
            		;	// Stops C# compiler whining that label 'loop137' has no statements



            	// AST REWRITE
            	// elements:          
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1019:6: -> ^( CLASS_IDENT[identifier] )
            	{
            	    // EsperEPL2Grammar.g:1019:9: ^( CLASS_IDENT[identifier] )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_IDENT, identifier), root_1);

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public class expressionList_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1022:1: expressionList : expression ( COMMA expression )* ;
    public EsperEPL2GrammarParser.expressionList_return expressionList() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken COMMA430 = null;
        EsperEPL2GrammarParser.expression_return expression429 = default(EsperEPL2GrammarParser.expression_return);

        EsperEPL2GrammarParser.expression_return expression431 = default(EsperEPL2GrammarParser.expression_return);


        CommonTree COMMA430_tree=null;

        try 
    	{
            // EsperEPL2Grammar.g:1023:5: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1023:9: expression ( COMMA expression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();

            	PushFollow(FOLLOW_expression_in_expressionList6115);
            	expression429 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression429.Tree);
            	// EsperEPL2Grammar.g:1023:20: ( COMMA expression )*
            	do 
            	{
            	    int alt138 = 2;
            	    int LA138_0 = input.LA(1);

            	    if ( (LA138_0 == COMMA) )
            	    {
            	        alt138 = 1;
            	    }


            	    switch (alt138) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:1023:21: COMMA expression
            			    {
            			    	COMMA430=(IToken)Match(input,COMMA,FOLLOW_COMMA_in_expressionList6118); if (state.failed) return retval;
            			    	PushFollow(FOLLOW_expression_in_expressionList6121);
            			    	expression431 = expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression431.Tree);

            			    }
            			    break;

            			default:
            			    goto loop138;
            	    }
            	} while (true);

            	loop138:
            		;	// Stops C# compiler whining that label 'loop138' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public class eventProperty_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1026:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public EsperEPL2GrammarParser.eventProperty_return eventProperty() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken DOT433 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic432 = default(EsperEPL2GrammarParser.eventPropertyAtomic_return);

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic434 = default(EsperEPL2GrammarParser.eventPropertyAtomic_return);


        CommonTree DOT433_tree=null;
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic = new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try 
    	{
            // EsperEPL2Grammar.g:1027:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1027:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            	PushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty6141);
            	eventPropertyAtomic432 = eventPropertyAtomic();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_eventPropertyAtomic.Add(eventPropertyAtomic432.Tree);
            	// EsperEPL2Grammar.g:1027:24: ( DOT eventPropertyAtomic )*
            	do 
            	{
            	    int alt139 = 2;
            	    alt139 = dfa139.Predict(input);
            	    switch (alt139) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:1027:25: DOT eventPropertyAtomic
            			    {
            			    	DOT433=(IToken)Match(input,DOT,FOLLOW_DOT_in_eventProperty6144); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_DOT.Add(DOT433);

            			    	PushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty6146);
            			    	eventPropertyAtomic434 = eventPropertyAtomic();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking==0 ) stream_eventPropertyAtomic.Add(eventPropertyAtomic434.Tree);

            			    }
            			    break;

            			default:
            			    goto loop139;
            	    }
            	} while (true);

            	loop139:
            		;	// Stops C# compiler whining that label 'loop139' has no statements



            	// AST REWRITE
            	// elements:          eventPropertyAtomic
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1028:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            	{
            	    // EsperEPL2Grammar.g:1028:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

            	    if ( !(stream_eventPropertyAtomic.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_eventPropertyAtomic.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_eventPropertyAtomic.NextTree());

            	    }
            	    stream_eventPropertyAtomic.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public class eventPropertyAtomic_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1031:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken lb = null;
        IToken ni = null;
        IToken q = null;
        IToken lp = null;
        IToken s = null;
        IToken q1 = null;
        IToken RBRACK436 = null;
        IToken RPAREN437 = null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent435 = default(EsperEPL2GrammarParser.eventPropertyIdent_return);


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK436_tree=null;
        CommonTree RPAREN437_tree=null;
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL = new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION = new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL = new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT = new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent = new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try 
    	{
            // EsperEPL2Grammar.g:1032:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1032:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            	PushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic6172);
            	eventPropertyIdent435 = eventPropertyIdent();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_eventPropertyIdent.Add(eventPropertyIdent435.Tree);
            	// EsperEPL2Grammar.g:1032:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            	int alt143 = 4;
            	alt143 = dfa143.Predict(input);
            	switch (alt143) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:1033:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
            	        {
            	        	lb=(IToken)Match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic6181); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_LBRACK.Add(lb);

            	        	ni=(IToken)Match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic6185); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_NUM_INT.Add(ni);

            	        	RBRACK436=(IToken)Match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic6187); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_RBRACK.Add(RBRACK436);

            	        	// EsperEPL2Grammar.g:1033:32: (q= QUESTION )?
            	        	int alt140 = 2;
            	        	alt140 = dfa140.Predict(input);
            	        	switch (alt140) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1033:33: q= QUESTION
            	        	        {
            	        	        	q=(IToken)Match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic6192); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_QUESTION.Add(q);


            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:1035:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
            	        {
            	        	lp=(IToken)Match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic6206); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_LPAREN.Add(lp);

            	        	// EsperEPL2Grammar.g:1035:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            	        	int alt141 = 2;
            	        	int LA141_0 = input.LA(1);

            	        	if ( (LA141_0 == STRING_LITERAL) )
            	        	{
            	        	    alt141 = 1;
            	        	}
            	        	else if ( (LA141_0 == QUOTED_STRING_LITERAL) )
            	        	{
            	        	    alt141 = 2;
            	        	}
            	        	else 
            	        	{
            	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	    NoViableAltException nvae_d141s0 =
            	        	        new NoViableAltException("", 141, 0, input);

            	        	    throw nvae_d141s0;
            	        	}
            	        	switch (alt141) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1035:15: s= STRING_LITERAL
            	        	        {
            	        	        	s=(IToken)Match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic6211); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_STRING_LITERAL.Add(s);


            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // EsperEPL2Grammar.g:1035:34: s= QUOTED_STRING_LITERAL
            	        	        {
            	        	        	s=(IToken)Match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic6217); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.Add(s);


            	        	        }
            	        	        break;

            	        	}

            	        	RPAREN437=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic6220); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_RPAREN.Add(RPAREN437);

            	        	// EsperEPL2Grammar.g:1035:66: (q= QUESTION )?
            	        	int alt142 = 2;
            	        	alt142 = dfa142.Predict(input);
            	        	switch (alt142) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1035:67: q= QUESTION
            	        	        {
            	        	        	q=(IToken)Match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic6225); if (state.failed) return retval; 
            	        	        	if ( state.backtracking==0 ) stream_QUESTION.Add(q);


            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 3 :
            	        // EsperEPL2Grammar.g:1037:4: q1= QUESTION
            	        {
            	        	q1=(IToken)Match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic6239); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_QUESTION.Add(q1);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          eventPropertyIdent, s, eventPropertyIdent, s, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, ni, ni
            	// token labels:      s, ni
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleTokenStream stream_s = new RewriteRuleTokenStream(adaptor, "token s", s);
            	RewriteRuleTokenStream stream_ni = new RewriteRuleTokenStream(adaptor, "token ni", ni);
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1040:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            	if (lb!= null && q == null)
            	{
            	    // EsperEPL2Grammar.g:1040:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

            	    adaptor.AddChild(root_1, stream_eventPropertyIdent.NextTree());
            	    adaptor.AddChild(root_1, stream_ni.NextNode());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 1041:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            	if (lb!= null && q != null)
            	{
            	    // EsperEPL2Grammar.g:1041:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

            	    adaptor.AddChild(root_1, stream_eventPropertyIdent.NextTree());
            	    adaptor.AddChild(root_1, stream_ni.NextNode());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 1042:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            	if (lp!= null && q == null)
            	{
            	    // EsperEPL2Grammar.g:1042:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

            	    adaptor.AddChild(root_1, stream_eventPropertyIdent.NextTree());
            	    adaptor.AddChild(root_1, stream_s.NextNode());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 1043:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            	if (lp!= null && q != null)
            	{
            	    // EsperEPL2Grammar.g:1043:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

            	    adaptor.AddChild(root_1, stream_eventPropertyIdent.NextTree());
            	    adaptor.AddChild(root_1, stream_s.NextNode());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 1044:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            	if (q1 != null)
            	{
            	    // EsperEPL2Grammar.g:1044:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

            	    adaptor.AddChild(root_1, stream_eventPropertyIdent.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}
            	else // 1045:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            	{
            	    // EsperEPL2Grammar.g:1045:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

            	    adaptor.AddChild(root_1, stream_eventPropertyIdent.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public class eventPropertyIdent_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1048:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken ESCAPECHAR438 = null;
        IToken DOT439 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = default(EsperEPL2GrammarParser.keywordAllowedIdent_return);

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = default(EsperEPL2GrammarParser.keywordAllowedIdent_return);


        CommonTree ESCAPECHAR438_tree=null;
        CommonTree DOT439_tree=null;
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR = new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent = new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try 
    	{
            // EsperEPL2Grammar.g:1050:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1050:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            	PushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent6362);
            	ipi = keywordAllowedIdent();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_keywordAllowedIdent.Add(ipi.Tree);
            	if ( state.backtracking == 0 ) 
            	{
            	   identifier = ipi.Tree.ToString(); 
            	}
            	// EsperEPL2Grammar.g:1051:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            	do 
            	{
            	    int alt145 = 2;
            	    alt145 = dfa145.Predict(input);
            	    switch (alt145) 
            		{
            			case 1 :
            			    // EsperEPL2Grammar.g:1052:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            			    {
            			    	ESCAPECHAR438=(IToken)Match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent6374); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_ESCAPECHAR.Add(ESCAPECHAR438);

            			    	DOT439=(IToken)Match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent6376); if (state.failed) return retval; 
            			    	if ( state.backtracking==0 ) stream_DOT.Add(DOT439);

            			    	// EsperEPL2Grammar.g:1052:24: (ipi2= keywordAllowedIdent )?
            			    	int alt144 = 2;
            			    	alt144 = dfa144.Predict(input);
            			    	switch (alt144) 
            			    	{
            			    	    case 1 :
            			    	        // EsperEPL2Grammar.g:1052:24: ipi2= keywordAllowedIdent
            			    	        {
            			    	        	PushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent6380);
            			    	        	ipi2 = keywordAllowedIdent();
            			    	        	state.followingStackPointer--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking==0 ) stream_keywordAllowedIdent.Add(ipi2.Tree);

            			    	        }
            			    	        break;

            			    	}

            			    	if ( state.backtracking == 0 ) 
            			    	{
            			    	   identifier += "."; if (ipi2 != null) identifier += ipi2.Tree.ToString(); 
            			    	}

            			    }
            			    break;

            			default:
            			    goto loop145;
            	    }
            	} while (true);

            	loop145:
            		;	// Stops C# compiler whining that label 'loop145' has no statements



            	// AST REWRITE
            	// elements:          
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1054:7: -> ^( IDENT[identifier] )
            	{
            	    // EsperEPL2Grammar.g:1054:10: ^( IDENT[identifier] )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IDENT, identifier), root_1);

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public class keywordAllowedIdent_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1057:1: keywordAllowedIdent : (i1= IDENT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | SECONDS | MINUTES | FIRST | LAST | UNIDIRECTIONAL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW -> ^( IDENT[identifier] ) );
    public EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken i1 = null;
        IToken COUNT440 = null;
        IToken ESCAPE441 = null;
        IToken EVERY_EXPR442 = null;
        IToken SUM443 = null;
        IToken AVG444 = null;
        IToken MAX445 = null;
        IToken MIN446 = null;
        IToken COALESCE447 = null;
        IToken MEDIAN448 = null;
        IToken STDDEV449 = null;
        IToken AVEDEV450 = null;
        IToken EVENTS451 = null;
        IToken SECONDS452 = null;
        IToken MINUTES453 = null;
        IToken FIRST454 = null;
        IToken LAST455 = null;
        IToken UNIDIRECTIONAL456 = null;
        IToken PATTERN457 = null;
        IToken SQL458 = null;
        IToken METADATASQL459 = null;
        IToken PREVIOUS460 = null;
        IToken PRIOR461 = null;
        IToken WEEKDAY462 = null;
        IToken LW463 = null;
        IToken INSTANCEOF464 = null;
        IToken CAST465 = null;
        IToken SNAPSHOT466 = null;
        IToken VARIABLE467 = null;
        IToken WINDOW468 = null;

        CommonTree i1_tree=null;
        CommonTree COUNT440_tree=null;
        CommonTree ESCAPE441_tree=null;
        CommonTree EVERY_EXPR442_tree=null;
        CommonTree SUM443_tree=null;
        CommonTree AVG444_tree=null;
        CommonTree MAX445_tree=null;
        CommonTree MIN446_tree=null;
        CommonTree COALESCE447_tree=null;
        CommonTree MEDIAN448_tree=null;
        CommonTree STDDEV449_tree=null;
        CommonTree AVEDEV450_tree=null;
        CommonTree EVENTS451_tree=null;
        CommonTree SECONDS452_tree=null;
        CommonTree MINUTES453_tree=null;
        CommonTree FIRST454_tree=null;
        CommonTree LAST455_tree=null;
        CommonTree UNIDIRECTIONAL456_tree=null;
        CommonTree PATTERN457_tree=null;
        CommonTree SQL458_tree=null;
        CommonTree METADATASQL459_tree=null;
        CommonTree PREVIOUS460_tree=null;
        CommonTree PRIOR461_tree=null;
        CommonTree WEEKDAY462_tree=null;
        CommonTree LW463_tree=null;
        CommonTree INSTANCEOF464_tree=null;
        CommonTree CAST465_tree=null;
        CommonTree SNAPSHOT466_tree=null;
        CommonTree VARIABLE467_tree=null;
        CommonTree WINDOW468_tree=null;
        RewriteRuleTokenStream stream_WINDOW = new RewriteRuleTokenStream(adaptor,"token WINDOW");

         String identifier = ""; 
        try 
    	{
            // EsperEPL2Grammar.g:1059:2: (i1= IDENT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | SECONDS | MINUTES | FIRST | LAST | UNIDIRECTIONAL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW -> ^( IDENT[identifier] ) )
            int alt146 = 30;
            alt146 = dfa146.Predict(input);
            switch (alt146) 
            {
                case 1 :
                    // EsperEPL2Grammar.g:1059:4: i1= IDENT
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	i1=(IToken)Match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent6423); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{i1_tree = (CommonTree)adaptor.Create(i1);
                    		adaptor.AddChild(root_0, i1_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = i1.Text; 
                    	}

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1060:4: COUNT
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	COUNT440=(IToken)Match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent6430); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{COUNT440_tree = (CommonTree)adaptor.Create(COUNT440);
                    		adaptor.AddChild(root_0, COUNT440_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "count"; 
                    	}

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1061:4: ESCAPE
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	ESCAPE441=(IToken)Match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent6437); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{ESCAPE441_tree = (CommonTree)adaptor.Create(ESCAPE441);
                    		adaptor.AddChild(root_0, ESCAPE441_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "escape"; 
                    	}

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1062:8: EVERY_EXPR
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	EVERY_EXPR442=(IToken)Match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent6448); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{EVERY_EXPR442_tree = (CommonTree)adaptor.Create(EVERY_EXPR442);
                    		adaptor.AddChild(root_0, EVERY_EXPR442_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "every"; 
                    	}

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1063:4: SUM
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	SUM443=(IToken)Match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent6455); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{SUM443_tree = (CommonTree)adaptor.Create(SUM443);
                    		adaptor.AddChild(root_0, SUM443_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "sum"; 
                    	}

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1064:4: AVG
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	AVG444=(IToken)Match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent6462); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{AVG444_tree = (CommonTree)adaptor.Create(AVG444);
                    		adaptor.AddChild(root_0, AVG444_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "avg"; 
                    	}

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1065:4: MAX
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	MAX445=(IToken)Match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent6469); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{MAX445_tree = (CommonTree)adaptor.Create(MAX445);
                    		adaptor.AddChild(root_0, MAX445_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "max"; 
                    	}

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1066:4: MIN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	MIN446=(IToken)Match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent6476); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{MIN446_tree = (CommonTree)adaptor.Create(MIN446);
                    		adaptor.AddChild(root_0, MIN446_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "min"; 
                    	}

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1067:4: COALESCE
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	COALESCE447=(IToken)Match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent6483); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{COALESCE447_tree = (CommonTree)adaptor.Create(COALESCE447);
                    		adaptor.AddChild(root_0, COALESCE447_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "coalesce"; 
                    	}

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1068:4: MEDIAN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	MEDIAN448=(IToken)Match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent6490); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{MEDIAN448_tree = (CommonTree)adaptor.Create(MEDIAN448);
                    		adaptor.AddChild(root_0, MEDIAN448_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "median"; 
                    	}

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1069:4: STDDEV
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	STDDEV449=(IToken)Match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent6497); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{STDDEV449_tree = (CommonTree)adaptor.Create(STDDEV449);
                    		adaptor.AddChild(root_0, STDDEV449_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "stddev"; 
                    	}

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1070:4: AVEDEV
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	AVEDEV450=(IToken)Match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent6504); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{AVEDEV450_tree = (CommonTree)adaptor.Create(AVEDEV450);
                    		adaptor.AddChild(root_0, AVEDEV450_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "avedev"; 
                    	}

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1071:4: EVENTS
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	EVENTS451=(IToken)Match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent6511); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{EVENTS451_tree = (CommonTree)adaptor.Create(EVENTS451);
                    		adaptor.AddChild(root_0, EVENTS451_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "events"; 
                    	}

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1072:4: SECONDS
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	SECONDS452=(IToken)Match(input,SECONDS,FOLLOW_SECONDS_in_keywordAllowedIdent6518); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{SECONDS452_tree = (CommonTree)adaptor.Create(SECONDS452);
                    		adaptor.AddChild(root_0, SECONDS452_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "seconds"; 
                    	}

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1073:4: MINUTES
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	MINUTES453=(IToken)Match(input,MINUTES,FOLLOW_MINUTES_in_keywordAllowedIdent6525); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{MINUTES453_tree = (CommonTree)adaptor.Create(MINUTES453);
                    		adaptor.AddChild(root_0, MINUTES453_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "minutes"; 
                    	}

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1074:4: FIRST
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	FIRST454=(IToken)Match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent6532); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{FIRST454_tree = (CommonTree)adaptor.Create(FIRST454);
                    		adaptor.AddChild(root_0, FIRST454_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "first"; 
                    	}

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1075:4: LAST
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	LAST455=(IToken)Match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent6539); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{LAST455_tree = (CommonTree)adaptor.Create(LAST455);
                    		adaptor.AddChild(root_0, LAST455_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "last"; 
                    	}

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1076:4: UNIDIRECTIONAL
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	UNIDIRECTIONAL456=(IToken)Match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent6546); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{UNIDIRECTIONAL456_tree = (CommonTree)adaptor.Create(UNIDIRECTIONAL456);
                    		adaptor.AddChild(root_0, UNIDIRECTIONAL456_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "unidirectional"; 
                    	}

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1077:4: PATTERN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PATTERN457=(IToken)Match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent6553); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{PATTERN457_tree = (CommonTree)adaptor.Create(PATTERN457);
                    		adaptor.AddChild(root_0, PATTERN457_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "pattern"; 
                    	}

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1078:4: SQL
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	SQL458=(IToken)Match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent6560); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{SQL458_tree = (CommonTree)adaptor.Create(SQL458);
                    		adaptor.AddChild(root_0, SQL458_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "sql"; 
                    	}

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1079:4: METADATASQL
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	METADATASQL459=(IToken)Match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent6567); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{METADATASQL459_tree = (CommonTree)adaptor.Create(METADATASQL459);
                    		adaptor.AddChild(root_0, METADATASQL459_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "metadatasql"; 
                    	}

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1080:4: PREVIOUS
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PREVIOUS460=(IToken)Match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent6574); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{PREVIOUS460_tree = (CommonTree)adaptor.Create(PREVIOUS460);
                    		adaptor.AddChild(root_0, PREVIOUS460_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "prev"; 
                    	}

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1081:4: PRIOR
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	PRIOR461=(IToken)Match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent6581); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{PRIOR461_tree = (CommonTree)adaptor.Create(PRIOR461);
                    		adaptor.AddChild(root_0, PRIOR461_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "prior"; 
                    	}

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1082:4: WEEKDAY
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	WEEKDAY462=(IToken)Match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent6588); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{WEEKDAY462_tree = (CommonTree)adaptor.Create(WEEKDAY462);
                    		adaptor.AddChild(root_0, WEEKDAY462_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "weekday"; 
                    	}

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1083:4: LW
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	LW463=(IToken)Match(input,LW,FOLLOW_LW_in_keywordAllowedIdent6595); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{LW463_tree = (CommonTree)adaptor.Create(LW463);
                    		adaptor.AddChild(root_0, LW463_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "lastweekday"; 
                    	}

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1084:4: INSTANCEOF
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	INSTANCEOF464=(IToken)Match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent6602); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{INSTANCEOF464_tree = (CommonTree)adaptor.Create(INSTANCEOF464);
                    		adaptor.AddChild(root_0, INSTANCEOF464_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "instanceof"; 
                    	}

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1085:4: CAST
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	CAST465=(IToken)Match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent6609); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{CAST465_tree = (CommonTree)adaptor.Create(CAST465);
                    		adaptor.AddChild(root_0, CAST465_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "cast"; 
                    	}

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1086:4: SNAPSHOT
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	SNAPSHOT466=(IToken)Match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent6616); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{SNAPSHOT466_tree = (CommonTree)adaptor.Create(SNAPSHOT466);
                    		adaptor.AddChild(root_0, SNAPSHOT466_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "snapshot"; 
                    	}

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1087:4: VARIABLE
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();

                    	VARIABLE467=(IToken)Match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent6623); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{VARIABLE467_tree = (CommonTree)adaptor.Create(VARIABLE467);
                    		adaptor.AddChild(root_0, VARIABLE467_tree);
                    	}
                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "variable"; 
                    	}

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1088:4: WINDOW
                    {
                    	WINDOW468=(IToken)Match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent6632); if (state.failed) return retval; 
                    	if ( state.backtracking==0 ) stream_WINDOW.Add(WINDOW468);

                    	if ( state.backtracking == 0 ) 
                    	{
                    	   identifier = "window"; 
                    	}


                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( state.backtracking==0 ) {
                    	retval.Tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1089:2: -> ^( IDENT[identifier] )
                    	{
                    	    // EsperEPL2Grammar.g:1089:5: ^( IDENT[identifier] )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IDENT, identifier), root_1);

                    	    adaptor.AddChild(root_0, root_1);
                    	    }

                    	}

                    	retval.Tree = root_0;retval.Tree = root_0;}
                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public class time_period_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "time_period"
    // EsperEPL2Grammar.g:1092:1: time_period : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public EsperEPL2GrammarParser.time_period_return time_period() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.time_period_return retval = new EsperEPL2GrammarParser.time_period_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart469 = default(EsperEPL2GrammarParser.dayPart_return);

        EsperEPL2GrammarParser.hourPart_return hourPart470 = default(EsperEPL2GrammarParser.hourPart_return);

        EsperEPL2GrammarParser.minutePart_return minutePart471 = default(EsperEPL2GrammarParser.minutePart_return);

        EsperEPL2GrammarParser.secondPart_return secondPart472 = default(EsperEPL2GrammarParser.secondPart_return);

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart473 = default(EsperEPL2GrammarParser.millisecondPart_return);

        EsperEPL2GrammarParser.hourPart_return hourPart474 = default(EsperEPL2GrammarParser.hourPart_return);

        EsperEPL2GrammarParser.minutePart_return minutePart475 = default(EsperEPL2GrammarParser.minutePart_return);

        EsperEPL2GrammarParser.secondPart_return secondPart476 = default(EsperEPL2GrammarParser.secondPart_return);

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart477 = default(EsperEPL2GrammarParser.millisecondPart_return);

        EsperEPL2GrammarParser.minutePart_return minutePart478 = default(EsperEPL2GrammarParser.minutePart_return);

        EsperEPL2GrammarParser.secondPart_return secondPart479 = default(EsperEPL2GrammarParser.secondPart_return);

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart480 = default(EsperEPL2GrammarParser.millisecondPart_return);

        EsperEPL2GrammarParser.secondPart_return secondPart481 = default(EsperEPL2GrammarParser.secondPart_return);

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart482 = default(EsperEPL2GrammarParser.millisecondPart_return);

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart483 = default(EsperEPL2GrammarParser.millisecondPart_return);


        RewriteRuleSubtreeStream stream_secondPart = new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart = new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart = new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart = new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart = new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try 
    	{
            // EsperEPL2Grammar.g:1093:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1094:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            	// EsperEPL2Grammar.g:1094:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            	int alt157 = 5;
            	alt157 = dfa157.Predict(input);
            	switch (alt157) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:1095:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
            	        {
            	        	PushFollow(FOLLOW_dayPart_in_time_period6662);
            	        	dayPart469 = dayPart();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_dayPart.Add(dayPart469.Tree);
            	        	// EsperEPL2Grammar.g:1095:11: ( hourPart )?
            	        	int alt147 = 2;
            	        	alt147 = dfa147.Predict(input);
            	        	switch (alt147) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1095:11: hourPart
            	        	        {
            	        	        	PushFollow(FOLLOW_hourPart_in_time_period6664);
            	        	        	hourPart470 = hourPart();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_hourPart.Add(hourPart470.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// EsperEPL2Grammar.g:1095:21: ( minutePart )?
            	        	int alt148 = 2;
            	        	alt148 = dfa148.Predict(input);
            	        	switch (alt148) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1095:21: minutePart
            	        	        {
            	        	        	PushFollow(FOLLOW_minutePart_in_time_period6667);
            	        	        	minutePart471 = minutePart();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_minutePart.Add(minutePart471.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// EsperEPL2Grammar.g:1095:33: ( secondPart )?
            	        	int alt149 = 2;
            	        	alt149 = dfa149.Predict(input);
            	        	switch (alt149) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1095:33: secondPart
            	        	        {
            	        	        	PushFollow(FOLLOW_secondPart_in_time_period6670);
            	        	        	secondPart472 = secondPart();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_secondPart.Add(secondPart472.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// EsperEPL2Grammar.g:1095:45: ( millisecondPart )?
            	        	int alt150 = 2;
            	        	int LA150_0 = input.LA(1);

            	        	if ( (LA150_0 == NUM_DOUBLE || (LA150_0 >= NUM_INT && LA150_0 <= NUM_FLOAT)) )
            	        	{
            	        	    alt150 = 1;
            	        	}
            	        	switch (alt150) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1095:45: millisecondPart
            	        	        {
            	        	        	PushFollow(FOLLOW_millisecondPart_in_time_period6673);
            	        	        	millisecondPart473 = millisecondPart();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_millisecondPart.Add(millisecondPart473.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:1096:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
            	        {
            	        	PushFollow(FOLLOW_hourPart_in_time_period6679);
            	        	hourPart474 = hourPart();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_hourPart.Add(hourPart474.Tree);
            	        	// EsperEPL2Grammar.g:1096:13: ( minutePart )?
            	        	int alt151 = 2;
            	        	alt151 = dfa151.Predict(input);
            	        	switch (alt151) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1096:13: minutePart
            	        	        {
            	        	        	PushFollow(FOLLOW_minutePart_in_time_period6681);
            	        	        	minutePart475 = minutePart();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_minutePart.Add(minutePart475.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// EsperEPL2Grammar.g:1096:25: ( secondPart )?
            	        	int alt152 = 2;
            	        	alt152 = dfa152.Predict(input);
            	        	switch (alt152) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1096:25: secondPart
            	        	        {
            	        	        	PushFollow(FOLLOW_secondPart_in_time_period6684);
            	        	        	secondPart476 = secondPart();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_secondPart.Add(secondPart476.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// EsperEPL2Grammar.g:1096:37: ( millisecondPart )?
            	        	int alt153 = 2;
            	        	int LA153_0 = input.LA(1);

            	        	if ( (LA153_0 == NUM_DOUBLE || (LA153_0 >= NUM_INT && LA153_0 <= NUM_FLOAT)) )
            	        	{
            	        	    alt153 = 1;
            	        	}
            	        	switch (alt153) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1096:37: millisecondPart
            	        	        {
            	        	        	PushFollow(FOLLOW_millisecondPart_in_time_period6687);
            	        	        	millisecondPart477 = millisecondPart();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_millisecondPart.Add(millisecondPart477.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 3 :
            	        // EsperEPL2Grammar.g:1097:4: minutePart ( secondPart )? ( millisecondPart )?
            	        {
            	        	PushFollow(FOLLOW_minutePart_in_time_period6693);
            	        	minutePart478 = minutePart();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_minutePart.Add(minutePart478.Tree);
            	        	// EsperEPL2Grammar.g:1097:15: ( secondPart )?
            	        	int alt154 = 2;
            	        	alt154 = dfa154.Predict(input);
            	        	switch (alt154) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1097:15: secondPart
            	        	        {
            	        	        	PushFollow(FOLLOW_secondPart_in_time_period6695);
            	        	        	secondPart479 = secondPart();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_secondPart.Add(secondPart479.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// EsperEPL2Grammar.g:1097:27: ( millisecondPart )?
            	        	int alt155 = 2;
            	        	int LA155_0 = input.LA(1);

            	        	if ( (LA155_0 == NUM_DOUBLE || (LA155_0 >= NUM_INT && LA155_0 <= NUM_FLOAT)) )
            	        	{
            	        	    alt155 = 1;
            	        	}
            	        	switch (alt155) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1097:27: millisecondPart
            	        	        {
            	        	        	PushFollow(FOLLOW_millisecondPart_in_time_period6698);
            	        	        	millisecondPart480 = millisecondPart();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_millisecondPart.Add(millisecondPart480.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 4 :
            	        // EsperEPL2Grammar.g:1098:4: secondPart ( millisecondPart )?
            	        {
            	        	PushFollow(FOLLOW_secondPart_in_time_period6704);
            	        	secondPart481 = secondPart();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_secondPart.Add(secondPart481.Tree);
            	        	// EsperEPL2Grammar.g:1098:15: ( millisecondPart )?
            	        	int alt156 = 2;
            	        	int LA156_0 = input.LA(1);

            	        	if ( (LA156_0 == NUM_DOUBLE || (LA156_0 >= NUM_INT && LA156_0 <= NUM_FLOAT)) )
            	        	{
            	        	    alt156 = 1;
            	        	}
            	        	switch (alt156) 
            	        	{
            	        	    case 1 :
            	        	        // EsperEPL2Grammar.g:1098:15: millisecondPart
            	        	        {
            	        	        	PushFollow(FOLLOW_millisecondPart_in_time_period6706);
            	        	        	millisecondPart482 = millisecondPart();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking==0 ) stream_millisecondPart.Add(millisecondPart482.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 5 :
            	        // EsperEPL2Grammar.g:1099:4: millisecondPart
            	        {
            	        	PushFollow(FOLLOW_millisecondPart_in_time_period6712);
            	        	millisecondPart483 = millisecondPart();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking==0 ) stream_millisecondPart.Add(millisecondPart483.Tree);

            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          dayPart, hourPart, minutePart, millisecondPart, secondPart
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1101:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            	{
            	    // EsperEPL2Grammar.g:1101:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TIME_PERIOD, "TIME_PERIOD"), root_1);

            	    // EsperEPL2Grammar.g:1101:20: ( dayPart )?
            	    if ( stream_dayPart.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_dayPart.NextTree());

            	    }
            	    stream_dayPart.Reset();
            	    // EsperEPL2Grammar.g:1101:29: ( hourPart )?
            	    if ( stream_hourPart.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_hourPart.NextTree());

            	    }
            	    stream_hourPart.Reset();
            	    // EsperEPL2Grammar.g:1101:39: ( minutePart )?
            	    if ( stream_minutePart.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_minutePart.NextTree());

            	    }
            	    stream_minutePart.Reset();
            	    // EsperEPL2Grammar.g:1101:51: ( secondPart )?
            	    if ( stream_secondPart.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_secondPart.NextTree());

            	    }
            	    stream_secondPart.Reset();
            	    // EsperEPL2Grammar.g:1101:63: ( millisecondPart )?
            	    if ( stream_millisecondPart.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_millisecondPart.NextTree());

            	    }
            	    stream_millisecondPart.Reset();

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "time_period"

    public class dayPart_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1104:1: dayPart : number ( 'days' | 'day' ) -> ^( DAY_PART number ) ;
    public EsperEPL2GrammarParser.dayPart_return dayPart() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken string_literal485 = null;
        IToken string_literal486 = null;
        EsperEPL2GrammarParser.number_return number484 = default(EsperEPL2GrammarParser.number_return);


        CommonTree string_literal485_tree=null;
        CommonTree string_literal486_tree=null;
        RewriteRuleTokenStream stream_241 = new RewriteRuleTokenStream(adaptor,"token 241");
        RewriteRuleTokenStream stream_242 = new RewriteRuleTokenStream(adaptor,"token 242");
        RewriteRuleSubtreeStream stream_number = new RewriteRuleSubtreeStream(adaptor,"rule number");
        try 
    	{
            // EsperEPL2Grammar.g:1105:2: ( number ( 'days' | 'day' ) -> ^( DAY_PART number ) )
            // EsperEPL2Grammar.g:1105:4: number ( 'days' | 'day' )
            {
            	PushFollow(FOLLOW_number_in_dayPart6749);
            	number484 = number();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_number.Add(number484.Tree);
            	// EsperEPL2Grammar.g:1105:11: ( 'days' | 'day' )
            	int alt158 = 2;
            	int LA158_0 = input.LA(1);

            	if ( (LA158_0 == 241) )
            	{
            	    alt158 = 1;
            	}
            	else if ( (LA158_0 == 242) )
            	{
            	    alt158 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d158s0 =
            	        new NoViableAltException("", 158, 0, input);

            	    throw nvae_d158s0;
            	}
            	switch (alt158) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:1105:12: 'days'
            	        {
            	        	string_literal485=(IToken)Match(input,241,FOLLOW_241_in_dayPart6752); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_241.Add(string_literal485);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:1105:21: 'day'
            	        {
            	        	string_literal486=(IToken)Match(input,242,FOLLOW_242_in_dayPart6756); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_242.Add(string_literal486);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          number
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1106:3: -> ^( DAY_PART number )
            	{
            	    // EsperEPL2Grammar.g:1106:6: ^( DAY_PART number )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DAY_PART, "DAY_PART"), root_1);

            	    adaptor.AddChild(root_1, stream_number.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public class hourPart_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1109:1: hourPart : number ( 'hours' | 'hour' ) -> ^( HOUR_PART number ) ;
    public EsperEPL2GrammarParser.hourPart_return hourPart() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken string_literal488 = null;
        IToken string_literal489 = null;
        EsperEPL2GrammarParser.number_return number487 = default(EsperEPL2GrammarParser.number_return);


        CommonTree string_literal488_tree=null;
        CommonTree string_literal489_tree=null;
        RewriteRuleTokenStream stream_244 = new RewriteRuleTokenStream(adaptor,"token 244");
        RewriteRuleTokenStream stream_243 = new RewriteRuleTokenStream(adaptor,"token 243");
        RewriteRuleSubtreeStream stream_number = new RewriteRuleSubtreeStream(adaptor,"rule number");
        try 
    	{
            // EsperEPL2Grammar.g:1110:2: ( number ( 'hours' | 'hour' ) -> ^( HOUR_PART number ) )
            // EsperEPL2Grammar.g:1110:4: number ( 'hours' | 'hour' )
            {
            	PushFollow(FOLLOW_number_in_hourPart6779);
            	number487 = number();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_number.Add(number487.Tree);
            	// EsperEPL2Grammar.g:1110:11: ( 'hours' | 'hour' )
            	int alt159 = 2;
            	int LA159_0 = input.LA(1);

            	if ( (LA159_0 == 243) )
            	{
            	    alt159 = 1;
            	}
            	else if ( (LA159_0 == 244) )
            	{
            	    alt159 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d159s0 =
            	        new NoViableAltException("", 159, 0, input);

            	    throw nvae_d159s0;
            	}
            	switch (alt159) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:1110:12: 'hours'
            	        {
            	        	string_literal488=(IToken)Match(input,243,FOLLOW_243_in_hourPart6782); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_243.Add(string_literal488);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:1110:22: 'hour'
            	        {
            	        	string_literal489=(IToken)Match(input,244,FOLLOW_244_in_hourPart6786); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_244.Add(string_literal489);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          number
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1111:3: -> ^( HOUR_PART number )
            	{
            	    // EsperEPL2Grammar.g:1111:6: ^( HOUR_PART number )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(HOUR_PART, "HOUR_PART"), root_1);

            	    adaptor.AddChild(root_1, stream_number.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public class minutePart_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1114:1: minutePart : number ( 'minutes' | 'minute' | 'min' ) -> ^( MINUTE_PART number ) ;
    public EsperEPL2GrammarParser.minutePart_return minutePart() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken string_literal491 = null;
        IToken string_literal492 = null;
        IToken string_literal493 = null;
        EsperEPL2GrammarParser.number_return number490 = default(EsperEPL2GrammarParser.number_return);


        CommonTree string_literal491_tree=null;
        CommonTree string_literal492_tree=null;
        CommonTree string_literal493_tree=null;
        RewriteRuleTokenStream stream_MINUTES = new RewriteRuleTokenStream(adaptor,"token MINUTES");
        RewriteRuleTokenStream stream_MIN = new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_245 = new RewriteRuleTokenStream(adaptor,"token 245");
        RewriteRuleSubtreeStream stream_number = new RewriteRuleSubtreeStream(adaptor,"rule number");
        try 
    	{
            // EsperEPL2Grammar.g:1115:2: ( number ( 'minutes' | 'minute' | 'min' ) -> ^( MINUTE_PART number ) )
            // EsperEPL2Grammar.g:1115:4: number ( 'minutes' | 'minute' | 'min' )
            {
            	PushFollow(FOLLOW_number_in_minutePart6809);
            	number490 = number();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_number.Add(number490.Tree);
            	// EsperEPL2Grammar.g:1115:11: ( 'minutes' | 'minute' | 'min' )
            	int alt160 = 3;
            	switch ( input.LA(1) ) 
            	{
            	case MINUTES:
            		{
            	    alt160 = 1;
            	    }
            	    break;
            	case 245:
            		{
            	    alt160 = 2;
            	    }
            	    break;
            	case MIN:
            		{
            	    alt160 = 3;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d160s0 =
            		        new NoViableAltException("", 160, 0, input);

            		    throw nvae_d160s0;
            	}

            	switch (alt160) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:1115:12: 'minutes'
            	        {
            	        	string_literal491=(IToken)Match(input,MINUTES,FOLLOW_MINUTES_in_minutePart6812); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_MINUTES.Add(string_literal491);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:1115:24: 'minute'
            	        {
            	        	string_literal492=(IToken)Match(input,245,FOLLOW_245_in_minutePart6816); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_245.Add(string_literal492);


            	        }
            	        break;
            	    case 3 :
            	        // EsperEPL2Grammar.g:1115:35: 'min'
            	        {
            	        	string_literal493=(IToken)Match(input,MIN,FOLLOW_MIN_in_minutePart6820); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_MIN.Add(string_literal493);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          number
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1116:3: -> ^( MINUTE_PART number )
            	{
            	    // EsperEPL2Grammar.g:1116:6: ^( MINUTE_PART number )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MINUTE_PART, "MINUTE_PART"), root_1);

            	    adaptor.AddChild(root_1, stream_number.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public class secondPart_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1119:1: secondPart : number ( 'seconds' | 'second' | 'sec' ) -> ^( SECOND_PART number ) ;
    public EsperEPL2GrammarParser.secondPart_return secondPart() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken string_literal495 = null;
        IToken string_literal496 = null;
        IToken string_literal497 = null;
        EsperEPL2GrammarParser.number_return number494 = default(EsperEPL2GrammarParser.number_return);


        CommonTree string_literal495_tree=null;
        CommonTree string_literal496_tree=null;
        CommonTree string_literal497_tree=null;
        RewriteRuleTokenStream stream_SECONDS = new RewriteRuleTokenStream(adaptor,"token SECONDS");
        RewriteRuleTokenStream stream_247 = new RewriteRuleTokenStream(adaptor,"token 247");
        RewriteRuleTokenStream stream_246 = new RewriteRuleTokenStream(adaptor,"token 246");
        RewriteRuleSubtreeStream stream_number = new RewriteRuleSubtreeStream(adaptor,"rule number");
        try 
    	{
            // EsperEPL2Grammar.g:1120:2: ( number ( 'seconds' | 'second' | 'sec' ) -> ^( SECOND_PART number ) )
            // EsperEPL2Grammar.g:1120:4: number ( 'seconds' | 'second' | 'sec' )
            {
            	PushFollow(FOLLOW_number_in_secondPart6844);
            	number494 = number();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_number.Add(number494.Tree);
            	// EsperEPL2Grammar.g:1120:11: ( 'seconds' | 'second' | 'sec' )
            	int alt161 = 3;
            	switch ( input.LA(1) ) 
            	{
            	case SECONDS:
            		{
            	    alt161 = 1;
            	    }
            	    break;
            	case 246:
            		{
            	    alt161 = 2;
            	    }
            	    break;
            	case 247:
            		{
            	    alt161 = 3;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d161s0 =
            		        new NoViableAltException("", 161, 0, input);

            		    throw nvae_d161s0;
            	}

            	switch (alt161) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:1120:12: 'seconds'
            	        {
            	        	string_literal495=(IToken)Match(input,SECONDS,FOLLOW_SECONDS_in_secondPart6847); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_SECONDS.Add(string_literal495);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:1120:24: 'second'
            	        {
            	        	string_literal496=(IToken)Match(input,246,FOLLOW_246_in_secondPart6851); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_246.Add(string_literal496);


            	        }
            	        break;
            	    case 3 :
            	        // EsperEPL2Grammar.g:1120:35: 'sec'
            	        {
            	        	string_literal497=(IToken)Match(input,247,FOLLOW_247_in_secondPart6855); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_247.Add(string_literal497);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          number
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1121:3: -> ^( SECOND_PART number )
            	{
            	    // EsperEPL2Grammar.g:1121:6: ^( SECOND_PART number )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SECOND_PART, "SECOND_PART"), root_1);

            	    adaptor.AddChild(root_1, stream_number.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public class millisecondPart_return : ParserRuleReturnScope
    {
        private CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (CommonTree) value; }
        }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1124:1: millisecondPart : number ( 'milliseconds' | 'millisecond' | 'msec' ) -> ^( MILLISECOND_PART number ) ;
    public EsperEPL2GrammarParser.millisecondPart_return millisecondPart() // throws RecognitionException [1]
    {   
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.Start = input.LT(1);

        CommonTree root_0 = null;

        IToken string_literal499 = null;
        IToken string_literal500 = null;
        IToken string_literal501 = null;
        EsperEPL2GrammarParser.number_return number498 = default(EsperEPL2GrammarParser.number_return);


        CommonTree string_literal499_tree=null;
        CommonTree string_literal500_tree=null;
        CommonTree string_literal501_tree=null;
        RewriteRuleTokenStream stream_250 = new RewriteRuleTokenStream(adaptor,"token 250");
        RewriteRuleTokenStream stream_249 = new RewriteRuleTokenStream(adaptor,"token 249");
        RewriteRuleTokenStream stream_248 = new RewriteRuleTokenStream(adaptor,"token 248");
        RewriteRuleSubtreeStream stream_number = new RewriteRuleSubtreeStream(adaptor,"rule number");
        try 
    	{
            // EsperEPL2Grammar.g:1125:2: ( number ( 'milliseconds' | 'millisecond' | 'msec' ) -> ^( MILLISECOND_PART number ) )
            // EsperEPL2Grammar.g:1125:4: number ( 'milliseconds' | 'millisecond' | 'msec' )
            {
            	PushFollow(FOLLOW_number_in_millisecondPart6879);
            	number498 = number();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking==0 ) stream_number.Add(number498.Tree);
            	// EsperEPL2Grammar.g:1125:11: ( 'milliseconds' | 'millisecond' | 'msec' )
            	int alt162 = 3;
            	switch ( input.LA(1) ) 
            	{
            	case 248:
            		{
            	    alt162 = 1;
            	    }
            	    break;
            	case 249:
            		{
            	    alt162 = 2;
            	    }
            	    break;
            	case 250:
            		{
            	    alt162 = 3;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d162s0 =
            		        new NoViableAltException("", 162, 0, input);

            		    throw nvae_d162s0;
            	}

            	switch (alt162) 
            	{
            	    case 1 :
            	        // EsperEPL2Grammar.g:1125:12: 'milliseconds'
            	        {
            	        	string_literal499=(IToken)Match(input,248,FOLLOW_248_in_millisecondPart6882); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_248.Add(string_literal499);


            	        }
            	        break;
            	    case 2 :
            	        // EsperEPL2Grammar.g:1125:29: 'millisecond'
            	        {
            	        	string_literal500=(IToken)Match(input,249,FOLLOW_249_in_millisecondPart6886); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_249.Add(string_literal500);


            	        }
            	        break;
            	    case 3 :
            	        // EsperEPL2Grammar.g:1125:45: 'msec'
            	        {
            	        	string_literal501=(IToken)Match(input,250,FOLLOW_250_in_millisecondPart6890); if (state.failed) return retval; 
            	        	if ( state.backtracking==0 ) stream_250.Add(string_literal501);


            	        }
            	        break;

            	}



            	// AST REWRITE
            	// elements:          number
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( state.backtracking==0 ) {
            	retval.Tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));

            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1126:3: -> ^( MILLISECOND_PART number )
            	{
            	    // EsperEPL2Grammar.g:1126:6: ^( MILLISECOND_PART number )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

            	    adaptor.AddChild(root_1, stream_number.NextTree());

            	    adaptor.AddChild(root_0, root_1);
            	    }

            	}

            	retval.Tree = root_0;retval.Tree = root_0;}
            }

            retval.Stop = input.LT(-1);

            if ( state.backtracking==0 )
            {	retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally 
    	{
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    // $ANTLR start "synpred1_EsperEPL2Grammar"
    public void synpred1_EsperEPL2Grammar_fragment() //throws RecognitionException
    {   
        // EsperEPL2Grammar.g:579:4: ( streamSelector )
        // EsperEPL2Grammar.g:579:5: streamSelector
        {
        	PushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar2510);
        	streamSelector();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred1_EsperEPL2Grammar"

    // $ANTLR start "synpred2_EsperEPL2Grammar"
    public void synpred2_EsperEPL2Grammar_fragment() //throws RecognitionException
    {   
        // EsperEPL2Grammar.g:655:5: ( time_period )
        // EsperEPL2Grammar.g:655:6: time_period
        {
        	PushFollow(FOLLOW_time_period_in_synpred2_EsperEPL2Grammar3152);
        	time_period();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred2_EsperEPL2Grammar"

    // $ANTLR start "synpred3_EsperEPL2Grammar"
    public void synpred3_EsperEPL2Grammar_fragment() //throws RecognitionException
    {   
        // EsperEPL2Grammar.g:786:4: ( builtinFunc )
        // EsperEPL2Grammar.g:786:5: builtinFunc
        {
        	PushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar4439);
        	builtinFunc();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred3_EsperEPL2Grammar"

    // $ANTLR start "synpred4_EsperEPL2Grammar"
    public void synpred4_EsperEPL2Grammar_fragment() //throws RecognitionException
    {   
        // EsperEPL2Grammar.g:854:4: ( eventProperty )
        // EsperEPL2Grammar.g:854:5: eventProperty
        {
        	PushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar5073);
        	eventProperty();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred4_EsperEPL2Grammar"

    // $ANTLR start "synpred5_EsperEPL2Grammar"
    public void synpred5_EsperEPL2Grammar_fragment() //throws RecognitionException
    {   
        // EsperEPL2Grammar.g:939:4: ( singleParameter )
        // EsperEPL2Grammar.g:939:5: singleParameter
        {
        	PushFollow(FOLLOW_singleParameter_in_synpred5_EsperEPL2Grammar5576);
        	singleParameter();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred5_EsperEPL2Grammar"

    // $ANTLR start "synpred6_EsperEPL2Grammar"
    public void synpred6_EsperEPL2Grammar_fragment() //throws RecognitionException
    {   
        // EsperEPL2Grammar.g:940:5: ( numericParameterList )
        // EsperEPL2Grammar.g:940:6: numericParameterList
        {
        	PushFollow(FOLLOW_numericParameterList_in_synpred6_EsperEPL2Grammar5588);
        	numericParameterList();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred6_EsperEPL2Grammar"

    // $ANTLR start "synpred7_EsperEPL2Grammar"
    public void synpred7_EsperEPL2Grammar_fragment() //throws RecognitionException
    {   
        // EsperEPL2Grammar.g:941:4: ( arrayParameterList )
        // EsperEPL2Grammar.g:941:5: arrayParameterList
        {
        	PushFollow(FOLLOW_arrayParameterList_in_synpred7_EsperEPL2Grammar5599);
        	arrayParameterList();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred7_EsperEPL2Grammar"

    // Delegated rules

   	public bool synpred2_EsperEPL2Grammar() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred5_EsperEPL2Grammar() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred3_EsperEPL2Grammar() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred4_EsperEPL2Grammar() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred6_EsperEPL2Grammar() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred7_EsperEPL2Grammar() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred1_EsperEPL2Grammar() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}


   	protected DFA3 dfa3;
   	protected DFA29 dfa29;
   	protected DFA33 dfa33;
   	protected DFA35 dfa35;
   	protected DFA37 dfa37;
   	protected DFA38 dfa38;
   	protected DFA41 dfa41;
   	protected DFA43 dfa43;
   	protected DFA45 dfa45;
   	protected DFA44 dfa44;
   	protected DFA46 dfa46;
   	protected DFA47 dfa47;
   	protected DFA52 dfa52;
   	protected DFA51 dfa51;
   	protected DFA53 dfa53;
   	protected DFA60 dfa60;
   	protected DFA65 dfa65;
   	protected DFA66 dfa66;
   	protected DFA67 dfa67;
   	protected DFA69 dfa69;
   	protected DFA70 dfa70;
   	protected DFA72 dfa72;
   	protected DFA71 dfa71;
   	protected DFA82 dfa82;
   	protected DFA74 dfa74;
   	protected DFA81 dfa81;
   	protected DFA80 dfa80;
   	protected DFA84 dfa84;
   	protected DFA83 dfa83;
   	protected DFA86 dfa86;
   	protected DFA88 dfa88;
   	protected DFA89 dfa89;
   	protected DFA95 dfa95;
   	protected DFA107 dfa107;
   	protected DFA96 dfa96;
   	protected DFA97 dfa97;
   	protected DFA99 dfa99;
   	protected DFA98 dfa98;
   	protected DFA100 dfa100;
   	protected DFA101 dfa101;
   	protected DFA102 dfa102;
   	protected DFA106 dfa106;
   	protected DFA111 dfa111;
   	protected DFA113 dfa113;
   	protected DFA115 dfa115;
   	protected DFA123 dfa123;
   	protected DFA124 dfa124;
   	protected DFA125 dfa125;
   	protected DFA127 dfa127;
   	protected DFA128 dfa128;
   	protected DFA132 dfa132;
   	protected DFA133 dfa133;
   	protected DFA135 dfa135;
   	protected DFA134 dfa134;
   	protected DFA136 dfa136;
   	protected DFA139 dfa139;
   	protected DFA143 dfa143;
   	protected DFA140 dfa140;
   	protected DFA142 dfa142;
   	protected DFA145 dfa145;
   	protected DFA144 dfa144;
   	protected DFA146 dfa146;
   	protected DFA157 dfa157;
   	protected DFA147 dfa147;
   	protected DFA148 dfa148;
   	protected DFA149 dfa149;
   	protected DFA151 dfa151;
   	protected DFA152 dfa152;
   	protected DFA154 dfa154;
	private void InitializeCyclicDFAs()
	{
    	this.dfa3 = new DFA3(this);
    	this.dfa29 = new DFA29(this);
    	this.dfa33 = new DFA33(this);
    	this.dfa35 = new DFA35(this);
    	this.dfa37 = new DFA37(this);
    	this.dfa38 = new DFA38(this);
    	this.dfa41 = new DFA41(this);
    	this.dfa43 = new DFA43(this);
    	this.dfa45 = new DFA45(this);
    	this.dfa44 = new DFA44(this);
    	this.dfa46 = new DFA46(this);
    	this.dfa47 = new DFA47(this);
    	this.dfa52 = new DFA52(this);
    	this.dfa51 = new DFA51(this);
    	this.dfa53 = new DFA53(this);
    	this.dfa60 = new DFA60(this);
    	this.dfa65 = new DFA65(this);
    	this.dfa66 = new DFA66(this);
    	this.dfa67 = new DFA67(this);
    	this.dfa69 = new DFA69(this);
    	this.dfa70 = new DFA70(this);
    	this.dfa72 = new DFA72(this);
    	this.dfa71 = new DFA71(this);
    	this.dfa82 = new DFA82(this);
    	this.dfa74 = new DFA74(this);
    	this.dfa81 = new DFA81(this);
    	this.dfa80 = new DFA80(this);
    	this.dfa84 = new DFA84(this);
    	this.dfa83 = new DFA83(this);
    	this.dfa86 = new DFA86(this);
    	this.dfa88 = new DFA88(this);
    	this.dfa89 = new DFA89(this);
    	this.dfa95 = new DFA95(this);
    	this.dfa107 = new DFA107(this);
    	this.dfa96 = new DFA96(this);
    	this.dfa97 = new DFA97(this);
    	this.dfa99 = new DFA99(this);
    	this.dfa98 = new DFA98(this);
    	this.dfa100 = new DFA100(this);
    	this.dfa101 = new DFA101(this);
    	this.dfa102 = new DFA102(this);
    	this.dfa106 = new DFA106(this);
    	this.dfa111 = new DFA111(this);
    	this.dfa113 = new DFA113(this);
    	this.dfa115 = new DFA115(this);
    	this.dfa123 = new DFA123(this);
    	this.dfa124 = new DFA124(this);
    	this.dfa125 = new DFA125(this);
    	this.dfa127 = new DFA127(this);
    	this.dfa128 = new DFA128(this);
    	this.dfa132 = new DFA132(this);
    	this.dfa133 = new DFA133(this);
    	this.dfa135 = new DFA135(this);
    	this.dfa134 = new DFA134(this);
    	this.dfa136 = new DFA136(this);
    	this.dfa139 = new DFA139(this);
    	this.dfa143 = new DFA143(this);
    	this.dfa140 = new DFA140(this);
    	this.dfa142 = new DFA142(this);
    	this.dfa145 = new DFA145(this);
    	this.dfa144 = new DFA144(this);
    	this.dfa146 = new DFA146(this);
    	this.dfa157 = new DFA157(this);
    	this.dfa147 = new DFA147(this);
    	this.dfa148 = new DFA148(this);
    	this.dfa149 = new DFA149(this);
    	this.dfa151 = new DFA151(this);
    	this.dfa152 = new DFA152(this);
    	this.dfa154 = new DFA154(this);






	    this.dfa41.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA41_SpecialStateTransition);








	    this.dfa60.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA60_SpecialStateTransition);















	    this.dfa89.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA89_SpecialStateTransition);










	    this.dfa111.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA111_SpecialStateTransition);





	    this.dfa127.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA127_SpecialStateTransition);




















	}

    const string DFA3_eotS =
        "\x0c\uffff";
    const string DFA3_eofS =
        "\x0c\uffff";
    const string DFA3_minS =
        "\x01\u00ae\x0b\uffff";
    const string DFA3_maxS =
        "\x01\u00f0\x0b\uffff";
    const string DFA3_acceptS =
        "\x01\uffff\x01\x01\x05\uffff\x01\x02\x01\uffff\x01\x03\x01\x04"+
        "\x01\x05";
    const string DFA3_specialS =
        "\x0c\uffff}>";
    static readonly string[] DFA3_transitionS = {
            "\x01\x01\x01\uffff\x03\x01\x01\uffff\x02\x01\x02\x07\x36\uffff"+
            "\x01\x09\x01\x0a\x01\x0b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
    static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
    static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
    static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
    static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
    static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
    static readonly short[][] DFA3_transition = DFA.UnpackEncodedStringArray(DFA3_transitionS);

    protected class DFA3 : DFA
    {
        public DFA3(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;

        }

        override public string Description
        {
            get { return "411:1: constant : ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number | stringconstant | t= 'true' -> ^( BOOL_TYPE[$t] ) | f= 'false' -> ^( BOOL_TYPE[$f] ) | nu= 'null' -> ^( NULL_TYPE[$nu] ) );"; }
        }

    }

    const string DFA29_eotS =
        "\x20\uffff";
    const string DFA29_eofS =
        "\x20\uffff";
    const string DFA29_minS =
        "\x01\x05\x1f\uffff";
    const string DFA29_maxS =
        "\x01\u00bc\x1f\uffff";
    const string DFA29_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x1d\uffff";
    const string DFA29_specialS =
        "\x20\uffff}>";
    static readonly string[] DFA29_transitionS = {
            "\x01\x02\x04\uffff\x01\x02\x03\uffff\x01\x02\x02\uffff\x09"+
            "\x02\x15\uffff\x05\x02\x08\uffff\x06\x02\x01\uffff\x04\x02\x02"+
            "\uffff\x01\x02\x01\uffff\x01\x02\x6c\uffff\x01\x02\x03\uffff"+
            "\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
    static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
    static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
    static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
    static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
    static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
    static readonly short[][] DFA29_transition = DFA.UnpackEncodedStringArray(DFA29_transitionS);

    protected class DFA29 : DFA
    {
        public DFA29(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;

        }

        override public string Description
        {
            get { return "508:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) );"; }
        }

    }

    const string DFA33_eotS =
        "\x0b\uffff";
    const string DFA33_eofS =
        "\x01\x01\x0a\uffff";
    const string DFA33_minS =
        "\x01\x0f\x0a\uffff";
    const string DFA33_maxS =
        "\x01\u00b9\x0a\uffff";
    const string DFA33_acceptS =
        "\x01\uffff\x01\x01\x06\uffff\x01\x02\x02\uffff";
    const string DFA33_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA33_transitionS = {
            "\x01\x01\x14\uffff\x03\x08\x03\uffff\x02\x01\x02\uffff\x01"+
            "\x01\x07\uffff\x01\x01\u0082\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA33_eot = DFA.UnpackEncodedString(DFA33_eotS);
    static readonly short[] DFA33_eof = DFA.UnpackEncodedString(DFA33_eofS);
    static readonly char[] DFA33_min = DFA.UnpackEncodedStringToUnsignedChars(DFA33_minS);
    static readonly char[] DFA33_max = DFA.UnpackEncodedStringToUnsignedChars(DFA33_maxS);
    static readonly short[] DFA33_accept = DFA.UnpackEncodedString(DFA33_acceptS);
    static readonly short[] DFA33_special = DFA.UnpackEncodedString(DFA33_specialS);
    static readonly short[][] DFA33_transition = DFA.UnpackEncodedStringArray(DFA33_transitionS);

    protected class DFA33 : DFA
    {
        public DFA33(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;

        }

        override public string Description
        {
            get { return "530:21: ( regularJoin | outerJoinList )"; }
        }

    }

    const string DFA35_eotS =
        "\x0a\uffff";
    const string DFA35_eofS =
        "\x01\x01\x09\uffff";
    const string DFA35_minS =
        "\x01\x0f\x09\uffff";
    const string DFA35_maxS =
        "\x01\x36\x09\uffff";
    const string DFA35_acceptS =
        "\x01\uffff\x01\x02\x05\uffff\x01\x01\x02\uffff";
    const string DFA35_specialS =
        "\x0a\uffff}>";
    static readonly string[] DFA35_transitionS = {
            "\x01\x01\x14\uffff\x03\x07\x03\uffff\x02\x01\x02\uffff\x01"+
            "\x01\x07\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA35_eot = DFA.UnpackEncodedString(DFA35_eotS);
    static readonly short[] DFA35_eof = DFA.UnpackEncodedString(DFA35_eofS);
    static readonly char[] DFA35_min = DFA.UnpackEncodedStringToUnsignedChars(DFA35_minS);
    static readonly char[] DFA35_max = DFA.UnpackEncodedStringToUnsignedChars(DFA35_maxS);
    static readonly short[] DFA35_accept = DFA.UnpackEncodedString(DFA35_acceptS);
    static readonly short[] DFA35_special = DFA.UnpackEncodedString(DFA35_specialS);
    static readonly short[][] DFA35_transition = DFA.UnpackEncodedStringArray(DFA35_transitionS);

    protected class DFA35 : DFA
    {
        public DFA35(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 538:14: ( outerJoin )*"; }
        }

    }

    const string DFA37_eotS =
        "\x0b\uffff";
    const string DFA37_eofS =
        "\x01\x01\x0a\uffff";
    const string DFA37_minS =
        "\x01\x0c\x0a\uffff";
    const string DFA37_maxS =
        "\x01\x36\x0a\uffff";
    const string DFA37_acceptS =
        "\x01\uffff\x01\x02\x08\uffff\x01\x01";
    const string DFA37_specialS =
        "\x0b\uffff}>";
    static readonly string[] DFA37_transitionS = {
            "\x01\x0a\x02\uffff\x01\x01\x14\uffff\x03\x01\x03\uffff\x02"+
            "\x01\x02\uffff\x01\x01\x07\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
    static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
    static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
    static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
    static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
    static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
    static readonly short[][] DFA37_transition = DFA.UnpackEncodedStringArray(DFA37_transitionS);

    protected class DFA37 : DFA
    {
        public DFA37(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 551:27: ( AND_EXPR outerJoinIdentPair )*"; }
        }

    }

    const string DFA38_eotS =
        "\x35\uffff";
    const string DFA38_eofS =
        "\x35\uffff";
    const string DFA38_minS =
        "\x01\x05\x34\uffff";
    const string DFA38_maxS =
        "\x01\u00f0\x34\uffff";
    const string DFA38_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x30\uffff";
    const string DFA38_specialS =
        "\x35\uffff}>";
    static readonly string[] DFA38_transitionS = {
            "\x01\x04\x04\uffff\x01\x04\x02\uffff\x02\x04\x02\uffff\x09"+
            "\x04\x01\uffff\x01\x04\x13\uffff\x05\x04\x05\uffff\x01\x01\x01"+
            "\x02\x01\x03\x0c\x04\x01\uffff\x01\x04\x01\uffff\x01\x04\x62"+
            "\uffff\x01\x04\x01\uffff\x09\x04\x03\uffff\x02\x04\x10\uffff"+
            "\x01\x04\x1f\uffff\x03\x04",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
    static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
    static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
    static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
    static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
    static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
    static readonly short[][] DFA38_transition = DFA.UnpackEncodedStringArray(DFA38_transitionS);

    protected class DFA38 : DFA
    {
        public DFA38(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;

        }

        override public string Description
        {
            get { return "568:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?"; }
        }

    }

    const string DFA41_eotS =
        "\x71\uffff";
    const string DFA41_eofS =
        "\x71\uffff";
    const string DFA41_minS =
        "\x01\x05\x01\uffff\x01\x06\x2f\uffff\x01\x05\x3e\uffff";
    const string DFA41_maxS =
        "\x01\u00f0\x01\uffff\x01\u00d1\x2f\uffff\x01\u00bc\x3e\uffff";
    const string DFA41_acceptS =
        "\x01\uffff\x01\x01\x01\uffff\x01\x03\x4e\uffff\x01\x02\x1e\uffff";
    const string DFA41_specialS =
        "\x32\uffff\x01\x00\x3e\uffff}>";
    static readonly string[] DFA41_transitionS = {
            "\x01\x03\x04\uffff\x01\x03\x02\uffff\x02\x03\x02\uffff\x09"+
            "\x03\x01\uffff\x01\x03\x13\uffff\x05\x03\x08\uffff\x0c\x03\x01"+
            "\uffff\x01\x03\x01\uffff\x01\x03\x62\uffff\x01\x03\x01\uffff"+
            "\x08\x03\x01\x02\x03\uffff\x01\x01\x01\x03\x10\uffff\x01\x03"+
            "\x1f\uffff\x03\x03",
            "",
            "\x04\x03\x01\uffff\x03\x03\x02\uffff\x01\x03\x10\uffff\x01"+
            "\x03\x06\uffff\x01\x03\u008a\uffff\x03\x03\x03\uffff\x02\x03"+
            "\x01\x32\x02\x03\x01\uffff\x01\x03\x02\uffff\x0c\x03\x03\uffff"+
            "\x01\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\x03\x04\uffff\x01\x03\x03\uffff\x01\x03\x02\uffff\x09"+
            "\x03\x15\uffff\x05\x03\x08\uffff\x06\x03\x01\uffff\x04\x03\x02"+
            "\uffff\x01\x03\x01\uffff\x01\x03\x6c\uffff\x01\x03\x03\uffff"+
            "\x01\x52",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA41_eot = DFA.UnpackEncodedString(DFA41_eotS);
    static readonly short[] DFA41_eof = DFA.UnpackEncodedString(DFA41_eofS);
    static readonly char[] DFA41_min = DFA.UnpackEncodedStringToUnsignedChars(DFA41_minS);
    static readonly char[] DFA41_max = DFA.UnpackEncodedStringToUnsignedChars(DFA41_maxS);
    static readonly short[] DFA41_accept = DFA.UnpackEncodedString(DFA41_acceptS);
    static readonly short[] DFA41_special = DFA.UnpackEncodedString(DFA41_specialS);
    static readonly short[][] DFA41_transition = DFA.UnpackEncodedStringArray(DFA41_transitionS);

    protected class DFA41 : DFA
    {
        public DFA41(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;

        }

        override public string Description
        {
            get { return "576:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );"; }
        }

    }


    protected internal int DFA41_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA41_50 = input.LA(1);

                   	 
                   	int index41_50 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA41_50 == STAR) && (synpred1_EsperEPL2Grammar()) ) { s = 82; }

                   	else if ( (LA41_50 == WINDOW || LA41_50 == ESCAPE || LA41_50 == EVERY_EXPR || (LA41_50 >= SUM && LA41_50 <= COUNT) || (LA41_50 >= EVENTS && LA41_50 <= LAST) || (LA41_50 >= UNIDIRECTIONAL && LA41_50 <= PRIOR) || (LA41_50 >= WEEKDAY && LA41_50 <= CAST) || LA41_50 == SNAPSHOT || LA41_50 == VARIABLE || LA41_50 == IDENT) ) { s = 3; }

                   	 
                   	input.Seek(index41_50);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 41, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA43_eotS =
        "\x16\uffff";
    const string DFA43_eofS =
        "\x01\uffff\x01\x04\x14\uffff";
    const string DFA43_minS =
        "\x01\x3d\x01\x0f\x14\uffff";
    const string DFA43_maxS =
        "\x01\u00b8\x01\u00c1\x14\uffff";
    const string DFA43_acceptS =
        "\x02\uffff\x01\x02\x01\x03\x01\x01\x01\x04\x10\uffff";
    const string DFA43_specialS =
        "\x16\uffff}>";
    static readonly string[] DFA43_transitionS = {
            "\x01\x02\x01\x03\x79\uffff\x01\x01",
            "\x02\x04\x13\uffff\x04\x04\x02\uffff\x02\x04\x02\uffff\x01"+
            "\x04\x07\uffff\x01\x04\x05\uffff\x01\x04\x7b\uffff\x04\x04\x01"+
            "\uffff\x01\x04\x03\uffff\x01\x05",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA43_eot = DFA.UnpackEncodedString(DFA43_eotS);
    static readonly short[] DFA43_eof = DFA.UnpackEncodedString(DFA43_eofS);
    static readonly char[] DFA43_min = DFA.UnpackEncodedStringToUnsignedChars(DFA43_minS);
    static readonly char[] DFA43_max = DFA.UnpackEncodedStringToUnsignedChars(DFA43_maxS);
    static readonly short[] DFA43_accept = DFA.UnpackEncodedString(DFA43_acceptS);
    static readonly short[] DFA43_special = DFA.UnpackEncodedString(DFA43_specialS);
    static readonly short[][] DFA43_transition = DFA.UnpackEncodedStringArray(DFA43_transitionS);

    protected class DFA43 : DFA
    {
        public DFA43(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;

        }

        override public string Description
        {
            get { return "592:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )"; }
        }

    }

    const string DFA45_eotS =
        "\x10\uffff";
    const string DFA45_eofS =
        "\x01\x02\x0f\uffff";
    const string DFA45_minS =
        "\x01\x0f\x0f\uffff";
    const string DFA45_maxS =
        "\x01\u00bb\x0f\uffff";
    const string DFA45_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x0d\uffff";
    const string DFA45_specialS =
        "\x10\uffff}>";
    static readonly string[] DFA45_transitionS = {
            "\x02\x02\x13\uffff\x04\x02\x02\uffff\x02\x02\x02\uffff\x01"+
            "\x02\x07\uffff\x01\x02\x05\uffff\x01\x02\x7b\uffff\x02\x02\x01"+
            "\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA45_eot = DFA.UnpackEncodedString(DFA45_eotS);
    static readonly short[] DFA45_eof = DFA.UnpackEncodedString(DFA45_eofS);
    static readonly char[] DFA45_min = DFA.UnpackEncodedStringToUnsignedChars(DFA45_minS);
    static readonly char[] DFA45_max = DFA.UnpackEncodedStringToUnsignedChars(DFA45_maxS);
    static readonly short[] DFA45_accept = DFA.UnpackEncodedString(DFA45_acceptS);
    static readonly short[] DFA45_special = DFA.UnpackEncodedString(DFA45_specialS);
    static readonly short[][] DFA45_transition = DFA.UnpackEncodedStringArray(DFA45_transitionS);

    protected class DFA45 : DFA
    {
        public DFA45(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;

        }

        override public string Description
        {
            get { return "593:3: ( DOT viewExpression ( DOT viewExpression )* )?"; }
        }

    }

    const string DFA44_eotS =
        "\x10\uffff";
    const string DFA44_eofS =
        "\x01\x01\x0f\uffff";
    const string DFA44_minS =
        "\x01\x0f\x0f\uffff";
    const string DFA44_maxS =
        "\x01\u00bb\x0f\uffff";
    const string DFA44_acceptS =
        "\x01\uffff\x01\x02\x0d\uffff\x01\x01";
    const string DFA44_specialS =
        "\x10\uffff}>";
    static readonly string[] DFA44_transitionS = {
            "\x02\x01\x13\uffff\x04\x01\x02\uffff\x02\x01\x02\uffff\x01"+
            "\x01\x07\uffff\x01\x01\x05\uffff\x01\x01\x7b\uffff\x02\x01\x01"+
            "\uffff\x01\x0f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
    static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
    static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
    static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
    static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
    static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
    static readonly short[][] DFA44_transition = DFA.UnpackEncodedStringArray(DFA44_transitionS);

    protected class DFA44 : DFA
    {
        public DFA44(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 593:23: ( DOT viewExpression )*"; }
        }

    }

    const string DFA46_eotS =
        "\x0f\uffff";
    const string DFA46_eofS =
        "\x01\x03\x0e\uffff";
    const string DFA46_minS =
        "\x01\x0f\x0e\uffff";
    const string DFA46_maxS =
        "\x01\u00b9\x0e\uffff";
    const string DFA46_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x0b\uffff";
    const string DFA46_specialS =
        "\x0f\uffff}>";
    static readonly string[] DFA46_transitionS = {
            "\x01\x03\x01\x01\x13\uffff\x04\x03\x02\uffff\x02\x03\x02\uffff"+
            "\x01\x03\x07\uffff\x01\x03\x05\uffff\x01\x03\x7b\uffff\x01\x02"+
            "\x01\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA46_eot = DFA.UnpackEncodedString(DFA46_eotS);
    static readonly short[] DFA46_eof = DFA.UnpackEncodedString(DFA46_eofS);
    static readonly char[] DFA46_min = DFA.UnpackEncodedStringToUnsignedChars(DFA46_minS);
    static readonly char[] DFA46_max = DFA.UnpackEncodedStringToUnsignedChars(DFA46_maxS);
    static readonly short[] DFA46_accept = DFA.UnpackEncodedString(DFA46_acceptS);
    static readonly short[] DFA46_special = DFA.UnpackEncodedString(DFA46_specialS);
    static readonly short[][] DFA46_transition = DFA.UnpackEncodedStringArray(DFA46_transitionS);

    protected class DFA46 : DFA
    {
        public DFA46(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;

        }

        override public string Description
        {
            get { return "593:47: ( AS i= IDENT | i= IDENT )?"; }
        }

    }

    const string DFA47_eotS =
        "\x0d\uffff";
    const string DFA47_eofS =
        "\x01\x02\x0c\uffff";
    const string DFA47_minS =
        "\x01\x0f\x0c\uffff";
    const string DFA47_maxS =
        "\x01\u00b9\x0c\uffff";
    const string DFA47_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x0a\uffff";
    const string DFA47_specialS =
        "\x0d\uffff}>";
    static readonly string[] DFA47_transitionS = {
            "\x01\x02\x14\uffff\x04\x02\x02\uffff\x02\x02\x02\uffff\x01"+
            "\x02\x07\uffff\x01\x02\x05\uffff\x01\x01\x7c\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA47_eot = DFA.UnpackEncodedString(DFA47_eotS);
    static readonly short[] DFA47_eof = DFA.UnpackEncodedString(DFA47_eofS);
    static readonly char[] DFA47_min = DFA.UnpackEncodedStringToUnsignedChars(DFA47_minS);
    static readonly char[] DFA47_max = DFA.UnpackEncodedStringToUnsignedChars(DFA47_maxS);
    static readonly short[] DFA47_accept = DFA.UnpackEncodedString(DFA47_acceptS);
    static readonly short[] DFA47_special = DFA.UnpackEncodedString(DFA47_specialS);
    static readonly short[][] DFA47_transition = DFA.UnpackEncodedStringArray(DFA47_transitionS);

    protected class DFA47 : DFA
    {
        public DFA47(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;

        }

        override public string Description
        {
            get { return "593:71: (u= UNIDIRECTIONAL )?"; }
        }

    }

    const string DFA52_eotS =
        "\x11\uffff";
    const string DFA52_eofS =
        "\x01\x02\x10\uffff";
    const string DFA52_minS =
        "\x01\x0f\x10\uffff";
    const string DFA52_maxS =
        "\x01\u00bd\x10\uffff";
    const string DFA52_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x0e\uffff";
    const string DFA52_specialS =
        "\x11\uffff}>";
    static readonly string[] DFA52_transitionS = {
            "\x02\x02\x13\uffff\x04\x02\x02\uffff\x02\x02\x02\uffff\x01"+
            "\x02\x07\uffff\x01\x02\x05\uffff\x01\x02\x7b\uffff\x02\x02\x01"+
            "\uffff\x01\x02\x01\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA52_eot = DFA.UnpackEncodedString(DFA52_eotS);
    static readonly short[] DFA52_eof = DFA.UnpackEncodedString(DFA52_eofS);
    static readonly char[] DFA52_min = DFA.UnpackEncodedStringToUnsignedChars(DFA52_minS);
    static readonly char[] DFA52_max = DFA.UnpackEncodedStringToUnsignedChars(DFA52_maxS);
    static readonly short[] DFA52_accept = DFA.UnpackEncodedString(DFA52_acceptS);
    static readonly short[] DFA52_special = DFA.UnpackEncodedString(DFA52_specialS);
    static readonly short[][] DFA52_transition = DFA.UnpackEncodedStringArray(DFA52_transitionS);

    protected class DFA52 : DFA
    {
        public DFA52(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;

        }

        override public string Description
        {
            get { return "613:41: ( LPAREN ( expressionList )? RPAREN )?"; }
        }

    }

    const string DFA51_eotS =
        "\x32\uffff";
    const string DFA51_eofS =
        "\x32\uffff";
    const string DFA51_minS =
        "\x01\x05\x31\uffff";
    const string DFA51_maxS =
        "\x01\u00f0\x31\uffff";
    const string DFA51_acceptS =
        "\x01\uffff\x01\x01\x2f\uffff\x01\x02";
    const string DFA51_specialS =
        "\x32\uffff}>";
    static readonly string[] DFA51_transitionS = {
            "\x01\x01\x04\uffff\x01\x01\x02\uffff\x02\x01\x02\uffff\x09"+
            "\x01\x01\uffff\x01\x01\x13\uffff\x05\x01\x08\uffff\x0c\x01\x01"+
            "\uffff\x01\x01\x01\uffff\x01\x01\x62\uffff\x01\x01\x01\uffff"+
            "\x09\x01\x04\uffff\x01\x01\x01\x31\x0f\uffff\x01\x01\x1f\uffff"+
            "\x03\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA51_eot = DFA.UnpackEncodedString(DFA51_eotS);
    static readonly short[] DFA51_eof = DFA.UnpackEncodedString(DFA51_eofS);
    static readonly char[] DFA51_min = DFA.UnpackEncodedStringToUnsignedChars(DFA51_minS);
    static readonly char[] DFA51_max = DFA.UnpackEncodedStringToUnsignedChars(DFA51_maxS);
    static readonly short[] DFA51_accept = DFA.UnpackEncodedString(DFA51_acceptS);
    static readonly short[] DFA51_special = DFA.UnpackEncodedString(DFA51_specialS);
    static readonly short[][] DFA51_transition = DFA.UnpackEncodedStringArray(DFA51_transitionS);

    protected class DFA51 : DFA
    {
        public DFA51(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;

        }

        override public string Description
        {
            get { return "613:49: ( expressionList )?"; }
        }

    }

    const string DFA53_eotS =
        "\x2e\uffff";
    const string DFA53_eofS =
        "\x2e\uffff";
    const string DFA53_minS =
        "\x01\x05\x2d\uffff";
    const string DFA53_maxS =
        "\x01\u00f0\x2d\uffff";
    const string DFA53_acceptS =
        "\x01\uffff\x01\x01\x2b\uffff\x01\x02";
    const string DFA53_specialS =
        "\x2e\uffff}>";
    static readonly string[] DFA53_transitionS = {
            "\x01\x01\x04\uffff\x01\x01\x03\uffff\x01\x01\x02\uffff\x09"+
            "\x01\x15\uffff\x05\x01\x08\uffff\x06\x01\x01\uffff\x04\x01\x02"+
            "\uffff\x01\x01\x01\uffff\x01\x01\x62\uffff\x01\x01\x01\uffff"+
            "\x03\x01\x01\uffff\x05\x01\x03\uffff\x01\x01\x01\uffff\x01\x2d"+
            "\x01\x01\x0e\uffff\x01\x01\x1f\uffff\x03\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
    static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
    static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
    static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
    static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
    static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
    static readonly short[][] DFA53_transition = DFA.UnpackEncodedStringArray(DFA53_transitionS);

    protected class DFA53 : DFA
    {
        public DFA53(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;

        }

        override public string Description
        {
            get { return "620:35: ( parameterSet )?"; }
        }

    }

    const string DFA60_eotS =
        "\x6e\uffff";
    const string DFA60_eofS =
        "\x6e\uffff";
    const string DFA60_minS =
        "\x01\u00ae\x04\x14\x02\uffff\x02\x00\x0c\uffff\x02\x00\x0b\uffff"+
        "\x01\x00\x05\uffff\x01\x00\x07\uffff\x01\x00\x07\uffff\x01\x00\x35"+
        "\uffff";
    const string DFA60_maxS =
        "\x01\u00b8\x04\u00fa\x02\uffff\x02\x00\x0c\uffff\x02\x00\x0b\uffff"+
        "\x01\x00\x05\uffff\x01\x00\x07\uffff\x01\x00\x07\uffff\x01\x00\x35"+
        "\uffff";
    const string DFA60_acceptS =
        "\x05\uffff\x01\x02\x03\uffff\x0b\x01\x03\uffff\x0b\x01\x01\uffff"+
        "\x04\x01\x02\uffff\x07\x01\x01\uffff\x06\x01\x02\uffff\x05\x01\x30"+
        "\uffff";
    const string DFA60_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x02\uffff\x01\x04\x01"+
        "\x05\x0c\uffff\x01\x06\x01\x07\x0b\uffff\x01\x08\x05\uffff\x01\x09"+
        "\x07\uffff\x01\x0a\x07\uffff\x01\x0b\x35\uffff}>";
    static readonly string[] DFA60_transitionS = {
            "\x01\x04\x01\uffff\x01\x01\x01\x02\x01\x03\x05\uffff\x01\x05",
            "\x01\x0a\x1a\uffff\x01\x05\x01\x07\x01\x08\u00bf\uffff\x01"+
            "\x10\x01\x11\x01\x12\x01\x13\x01\x09\x01\x0b\x01\x0c\x01\x0d"+
            "\x01\x0e\x01\x0f",
            "\x01\x18\x1a\uffff\x01\x05\x01\x15\x01\x16\u00bf\uffff\x01"+
            "\x20\x01\x21\x01\x1e\x01\x1f\x01\x17\x01\x19\x01\x1a\x01\x1b"+
            "\x01\x1c\x01\x1d",
            "\x01\x2d\x1a\uffff\x01\x05\x01\x22\x01\x28\u00bf\uffff\x01"+
            "\x2e\x01\x2f\x01\x25\x01\x26\x01\x2c\x01\x23\x01\x24\x01\x29"+
            "\x01\x2a\x01\x2b",
            "\x01\x3d\x1a\uffff\x01\x05\x01\x30\x01\x38\u00bf\uffff\x01"+
            "\x35\x01\x36\x01\x33\x01\x34\x01\x3c\x01\x31\x01\x32\x01\x39"+
            "\x01\x3a\x01\x3b",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA60_eot = DFA.UnpackEncodedString(DFA60_eotS);
    static readonly short[] DFA60_eof = DFA.UnpackEncodedString(DFA60_eofS);
    static readonly char[] DFA60_min = DFA.UnpackEncodedStringToUnsignedChars(DFA60_minS);
    static readonly char[] DFA60_max = DFA.UnpackEncodedStringToUnsignedChars(DFA60_maxS);
    static readonly short[] DFA60_accept = DFA.UnpackEncodedString(DFA60_acceptS);
    static readonly short[] DFA60_special = DFA.UnpackEncodedString(DFA60_specialS);
    static readonly short[][] DFA60_transition = DFA.UnpackEncodedStringArray(DFA60_transitionS);

    protected class DFA60 : DFA
    {
        public DFA60(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;

        }

        override public string Description
        {
            get { return "654:3: ( ( time_period )=> time_period | ( number | i= IDENT ) (e= EVENTS | sec= SECONDS | min= MINUTES ) )"; }
        }

    }


    protected internal int DFA60_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA60_1 = input.LA(1);

                   	 
                   	int index60_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA60_1 == EVENTS) ) { s = 5; }

                   	else if ( (LA60_1 == SECONDS) ) { s = 7; }

                   	else if ( (LA60_1 == MINUTES) ) { s = 8; }

                   	else if ( (LA60_1 == 245) && (synpred2_EsperEPL2Grammar()) ) { s = 9; }

                   	else if ( (LA60_1 == MIN) && (synpred2_EsperEPL2Grammar()) ) { s = 10; }

                   	else if ( (LA60_1 == 246) && (synpred2_EsperEPL2Grammar()) ) { s = 11; }

                   	else if ( (LA60_1 == 247) && (synpred2_EsperEPL2Grammar()) ) { s = 12; }

                   	else if ( (LA60_1 == 248) && (synpred2_EsperEPL2Grammar()) ) { s = 13; }

                   	else if ( (LA60_1 == 249) && (synpred2_EsperEPL2Grammar()) ) { s = 14; }

                   	else if ( (LA60_1 == 250) && (synpred2_EsperEPL2Grammar()) ) { s = 15; }

                   	else if ( (LA60_1 == 241) && (synpred2_EsperEPL2Grammar()) ) { s = 16; }

                   	else if ( (LA60_1 == 242) && (synpred2_EsperEPL2Grammar()) ) { s = 17; }

                   	else if ( (LA60_1 == 243) && (synpred2_EsperEPL2Grammar()) ) { s = 18; }

                   	else if ( (LA60_1 == 244) && (synpred2_EsperEPL2Grammar()) ) { s = 19; }

                   	 
                   	input.Seek(index60_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA60_2 = input.LA(1);

                   	 
                   	int index60_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA60_2 == EVENTS) ) { s = 5; }

                   	else if ( (LA60_2 == SECONDS) ) { s = 21; }

                   	else if ( (LA60_2 == MINUTES) ) { s = 22; }

                   	else if ( (LA60_2 == 245) && (synpred2_EsperEPL2Grammar()) ) { s = 23; }

                   	else if ( (LA60_2 == MIN) && (synpred2_EsperEPL2Grammar()) ) { s = 24; }

                   	else if ( (LA60_2 == 246) && (synpred2_EsperEPL2Grammar()) ) { s = 25; }

                   	else if ( (LA60_2 == 247) && (synpred2_EsperEPL2Grammar()) ) { s = 26; }

                   	else if ( (LA60_2 == 248) && (synpred2_EsperEPL2Grammar()) ) { s = 27; }

                   	else if ( (LA60_2 == 249) && (synpred2_EsperEPL2Grammar()) ) { s = 28; }

                   	else if ( (LA60_2 == 250) && (synpred2_EsperEPL2Grammar()) ) { s = 29; }

                   	else if ( (LA60_2 == 243) && (synpred2_EsperEPL2Grammar()) ) { s = 30; }

                   	else if ( (LA60_2 == 244) && (synpred2_EsperEPL2Grammar()) ) { s = 31; }

                   	else if ( (LA60_2 == 241) && (synpred2_EsperEPL2Grammar()) ) { s = 32; }

                   	else if ( (LA60_2 == 242) && (synpred2_EsperEPL2Grammar()) ) { s = 33; }

                   	 
                   	input.Seek(index60_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA60_3 = input.LA(1);

                   	 
                   	int index60_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA60_3 == SECONDS) ) { s = 34; }

                   	else if ( (LA60_3 == 246) && (synpred2_EsperEPL2Grammar()) ) { s = 35; }

                   	else if ( (LA60_3 == 247) && (synpred2_EsperEPL2Grammar()) ) { s = 36; }

                   	else if ( (LA60_3 == 243) && (synpred2_EsperEPL2Grammar()) ) { s = 37; }

                   	else if ( (LA60_3 == 244) && (synpred2_EsperEPL2Grammar()) ) { s = 38; }

                   	else if ( (LA60_3 == EVENTS) ) { s = 5; }

                   	else if ( (LA60_3 == MINUTES) ) { s = 40; }

                   	else if ( (LA60_3 == 248) && (synpred2_EsperEPL2Grammar()) ) { s = 41; }

                   	else if ( (LA60_3 == 249) && (synpred2_EsperEPL2Grammar()) ) { s = 42; }

                   	else if ( (LA60_3 == 250) && (synpred2_EsperEPL2Grammar()) ) { s = 43; }

                   	else if ( (LA60_3 == 245) && (synpred2_EsperEPL2Grammar()) ) { s = 44; }

                   	else if ( (LA60_3 == MIN) && (synpred2_EsperEPL2Grammar()) ) { s = 45; }

                   	else if ( (LA60_3 == 241) && (synpred2_EsperEPL2Grammar()) ) { s = 46; }

                   	else if ( (LA60_3 == 242) && (synpred2_EsperEPL2Grammar()) ) { s = 47; }

                   	 
                   	input.Seek(index60_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA60_4 = input.LA(1);

                   	 
                   	int index60_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA60_4 == SECONDS) ) { s = 48; }

                   	else if ( (LA60_4 == 246) && (synpred2_EsperEPL2Grammar()) ) { s = 49; }

                   	else if ( (LA60_4 == 247) && (synpred2_EsperEPL2Grammar()) ) { s = 50; }

                   	else if ( (LA60_4 == 243) && (synpred2_EsperEPL2Grammar()) ) { s = 51; }

                   	else if ( (LA60_4 == 244) && (synpred2_EsperEPL2Grammar()) ) { s = 52; }

                   	else if ( (LA60_4 == 241) && (synpred2_EsperEPL2Grammar()) ) { s = 53; }

                   	else if ( (LA60_4 == 242) && (synpred2_EsperEPL2Grammar()) ) { s = 54; }

                   	else if ( (LA60_4 == EVENTS) ) { s = 5; }

                   	else if ( (LA60_4 == MINUTES) ) { s = 56; }

                   	else if ( (LA60_4 == 248) && (synpred2_EsperEPL2Grammar()) ) { s = 57; }

                   	else if ( (LA60_4 == 249) && (synpred2_EsperEPL2Grammar()) ) { s = 58; }

                   	else if ( (LA60_4 == 250) && (synpred2_EsperEPL2Grammar()) ) { s = 59; }

                   	else if ( (LA60_4 == 245) && (synpred2_EsperEPL2Grammar()) ) { s = 60; }

                   	else if ( (LA60_4 == MIN) && (synpred2_EsperEPL2Grammar()) ) { s = 61; }

                   	 
                   	input.Seek(index60_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA60_7 = input.LA(1);

                   	 
                   	int index60_7 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred2_EsperEPL2Grammar()) ) { s = 61; }

                   	else if ( (true) ) { s = 5; }

                   	 
                   	input.Seek(index60_7);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA60_8 = input.LA(1);

                   	 
                   	int index60_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred2_EsperEPL2Grammar()) ) { s = 61; }

                   	else if ( (true) ) { s = 5; }

                   	 
                   	input.Seek(index60_8);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA60_21 = input.LA(1);

                   	 
                   	int index60_21 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred2_EsperEPL2Grammar()) ) { s = 61; }

                   	else if ( (true) ) { s = 5; }

                   	 
                   	input.Seek(index60_21);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA60_22 = input.LA(1);

                   	 
                   	int index60_22 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred2_EsperEPL2Grammar()) ) { s = 61; }

                   	else if ( (true) ) { s = 5; }

                   	 
                   	input.Seek(index60_22);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA60_34 = input.LA(1);

                   	 
                   	int index60_34 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred2_EsperEPL2Grammar()) ) { s = 61; }

                   	else if ( (true) ) { s = 5; }

                   	 
                   	input.Seek(index60_34);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA60_40 = input.LA(1);

                   	 
                   	int index60_40 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred2_EsperEPL2Grammar()) ) { s = 61; }

                   	else if ( (true) ) { s = 5; }

                   	 
                   	input.Seek(index60_40);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA60_48 = input.LA(1);

                   	 
                   	int index60_48 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred2_EsperEPL2Grammar()) ) { s = 61; }

                   	else if ( (true) ) { s = 5; }

                   	 
                   	input.Seek(index60_48);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA60_56 = input.LA(1);

                   	 
                   	int index60_56 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred2_EsperEPL2Grammar()) ) { s = 61; }

                   	else if ( (true) ) { s = 5; }

                   	 
                   	input.Seek(index60_56);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 60, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA65_eotS =
        "\x62\uffff";
    const string DFA65_eofS =
        "\x62\uffff";
    const string DFA65_minS =
        "\x02\x05\x60\uffff";
    const string DFA65_maxS =
        "\x02\u00f0\x60\uffff";
    const string DFA65_acceptS =
        "\x02\uffff\x01\x03\x2e\uffff\x01\x02\x2f\uffff\x01\x01";
    const string DFA65_specialS =
        "\x62\uffff}>";
    static readonly string[] DFA65_transitionS = {
            "\x01\x02\x04\uffff\x01\x02\x02\uffff\x02\x02\x02\uffff\x09"+
            "\x02\x01\uffff\x01\x01\x13\uffff\x05\x02\x08\uffff\x0c\x02\x01"+
            "\uffff\x01\x02\x01\uffff\x01\x02\x62\uffff\x01\x02\x01\uffff"+
            "\x09\x02\x04\uffff\x01\x02\x10\uffff\x01\x02\x1f\uffff\x03\x02",
            "\x01\x31\x04\uffff\x01\x31\x02\uffff\x02\x31\x02\uffff\x09"+
            "\x31\x01\uffff\x01\x31\x02\uffff\x01\x61\x10\uffff\x05\x31\x08"+
            "\uffff\x0c\x31\x01\uffff\x01\x31\x01\uffff\x01\x31\x62\uffff"+
            "\x01\x31\x01\uffff\x09\x31\x04\uffff\x01\x31\x10\uffff\x01\x31"+
            "\x1f\uffff\x03\x31",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA65_eot = DFA.UnpackEncodedString(DFA65_eotS);
    static readonly short[] DFA65_eof = DFA.UnpackEncodedString(DFA65_eofS);
    static readonly char[] DFA65_min = DFA.UnpackEncodedStringToUnsignedChars(DFA65_minS);
    static readonly char[] DFA65_max = DFA.UnpackEncodedStringToUnsignedChars(DFA65_maxS);
    static readonly short[] DFA65_accept = DFA.UnpackEncodedString(DFA65_acceptS);
    static readonly short[] DFA65_special = DFA.UnpackEncodedString(DFA65_specialS);
    static readonly short[][] DFA65_transition = DFA.UnpackEncodedStringArray(DFA65_transitionS);

    protected class DFA65 : DFA
    {
        public DFA65(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;

        }

        override public string Description
        {
            get { return "677:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );"; }
        }

    }

    const string DFA66_eotS =
        "\x14\uffff";
    const string DFA66_eofS =
        "\x01\x01\x13\uffff";
    const string DFA66_minS =
        "\x01\x0b\x13\uffff";
    const string DFA66_maxS =
        "\x01\u00cf\x13\uffff";
    const string DFA66_acceptS =
        "\x01\uffff\x01\x02\x11\uffff\x01\x01";
    const string DFA66_specialS =
        "\x14\uffff}>";
    static readonly string[] DFA66_transitionS = {
            "\x01\x13\x04\uffff\x01\x01\x0c\uffff\x05\x01\x08\uffff\x02"+
            "\x01\x02\uffff\x01\x01\x07\uffff\x03\x01\u0080\uffff\x01\x01"+
            "\x04\uffff\x01\x01\x01\uffff\x02\x01\x0d\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA66_eot = DFA.UnpackEncodedString(DFA66_eotS);
    static readonly short[] DFA66_eof = DFA.UnpackEncodedString(DFA66_eofS);
    static readonly char[] DFA66_min = DFA.UnpackEncodedStringToUnsignedChars(DFA66_minS);
    static readonly char[] DFA66_max = DFA.UnpackEncodedStringToUnsignedChars(DFA66_maxS);
    static readonly short[] DFA66_accept = DFA.UnpackEncodedString(DFA66_acceptS);
    static readonly short[] DFA66_special = DFA.UnpackEncodedString(DFA66_specialS);
    static readonly short[][] DFA66_transition = DFA.UnpackEncodedStringArray(DFA66_transitionS);

    protected class DFA66 : DFA
    {
        public DFA66(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 685:22: (op= OR_EXPR evalAndExpression )*"; }
        }

    }

    const string DFA67_eotS =
        "\x15\uffff";
    const string DFA67_eofS =
        "\x01\x01\x14\uffff";
    const string DFA67_minS =
        "\x01\x0b\x14\uffff";
    const string DFA67_maxS =
        "\x01\u00cf\x14\uffff";
    const string DFA67_acceptS =
        "\x01\uffff\x01\x02\x12\uffff\x01\x01";
    const string DFA67_specialS =
        "\x15\uffff}>";
    static readonly string[] DFA67_transitionS = {
            "\x01\x01\x01\x14\x03\uffff\x01\x01\x0c\uffff\x05\x01\x08\uffff"+
            "\x02\x01\x02\uffff\x01\x01\x07\uffff\x03\x01\u0080\uffff\x01"+
            "\x01\x04\uffff\x01\x01\x01\uffff\x02\x01\x0d\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA67_eot = DFA.UnpackEncodedString(DFA67_eotS);
    static readonly short[] DFA67_eof = DFA.UnpackEncodedString(DFA67_eofS);
    static readonly char[] DFA67_min = DFA.UnpackEncodedStringToUnsignedChars(DFA67_minS);
    static readonly char[] DFA67_max = DFA.UnpackEncodedStringToUnsignedChars(DFA67_maxS);
    static readonly short[] DFA67_accept = DFA.UnpackEncodedString(DFA67_acceptS);
    static readonly short[] DFA67_special = DFA.UnpackEncodedString(DFA67_specialS);
    static readonly short[][] DFA67_transition = DFA.UnpackEncodedStringArray(DFA67_transitionS);

    protected class DFA67 : DFA
    {
        public DFA67(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 691:22: (op= AND_EXPR bitWiseExpression )*"; }
        }

    }

    const string DFA69_eotS =
        "\x18\uffff";
    const string DFA69_eofS =
        "\x01\x01\x17\uffff";
    const string DFA69_minS =
        "\x01\x0b\x17\uffff";
    const string DFA69_maxS =
        "\x01\u00cf\x17\uffff";
    const string DFA69_acceptS =
        "\x01\uffff\x01\x02\x13\uffff\x01\x01\x02\uffff";
    const string DFA69_specialS =
        "\x18\uffff}>";
    static readonly string[] DFA69_transitionS = {
            "\x02\x01\x03\uffff\x01\x01\x0c\uffff\x05\x01\x08\uffff\x02"+
            "\x01\x02\uffff\x01\x01\x07\uffff\x03\x01\u0080\uffff\x01\x01"+
            "\x04\uffff\x01\x01\x01\uffff\x02\x01\x03\x15\x0a\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA69_eot = DFA.UnpackEncodedString(DFA69_eotS);
    static readonly short[] DFA69_eof = DFA.UnpackEncodedString(DFA69_eofS);
    static readonly char[] DFA69_min = DFA.UnpackEncodedStringToUnsignedChars(DFA69_minS);
    static readonly char[] DFA69_max = DFA.UnpackEncodedStringToUnsignedChars(DFA69_maxS);
    static readonly short[] DFA69_accept = DFA.UnpackEncodedString(DFA69_acceptS);
    static readonly short[] DFA69_special = DFA.UnpackEncodedString(DFA69_specialS);
    static readonly short[][] DFA69_transition = DFA.UnpackEncodedStringArray(DFA69_transitionS);

    protected class DFA69 : DFA
    {
        public DFA69(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 697:22: ( ( BAND | BOR | BXOR ) negatedExpression )*"; }
        }

    }

    const string DFA70_eotS =
        "\x30\uffff";
    const string DFA70_eofS =
        "\x30\uffff";
    const string DFA70_minS =
        "\x01\x05\x2f\uffff";
    const string DFA70_maxS =
        "\x01\u00f0\x2f\uffff";
    const string DFA70_acceptS =
        "\x01\uffff\x01\x01\x2d\uffff\x01\x02";
    const string DFA70_specialS =
        "\x30\uffff}>";
    static readonly string[] DFA70_transitionS = {
            "\x01\x01\x04\uffff\x01\x01\x02\uffff\x01\x2f\x01\x01\x02\uffff"+
            "\x09\x01\x15\uffff\x05\x01\x08\uffff\x0c\x01\x01\uffff\x01\x01"+
            "\x01\uffff\x01\x01\x62\uffff\x01\x01\x01\uffff\x09\x01\x04\uffff"+
            "\x01\x01\x10\uffff\x01\x01\x1f\uffff\x03\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA70_eot = DFA.UnpackEncodedString(DFA70_eotS);
    static readonly short[] DFA70_eof = DFA.UnpackEncodedString(DFA70_eofS);
    static readonly char[] DFA70_min = DFA.UnpackEncodedStringToUnsignedChars(DFA70_minS);
    static readonly char[] DFA70_max = DFA.UnpackEncodedStringToUnsignedChars(DFA70_maxS);
    static readonly short[] DFA70_accept = DFA.UnpackEncodedString(DFA70_acceptS);
    static readonly short[] DFA70_special = DFA.UnpackEncodedString(DFA70_specialS);
    static readonly short[][] DFA70_transition = DFA.UnpackEncodedStringArray(DFA70_transitionS);

    protected class DFA70 : DFA
    {
        public DFA70(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;

        }

        override public string Description
        {
            get { return "700:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );"; }
        }

    }

    const string DFA72_eotS =
        "\x1c\uffff";
    const string DFA72_eofS =
        "\x01\x01\x1b\uffff";
    const string DFA72_minS =
        "\x01\x0b\x1b\uffff";
    const string DFA72_maxS =
        "\x01\u00cf\x1b\uffff";
    const string DFA72_acceptS =
        "\x01\uffff\x01\x02\x16\uffff\x01\x01\x03\uffff";
    const string DFA72_specialS =
        "\x1c\uffff}>";
    static readonly string[] DFA72_transitionS = {
            "\x02\x01\x03\uffff\x01\x01\x0c\uffff\x05\x01\x06\uffff\x01"+
            "\x18\x01\uffff\x02\x01\x02\uffff\x01\x01\x07\uffff\x03\x01\u0080"+
            "\uffff\x01\x01\x01\x18\x03\uffff\x01\x01\x01\uffff\x05\x01\x02"+
            "\x18\x08\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA72_eot = DFA.UnpackEncodedString(DFA72_eotS);
    static readonly short[] DFA72_eof = DFA.UnpackEncodedString(DFA72_eofS);
    static readonly char[] DFA72_min = DFA.UnpackEncodedStringToUnsignedChars(DFA72_minS);
    static readonly char[] DFA72_max = DFA.UnpackEncodedStringToUnsignedChars(DFA72_maxS);
    static readonly short[] DFA72_accept = DFA.UnpackEncodedString(DFA72_acceptS);
    static readonly short[] DFA72_special = DFA.UnpackEncodedString(DFA72_specialS);
    static readonly short[][] DFA72_transition = DFA.UnpackEncodedStringArray(DFA72_transitionS);

    protected class DFA72 : DFA
    {
        public DFA72(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 706:29: ( (eq= EQUALS | is_= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) evalRelationalExpression )*"; }
        }

    }

    const string DFA71_eotS =
        "\x34\uffff";
    const string DFA71_eofS =
        "\x34\uffff";
    const string DFA71_minS =
        "\x01\x28\x01\uffff\x01\x05\x31\uffff";
    const string DFA71_maxS =
        "\x01\u00c6\x01\uffff\x01\u00f0\x31\uffff";
    const string DFA71_acceptS =
        "\x01\uffff\x01\x01\x01\uffff\x01\x04\x01\x05\x01\x03\x01\x02\x2d"+
        "\uffff";
    const string DFA71_specialS =
        "\x34\uffff}>";
    static readonly string[] DFA71_transitionS = {
            "\x01\x02\u0091\uffff\x01\x01\x0a\uffff\x01\x03\x01\x04",
            "",
            "\x01\x06\x04\uffff\x01\x06\x02\uffff\x01\x05\x01\x06\x02\uffff"+
            "\x09\x06\x15\uffff\x05\x06\x08\uffff\x0c\x06\x01\uffff\x01\x06"+
            "\x01\uffff\x01\x06\x62\uffff\x01\x06\x01\uffff\x09\x06\x04\uffff"+
            "\x01\x06\x10\uffff\x01\x06\x1f\uffff\x03\x06",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
    static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
    static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
    static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
    static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
    static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
    static readonly short[][] DFA71_transition = DFA.UnpackEncodedStringArray(DFA71_transitionS);

    protected class DFA71 : DFA
    {
        public DFA71(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;

        }

        override public string Description
        {
            get { return "707:6: (eq= EQUALS | is_= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )"; }
        }

    }

    const string DFA82_eotS =
        "\x25\uffff";
    const string DFA82_eofS =
        "\x01\x01\x24\uffff";
    const string DFA82_minS =
        "\x01\x06\x24\uffff";
    const string DFA82_maxS =
        "\x01\u00cf\x24\uffff";
    const string DFA82_acceptS =
        "\x01\uffff\x01\x01\x1e\uffff\x01\x02\x04\uffff";
    const string DFA82_specialS =
        "\x25\uffff}>";
    static readonly string[] DFA82_transitionS = {
            "\x04\x20\x01\uffff\x02\x01\x01\x20\x02\uffff\x01\x01\x0c\uffff"+
            "\x05\x01\x06\uffff\x01\x01\x01\uffff\x02\x01\x02\uffff\x01\x01"+
            "\x07\uffff\x03\x01\u0080\uffff\x02\x01\x03\uffff\x01\x01\x01"+
            "\uffff\x0b\x01\x04\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA82_eot = DFA.UnpackEncodedString(DFA82_eotS);
    static readonly short[] DFA82_eof = DFA.UnpackEncodedString(DFA82_eofS);
    static readonly char[] DFA82_min = DFA.UnpackEncodedStringToUnsignedChars(DFA82_minS);
    static readonly char[] DFA82_max = DFA.UnpackEncodedStringToUnsignedChars(DFA82_maxS);
    static readonly short[] DFA82_accept = DFA.UnpackEncodedString(DFA82_acceptS);
    static readonly short[] DFA82_special = DFA.UnpackEncodedString(DFA82_specialS);
    static readonly short[][] DFA82_transition = DFA.UnpackEncodedStringArray(DFA82_transitionS);

    protected class DFA82 : DFA
    {
        public DFA82(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;

        }

        override public string Description
        {
            get { return "720:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )"; }
        }

    }

    const string DFA74_eotS =
        "\x20\uffff";
    const string DFA74_eofS =
        "\x01\x01\x1f\uffff";
    const string DFA74_minS =
        "\x01\x0b\x1f\uffff";
    const string DFA74_maxS =
        "\x01\u00cf\x1f\uffff";
    const string DFA74_acceptS =
        "\x01\uffff\x01\x02\x1a\uffff\x01\x01\x03\uffff";
    const string DFA74_specialS =
        "\x20\uffff}>";
    static readonly string[] DFA74_transitionS = {
            "\x02\x01\x03\uffff\x01\x01\x0c\uffff\x05\x01\x06\uffff\x01"+
            "\x01\x01\uffff\x02\x01\x02\uffff\x01\x01\x07\uffff\x03\x01\u0080"+
            "\uffff\x02\x01\x03\uffff\x01\x01\x01\uffff\x07\x01\x04\x1c\x04"+
            "\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA74_eot = DFA.UnpackEncodedString(DFA74_eotS);
    static readonly short[] DFA74_eof = DFA.UnpackEncodedString(DFA74_eofS);
    static readonly char[] DFA74_min = DFA.UnpackEncodedStringToUnsignedChars(DFA74_minS);
    static readonly char[] DFA74_max = DFA.UnpackEncodedStringToUnsignedChars(DFA74_maxS);
    static readonly short[] DFA74_accept = DFA.UnpackEncodedString(DFA74_acceptS);
    static readonly short[] DFA74_special = DFA.UnpackEncodedString(DFA74_specialS);
    static readonly short[][] DFA74_transition = DFA.UnpackEncodedStringArray(DFA74_transitionS);

    protected class DFA74 : DFA
    {
        public DFA74(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 722:6: ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )*"; }
        }

    }

    const string DFA81_eotS =
        "\x38\uffff";
    const string DFA81_eofS =
        "\x38\uffff";
    const string DFA81_minS =
        "\x01\x06\x01\u00bd\x03\uffff\x01\x05\x32\uffff";
    const string DFA81_maxS =
        "\x01\x09\x01\u00bf\x03\uffff\x01\u00f0\x32\uffff";
    const string DFA81_acceptS =
        "\x02\uffff\x01\x03\x01\x04\x01\x05\x01\uffff\x01\x01\x01\x02\x30"+
        "\uffff";
    const string DFA81_specialS =
        "\x38\uffff}>";
    static readonly string[] DFA81_transitionS = {
            "\x01\x01\x01\x02\x01\x03\x01\x04",
            "\x01\x05\x01\uffff\x01\x06",
            "",
            "",
            "",
            "\x01\x06\x04\uffff\x01\x06\x02\uffff\x02\x06\x02\uffff\x09"+
            "\x06\x01\x07\x01\x06\x13\uffff\x05\x06\x08\uffff\x0c\x06\x01"+
            "\uffff\x01\x06\x01\uffff\x01\x06\x62\uffff\x01\x06\x01\uffff"+
            "\x09\x06\x04\uffff\x01\x06\x10\uffff\x01\x06\x1f\uffff\x03\x06",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA81_eot = DFA.UnpackEncodedString(DFA81_eotS);
    static readonly short[] DFA81_eof = DFA.UnpackEncodedString(DFA81_eofS);
    static readonly char[] DFA81_min = DFA.UnpackEncodedStringToUnsignedChars(DFA81_minS);
    static readonly char[] DFA81_max = DFA.UnpackEncodedStringToUnsignedChars(DFA81_maxS);
    static readonly short[] DFA81_accept = DFA.UnpackEncodedString(DFA81_acceptS);
    static readonly short[] DFA81_special = DFA.UnpackEncodedString(DFA81_specialS);
    static readonly short[][] DFA81_transition = DFA.UnpackEncodedStringArray(DFA81_transitionS);

    protected class DFA81 : DFA
    {
        public DFA81(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;

        }

        override public string Description
        {
            get { return "729:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )"; }
        }

    }

    const string DFA80_eotS =
        "\x1d\uffff";
    const string DFA80_eofS =
        "\x01\x02\x1c\uffff";
    const string DFA80_minS =
        "\x01\x0a\x1c\uffff";
    const string DFA80_maxS =
        "\x01\u00cf\x1c\uffff";
    const string DFA80_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x1a\uffff";
    const string DFA80_specialS =
        "\x1d\uffff}>";
    static readonly string[] DFA80_transitionS = {
            "\x01\x01\x02\x02\x03\uffff\x01\x02\x0c\uffff\x05\x02\x06\uffff"+
            "\x01\x02\x01\uffff\x02\x02\x02\uffff\x01\x02\x07\uffff\x03\x02"+
            "\u0080\uffff\x02\x02\x03\uffff\x01\x02\x01\uffff\x07\x02\x08"+
            "\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA80_eot = DFA.UnpackEncodedString(DFA80_eotS);
    static readonly short[] DFA80_eof = DFA.UnpackEncodedString(DFA80_eofS);
    static readonly char[] DFA80_min = DFA.UnpackEncodedStringToUnsignedChars(DFA80_minS);
    static readonly char[] DFA80_max = DFA.UnpackEncodedStringToUnsignedChars(DFA80_maxS);
    static readonly short[] DFA80_accept = DFA.UnpackEncodedString(DFA80_acceptS);
    static readonly short[] DFA80_special = DFA.UnpackEncodedString(DFA80_specialS);
    static readonly short[][] DFA80_transition = DFA.UnpackEncodedStringArray(DFA80_transitionS);

    protected class DFA80 : DFA
    {
        public DFA80(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;

        }

        override public string Description
        {
            get { return "751:30: ( ESCAPE stringconstant )?"; }
        }

    }

    const string DFA84_eotS =
        "\x27\uffff";
    const string DFA84_eofS =
        "\x01\x02\x26\uffff";
    const string DFA84_minS =
        "\x01\x06\x26\uffff";
    const string DFA84_maxS =
        "\x01\u00cf\x26\uffff";
    const string DFA84_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x24\uffff";
    const string DFA84_specialS =
        "\x27\uffff}>";
    static readonly string[] DFA84_transitionS = {
            "\x08\x02\x02\uffff\x01\x02\x0c\uffff\x05\x02\x06\uffff\x01"+
            "\x02\x01\uffff\x02\x02\x02\uffff\x01\x02\x07\uffff\x03\x02\u0080"+
            "\uffff\x02\x02\x03\uffff\x01\x02\x01\uffff\x0b\x02\x01\x01\x03"+
            "\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA84_eot = DFA.UnpackEncodedString(DFA84_eotS);
    static readonly short[] DFA84_eof = DFA.UnpackEncodedString(DFA84_eofS);
    static readonly char[] DFA84_min = DFA.UnpackEncodedStringToUnsignedChars(DFA84_minS);
    static readonly char[] DFA84_max = DFA.UnpackEncodedStringToUnsignedChars(DFA84_maxS);
    static readonly short[] DFA84_accept = DFA.UnpackEncodedString(DFA84_acceptS);
    static readonly short[] DFA84_special = DFA.UnpackEncodedString(DFA84_specialS);
    static readonly short[][] DFA84_transition = DFA.UnpackEncodedStringArray(DFA84_transitionS);

    protected class DFA84 : DFA
    {
        public DFA84(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;

        }

        override public string Description
        {
            get { return "767:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?"; }
        }

    }

    const string DFA83_eotS =
        "\x27\uffff";
    const string DFA83_eofS =
        "\x01\x01\x26\uffff";
    const string DFA83_minS =
        "\x01\x06\x26\uffff";
    const string DFA83_maxS =
        "\x01\u00cf\x26\uffff";
    const string DFA83_acceptS =
        "\x01\uffff\x01\x02\x24\uffff\x01\x01";
    const string DFA83_specialS =
        "\x27\uffff}>";
    static readonly string[] DFA83_transitionS = {
            "\x08\x01\x02\uffff\x01\x01\x0c\uffff\x05\x01\x06\uffff\x01"+
            "\x01\x01\uffff\x02\x01\x02\uffff\x01\x01\x07\uffff\x03\x01\u0080"+
            "\uffff\x02\x01\x03\uffff\x01\x01\x01\uffff\x0b\x01\x01\x26\x03"+
            "\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA83_eot = DFA.UnpackEncodedString(DFA83_eotS);
    static readonly short[] DFA83_eof = DFA.UnpackEncodedString(DFA83_eofS);
    static readonly char[] DFA83_min = DFA.UnpackEncodedStringToUnsignedChars(DFA83_minS);
    static readonly char[] DFA83_max = DFA.UnpackEncodedStringToUnsignedChars(DFA83_maxS);
    static readonly short[] DFA83_accept = DFA.UnpackEncodedString(DFA83_acceptS);
    static readonly short[] DFA83_special = DFA.UnpackEncodedString(DFA83_specialS);
    static readonly short[][] DFA83_transition = DFA.UnpackEncodedStringArray(DFA83_transitionS);

    protected class DFA83 : DFA
    {
        public DFA83(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 767:50: ( LOR additiveExpression )*"; }
        }

    }

    const string DFA86_eotS =
        "\x29\uffff";
    const string DFA86_eofS =
        "\x01\x01\x28\uffff";
    const string DFA86_minS =
        "\x01\x06\x28\uffff";
    const string DFA86_maxS =
        "\x01\u00cf\x28\uffff";
    const string DFA86_acceptS =
        "\x01\uffff\x01\x02\x25\uffff\x01\x01\x01\uffff";
    const string DFA86_specialS =
        "\x29\uffff}>";
    static readonly string[] DFA86_transitionS = {
            "\x08\x01\x02\uffff\x01\x01\x0c\uffff\x05\x01\x06\uffff\x01"+
            "\x01\x01\uffff\x02\x01\x02\uffff\x01\x01\x07\uffff\x03\x01\x7b"+
            "\uffff\x02\x27\x03\uffff\x02\x01\x03\uffff\x01\x01\x01\uffff"+
            "\x0c\x01\x03\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA86_eot = DFA.UnpackEncodedString(DFA86_eotS);
    static readonly short[] DFA86_eof = DFA.UnpackEncodedString(DFA86_eofS);
    static readonly char[] DFA86_min = DFA.UnpackEncodedStringToUnsignedChars(DFA86_minS);
    static readonly char[] DFA86_max = DFA.UnpackEncodedStringToUnsignedChars(DFA86_maxS);
    static readonly short[] DFA86_accept = DFA.UnpackEncodedString(DFA86_acceptS);
    static readonly short[] DFA86_special = DFA.UnpackEncodedString(DFA86_specialS);
    static readonly short[][] DFA86_transition = DFA.UnpackEncodedStringArray(DFA86_transitionS);

    protected class DFA86 : DFA
    {
        public DFA86(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 773:23: ( ( PLUS | MINUS ) multiplyExpression )*"; }
        }

    }

    const string DFA88_eotS =
        "\x2c\uffff";
    const string DFA88_eofS =
        "\x01\x01\x2b\uffff";
    const string DFA88_minS =
        "\x01\x06\x2b\uffff";
    const string DFA88_maxS =
        "\x01\u00cf\x2b\uffff";
    const string DFA88_acceptS =
        "\x01\uffff\x01\x02\x27\uffff\x01\x01\x02\uffff";
    const string DFA88_specialS =
        "\x2c\uffff}>";
    static readonly string[] DFA88_transitionS = {
            "\x08\x01\x02\uffff\x01\x01\x0c\uffff\x05\x01\x06\uffff\x01"+
            "\x01\x01\uffff\x02\x01\x02\uffff\x01\x01\x07\uffff\x03\x01\x7b"+
            "\uffff\x02\x01\x03\uffff\x02\x01\x01\uffff\x01\x29\x01\uffff"+
            "\x01\x01\x01\uffff\x0c\x01\x02\x29\x01\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA88_eot = DFA.UnpackEncodedString(DFA88_eotS);
    static readonly short[] DFA88_eof = DFA.UnpackEncodedString(DFA88_eofS);
    static readonly char[] DFA88_min = DFA.UnpackEncodedStringToUnsignedChars(DFA88_minS);
    static readonly char[] DFA88_max = DFA.UnpackEncodedStringToUnsignedChars(DFA88_maxS);
    static readonly short[] DFA88_accept = DFA.UnpackEncodedString(DFA88_acceptS);
    static readonly short[] DFA88_special = DFA.UnpackEncodedString(DFA88_specialS);
    static readonly short[][] DFA88_transition = DFA.UnpackEncodedStringArray(DFA88_transitionS);

    protected class DFA88 : DFA
    {
        public DFA88(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 777:20: ( ( STAR | DIV | MOD ) unaryExpression )*"; }
        }

    }

    const string DFA89_eotS =
        "\u06a0\uffff";
    const string DFA89_eofS =
        "\x0f\uffff\x01\x0e\x02\uffff\x02\x0e\x02\uffff\x04\x0e\x09\uffff"+
        "\x02\x0e\x02\uffff\x02\x0e\u0677\uffff";
    const string DFA89_minS =
        "\x02\x05\x0b\uffff\x01\x05\x01\uffff\x01\x06\x02\uffff\x02\x06"+
        "\x02\uffff\x04\x06\x09\uffff\x02\x06\x02\uffff\x02\x06\x03\uffff"+
        "\x01\u00bd\x55\uffff\x01\x05\x2f\uffff\x01\x05\x2f\uffff\x01\x05"+
        "\x2f\uffff\x01\x05\x2f\uffff\x01\x05\x2f\uffff\x01\x05\x2f\uffff"+
        "\x01\x05\x2f\uffff\x01\x05\x2f\uffff\x01\u00b0\x2f\uffff\x01\x05"+
        "\x2f\uffff\x01\x05\x2f\uffff\x01\x05\x09\uffff\x02\x06\x31\uffff"+
        "\x02\x06\x30\uffff\x02\x06\x2e\uffff\x02\x06\x30\uffff\x02\x06\x30"+
        "\uffff\x02\x06\x30\uffff\x02\x06\x2e\uffff\x02\x06\x31\uffff\x02"+
        "\x06\x27\uffff\x02\x06\x60\uffff\x01\x00\x05\uffff\x01\x00\x2b\uffff"+
        "\x01\x00\x05\uffff\x01\x00\x2b\uffff\x01\x00\x05\uffff\x01\x00\x5f"+
        "\uffff\x01\x00\x05\uffff\x01\x00\x2b\uffff\x01\x00\x05\uffff\x01"+
        "\x00\x2b\uffff\x01\x00\x18\uffff\x01\x00\u00a3\uffff";
    const string DFA89_maxS =
        "\x01\u00f0\x01\u00b8\x0b\uffff\x01\u00f0\x01\uffff\x01\u00d1\x02"+
        "\uffff\x02\u00d1\x02\uffff\x04\u00d1\x09\uffff\x02\u00d1\x02\uffff"+
        "\x02\u00d1\x03\uffff\x01\u00bd\x55\uffff\x01\u00f0\x2f\uffff\x01"+
        "\u00f0\x2f\uffff\x01\u00f0\x2f\uffff\x01\u00f0\x2f\uffff\x01\u00f0"+
        "\x2f\uffff\x01\u00f0\x2f\uffff\x01\u00f0\x2f\uffff\x01\u00f0\x2f"+
        "\uffff\x01\u00b7\x2f\uffff\x01\u00f0\x2f\uffff\x01\u00f0\x2f\uffff"+
        "\x01\u00b8\x09\uffff\x02\u00cd\x31\uffff\x02\u00cd\x30\uffff\x02"+
        "\u00cd\x2e\uffff\x02\u00cd\x30\uffff\x02\u00cd\x30\uffff\x02\u00cd"+
        "\x30\uffff\x02\u00cd\x2e\uffff\x02\u00cd\x31\uffff\x02\u00cd\x27"+
        "\uffff\x02\u00cd\x60\uffff\x01\x00\x05\uffff\x01\x00\x2b\uffff\x01"+
        "\x00\x05\uffff\x01\x00\x2b\uffff\x01\x00\x05\uffff\x01\x00\x5f\uffff"+
        "\x01\x00\x05\uffff\x01\x00\x2b\uffff\x01\x00\x05\uffff\x01\x00\x2b"+
        "\uffff\x01\x00\x18\uffff\x01\x00\u00a3\uffff";
    const string DFA89_acceptS =
        "\x02\uffff\x01\x02\x09\uffff\x01\x03\x01\uffff\x01\x05\x1e\uffff"+
        "\x01\x06\x01\x07\x04\uffff\x01\x01\x1d\uffff\x01\x08\x01\x04\u0240"+
        "\uffff\x09\x06\x02\uffff\x31\x06\x02\uffff\x30\x06\x02\uffff\x2e"+
        "\x06\x02\uffff\x30\x06\x02\uffff\x30\x06\x02\uffff\x30\x06\x02\uffff"+
        "\x2e\x06\x02\uffff\x28\x06\x02\uffff\x07\x06\x02\uffff\x27\x06\x02"+
        "\uffff\x2e\x06\x01\x09\x31\x06\x01\uffff\x05\x06\x01\uffff\x2b\x06"+
        "\x01\uffff\x05\x06\x01\uffff\x2b\x06\x01\uffff\x05\x06\x01\uffff"+
        "\x31\x06\x02\uffff\x2c\x06\x01\uffff\x05\x06\x01\uffff\x2b\x06\x01"+
        "\uffff\x05\x06\x01\uffff\x2b\x06\x01\uffff\x18\x06\x01\uffff\x1e"+
        "\x06\x02\uffff\x32\x06\x01\uffff\x19\x06\x01\uffff\x1a\x06\x02\uffff"+
        "\x1a\x06";
    const string DFA89_specialS =
        "\x01\x00\u0081\uffff\x01\x01\x2f\uffff\x01\x02\x2f\uffff\x01\x03"+
        "\x2f\uffff\x01\x04\x2f\uffff\x01\x05\x2f\uffff\x01\x06\x2f\uffff"+
        "\x01\x07\x2f\uffff\x01\x08\x2f\uffff\x01\x09\x2f\uffff\x01\x0a\x2f"+
        "\uffff\x01\x0b\x2f\uffff\x01\x0c\x09\uffff\x01\x0d\x01\x0e\x31\uffff"+
        "\x01\x0f\x01\x10\x30\uffff\x01\x11\x01\x12\x2e\uffff\x01\x13\x01"+
        "\x14\x30\uffff\x01\x15\x01\x16\x30\uffff\x01\x17\x01\x18\x30\uffff"+
        "\x01\x19\x01\x1a\x2e\uffff\x01\x1b\x01\x1c\x31\uffff\x01\x1d\x01"+
        "\x1e\x27\uffff\x01\x1f\x01\x20\x60\uffff\x01\x21\x05\uffff\x01\x22"+
        "\x2b\uffff\x01\x23\x05\uffff\x01\x24\x2b\uffff\x01\x25\x05\uffff"+
        "\x01\x26\x5f\uffff\x01\x27\x05\uffff\x01\x28\x2b\uffff\x01\x29\x05"+
        "\uffff\x01\x2a\x2b\uffff\x01\x2b\x18\uffff\x01\x2c\u00a3\uffff}>";
    static readonly string[] DFA89_transitionS = {
            "\x01\x0e\x04\uffff\x01\x0e\x03\uffff\x01\x0e\x02\uffff\x01"+
            "\x12\x01\x13\x02\x0e\x01\x16\x01\x17\x01\x18\x01\x19\x01\x0f"+
            "\x15\uffff\x05\x0e\x08\uffff\x04\x0e\x01\x23\x01\x24\x01\x2c"+
            "\x02\x0e\x01\x27\x01\x28\x01\x2d\x01\uffff\x01\x0e\x01\uffff"+
            "\x01\x0e\x62\uffff\x01\x02\x01\uffff\x03\x02\x01\x0c\x01\x01"+
            "\x03\x02\x01\x0e\x04\uffff\x01\x0d\x10\uffff\x01\x2e\x1f\uffff"+
            "\x03\x02",
            "\x01\x33\x04\uffff\x01\x33\x03\uffff\x01\x33\x02\uffff\x09"+
            "\x33\x15\uffff\x05\x33\x08\uffff\x06\x33\x01\uffff\x04\x33\x02"+
            "\uffff\x01\x33\x01\uffff\x01\x33\x62\uffff\x01\x02\x01\uffff"+
            "\x03\x02\x05\uffff\x01\x33",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\x52\x04\uffff\x01\x52\x02\uffff\x02\x52\x02\uffff\x09"+
            "\x52\x01\x51\x01\x52\x13\uffff\x05\x52\x08\uffff\x0c\x52\x01"+
            "\uffff\x01\x52\x01\uffff\x01\x52\x62\uffff\x01\x52\x01\uffff"+
            "\x09\x52\x04\uffff\x01\x52\x10\uffff\x01\x52\x1f\uffff\x03\x52",
            "",
            "\x08\x0e\x02\uffff\x01\x0e\x0c\uffff\x05\x0e\x06\uffff\x01"+
            "\x0e\x01\uffff\x02\x0e\x02\uffff\x01\x0e\x07\uffff\x03\x0e\x7a"+
            "\uffff\x03\x0e\x03\uffff\x04\x0e\x01\u0082\x10\x0e\x01\uffff"+
            "\x01\x0e\x01\uffff\x01\x0e",
            "",
            "",
            "\x08\x0e\x02\uffff\x01\x0e\x0c\uffff\x05\x0e\x06\uffff\x01"+
            "\x0e\x01\uffff\x02\x0e\x02\uffff\x01\x0e\x07\uffff\x03\x0e\x7a"+
            "\uffff\x03\x0e\x03\uffff\x04\x0e\x01\u00b2\x10\x0e\x01\uffff"+
            "\x01\x0e\x01\uffff\x01\x0e",
            "\x08\x0e\x02\uffff\x01\x0e\x0c\uffff\x05\x0e\x06\uffff\x01"+
            "\x0e\x01\uffff\x02\x0e\x02\uffff\x01\x0e\x07\uffff\x03\x0e\x7a"+
            "\uffff\x03\x0e\x03\uffff\x04\x0e\x01\u00e2\x10\x0e\x01\uffff"+
            "\x01\x0e\x01\uffff\x01\x0e",
            "",
            "",
            "\x08\x0e\x02\uffff\x01\x0e\x0c\uffff\x05\x0e\x06\uffff\x01"+
            "\x0e\x01\uffff\x02\x0e\x02\uffff\x01\x0e\x07\uffff\x03\x0e\x7a"+
            "\uffff\x03\x0e\x03\uffff\x04\x0e\x01\u0112\x10\x0e\x01\uffff"+
            "\x01\x0e\x01\uffff\x01\x0e",
            "\x08\x0e\x02\uffff\x01\x0e\x0c\uffff\x05\x0e\x06\uffff\x01"+
            "\x0e\x01\uffff\x02\x0e\x02\uffff\x01\x0e\x07\uffff\x03\x0e\x7a"+
            "\uffff\x03\x0e\x03\uffff\x04\x0e\x01\u0142\x10\x0e\x01\uffff"+
            "\x01\x0e\x01\uffff\x01\x0e",
            "\x08\x0e\x02\uffff\x01\x0e\x0c\uffff\x05\x0e\x06\uffff\x01"+
            "\x0e\x01\uffff\x02\x0e\x02\uffff\x01\x0e\x07\uffff\x03\x0e\x7a"+
            "\uffff\x03\x0e\x03\uffff\x04\x0e\x01\u0172\x10\x0e\x01\uffff"+
            "\x01\x0e\x01\uffff\x01\x0e",
            "\x08\x0e\x02\uffff\x01\x0e\x0c\uffff\x05\x0e\x06\uffff\x01"+
            "\x0e\x01\uffff\x02\x0e\x02\uffff\x01\x0e\x07\uffff\x03\x0e\x7a"+
            "\uffff\x03\x0e\x03\uffff\x04\x0e\x01\u01a2\x10\x0e\x01\uffff"+
            "\x01\x0e\x01\uffff\x01\x0e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x08\x0e\x02\uffff\x01\x0e\x0c\uffff\x05\x0e\x06\uffff\x01"+
            "\x0e\x01\uffff\x02\x0e\x02\uffff\x01\x0e\x07\uffff\x03\x0e\x7a"+
            "\uffff\x03\x0e\x03\uffff\x04\x0e\x01\u01d2\x10\x0e\x01\uffff"+
            "\x01\x0e\x01\uffff\x01\x0e",
            "\x08\x0e\x02\uffff\x01\x0e\x0c\uffff\x05\x0e\x06\uffff\x01"+
            "\x0e\x01\uffff\x02\x0e\x02\uffff\x01\x0e\x07\uffff\x03\x0e\x7a"+
            "\uffff\x03\x0e\x03\uffff\x04\x0e\x01\u0202\x10\x0e\x01\uffff"+
            "\x01\x0e\x01\uffff\x01\x0e",
            "",
            "",
            "\x08\x0e\x02\uffff\x01\x0e\x0c\uffff\x05\x0e\x06\uffff\x01"+
            "\x0e\x01\uffff\x02\x0e\x02\uffff\x01\x0e\x07\uffff\x03\x0e\x7a"+
            "\uffff\x03\x0e\x03\uffff\x04\x0e\x01\u0232\x10\x0e\x01\uffff"+
            "\x01\x0e\x01\uffff\x01\x0e",
            "\x08\x0e\x02\uffff\x01\x0e\x0c\uffff\x05\x0e\x06\uffff\x01"+
            "\x0e\x01\uffff\x02\x0e\x02\uffff\x01\x0e\x07\uffff\x03\x0e\x7a"+
            "\uffff\x03\x0e\x03\uffff\x04\x0e\x01\u0262\x10\x0e\x01\uffff"+
            "\x01\x0e\x01\uffff\x01\x0e",
            "",
            "",
            "",
            "\x01\u0292",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u02c0\x04\uffff\x01\u02a5\x02\uffff\x01\u02c4\x01\u02a6"+
            "\x02\uffff\x01\u02a7\x01\u02a8\x01\u02a9\x01\u02aa\x01\u02ab"+
            "\x01\u02ac\x01\u02ad\x01\u02ae\x01\u02a4\x01\uffff\x01\u0295"+
            "\x10\uffff\x01\u0294\x01\u0293\x01\uffff\x01\u02af\x01\u02b0"+
            "\x01\u02b1\x01\u02b2\x01\u02b3\x08\uffff\x01\u02b4\x01\u02b5"+
            "\x01\u02b6\x01\u02b7\x01\u02b8\x01\u02b9\x01\u02c1\x01\u02ba"+
            "\x01\u02bb\x01\u02bc\x01\u02bd\x01\u02c2\x01\uffff\x01\u02be"+
            "\x01\uffff\x01\u02bf\x62\uffff\x01\u029b\x01\uffff\x01\u0298"+
            "\x01\u0299\x01\u029a\x01\u02a1\x01\u0296\x01\u0297\x01\u029c"+
            "\x01\u029d\x01\u02a3\x03\uffff\x01\u02c5\x01\u02a2\x10\uffff"+
            "\x01\u02c3\x1f\uffff\x01\u029e\x01\u029f\x01\u02a0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u02f3\x04\uffff\x01\u02d8\x02\uffff\x01\u02f7\x01\u02d9"+
            "\x02\uffff\x01\u02da\x01\u02db\x01\u02dc\x01\u02dd\x01\u02de"+
            "\x01\u02df\x01\u02e0\x01\u02e1\x01\u02d7\x01\uffff\x01\u02c8"+
            "\x10\uffff\x01\u02c7\x01\u02c6\x01\uffff\x01\u02e2\x01\u02e3"+
            "\x01\u02e4\x01\u02e5\x01\u02e6\x08\uffff\x01\u02e7\x01\u02e8"+
            "\x01\u02e9\x01\u02ea\x01\u02eb\x01\u02ec\x01\u02f4\x01\u02ed"+
            "\x01\u02ee\x01\u02ef\x01\u02f0\x01\u02f5\x01\uffff\x01\u02f1"+
            "\x01\uffff\x01\u02f2\x62\uffff\x01\u02ce\x01\uffff\x01\u02cb"+
            "\x01\u02cc\x01\u02cd\x01\u02d4\x01\u02c9\x01\u02ca\x01\u02cf"+
            "\x01\u02d0\x01\u02d6\x04\uffff\x01\u02d5\x10\uffff\x01\u02f6"+
            "\x1f\uffff\x01\u02d1\x01\u02d2\x01\u02d3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u0325\x04\uffff\x01\u030a\x02\uffff\x01\u0329\x01\u030b"+
            "\x02\uffff\x01\u030c\x01\u030d\x01\u030e\x01\u030f\x01\u0310"+
            "\x01\u0311\x01\u0312\x01\u0313\x01\u0309\x01\uffff\x01\u02fa"+
            "\x10\uffff\x01\u02f9\x01\u02f8\x01\uffff\x01\u0314\x01\u0315"+
            "\x01\u0316\x01\u0317\x01\u0318\x08\uffff\x01\u0319\x01\u031a"+
            "\x01\u031b\x01\u031c\x01\u031d\x01\u031e\x01\u0326\x01\u031f"+
            "\x01\u0320\x01\u0321\x01\u0322\x01\u0327\x01\uffff\x01\u0323"+
            "\x01\uffff\x01\u0324\x62\uffff\x01\u0300\x01\uffff\x01\u02fd"+
            "\x01\u02fe\x01\u02ff\x01\u0306\x01\u02fb\x01\u02fc\x01\u0301"+
            "\x01\u0302\x01\u0308\x04\uffff\x01\u0307\x10\uffff\x01\u0328"+
            "\x1f\uffff\x01\u0303\x01\u0304\x01\u0305",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u0355\x04\uffff\x01\u033a\x02\uffff\x01\u0359\x01\u033b"+
            "\x02\uffff\x01\u033c\x01\u033d\x01\u033e\x01\u033f\x01\u0340"+
            "\x01\u0341\x01\u0342\x01\u0343\x01\u0339\x01\uffff\x01\u032a"+
            "\x13\uffff\x01\u0344\x01\u0345\x01\u0346\x01\u0347\x01\u0348"+
            "\x08\uffff\x01\u0349\x01\u034a\x01\u034b\x01\u034c\x01\u034d"+
            "\x01\u034e\x01\u0356\x01\u034f\x01\u0350\x01\u0351\x01\u0352"+
            "\x01\u0357\x01\uffff\x01\u0353\x01\uffff\x01\u0354\x62\uffff"+
            "\x01\u0330\x01\uffff\x01\u032d\x01\u032e\x01\u032f\x01\u0336"+
            "\x01\u032b\x01\u032c\x01\u0331\x01\u0332\x01\u0338\x04\uffff"+
            "\x01\u0337\x10\uffff\x01\u0358\x1f\uffff\x01\u0333\x01\u0334"+
            "\x01\u0335",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u0387\x04\uffff\x01\u036c\x02\uffff\x01\u038b\x01\u036d"+
            "\x02\uffff\x01\u036e\x01\u036f\x01\u0370\x01\u0371\x01\u0372"+
            "\x01\u0373\x01\u0374\x01\u0375\x01\u036b\x01\uffff\x01\u035c"+
            "\x10\uffff\x01\u035b\x01\u035a\x01\uffff\x01\u0376\x01\u0377"+
            "\x01\u0378\x01\u0379\x01\u037a\x08\uffff\x01\u037b\x01\u037c"+
            "\x01\u037d\x01\u037e\x01\u037f\x01\u0380\x01\u0388\x01\u0381"+
            "\x01\u0382\x01\u0383\x01\u0384\x01\u0389\x01\uffff\x01\u0385"+
            "\x01\uffff\x01\u0386\x62\uffff\x01\u0362\x01\uffff\x01\u035f"+
            "\x01\u0360\x01\u0361\x01\u0368\x01\u035d\x01\u035e\x01\u0363"+
            "\x01\u0364\x01\u036a\x04\uffff\x01\u0369\x10\uffff\x01\u038a"+
            "\x1f\uffff\x01\u0365\x01\u0366\x01\u0367",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u03b9\x04\uffff\x01\u039e\x02\uffff\x01\u03bd\x01\u039f"+
            "\x02\uffff\x01\u03a0\x01\u03a1\x01\u03a2\x01\u03a3\x01\u03a4"+
            "\x01\u03a5\x01\u03a6\x01\u03a7\x01\u039d\x01\uffff\x01\u038e"+
            "\x10\uffff\x01\u038d\x01\u038c\x01\uffff\x01\u03a8\x01\u03a9"+
            "\x01\u03aa\x01\u03ab\x01\u03ac\x08\uffff\x01\u03ad\x01\u03ae"+
            "\x01\u03af\x01\u03b0\x01\u03b1\x01\u03b2\x01\u03ba\x01\u03b3"+
            "\x01\u03b4\x01\u03b5\x01\u03b6\x01\u03bb\x01\uffff\x01\u03b7"+
            "\x01\uffff\x01\u03b8\x62\uffff\x01\u0394\x01\uffff\x01\u0391"+
            "\x01\u0392\x01\u0393\x01\u039a\x01\u038f\x01\u0390\x01\u0395"+
            "\x01\u0396\x01\u039c\x04\uffff\x01\u039b\x10\uffff\x01\u03bc"+
            "\x1f\uffff\x01\u0397\x01\u0398\x01\u0399",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u03eb\x04\uffff\x01\u03d0\x02\uffff\x01\u03ef\x01\u03d1"+
            "\x02\uffff\x01\u03d2\x01\u03d3\x01\u03d4\x01\u03d5\x01\u03d6"+
            "\x01\u03d7\x01\u03d8\x01\u03d9\x01\u03cf\x01\uffff\x01\u03c0"+
            "\x10\uffff\x01\u03bf\x01\u03be\x01\uffff\x01\u03da\x01\u03db"+
            "\x01\u03dc\x01\u03dd\x01\u03de\x08\uffff\x01\u03df\x01\u03e0"+
            "\x01\u03e1\x01\u03e2\x01\u03e3\x01\u03e4\x01\u03ec\x01\u03e5"+
            "\x01\u03e6\x01\u03e7\x01\u03e8\x01\u03ed\x01\uffff\x01\u03e9"+
            "\x01\uffff\x01\u03ea\x62\uffff\x01\u03c6\x01\uffff\x01\u03c3"+
            "\x01\u03c4\x01\u03c5\x01\u03cc\x01\u03c1\x01\u03c2\x01\u03c7"+
            "\x01\u03c8\x01\u03ce\x04\uffff\x01\u03cd\x10\uffff\x01\u03ee"+
            "\x1f\uffff\x01\u03c9\x01\u03ca\x01\u03cb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u041b\x04\uffff\x01\u0400\x02\uffff\x01\u041f\x01\u0401"+
            "\x02\uffff\x01\u0402\x01\u0403\x01\u0404\x01\u0405\x01\u0406"+
            "\x01\u0407\x01\u0408\x01\u0409\x01\u03ff\x01\uffff\x01\u03f0"+
            "\x13\uffff\x01\u040a\x01\u040b\x01\u040c\x01\u040d\x01\u040e"+
            "\x08\uffff\x01\u040f\x01\u0410\x01\u0411\x01\u0412\x01\u0413"+
            "\x01\u0414\x01\u041c\x01\u0415\x01\u0416\x01\u0417\x01\u0418"+
            "\x01\u041d\x01\uffff\x01\u0419\x01\uffff\x01\u041a\x62\uffff"+
            "\x01\u03f6\x01\uffff\x01\u03f3\x01\u03f4\x01\u03f5\x01\u03fc"+
            "\x01\u03f1\x01\u03f2\x01\u03f7\x01\u03f8\x01\u03fe\x04\uffff"+
            "\x01\u03fd\x10\uffff\x01\u041e\x1f\uffff\x01\u03f9\x01\u03fa"+
            "\x01\u03fb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u0420\x05\uffff\x02\x0e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u044e\x04\uffff\x01\u0433\x02\uffff\x01\u0452\x01\u0434"+
            "\x02\uffff\x01\u0435\x01\u0436\x01\u0437\x01\u0438\x01\u0439"+
            "\x01\u043a\x01\u043b\x01\u043c\x01\u0432\x01\uffff\x01\u0423"+
            "\x13\uffff\x01\u043d\x01\u043e\x01\u043f\x01\u0440\x01\u0441"+
            "\x08\uffff\x01\u0442\x01\u0443\x01\u0444\x01\u0445\x01\u0446"+
            "\x01\u0447\x01\u044f\x01\u0448\x01\u0449\x01\u044a\x01\u044b"+
            "\x01\u0450\x01\uffff\x01\u044c\x01\uffff\x01\u044d\x62\uffff"+
            "\x01\u0429\x01\uffff\x01\u0426\x01\u0427\x01\u0428\x01\u042f"+
            "\x01\u0424\x01\u0425\x01\u042a\x01\u042b\x01\u0431\x04\uffff"+
            "\x01\u0430\x10\uffff\x01\u0451\x1f\uffff\x01\u042c\x01\u042d"+
            "\x01\u042e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u047e\x04\uffff\x01\u0463\x02\uffff\x01\u0482\x01\u0464"+
            "\x02\uffff\x01\u0465\x01\u0466\x01\u0467\x01\u0468\x01\u0469"+
            "\x01\u046a\x01\u046b\x01\u046c\x01\u0462\x01\uffff\x01\u0455"+
            "\x13\uffff\x01\u046d\x01\u046e\x01\u046f\x01\u0470\x01\u0471"+
            "\x08\uffff\x01\u0472\x01\u0473\x01\u0474\x01\u0475\x01\u0476"+
            "\x01\u0477\x01\u047f\x01\u0478\x01\u0479\x01\u047a\x01\u047b"+
            "\x01\u0480\x01\uffff\x01\u047c\x01\uffff\x01\u047d\x62\uffff"+
            "\x01\u045b\x01\uffff\x01\u0458\x01\u0459\x01\u045a\x01\u045f"+
            "\x01\u0456\x01\u0457\x01\u0453\x01\u0454\x01\u0461\x04\uffff"+
            "\x01\u0460\x10\uffff\x01\u0481\x1f\uffff\x01\u045c\x01\u045d"+
            "\x01\u045e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u04a1\x04\uffff\x01\u0486\x03\uffff\x01\u0487\x02\uffff"+
            "\x01\u0488\x01\u0489\x01\u048a\x01\u048b\x01\u048c\x01\u048d"+
            "\x01\u048e\x01\u048f\x01\u0485\x01\u0483\x14\uffff\x01\u0490"+
            "\x01\u0491\x01\u0492\x01\u0493\x01\u0494\x08\uffff\x01\u0495"+
            "\x01\u0496\x01\u0497\x01\u0498\x01\u0499\x01\u049a\x01\uffff"+
            "\x01\u049b\x01\u049c\x01\u049d\x01\u049e\x02\uffff\x01\u049f"+
            "\x01\uffff\x01\u04a0\x6c\uffff\x01\u0484",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u04b7\x01\u04b8\x01\u04b9\x01\u04ba\x01\uffff\x01\u04b4"+
            "\x01\u04b3\x01\u04b6\x1a\uffff\x01\u04ad\u008b\uffff\x01\u04a6"+
            "\x01\u04a5\x04\uffff\x01\u04ac\x01\uffff\x01\u04a2\x01\uffff"+
            "\x01\u04b5\x03\uffff\x01\u04b0\x01\u04b1\x01\u04b2\x01\u04ae"+
            "\x01\u04af\x01\u04a8\x01\u04a9\x01\u04aa\x01\u04ab\x01\u04a7"+
            "\x01\u04a3\x01\u04a4",
            "\x01\u04d0\x01\u04d1\x01\u04d2\x01\u04d3\x01\uffff\x01\u04ce"+
            "\x01\u04cd\x01\u04cf\x1a\uffff\x01\u04c7\u008b\uffff\x01\u04c0"+
            "\x01\u04bf\x04\uffff\x01\u04c6\x01\uffff\x01\u04bc\x01\uffff"+
            "\x01\u04bb\x03\uffff\x01\u04ca\x01\u04cb\x01\u04cc\x01\u04c8"+
            "\x01\u04c9\x01\u04c2\x01\u04c3\x01\u04c4\x01\u04c5\x01\u04c1"+
            "\x01\u04bd\x01\u04be",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u04e9\x01\u04ea\x01\u04eb\x01\u04ec\x01\uffff\x01\u04e6"+
            "\x01\u04e5\x01\u04e8\x1a\uffff\x01\u04df\u008b\uffff\x01\u04d8"+
            "\x01\u04d7\x04\uffff\x01\u04de\x01\uffff\x01\u04d4\x01\uffff"+
            "\x01\u04e7\x03\uffff\x01\u04e2\x01\u04e3\x01\u04e4\x01\u04e0"+
            "\x01\u04e1\x01\u04da\x01\u04db\x01\u04dc\x01\u04dd\x01\u04d9"+
            "\x01\u04d5\x01\u04d6",
            "\x01\u0502\x01\u0503\x01\u0504\x01\u0505\x01\uffff\x01\u0500"+
            "\x01\u04ff\x01\u0501\x1a\uffff\x01\u04f9\u008b\uffff\x01\u04f2"+
            "\x01\u04f1\x04\uffff\x01\u04f8\x01\uffff\x01\u04ee\x01\uffff"+
            "\x01\u04ed\x03\uffff\x01\u04fc\x01\u04fd\x01\u04fe\x01\u04fa"+
            "\x01\u04fb\x01\u04f4\x01\u04f5\x01\u04f6\x01\u04f7\x01\u04f3"+
            "\x01\u04ef\x01\u04f0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u051b\x01\u051c\x01\u051d\x01\u051e\x01\uffff\x01\u0518"+
            "\x01\u0517\x01\u051a\x1a\uffff\x01\u0511\u008b\uffff\x01\u050a"+
            "\x01\u0509\x04\uffff\x01\u0510\x01\uffff\x01\u0506\x01\uffff"+
            "\x01\u0519\x03\uffff\x01\u0514\x01\u0515\x01\u0516\x01\u0512"+
            "\x01\u0513\x01\u050c\x01\u050d\x01\u050e\x01\u050f\x01\u050b"+
            "\x01\u0507\x01\u0508",
            "\x01\u0534\x01\u0535\x01\u0536\x01\u0537\x01\uffff\x01\u0532"+
            "\x01\u0531\x01\u0533\x1a\uffff\x01\u052b\u008b\uffff\x01\u0524"+
            "\x01\u0523\x04\uffff\x01\u052a\x01\uffff\x01\u0520\x01\uffff"+
            "\x01\u051f\x03\uffff\x01\u052e\x01\u052f\x01\u0530\x01\u052c"+
            "\x01\u052d\x01\u0526\x01\u0527\x01\u0528\x01\u0529\x01\u0525"+
            "\x01\u0521\x01\u0522",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u054d\x01\u054e\x01\u054f\x01\u0550\x01\uffff\x01\u054a"+
            "\x01\u0549\x01\u054c\x1a\uffff\x01\u0543\u008b\uffff\x01\u053c"+
            "\x01\u053b\x03\uffff\x01\u054b\x01\u0542\x01\uffff\x01\u0538"+
            "\x01\uffff\x01\x0e\x03\uffff\x01\u0546\x01\u0547\x01\u0548\x01"+
            "\u0544\x01\u0545\x01\u053e\x01\u053f\x01\u0540\x01\u0541\x01"+
            "\u053d\x01\u0539\x01\u053a",
            "\x01\u0568\x01\u0569\x01\u056a\x01\u056b\x01\uffff\x01\u0565"+
            "\x01\u0564\x01\u0567\x1a\uffff\x01\u055e\u008b\uffff\x01\u0557"+
            "\x01\u0556\x03\uffff\x01\u0566\x01\u055d\x01\uffff\x01\u0553"+
            "\x01\uffff\x01\x0e\x03\uffff\x01\u0561\x01\u0562\x01\u0563\x01"+
            "\u055f\x01\u0560\x01\u0559\x01\u055a\x01\u055b\x01\u055c\x01"+
            "\u0558\x01\u0554\x01\u0555",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u0581\x01\u0582\x01\u0583\x01\u0584\x01\uffff\x01\u057e"+
            "\x01\u057d\x01\u0580\x1a\uffff\x01\u0577\u008b\uffff\x01\u0570"+
            "\x01\u056f\x04\uffff\x01\u0576\x01\uffff\x01\u056c\x01\uffff"+
            "\x01\u057f\x03\uffff\x01\u057a\x01\u057b\x01\u057c\x01\u0578"+
            "\x01\u0579\x01\u0572\x01\u0573\x01\u0574\x01\u0575\x01\u0571"+
            "\x01\u056d\x01\u056e",
            "\x01\u059a\x01\u059b\x01\u059c\x01\u059d\x01\uffff\x01\u0598"+
            "\x01\u0597\x01\u0599\x1a\uffff\x01\u0591\u008b\uffff\x01\u058a"+
            "\x01\u0589\x04\uffff\x01\u0590\x01\uffff\x01\u0586\x01\uffff"+
            "\x01\u0585\x03\uffff\x01\u0594\x01\u0595\x01\u0596\x01\u0592"+
            "\x01\u0593\x01\u058c\x01\u058d\x01\u058e\x01\u058f\x01\u058b"+
            "\x01\u0587\x01\u0588",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u05b3\x01\u05b4\x01\u05b5\x01\u05b6\x01\uffff\x01\u05b0"+
            "\x01\u05af\x01\u05b2\x1a\uffff\x01\u05a9\u008b\uffff\x01\u05a2"+
            "\x01\u05a1\x04\uffff\x01\u05a8\x01\uffff\x01\u059e\x01\uffff"+
            "\x01\u05b1\x03\uffff\x01\u05ac\x01\u05ad\x01\u05ae\x01\u05aa"+
            "\x01\u05ab\x01\u05a4\x01\u05a5\x01\u05a6\x01\u05a7\x01\u05a3"+
            "\x01\u059f\x01\u05a0",
            "\x01\u05cc\x01\u05cd\x01\u05ce\x01\u05cf\x01\uffff\x01\u05ca"+
            "\x01\u05c9\x01\u05cb\x1a\uffff\x01\u05c3\u008b\uffff\x01\u05bc"+
            "\x01\u05bb\x04\uffff\x01\u05c2\x01\uffff\x01\u05b8\x01\uffff"+
            "\x01\u05b7\x03\uffff\x01\u05c6\x01\u05c7\x01\u05c8\x01\u05c4"+
            "\x01\u05c5\x01\u05be\x01\u05bf\x01\u05c0\x01\u05c1\x01\u05bd"+
            "\x01\u05b9\x01\u05ba",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u05e5\x01\u05e6\x01\u05e7\x01\u05e8\x01\uffff\x01\u05e2"+
            "\x01\u05e1\x01\u05e4\x1a\uffff\x01\u05db\u008b\uffff\x01\u05d4"+
            "\x01\u05d3\x04\uffff\x01\u05da\x01\uffff\x01\u05d0\x01\uffff"+
            "\x01\u05e3\x03\uffff\x01\u05de\x01\u05df\x01\u05e0\x01\u05dc"+
            "\x01\u05dd\x01\u05d6\x01\u05d7\x01\u05d8\x01\u05d9\x01\u05d5"+
            "\x01\u05d1\x01\u05d2",
            "\x01\u05fe\x01\u05ff\x01\u0600\x01\u0601\x01\uffff\x01\u05fb"+
            "\x01\u05fa\x01\u05fd\x1a\uffff\x01\u05f4\u008b\uffff\x01\u05ed"+
            "\x01\u05ec\x04\uffff\x01\u05f3\x01\uffff\x01\u05e9\x01\uffff"+
            "\x01\u05fc\x03\uffff\x01\u05f7\x01\u05f8\x01\u05f9\x01\u05f5"+
            "\x01\u05f6\x01\u05ef\x01\u05f0\x01\u05f1\x01\u05f2\x01\u05ee"+
            "\x01\u05ea\x01\u05eb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u0617\x01\u0618\x01\u0619\x01\u061a\x01\uffff\x01\u0614"+
            "\x01\u0613\x01\u0616\x1a\uffff\x01\u060d\u008b\uffff\x01\u0606"+
            "\x01\u0605\x03\uffff\x01\u0615\x01\u060c\x01\uffff\x01\u0602"+
            "\x01\uffff\x01\x0e\x03\uffff\x01\u0610\x01\u0611\x01\u0612\x01"+
            "\u060e\x01\u060f\x01\u0608\x01\u0609\x01\u060a\x01\u060b\x01"+
            "\u0607\x01\u0603\x01\u0604",
            "\x01\u0632\x01\u0633\x01\u0634\x01\u0635\x01\uffff\x01\u062f"+
            "\x01\u062e\x01\u0631\x1a\uffff\x01\u0628\u008b\uffff\x01\u0621"+
            "\x01\u0620\x03\uffff\x01\u0630\x01\u0627\x01\uffff\x01\u061d"+
            "\x01\uffff\x01\x0e\x03\uffff\x01\u062b\x01\u062c\x01\u062d\x01"+
            "\u0629\x01\u062a\x01\u0623\x01\u0624\x01\u0625\x01\u0626\x01"+
            "\u0622\x01\u061e\x01\u061f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u064b\x01\u064c\x01\u064d\x01\u064e\x01\uffff\x01\u0648"+
            "\x01\u0647\x01\u064a\x1a\uffff\x01\u0641\u008b\uffff\x01\u063a"+
            "\x01\u0639\x03\uffff\x01\u0649\x01\u0640\x01\uffff\x01\u0636"+
            "\x01\uffff\x01\x0e\x03\uffff\x01\u0644\x01\u0645\x01\u0646\x01"+
            "\u0642\x01\u0643\x01\u063c\x01\u063d\x01\u063e\x01\u063f\x01"+
            "\u063b\x01\u0637\x01\u0638",
            "\x01\u0665\x01\u0666\x01\u0667\x01\u0668\x01\uffff\x01\u0662"+
            "\x01\u0661\x01\u0664\x1a\uffff\x01\u065b\u008b\uffff\x01\u0654"+
            "\x01\u0653\x03\uffff\x01\u0663\x01\u065a\x01\uffff\x01\u0650"+
            "\x01\uffff\x01\x0e\x03\uffff\x01\u065e\x01\u065f\x01\u0660\x01"+
            "\u065c\x01\u065d\x01\u0656\x01\u0657\x01\u0658\x01\u0659\x01"+
            "\u0655\x01\u0651\x01\u0652",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u0680\x01\u0681\x01\u0682\x01\u0683\x01\uffff\x01\u067c"+
            "\x01\u067b\x01\u067f\x02\uffff\x01\u067e\x17\uffff\x01\u0675"+
            "\u008b\uffff\x01\u066e\x01\u066d\x03\uffff\x01\u067d\x01\u0674"+
            "\x01\uffff\x01\u066a\x01\uffff\x01\x0e\x03\uffff\x01\u0678\x01"+
            "\u0679\x01\u067a\x01\u0676\x01\u0677\x01\u0670\x01\u0671\x01"+
            "\u0672\x01\u0673\x01\u066f\x01\u066b\x01\u066c",
            "\x01\u069c\x01\u069d\x01\u069e\x01\u069f\x01\uffff\x01\u0698"+
            "\x01\u0697\x01\u069b\x02\uffff\x01\u069a\x17\uffff\x01\u0691"+
            "\u008b\uffff\x01\u068a\x01\u0689\x03\uffff\x01\u0699\x01\u0690"+
            "\x01\uffff\x01\u0686\x01\uffff\x01\x0e\x03\uffff\x01\u0694\x01"+
            "\u0695\x01\u0696\x01\u0692\x01\u0693\x01\u068c\x01\u068d\x01"+
            "\u068e\x01\u068f\x01\u068b\x01\u0687\x01\u0688",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA89_eot = DFA.UnpackEncodedString(DFA89_eotS);
    static readonly short[] DFA89_eof = DFA.UnpackEncodedString(DFA89_eofS);
    static readonly char[] DFA89_min = DFA.UnpackEncodedStringToUnsignedChars(DFA89_minS);
    static readonly char[] DFA89_max = DFA.UnpackEncodedStringToUnsignedChars(DFA89_maxS);
    static readonly short[] DFA89_accept = DFA.UnpackEncodedString(DFA89_acceptS);
    static readonly short[] DFA89_special = DFA.UnpackEncodedString(DFA89_specialS);
    static readonly short[][] DFA89_transition = DFA.UnpackEncodedStringArray(DFA89_transitionS);

    protected class DFA89 : DFA
    {
        public DFA89(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;

        }

        override public string Description
        {
            get { return "780:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );"; }
        }

    }


    protected internal int DFA89_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA89_0 = input.LA(1);

                   	 
                   	int index89_0 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_0 == MINUS) ) { s = 1; }

                   	else if ( (LA89_0 == NUM_DOUBLE || (LA89_0 >= NUM_INT && LA89_0 <= NUM_FLOAT) || (LA89_0 >= PLUS && LA89_0 <= QUOTED_STRING_LITERAL) || (LA89_0 >= 238 && LA89_0 <= 240)) ) { s = 2; }

                   	else if ( (LA89_0 == QUESTION) ) { s = 12; }

                   	else if ( (LA89_0 == LPAREN) ) { s = 13; }

                   	else if ( (LA89_0 == WINDOW || LA89_0 == ESCAPE || LA89_0 == EVERY_EXPR || (LA89_0 >= MAX && LA89_0 <= MIN) || (LA89_0 >= EVENTS && LA89_0 <= LAST) || (LA89_0 >= UNIDIRECTIONAL && LA89_0 <= METADATASQL) || (LA89_0 >= WEEKDAY && LA89_0 <= LW) || LA89_0 == SNAPSHOT || LA89_0 == VARIABLE || LA89_0 == IDENT) ) { s = 14; }

                   	else if ( (LA89_0 == COUNT) ) { s = 15; }

                   	else if ( (LA89_0 == SUM) ) { s = 18; }

                   	else if ( (LA89_0 == AVG) ) { s = 19; }

                   	else if ( (LA89_0 == COALESCE) ) { s = 22; }

                   	else if ( (LA89_0 == MEDIAN) ) { s = 23; }

                   	else if ( (LA89_0 == STDDEV) ) { s = 24; }

                   	else if ( (LA89_0 == AVEDEV) ) { s = 25; }

                   	else if ( (LA89_0 == PREVIOUS) ) { s = 35; }

                   	else if ( (LA89_0 == PRIOR) ) { s = 36; }

                   	else if ( (LA89_0 == INSTANCEOF) ) { s = 39; }

                   	else if ( (LA89_0 == CAST) ) { s = 40; }

                   	else if ( (LA89_0 == EXISTS) ) { s = 44; }

                   	else if ( (LA89_0 == CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar()) ) { s = 45; }

                   	else if ( (LA89_0 == LCURLY) ) { s = 46; }

                   	 
                   	input.Seek(index89_0);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA89_130 = input.LA(1);

                   	 
                   	int index89_130 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_130 == ALL) && (synpred3_EsperEPL2Grammar()) ) { s = 659; }

                   	else if ( (LA89_130 == DISTINCT) && (synpred3_EsperEPL2Grammar()) ) { s = 660; }

                   	else if ( (LA89_130 == CASE) && (synpred3_EsperEPL2Grammar()) ) { s = 661; }

                   	else if ( (LA89_130 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 662; }

                   	else if ( (LA89_130 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 663; }

                   	else if ( (LA89_130 == NUM_INT) && (synpred3_EsperEPL2Grammar()) ) { s = 664; }

                   	else if ( (LA89_130 == NUM_LONG) && (synpred3_EsperEPL2Grammar()) ) { s = 665; }

                   	else if ( (LA89_130 == NUM_FLOAT) && (synpred3_EsperEPL2Grammar()) ) { s = 666; }

                   	else if ( (LA89_130 == NUM_DOUBLE) && (synpred3_EsperEPL2Grammar()) ) { s = 667; }

                   	else if ( (LA89_130 == STRING_LITERAL) ) { s = 668; }

                   	else if ( (LA89_130 == QUOTED_STRING_LITERAL) ) { s = 669; }

                   	else if ( (LA89_130 == 238) && (synpred3_EsperEPL2Grammar()) ) { s = 670; }

                   	else if ( (LA89_130 == 239) && (synpred3_EsperEPL2Grammar()) ) { s = 671; }

                   	else if ( (LA89_130 == 240) && (synpred3_EsperEPL2Grammar()) ) { s = 672; }

                   	else if ( (LA89_130 == QUESTION) && (synpred3_EsperEPL2Grammar()) ) { s = 673; }

                   	else if ( (LA89_130 == LPAREN) && (synpred3_EsperEPL2Grammar()) ) { s = 674; }

                   	else if ( (LA89_130 == IDENT) && (synpred3_EsperEPL2Grammar()) ) { s = 675; }

                   	else if ( (LA89_130 == COUNT) && (synpred3_EsperEPL2Grammar()) ) { s = 676; }

                   	else if ( (LA89_130 == ESCAPE) && (synpred3_EsperEPL2Grammar()) ) { s = 677; }

                   	else if ( (LA89_130 == EVERY_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 678; }

                   	else if ( (LA89_130 == SUM) && (synpred3_EsperEPL2Grammar()) ) { s = 679; }

                   	else if ( (LA89_130 == AVG) && (synpred3_EsperEPL2Grammar()) ) { s = 680; }

                   	else if ( (LA89_130 == MAX) && (synpred3_EsperEPL2Grammar()) ) { s = 681; }

                   	else if ( (LA89_130 == MIN) && (synpred3_EsperEPL2Grammar()) ) { s = 682; }

                   	else if ( (LA89_130 == COALESCE) && (synpred3_EsperEPL2Grammar()) ) { s = 683; }

                   	else if ( (LA89_130 == MEDIAN) && (synpred3_EsperEPL2Grammar()) ) { s = 684; }

                   	else if ( (LA89_130 == STDDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 685; }

                   	else if ( (LA89_130 == AVEDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 686; }

                   	else if ( (LA89_130 == EVENTS) && (synpred3_EsperEPL2Grammar()) ) { s = 687; }

                   	else if ( (LA89_130 == SECONDS) && (synpred3_EsperEPL2Grammar()) ) { s = 688; }

                   	else if ( (LA89_130 == MINUTES) && (synpred3_EsperEPL2Grammar()) ) { s = 689; }

                   	else if ( (LA89_130 == FIRST) && (synpred3_EsperEPL2Grammar()) ) { s = 690; }

                   	else if ( (LA89_130 == LAST) && (synpred3_EsperEPL2Grammar()) ) { s = 691; }

                   	else if ( (LA89_130 == UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar()) ) { s = 692; }

                   	else if ( (LA89_130 == PATTERN) && (synpred3_EsperEPL2Grammar()) ) { s = 693; }

                   	else if ( (LA89_130 == SQL) && (synpred3_EsperEPL2Grammar()) ) { s = 694; }

                   	else if ( (LA89_130 == METADATASQL) && (synpred3_EsperEPL2Grammar()) ) { s = 695; }

                   	else if ( (LA89_130 == PREVIOUS) && (synpred3_EsperEPL2Grammar()) ) { s = 696; }

                   	else if ( (LA89_130 == PRIOR) && (synpred3_EsperEPL2Grammar()) ) { s = 697; }

                   	else if ( (LA89_130 == WEEKDAY) && (synpred3_EsperEPL2Grammar()) ) { s = 698; }

                   	else if ( (LA89_130 == LW) && (synpred3_EsperEPL2Grammar()) ) { s = 699; }

                   	else if ( (LA89_130 == INSTANCEOF) && (synpred3_EsperEPL2Grammar()) ) { s = 700; }

                   	else if ( (LA89_130 == CAST) && (synpred3_EsperEPL2Grammar()) ) { s = 701; }

                   	else if ( (LA89_130 == SNAPSHOT) && (synpred3_EsperEPL2Grammar()) ) { s = 702; }

                   	else if ( (LA89_130 == VARIABLE) && (synpred3_EsperEPL2Grammar()) ) { s = 703; }

                   	else if ( (LA89_130 == WINDOW) && (synpred3_EsperEPL2Grammar()) ) { s = 704; }

                   	else if ( (LA89_130 == EXISTS) && (synpred3_EsperEPL2Grammar()) ) { s = 705; }

                   	else if ( (LA89_130 == CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar()) ) { s = 706; }

                   	else if ( (LA89_130 == LCURLY) && (synpred3_EsperEPL2Grammar()) ) { s = 707; }

                   	else if ( (LA89_130 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 708; }

                   	else if ( (LA89_130 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 709; }

                   	 
                   	input.Seek(index89_130);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA89_178 = input.LA(1);

                   	 
                   	int index89_178 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_178 == ALL) && (synpred3_EsperEPL2Grammar()) ) { s = 710; }

                   	else if ( (LA89_178 == DISTINCT) && (synpred3_EsperEPL2Grammar()) ) { s = 711; }

                   	else if ( (LA89_178 == CASE) && (synpred3_EsperEPL2Grammar()) ) { s = 712; }

                   	else if ( (LA89_178 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 713; }

                   	else if ( (LA89_178 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 714; }

                   	else if ( (LA89_178 == NUM_INT) && (synpred3_EsperEPL2Grammar()) ) { s = 715; }

                   	else if ( (LA89_178 == NUM_LONG) && (synpred3_EsperEPL2Grammar()) ) { s = 716; }

                   	else if ( (LA89_178 == NUM_FLOAT) && (synpred3_EsperEPL2Grammar()) ) { s = 717; }

                   	else if ( (LA89_178 == NUM_DOUBLE) && (synpred3_EsperEPL2Grammar()) ) { s = 718; }

                   	else if ( (LA89_178 == STRING_LITERAL) ) { s = 719; }

                   	else if ( (LA89_178 == QUOTED_STRING_LITERAL) ) { s = 720; }

                   	else if ( (LA89_178 == 238) && (synpred3_EsperEPL2Grammar()) ) { s = 721; }

                   	else if ( (LA89_178 == 239) && (synpred3_EsperEPL2Grammar()) ) { s = 722; }

                   	else if ( (LA89_178 == 240) && (synpred3_EsperEPL2Grammar()) ) { s = 723; }

                   	else if ( (LA89_178 == QUESTION) && (synpred3_EsperEPL2Grammar()) ) { s = 724; }

                   	else if ( (LA89_178 == LPAREN) && (synpred3_EsperEPL2Grammar()) ) { s = 725; }

                   	else if ( (LA89_178 == IDENT) && (synpred3_EsperEPL2Grammar()) ) { s = 726; }

                   	else if ( (LA89_178 == COUNT) && (synpred3_EsperEPL2Grammar()) ) { s = 727; }

                   	else if ( (LA89_178 == ESCAPE) && (synpred3_EsperEPL2Grammar()) ) { s = 728; }

                   	else if ( (LA89_178 == EVERY_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 729; }

                   	else if ( (LA89_178 == SUM) && (synpred3_EsperEPL2Grammar()) ) { s = 730; }

                   	else if ( (LA89_178 == AVG) && (synpred3_EsperEPL2Grammar()) ) { s = 731; }

                   	else if ( (LA89_178 == MAX) && (synpred3_EsperEPL2Grammar()) ) { s = 732; }

                   	else if ( (LA89_178 == MIN) && (synpred3_EsperEPL2Grammar()) ) { s = 733; }

                   	else if ( (LA89_178 == COALESCE) && (synpred3_EsperEPL2Grammar()) ) { s = 734; }

                   	else if ( (LA89_178 == MEDIAN) && (synpred3_EsperEPL2Grammar()) ) { s = 735; }

                   	else if ( (LA89_178 == STDDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 736; }

                   	else if ( (LA89_178 == AVEDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 737; }

                   	else if ( (LA89_178 == EVENTS) && (synpred3_EsperEPL2Grammar()) ) { s = 738; }

                   	else if ( (LA89_178 == SECONDS) && (synpred3_EsperEPL2Grammar()) ) { s = 739; }

                   	else if ( (LA89_178 == MINUTES) && (synpred3_EsperEPL2Grammar()) ) { s = 740; }

                   	else if ( (LA89_178 == FIRST) && (synpred3_EsperEPL2Grammar()) ) { s = 741; }

                   	else if ( (LA89_178 == LAST) && (synpred3_EsperEPL2Grammar()) ) { s = 742; }

                   	else if ( (LA89_178 == UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar()) ) { s = 743; }

                   	else if ( (LA89_178 == PATTERN) && (synpred3_EsperEPL2Grammar()) ) { s = 744; }

                   	else if ( (LA89_178 == SQL) && (synpred3_EsperEPL2Grammar()) ) { s = 745; }

                   	else if ( (LA89_178 == METADATASQL) && (synpred3_EsperEPL2Grammar()) ) { s = 746; }

                   	else if ( (LA89_178 == PREVIOUS) && (synpred3_EsperEPL2Grammar()) ) { s = 747; }

                   	else if ( (LA89_178 == PRIOR) && (synpred3_EsperEPL2Grammar()) ) { s = 748; }

                   	else if ( (LA89_178 == WEEKDAY) && (synpred3_EsperEPL2Grammar()) ) { s = 749; }

                   	else if ( (LA89_178 == LW) && (synpred3_EsperEPL2Grammar()) ) { s = 750; }

                   	else if ( (LA89_178 == INSTANCEOF) && (synpred3_EsperEPL2Grammar()) ) { s = 751; }

                   	else if ( (LA89_178 == CAST) && (synpred3_EsperEPL2Grammar()) ) { s = 752; }

                   	else if ( (LA89_178 == SNAPSHOT) && (synpred3_EsperEPL2Grammar()) ) { s = 753; }

                   	else if ( (LA89_178 == VARIABLE) && (synpred3_EsperEPL2Grammar()) ) { s = 754; }

                   	else if ( (LA89_178 == WINDOW) && (synpred3_EsperEPL2Grammar()) ) { s = 755; }

                   	else if ( (LA89_178 == EXISTS) && (synpred3_EsperEPL2Grammar()) ) { s = 756; }

                   	else if ( (LA89_178 == CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar()) ) { s = 757; }

                   	else if ( (LA89_178 == LCURLY) && (synpred3_EsperEPL2Grammar()) ) { s = 758; }

                   	else if ( (LA89_178 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 759; }

                   	 
                   	input.Seek(index89_178);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA89_226 = input.LA(1);

                   	 
                   	int index89_226 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_226 == ALL) && (synpred3_EsperEPL2Grammar()) ) { s = 760; }

                   	else if ( (LA89_226 == DISTINCT) && (synpred3_EsperEPL2Grammar()) ) { s = 761; }

                   	else if ( (LA89_226 == CASE) && (synpred3_EsperEPL2Grammar()) ) { s = 762; }

                   	else if ( (LA89_226 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 763; }

                   	else if ( (LA89_226 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 764; }

                   	else if ( (LA89_226 == NUM_INT) && (synpred3_EsperEPL2Grammar()) ) { s = 765; }

                   	else if ( (LA89_226 == NUM_LONG) && (synpred3_EsperEPL2Grammar()) ) { s = 766; }

                   	else if ( (LA89_226 == NUM_FLOAT) && (synpred3_EsperEPL2Grammar()) ) { s = 767; }

                   	else if ( (LA89_226 == NUM_DOUBLE) && (synpred3_EsperEPL2Grammar()) ) { s = 768; }

                   	else if ( (LA89_226 == STRING_LITERAL) ) { s = 769; }

                   	else if ( (LA89_226 == QUOTED_STRING_LITERAL) ) { s = 770; }

                   	else if ( (LA89_226 == 238) && (synpred3_EsperEPL2Grammar()) ) { s = 771; }

                   	else if ( (LA89_226 == 239) && (synpred3_EsperEPL2Grammar()) ) { s = 772; }

                   	else if ( (LA89_226 == 240) && (synpred3_EsperEPL2Grammar()) ) { s = 773; }

                   	else if ( (LA89_226 == QUESTION) && (synpred3_EsperEPL2Grammar()) ) { s = 774; }

                   	else if ( (LA89_226 == LPAREN) && (synpred3_EsperEPL2Grammar()) ) { s = 775; }

                   	else if ( (LA89_226 == IDENT) && (synpred3_EsperEPL2Grammar()) ) { s = 776; }

                   	else if ( (LA89_226 == COUNT) && (synpred3_EsperEPL2Grammar()) ) { s = 777; }

                   	else if ( (LA89_226 == ESCAPE) && (synpred3_EsperEPL2Grammar()) ) { s = 778; }

                   	else if ( (LA89_226 == EVERY_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 779; }

                   	else if ( (LA89_226 == SUM) && (synpred3_EsperEPL2Grammar()) ) { s = 780; }

                   	else if ( (LA89_226 == AVG) && (synpred3_EsperEPL2Grammar()) ) { s = 781; }

                   	else if ( (LA89_226 == MAX) && (synpred3_EsperEPL2Grammar()) ) { s = 782; }

                   	else if ( (LA89_226 == MIN) && (synpred3_EsperEPL2Grammar()) ) { s = 783; }

                   	else if ( (LA89_226 == COALESCE) && (synpred3_EsperEPL2Grammar()) ) { s = 784; }

                   	else if ( (LA89_226 == MEDIAN) && (synpred3_EsperEPL2Grammar()) ) { s = 785; }

                   	else if ( (LA89_226 == STDDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 786; }

                   	else if ( (LA89_226 == AVEDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 787; }

                   	else if ( (LA89_226 == EVENTS) && (synpred3_EsperEPL2Grammar()) ) { s = 788; }

                   	else if ( (LA89_226 == SECONDS) && (synpred3_EsperEPL2Grammar()) ) { s = 789; }

                   	else if ( (LA89_226 == MINUTES) && (synpred3_EsperEPL2Grammar()) ) { s = 790; }

                   	else if ( (LA89_226 == FIRST) && (synpred3_EsperEPL2Grammar()) ) { s = 791; }

                   	else if ( (LA89_226 == LAST) && (synpred3_EsperEPL2Grammar()) ) { s = 792; }

                   	else if ( (LA89_226 == UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar()) ) { s = 793; }

                   	else if ( (LA89_226 == PATTERN) && (synpred3_EsperEPL2Grammar()) ) { s = 794; }

                   	else if ( (LA89_226 == SQL) && (synpred3_EsperEPL2Grammar()) ) { s = 795; }

                   	else if ( (LA89_226 == METADATASQL) && (synpred3_EsperEPL2Grammar()) ) { s = 796; }

                   	else if ( (LA89_226 == PREVIOUS) && (synpred3_EsperEPL2Grammar()) ) { s = 797; }

                   	else if ( (LA89_226 == PRIOR) && (synpred3_EsperEPL2Grammar()) ) { s = 798; }

                   	else if ( (LA89_226 == WEEKDAY) && (synpred3_EsperEPL2Grammar()) ) { s = 799; }

                   	else if ( (LA89_226 == LW) && (synpred3_EsperEPL2Grammar()) ) { s = 800; }

                   	else if ( (LA89_226 == INSTANCEOF) && (synpred3_EsperEPL2Grammar()) ) { s = 801; }

                   	else if ( (LA89_226 == CAST) && (synpred3_EsperEPL2Grammar()) ) { s = 802; }

                   	else if ( (LA89_226 == SNAPSHOT) && (synpred3_EsperEPL2Grammar()) ) { s = 803; }

                   	else if ( (LA89_226 == VARIABLE) && (synpred3_EsperEPL2Grammar()) ) { s = 804; }

                   	else if ( (LA89_226 == WINDOW) && (synpred3_EsperEPL2Grammar()) ) { s = 805; }

                   	else if ( (LA89_226 == EXISTS) && (synpred3_EsperEPL2Grammar()) ) { s = 806; }

                   	else if ( (LA89_226 == CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar()) ) { s = 807; }

                   	else if ( (LA89_226 == LCURLY) && (synpred3_EsperEPL2Grammar()) ) { s = 808; }

                   	else if ( (LA89_226 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 809; }

                   	 
                   	input.Seek(index89_226);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA89_274 = input.LA(1);

                   	 
                   	int index89_274 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_274 == CASE) && (synpred3_EsperEPL2Grammar()) ) { s = 810; }

                   	else if ( (LA89_274 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 811; }

                   	else if ( (LA89_274 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 812; }

                   	else if ( (LA89_274 == NUM_INT) && (synpred3_EsperEPL2Grammar()) ) { s = 813; }

                   	else if ( (LA89_274 == NUM_LONG) && (synpred3_EsperEPL2Grammar()) ) { s = 814; }

                   	else if ( (LA89_274 == NUM_FLOAT) && (synpred3_EsperEPL2Grammar()) ) { s = 815; }

                   	else if ( (LA89_274 == NUM_DOUBLE) && (synpred3_EsperEPL2Grammar()) ) { s = 816; }

                   	else if ( (LA89_274 == STRING_LITERAL) ) { s = 817; }

                   	else if ( (LA89_274 == QUOTED_STRING_LITERAL) ) { s = 818; }

                   	else if ( (LA89_274 == 238) && (synpred3_EsperEPL2Grammar()) ) { s = 819; }

                   	else if ( (LA89_274 == 239) && (synpred3_EsperEPL2Grammar()) ) { s = 820; }

                   	else if ( (LA89_274 == 240) && (synpred3_EsperEPL2Grammar()) ) { s = 821; }

                   	else if ( (LA89_274 == QUESTION) && (synpred3_EsperEPL2Grammar()) ) { s = 822; }

                   	else if ( (LA89_274 == LPAREN) && (synpred3_EsperEPL2Grammar()) ) { s = 823; }

                   	else if ( (LA89_274 == IDENT) && (synpred3_EsperEPL2Grammar()) ) { s = 824; }

                   	else if ( (LA89_274 == COUNT) && (synpred3_EsperEPL2Grammar()) ) { s = 825; }

                   	else if ( (LA89_274 == ESCAPE) && (synpred3_EsperEPL2Grammar()) ) { s = 826; }

                   	else if ( (LA89_274 == EVERY_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 827; }

                   	else if ( (LA89_274 == SUM) && (synpred3_EsperEPL2Grammar()) ) { s = 828; }

                   	else if ( (LA89_274 == AVG) && (synpred3_EsperEPL2Grammar()) ) { s = 829; }

                   	else if ( (LA89_274 == MAX) && (synpred3_EsperEPL2Grammar()) ) { s = 830; }

                   	else if ( (LA89_274 == MIN) && (synpred3_EsperEPL2Grammar()) ) { s = 831; }

                   	else if ( (LA89_274 == COALESCE) && (synpred3_EsperEPL2Grammar()) ) { s = 832; }

                   	else if ( (LA89_274 == MEDIAN) && (synpred3_EsperEPL2Grammar()) ) { s = 833; }

                   	else if ( (LA89_274 == STDDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 834; }

                   	else if ( (LA89_274 == AVEDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 835; }

                   	else if ( (LA89_274 == EVENTS) && (synpred3_EsperEPL2Grammar()) ) { s = 836; }

                   	else if ( (LA89_274 == SECONDS) && (synpred3_EsperEPL2Grammar()) ) { s = 837; }

                   	else if ( (LA89_274 == MINUTES) && (synpred3_EsperEPL2Grammar()) ) { s = 838; }

                   	else if ( (LA89_274 == FIRST) && (synpred3_EsperEPL2Grammar()) ) { s = 839; }

                   	else if ( (LA89_274 == LAST) && (synpred3_EsperEPL2Grammar()) ) { s = 840; }

                   	else if ( (LA89_274 == UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar()) ) { s = 841; }

                   	else if ( (LA89_274 == PATTERN) && (synpred3_EsperEPL2Grammar()) ) { s = 842; }

                   	else if ( (LA89_274 == SQL) && (synpred3_EsperEPL2Grammar()) ) { s = 843; }

                   	else if ( (LA89_274 == METADATASQL) && (synpred3_EsperEPL2Grammar()) ) { s = 844; }

                   	else if ( (LA89_274 == PREVIOUS) && (synpred3_EsperEPL2Grammar()) ) { s = 845; }

                   	else if ( (LA89_274 == PRIOR) && (synpred3_EsperEPL2Grammar()) ) { s = 846; }

                   	else if ( (LA89_274 == WEEKDAY) && (synpred3_EsperEPL2Grammar()) ) { s = 847; }

                   	else if ( (LA89_274 == LW) && (synpred3_EsperEPL2Grammar()) ) { s = 848; }

                   	else if ( (LA89_274 == INSTANCEOF) && (synpred3_EsperEPL2Grammar()) ) { s = 849; }

                   	else if ( (LA89_274 == CAST) && (synpred3_EsperEPL2Grammar()) ) { s = 850; }

                   	else if ( (LA89_274 == SNAPSHOT) && (synpred3_EsperEPL2Grammar()) ) { s = 851; }

                   	else if ( (LA89_274 == VARIABLE) && (synpred3_EsperEPL2Grammar()) ) { s = 852; }

                   	else if ( (LA89_274 == WINDOW) && (synpred3_EsperEPL2Grammar()) ) { s = 853; }

                   	else if ( (LA89_274 == EXISTS) && (synpred3_EsperEPL2Grammar()) ) { s = 854; }

                   	else if ( (LA89_274 == CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar()) ) { s = 855; }

                   	else if ( (LA89_274 == LCURLY) && (synpred3_EsperEPL2Grammar()) ) { s = 856; }

                   	else if ( (LA89_274 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 857; }

                   	 
                   	input.Seek(index89_274);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA89_322 = input.LA(1);

                   	 
                   	int index89_322 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_322 == ALL) && (synpred3_EsperEPL2Grammar()) ) { s = 858; }

                   	else if ( (LA89_322 == DISTINCT) && (synpred3_EsperEPL2Grammar()) ) { s = 859; }

                   	else if ( (LA89_322 == CASE) && (synpred3_EsperEPL2Grammar()) ) { s = 860; }

                   	else if ( (LA89_322 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 861; }

                   	else if ( (LA89_322 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 862; }

                   	else if ( (LA89_322 == NUM_INT) && (synpred3_EsperEPL2Grammar()) ) { s = 863; }

                   	else if ( (LA89_322 == NUM_LONG) && (synpred3_EsperEPL2Grammar()) ) { s = 864; }

                   	else if ( (LA89_322 == NUM_FLOAT) && (synpred3_EsperEPL2Grammar()) ) { s = 865; }

                   	else if ( (LA89_322 == NUM_DOUBLE) && (synpred3_EsperEPL2Grammar()) ) { s = 866; }

                   	else if ( (LA89_322 == STRING_LITERAL) ) { s = 867; }

                   	else if ( (LA89_322 == QUOTED_STRING_LITERAL) ) { s = 868; }

                   	else if ( (LA89_322 == 238) && (synpred3_EsperEPL2Grammar()) ) { s = 869; }

                   	else if ( (LA89_322 == 239) && (synpred3_EsperEPL2Grammar()) ) { s = 870; }

                   	else if ( (LA89_322 == 240) && (synpred3_EsperEPL2Grammar()) ) { s = 871; }

                   	else if ( (LA89_322 == QUESTION) && (synpred3_EsperEPL2Grammar()) ) { s = 872; }

                   	else if ( (LA89_322 == LPAREN) && (synpred3_EsperEPL2Grammar()) ) { s = 873; }

                   	else if ( (LA89_322 == IDENT) && (synpred3_EsperEPL2Grammar()) ) { s = 874; }

                   	else if ( (LA89_322 == COUNT) && (synpred3_EsperEPL2Grammar()) ) { s = 875; }

                   	else if ( (LA89_322 == ESCAPE) && (synpred3_EsperEPL2Grammar()) ) { s = 876; }

                   	else if ( (LA89_322 == EVERY_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 877; }

                   	else if ( (LA89_322 == SUM) && (synpred3_EsperEPL2Grammar()) ) { s = 878; }

                   	else if ( (LA89_322 == AVG) && (synpred3_EsperEPL2Grammar()) ) { s = 879; }

                   	else if ( (LA89_322 == MAX) && (synpred3_EsperEPL2Grammar()) ) { s = 880; }

                   	else if ( (LA89_322 == MIN) && (synpred3_EsperEPL2Grammar()) ) { s = 881; }

                   	else if ( (LA89_322 == COALESCE) && (synpred3_EsperEPL2Grammar()) ) { s = 882; }

                   	else if ( (LA89_322 == MEDIAN) && (synpred3_EsperEPL2Grammar()) ) { s = 883; }

                   	else if ( (LA89_322 == STDDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 884; }

                   	else if ( (LA89_322 == AVEDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 885; }

                   	else if ( (LA89_322 == EVENTS) && (synpred3_EsperEPL2Grammar()) ) { s = 886; }

                   	else if ( (LA89_322 == SECONDS) && (synpred3_EsperEPL2Grammar()) ) { s = 887; }

                   	else if ( (LA89_322 == MINUTES) && (synpred3_EsperEPL2Grammar()) ) { s = 888; }

                   	else if ( (LA89_322 == FIRST) && (synpred3_EsperEPL2Grammar()) ) { s = 889; }

                   	else if ( (LA89_322 == LAST) && (synpred3_EsperEPL2Grammar()) ) { s = 890; }

                   	else if ( (LA89_322 == UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar()) ) { s = 891; }

                   	else if ( (LA89_322 == PATTERN) && (synpred3_EsperEPL2Grammar()) ) { s = 892; }

                   	else if ( (LA89_322 == SQL) && (synpred3_EsperEPL2Grammar()) ) { s = 893; }

                   	else if ( (LA89_322 == METADATASQL) && (synpred3_EsperEPL2Grammar()) ) { s = 894; }

                   	else if ( (LA89_322 == PREVIOUS) && (synpred3_EsperEPL2Grammar()) ) { s = 895; }

                   	else if ( (LA89_322 == PRIOR) && (synpred3_EsperEPL2Grammar()) ) { s = 896; }

                   	else if ( (LA89_322 == WEEKDAY) && (synpred3_EsperEPL2Grammar()) ) { s = 897; }

                   	else if ( (LA89_322 == LW) && (synpred3_EsperEPL2Grammar()) ) { s = 898; }

                   	else if ( (LA89_322 == INSTANCEOF) && (synpred3_EsperEPL2Grammar()) ) { s = 899; }

                   	else if ( (LA89_322 == CAST) && (synpred3_EsperEPL2Grammar()) ) { s = 900; }

                   	else if ( (LA89_322 == SNAPSHOT) && (synpred3_EsperEPL2Grammar()) ) { s = 901; }

                   	else if ( (LA89_322 == VARIABLE) && (synpred3_EsperEPL2Grammar()) ) { s = 902; }

                   	else if ( (LA89_322 == WINDOW) && (synpred3_EsperEPL2Grammar()) ) { s = 903; }

                   	else if ( (LA89_322 == EXISTS) && (synpred3_EsperEPL2Grammar()) ) { s = 904; }

                   	else if ( (LA89_322 == CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar()) ) { s = 905; }

                   	else if ( (LA89_322 == LCURLY) && (synpred3_EsperEPL2Grammar()) ) { s = 906; }

                   	else if ( (LA89_322 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 907; }

                   	 
                   	input.Seek(index89_322);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA89_370 = input.LA(1);

                   	 
                   	int index89_370 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_370 == ALL) && (synpred3_EsperEPL2Grammar()) ) { s = 908; }

                   	else if ( (LA89_370 == DISTINCT) && (synpred3_EsperEPL2Grammar()) ) { s = 909; }

                   	else if ( (LA89_370 == CASE) && (synpred3_EsperEPL2Grammar()) ) { s = 910; }

                   	else if ( (LA89_370 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 911; }

                   	else if ( (LA89_370 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 912; }

                   	else if ( (LA89_370 == NUM_INT) && (synpred3_EsperEPL2Grammar()) ) { s = 913; }

                   	else if ( (LA89_370 == NUM_LONG) && (synpred3_EsperEPL2Grammar()) ) { s = 914; }

                   	else if ( (LA89_370 == NUM_FLOAT) && (synpred3_EsperEPL2Grammar()) ) { s = 915; }

                   	else if ( (LA89_370 == NUM_DOUBLE) && (synpred3_EsperEPL2Grammar()) ) { s = 916; }

                   	else if ( (LA89_370 == STRING_LITERAL) ) { s = 917; }

                   	else if ( (LA89_370 == QUOTED_STRING_LITERAL) ) { s = 918; }

                   	else if ( (LA89_370 == 238) && (synpred3_EsperEPL2Grammar()) ) { s = 919; }

                   	else if ( (LA89_370 == 239) && (synpred3_EsperEPL2Grammar()) ) { s = 920; }

                   	else if ( (LA89_370 == 240) && (synpred3_EsperEPL2Grammar()) ) { s = 921; }

                   	else if ( (LA89_370 == QUESTION) && (synpred3_EsperEPL2Grammar()) ) { s = 922; }

                   	else if ( (LA89_370 == LPAREN) && (synpred3_EsperEPL2Grammar()) ) { s = 923; }

                   	else if ( (LA89_370 == IDENT) && (synpred3_EsperEPL2Grammar()) ) { s = 924; }

                   	else if ( (LA89_370 == COUNT) && (synpred3_EsperEPL2Grammar()) ) { s = 925; }

                   	else if ( (LA89_370 == ESCAPE) && (synpred3_EsperEPL2Grammar()) ) { s = 926; }

                   	else if ( (LA89_370 == EVERY_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 927; }

                   	else if ( (LA89_370 == SUM) && (synpred3_EsperEPL2Grammar()) ) { s = 928; }

                   	else if ( (LA89_370 == AVG) && (synpred3_EsperEPL2Grammar()) ) { s = 929; }

                   	else if ( (LA89_370 == MAX) && (synpred3_EsperEPL2Grammar()) ) { s = 930; }

                   	else if ( (LA89_370 == MIN) && (synpred3_EsperEPL2Grammar()) ) { s = 931; }

                   	else if ( (LA89_370 == COALESCE) && (synpred3_EsperEPL2Grammar()) ) { s = 932; }

                   	else if ( (LA89_370 == MEDIAN) && (synpred3_EsperEPL2Grammar()) ) { s = 933; }

                   	else if ( (LA89_370 == STDDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 934; }

                   	else if ( (LA89_370 == AVEDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 935; }

                   	else if ( (LA89_370 == EVENTS) && (synpred3_EsperEPL2Grammar()) ) { s = 936; }

                   	else if ( (LA89_370 == SECONDS) && (synpred3_EsperEPL2Grammar()) ) { s = 937; }

                   	else if ( (LA89_370 == MINUTES) && (synpred3_EsperEPL2Grammar()) ) { s = 938; }

                   	else if ( (LA89_370 == FIRST) && (synpred3_EsperEPL2Grammar()) ) { s = 939; }

                   	else if ( (LA89_370 == LAST) && (synpred3_EsperEPL2Grammar()) ) { s = 940; }

                   	else if ( (LA89_370 == UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar()) ) { s = 941; }

                   	else if ( (LA89_370 == PATTERN) && (synpred3_EsperEPL2Grammar()) ) { s = 942; }

                   	else if ( (LA89_370 == SQL) && (synpred3_EsperEPL2Grammar()) ) { s = 943; }

                   	else if ( (LA89_370 == METADATASQL) && (synpred3_EsperEPL2Grammar()) ) { s = 944; }

                   	else if ( (LA89_370 == PREVIOUS) && (synpred3_EsperEPL2Grammar()) ) { s = 945; }

                   	else if ( (LA89_370 == PRIOR) && (synpred3_EsperEPL2Grammar()) ) { s = 946; }

                   	else if ( (LA89_370 == WEEKDAY) && (synpred3_EsperEPL2Grammar()) ) { s = 947; }

                   	else if ( (LA89_370 == LW) && (synpred3_EsperEPL2Grammar()) ) { s = 948; }

                   	else if ( (LA89_370 == INSTANCEOF) && (synpred3_EsperEPL2Grammar()) ) { s = 949; }

                   	else if ( (LA89_370 == CAST) && (synpred3_EsperEPL2Grammar()) ) { s = 950; }

                   	else if ( (LA89_370 == SNAPSHOT) && (synpred3_EsperEPL2Grammar()) ) { s = 951; }

                   	else if ( (LA89_370 == VARIABLE) && (synpred3_EsperEPL2Grammar()) ) { s = 952; }

                   	else if ( (LA89_370 == WINDOW) && (synpred3_EsperEPL2Grammar()) ) { s = 953; }

                   	else if ( (LA89_370 == EXISTS) && (synpred3_EsperEPL2Grammar()) ) { s = 954; }

                   	else if ( (LA89_370 == CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar()) ) { s = 955; }

                   	else if ( (LA89_370 == LCURLY) && (synpred3_EsperEPL2Grammar()) ) { s = 956; }

                   	else if ( (LA89_370 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 957; }

                   	 
                   	input.Seek(index89_370);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA89_418 = input.LA(1);

                   	 
                   	int index89_418 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_418 == ALL) && (synpred3_EsperEPL2Grammar()) ) { s = 958; }

                   	else if ( (LA89_418 == DISTINCT) && (synpred3_EsperEPL2Grammar()) ) { s = 959; }

                   	else if ( (LA89_418 == CASE) && (synpred3_EsperEPL2Grammar()) ) { s = 960; }

                   	else if ( (LA89_418 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 961; }

                   	else if ( (LA89_418 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 962; }

                   	else if ( (LA89_418 == NUM_INT) && (synpred3_EsperEPL2Grammar()) ) { s = 963; }

                   	else if ( (LA89_418 == NUM_LONG) && (synpred3_EsperEPL2Grammar()) ) { s = 964; }

                   	else if ( (LA89_418 == NUM_FLOAT) && (synpred3_EsperEPL2Grammar()) ) { s = 965; }

                   	else if ( (LA89_418 == NUM_DOUBLE) && (synpred3_EsperEPL2Grammar()) ) { s = 966; }

                   	else if ( (LA89_418 == STRING_LITERAL) ) { s = 967; }

                   	else if ( (LA89_418 == QUOTED_STRING_LITERAL) ) { s = 968; }

                   	else if ( (LA89_418 == 238) && (synpred3_EsperEPL2Grammar()) ) { s = 969; }

                   	else if ( (LA89_418 == 239) && (synpred3_EsperEPL2Grammar()) ) { s = 970; }

                   	else if ( (LA89_418 == 240) && (synpred3_EsperEPL2Grammar()) ) { s = 971; }

                   	else if ( (LA89_418 == QUESTION) && (synpred3_EsperEPL2Grammar()) ) { s = 972; }

                   	else if ( (LA89_418 == LPAREN) && (synpred3_EsperEPL2Grammar()) ) { s = 973; }

                   	else if ( (LA89_418 == IDENT) && (synpred3_EsperEPL2Grammar()) ) { s = 974; }

                   	else if ( (LA89_418 == COUNT) && (synpred3_EsperEPL2Grammar()) ) { s = 975; }

                   	else if ( (LA89_418 == ESCAPE) && (synpred3_EsperEPL2Grammar()) ) { s = 976; }

                   	else if ( (LA89_418 == EVERY_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 977; }

                   	else if ( (LA89_418 == SUM) && (synpred3_EsperEPL2Grammar()) ) { s = 978; }

                   	else if ( (LA89_418 == AVG) && (synpred3_EsperEPL2Grammar()) ) { s = 979; }

                   	else if ( (LA89_418 == MAX) && (synpred3_EsperEPL2Grammar()) ) { s = 980; }

                   	else if ( (LA89_418 == MIN) && (synpred3_EsperEPL2Grammar()) ) { s = 981; }

                   	else if ( (LA89_418 == COALESCE) && (synpred3_EsperEPL2Grammar()) ) { s = 982; }

                   	else if ( (LA89_418 == MEDIAN) && (synpred3_EsperEPL2Grammar()) ) { s = 983; }

                   	else if ( (LA89_418 == STDDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 984; }

                   	else if ( (LA89_418 == AVEDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 985; }

                   	else if ( (LA89_418 == EVENTS) && (synpred3_EsperEPL2Grammar()) ) { s = 986; }

                   	else if ( (LA89_418 == SECONDS) && (synpred3_EsperEPL2Grammar()) ) { s = 987; }

                   	else if ( (LA89_418 == MINUTES) && (synpred3_EsperEPL2Grammar()) ) { s = 988; }

                   	else if ( (LA89_418 == FIRST) && (synpred3_EsperEPL2Grammar()) ) { s = 989; }

                   	else if ( (LA89_418 == LAST) && (synpred3_EsperEPL2Grammar()) ) { s = 990; }

                   	else if ( (LA89_418 == UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar()) ) { s = 991; }

                   	else if ( (LA89_418 == PATTERN) && (synpred3_EsperEPL2Grammar()) ) { s = 992; }

                   	else if ( (LA89_418 == SQL) && (synpred3_EsperEPL2Grammar()) ) { s = 993; }

                   	else if ( (LA89_418 == METADATASQL) && (synpred3_EsperEPL2Grammar()) ) { s = 994; }

                   	else if ( (LA89_418 == PREVIOUS) && (synpred3_EsperEPL2Grammar()) ) { s = 995; }

                   	else if ( (LA89_418 == PRIOR) && (synpred3_EsperEPL2Grammar()) ) { s = 996; }

                   	else if ( (LA89_418 == WEEKDAY) && (synpred3_EsperEPL2Grammar()) ) { s = 997; }

                   	else if ( (LA89_418 == LW) && (synpred3_EsperEPL2Grammar()) ) { s = 998; }

                   	else if ( (LA89_418 == INSTANCEOF) && (synpred3_EsperEPL2Grammar()) ) { s = 999; }

                   	else if ( (LA89_418 == CAST) && (synpred3_EsperEPL2Grammar()) ) { s = 1000; }

                   	else if ( (LA89_418 == SNAPSHOT) && (synpred3_EsperEPL2Grammar()) ) { s = 1001; }

                   	else if ( (LA89_418 == VARIABLE) && (synpred3_EsperEPL2Grammar()) ) { s = 1002; }

                   	else if ( (LA89_418 == WINDOW) && (synpred3_EsperEPL2Grammar()) ) { s = 1003; }

                   	else if ( (LA89_418 == EXISTS) && (synpred3_EsperEPL2Grammar()) ) { s = 1004; }

                   	else if ( (LA89_418 == CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar()) ) { s = 1005; }

                   	else if ( (LA89_418 == LCURLY) && (synpred3_EsperEPL2Grammar()) ) { s = 1006; }

                   	else if ( (LA89_418 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1007; }

                   	 
                   	input.Seek(index89_418);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA89_466 = input.LA(1);

                   	 
                   	int index89_466 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_466 == CASE) && (synpred3_EsperEPL2Grammar()) ) { s = 1008; }

                   	else if ( (LA89_466 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1009; }

                   	else if ( (LA89_466 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1010; }

                   	else if ( (LA89_466 == NUM_INT) && (synpred3_EsperEPL2Grammar()) ) { s = 1011; }

                   	else if ( (LA89_466 == NUM_LONG) && (synpred3_EsperEPL2Grammar()) ) { s = 1012; }

                   	else if ( (LA89_466 == NUM_FLOAT) && (synpred3_EsperEPL2Grammar()) ) { s = 1013; }

                   	else if ( (LA89_466 == NUM_DOUBLE) && (synpred3_EsperEPL2Grammar()) ) { s = 1014; }

                   	else if ( (LA89_466 == STRING_LITERAL) ) { s = 1015; }

                   	else if ( (LA89_466 == QUOTED_STRING_LITERAL) ) { s = 1016; }

                   	else if ( (LA89_466 == 238) && (synpred3_EsperEPL2Grammar()) ) { s = 1017; }

                   	else if ( (LA89_466 == 239) && (synpred3_EsperEPL2Grammar()) ) { s = 1018; }

                   	else if ( (LA89_466 == 240) && (synpred3_EsperEPL2Grammar()) ) { s = 1019; }

                   	else if ( (LA89_466 == QUESTION) && (synpred3_EsperEPL2Grammar()) ) { s = 1020; }

                   	else if ( (LA89_466 == LPAREN) && (synpred3_EsperEPL2Grammar()) ) { s = 1021; }

                   	else if ( (LA89_466 == IDENT) && (synpred3_EsperEPL2Grammar()) ) { s = 1022; }

                   	else if ( (LA89_466 == COUNT) && (synpred3_EsperEPL2Grammar()) ) { s = 1023; }

                   	else if ( (LA89_466 == ESCAPE) && (synpred3_EsperEPL2Grammar()) ) { s = 1024; }

                   	else if ( (LA89_466 == EVERY_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1025; }

                   	else if ( (LA89_466 == SUM) && (synpred3_EsperEPL2Grammar()) ) { s = 1026; }

                   	else if ( (LA89_466 == AVG) && (synpred3_EsperEPL2Grammar()) ) { s = 1027; }

                   	else if ( (LA89_466 == MAX) && (synpred3_EsperEPL2Grammar()) ) { s = 1028; }

                   	else if ( (LA89_466 == MIN) && (synpred3_EsperEPL2Grammar()) ) { s = 1029; }

                   	else if ( (LA89_466 == COALESCE) && (synpred3_EsperEPL2Grammar()) ) { s = 1030; }

                   	else if ( (LA89_466 == MEDIAN) && (synpred3_EsperEPL2Grammar()) ) { s = 1031; }

                   	else if ( (LA89_466 == STDDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 1032; }

                   	else if ( (LA89_466 == AVEDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 1033; }

                   	else if ( (LA89_466 == EVENTS) && (synpred3_EsperEPL2Grammar()) ) { s = 1034; }

                   	else if ( (LA89_466 == SECONDS) && (synpred3_EsperEPL2Grammar()) ) { s = 1035; }

                   	else if ( (LA89_466 == MINUTES) && (synpred3_EsperEPL2Grammar()) ) { s = 1036; }

                   	else if ( (LA89_466 == FIRST) && (synpred3_EsperEPL2Grammar()) ) { s = 1037; }

                   	else if ( (LA89_466 == LAST) && (synpred3_EsperEPL2Grammar()) ) { s = 1038; }

                   	else if ( (LA89_466 == UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1039; }

                   	else if ( (LA89_466 == PATTERN) && (synpred3_EsperEPL2Grammar()) ) { s = 1040; }

                   	else if ( (LA89_466 == SQL) && (synpred3_EsperEPL2Grammar()) ) { s = 1041; }

                   	else if ( (LA89_466 == METADATASQL) && (synpred3_EsperEPL2Grammar()) ) { s = 1042; }

                   	else if ( (LA89_466 == PREVIOUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1043; }

                   	else if ( (LA89_466 == PRIOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1044; }

                   	else if ( (LA89_466 == WEEKDAY) && (synpred3_EsperEPL2Grammar()) ) { s = 1045; }

                   	else if ( (LA89_466 == LW) && (synpred3_EsperEPL2Grammar()) ) { s = 1046; }

                   	else if ( (LA89_466 == INSTANCEOF) && (synpred3_EsperEPL2Grammar()) ) { s = 1047; }

                   	else if ( (LA89_466 == CAST) && (synpred3_EsperEPL2Grammar()) ) { s = 1048; }

                   	else if ( (LA89_466 == SNAPSHOT) && (synpred3_EsperEPL2Grammar()) ) { s = 1049; }

                   	else if ( (LA89_466 == VARIABLE) && (synpred3_EsperEPL2Grammar()) ) { s = 1050; }

                   	else if ( (LA89_466 == WINDOW) && (synpred3_EsperEPL2Grammar()) ) { s = 1051; }

                   	else if ( (LA89_466 == EXISTS) && (synpred3_EsperEPL2Grammar()) ) { s = 1052; }

                   	else if ( (LA89_466 == CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar()) ) { s = 1053; }

                   	else if ( (LA89_466 == LCURLY) && (synpred3_EsperEPL2Grammar()) ) { s = 1054; }

                   	else if ( (LA89_466 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1055; }

                   	 
                   	input.Seek(index89_466);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA89_514 = input.LA(1);

                   	 
                   	int index89_514 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_514 == NUM_INT) && (synpred3_EsperEPL2Grammar()) ) { s = 1056; }

                   	else if ( ((LA89_514 >= STRING_LITERAL && LA89_514 <= QUOTED_STRING_LITERAL)) ) { s = 14; }

                   	 
                   	input.Seek(index89_514);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA89_562 = input.LA(1);

                   	 
                   	int index89_562 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_562 == CASE) && (synpred3_EsperEPL2Grammar()) ) { s = 1059; }

                   	else if ( (LA89_562 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1060; }

                   	else if ( (LA89_562 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1061; }

                   	else if ( (LA89_562 == NUM_INT) && (synpred3_EsperEPL2Grammar()) ) { s = 1062; }

                   	else if ( (LA89_562 == NUM_LONG) && (synpred3_EsperEPL2Grammar()) ) { s = 1063; }

                   	else if ( (LA89_562 == NUM_FLOAT) && (synpred3_EsperEPL2Grammar()) ) { s = 1064; }

                   	else if ( (LA89_562 == NUM_DOUBLE) && (synpred3_EsperEPL2Grammar()) ) { s = 1065; }

                   	else if ( (LA89_562 == STRING_LITERAL) ) { s = 1066; }

                   	else if ( (LA89_562 == QUOTED_STRING_LITERAL) ) { s = 1067; }

                   	else if ( (LA89_562 == 238) && (synpred3_EsperEPL2Grammar()) ) { s = 1068; }

                   	else if ( (LA89_562 == 239) && (synpred3_EsperEPL2Grammar()) ) { s = 1069; }

                   	else if ( (LA89_562 == 240) && (synpred3_EsperEPL2Grammar()) ) { s = 1070; }

                   	else if ( (LA89_562 == QUESTION) && (synpred3_EsperEPL2Grammar()) ) { s = 1071; }

                   	else if ( (LA89_562 == LPAREN) && (synpred3_EsperEPL2Grammar()) ) { s = 1072; }

                   	else if ( (LA89_562 == IDENT) && (synpred3_EsperEPL2Grammar()) ) { s = 1073; }

                   	else if ( (LA89_562 == COUNT) && (synpred3_EsperEPL2Grammar()) ) { s = 1074; }

                   	else if ( (LA89_562 == ESCAPE) && (synpred3_EsperEPL2Grammar()) ) { s = 1075; }

                   	else if ( (LA89_562 == EVERY_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1076; }

                   	else if ( (LA89_562 == SUM) && (synpred3_EsperEPL2Grammar()) ) { s = 1077; }

                   	else if ( (LA89_562 == AVG) && (synpred3_EsperEPL2Grammar()) ) { s = 1078; }

                   	else if ( (LA89_562 == MAX) && (synpred3_EsperEPL2Grammar()) ) { s = 1079; }

                   	else if ( (LA89_562 == MIN) && (synpred3_EsperEPL2Grammar()) ) { s = 1080; }

                   	else if ( (LA89_562 == COALESCE) && (synpred3_EsperEPL2Grammar()) ) { s = 1081; }

                   	else if ( (LA89_562 == MEDIAN) && (synpred3_EsperEPL2Grammar()) ) { s = 1082; }

                   	else if ( (LA89_562 == STDDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 1083; }

                   	else if ( (LA89_562 == AVEDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 1084; }

                   	else if ( (LA89_562 == EVENTS) && (synpred3_EsperEPL2Grammar()) ) { s = 1085; }

                   	else if ( (LA89_562 == SECONDS) && (synpred3_EsperEPL2Grammar()) ) { s = 1086; }

                   	else if ( (LA89_562 == MINUTES) && (synpred3_EsperEPL2Grammar()) ) { s = 1087; }

                   	else if ( (LA89_562 == FIRST) && (synpred3_EsperEPL2Grammar()) ) { s = 1088; }

                   	else if ( (LA89_562 == LAST) && (synpred3_EsperEPL2Grammar()) ) { s = 1089; }

                   	else if ( (LA89_562 == UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1090; }

                   	else if ( (LA89_562 == PATTERN) && (synpred3_EsperEPL2Grammar()) ) { s = 1091; }

                   	else if ( (LA89_562 == SQL) && (synpred3_EsperEPL2Grammar()) ) { s = 1092; }

                   	else if ( (LA89_562 == METADATASQL) && (synpred3_EsperEPL2Grammar()) ) { s = 1093; }

                   	else if ( (LA89_562 == PREVIOUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1094; }

                   	else if ( (LA89_562 == PRIOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1095; }

                   	else if ( (LA89_562 == WEEKDAY) && (synpred3_EsperEPL2Grammar()) ) { s = 1096; }

                   	else if ( (LA89_562 == LW) && (synpred3_EsperEPL2Grammar()) ) { s = 1097; }

                   	else if ( (LA89_562 == INSTANCEOF) && (synpred3_EsperEPL2Grammar()) ) { s = 1098; }

                   	else if ( (LA89_562 == CAST) && (synpred3_EsperEPL2Grammar()) ) { s = 1099; }

                   	else if ( (LA89_562 == SNAPSHOT) && (synpred3_EsperEPL2Grammar()) ) { s = 1100; }

                   	else if ( (LA89_562 == VARIABLE) && (synpred3_EsperEPL2Grammar()) ) { s = 1101; }

                   	else if ( (LA89_562 == WINDOW) && (synpred3_EsperEPL2Grammar()) ) { s = 1102; }

                   	else if ( (LA89_562 == EXISTS) && (synpred3_EsperEPL2Grammar()) ) { s = 1103; }

                   	else if ( (LA89_562 == CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar()) ) { s = 1104; }

                   	else if ( (LA89_562 == LCURLY) && (synpred3_EsperEPL2Grammar()) ) { s = 1105; }

                   	else if ( (LA89_562 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1106; }

                   	 
                   	input.Seek(index89_562);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA89_610 = input.LA(1);

                   	 
                   	int index89_610 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_610 == STRING_LITERAL) ) { s = 1107; }

                   	else if ( (LA89_610 == QUOTED_STRING_LITERAL) ) { s = 1108; }

                   	else if ( (LA89_610 == CASE) && (synpred3_EsperEPL2Grammar()) ) { s = 1109; }

                   	else if ( (LA89_610 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1110; }

                   	else if ( (LA89_610 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1111; }

                   	else if ( (LA89_610 == NUM_INT) && (synpred3_EsperEPL2Grammar()) ) { s = 1112; }

                   	else if ( (LA89_610 == NUM_LONG) && (synpred3_EsperEPL2Grammar()) ) { s = 1113; }

                   	else if ( (LA89_610 == NUM_FLOAT) && (synpred3_EsperEPL2Grammar()) ) { s = 1114; }

                   	else if ( (LA89_610 == NUM_DOUBLE) && (synpred3_EsperEPL2Grammar()) ) { s = 1115; }

                   	else if ( (LA89_610 == 238) && (synpred3_EsperEPL2Grammar()) ) { s = 1116; }

                   	else if ( (LA89_610 == 239) && (synpred3_EsperEPL2Grammar()) ) { s = 1117; }

                   	else if ( (LA89_610 == 240) && (synpred3_EsperEPL2Grammar()) ) { s = 1118; }

                   	else if ( (LA89_610 == QUESTION) && (synpred3_EsperEPL2Grammar()) ) { s = 1119; }

                   	else if ( (LA89_610 == LPAREN) && (synpred3_EsperEPL2Grammar()) ) { s = 1120; }

                   	else if ( (LA89_610 == IDENT) && (synpred3_EsperEPL2Grammar()) ) { s = 1121; }

                   	else if ( (LA89_610 == COUNT) && (synpred3_EsperEPL2Grammar()) ) { s = 1122; }

                   	else if ( (LA89_610 == ESCAPE) && (synpred3_EsperEPL2Grammar()) ) { s = 1123; }

                   	else if ( (LA89_610 == EVERY_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1124; }

                   	else if ( (LA89_610 == SUM) && (synpred3_EsperEPL2Grammar()) ) { s = 1125; }

                   	else if ( (LA89_610 == AVG) && (synpred3_EsperEPL2Grammar()) ) { s = 1126; }

                   	else if ( (LA89_610 == MAX) && (synpred3_EsperEPL2Grammar()) ) { s = 1127; }

                   	else if ( (LA89_610 == MIN) && (synpred3_EsperEPL2Grammar()) ) { s = 1128; }

                   	else if ( (LA89_610 == COALESCE) && (synpred3_EsperEPL2Grammar()) ) { s = 1129; }

                   	else if ( (LA89_610 == MEDIAN) && (synpred3_EsperEPL2Grammar()) ) { s = 1130; }

                   	else if ( (LA89_610 == STDDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 1131; }

                   	else if ( (LA89_610 == AVEDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 1132; }

                   	else if ( (LA89_610 == EVENTS) && (synpred3_EsperEPL2Grammar()) ) { s = 1133; }

                   	else if ( (LA89_610 == SECONDS) && (synpred3_EsperEPL2Grammar()) ) { s = 1134; }

                   	else if ( (LA89_610 == MINUTES) && (synpred3_EsperEPL2Grammar()) ) { s = 1135; }

                   	else if ( (LA89_610 == FIRST) && (synpred3_EsperEPL2Grammar()) ) { s = 1136; }

                   	else if ( (LA89_610 == LAST) && (synpred3_EsperEPL2Grammar()) ) { s = 1137; }

                   	else if ( (LA89_610 == UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1138; }

                   	else if ( (LA89_610 == PATTERN) && (synpred3_EsperEPL2Grammar()) ) { s = 1139; }

                   	else if ( (LA89_610 == SQL) && (synpred3_EsperEPL2Grammar()) ) { s = 1140; }

                   	else if ( (LA89_610 == METADATASQL) && (synpred3_EsperEPL2Grammar()) ) { s = 1141; }

                   	else if ( (LA89_610 == PREVIOUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1142; }

                   	else if ( (LA89_610 == PRIOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1143; }

                   	else if ( (LA89_610 == WEEKDAY) && (synpred3_EsperEPL2Grammar()) ) { s = 1144; }

                   	else if ( (LA89_610 == LW) && (synpred3_EsperEPL2Grammar()) ) { s = 1145; }

                   	else if ( (LA89_610 == INSTANCEOF) && (synpred3_EsperEPL2Grammar()) ) { s = 1146; }

                   	else if ( (LA89_610 == CAST) && (synpred3_EsperEPL2Grammar()) ) { s = 1147; }

                   	else if ( (LA89_610 == SNAPSHOT) && (synpred3_EsperEPL2Grammar()) ) { s = 1148; }

                   	else if ( (LA89_610 == VARIABLE) && (synpred3_EsperEPL2Grammar()) ) { s = 1149; }

                   	else if ( (LA89_610 == WINDOW) && (synpred3_EsperEPL2Grammar()) ) { s = 1150; }

                   	else if ( (LA89_610 == EXISTS) && (synpred3_EsperEPL2Grammar()) ) { s = 1151; }

                   	else if ( (LA89_610 == CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar()) ) { s = 1152; }

                   	else if ( (LA89_610 == LCURLY) && (synpred3_EsperEPL2Grammar()) ) { s = 1153; }

                   	else if ( (LA89_610 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1154; }

                   	 
                   	input.Seek(index89_610);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 12 : 
                   	int LA89_658 = input.LA(1);

                   	 
                   	int index89_658 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_658 == SELECT) ) { s = 1155; }

                   	else if ( (LA89_658 == IDENT) && (synpred3_EsperEPL2Grammar()) ) { s = 1156; }

                   	else if ( (LA89_658 == COUNT) && (synpred3_EsperEPL2Grammar()) ) { s = 1157; }

                   	else if ( (LA89_658 == ESCAPE) && (synpred3_EsperEPL2Grammar()) ) { s = 1158; }

                   	else if ( (LA89_658 == EVERY_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1159; }

                   	else if ( (LA89_658 == SUM) && (synpred3_EsperEPL2Grammar()) ) { s = 1160; }

                   	else if ( (LA89_658 == AVG) && (synpred3_EsperEPL2Grammar()) ) { s = 1161; }

                   	else if ( (LA89_658 == MAX) && (synpred3_EsperEPL2Grammar()) ) { s = 1162; }

                   	else if ( (LA89_658 == MIN) && (synpred3_EsperEPL2Grammar()) ) { s = 1163; }

                   	else if ( (LA89_658 == COALESCE) && (synpred3_EsperEPL2Grammar()) ) { s = 1164; }

                   	else if ( (LA89_658 == MEDIAN) && (synpred3_EsperEPL2Grammar()) ) { s = 1165; }

                   	else if ( (LA89_658 == STDDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 1166; }

                   	else if ( (LA89_658 == AVEDEV) && (synpred3_EsperEPL2Grammar()) ) { s = 1167; }

                   	else if ( (LA89_658 == EVENTS) && (synpred3_EsperEPL2Grammar()) ) { s = 1168; }

                   	else if ( (LA89_658 == SECONDS) && (synpred3_EsperEPL2Grammar()) ) { s = 1169; }

                   	else if ( (LA89_658 == MINUTES) && (synpred3_EsperEPL2Grammar()) ) { s = 1170; }

                   	else if ( (LA89_658 == FIRST) && (synpred3_EsperEPL2Grammar()) ) { s = 1171; }

                   	else if ( (LA89_658 == LAST) && (synpred3_EsperEPL2Grammar()) ) { s = 1172; }

                   	else if ( (LA89_658 == UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1173; }

                   	else if ( (LA89_658 == PATTERN) && (synpred3_EsperEPL2Grammar()) ) { s = 1174; }

                   	else if ( (LA89_658 == SQL) && (synpred3_EsperEPL2Grammar()) ) { s = 1175; }

                   	else if ( (LA89_658 == METADATASQL) && (synpred3_EsperEPL2Grammar()) ) { s = 1176; }

                   	else if ( (LA89_658 == PREVIOUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1177; }

                   	else if ( (LA89_658 == PRIOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1178; }

                   	else if ( (LA89_658 == WEEKDAY) && (synpred3_EsperEPL2Grammar()) ) { s = 1179; }

                   	else if ( (LA89_658 == LW) && (synpred3_EsperEPL2Grammar()) ) { s = 1180; }

                   	else if ( (LA89_658 == INSTANCEOF) && (synpred3_EsperEPL2Grammar()) ) { s = 1181; }

                   	else if ( (LA89_658 == CAST) && (synpred3_EsperEPL2Grammar()) ) { s = 1182; }

                   	else if ( (LA89_658 == SNAPSHOT) && (synpred3_EsperEPL2Grammar()) ) { s = 1183; }

                   	else if ( (LA89_658 == VARIABLE) && (synpred3_EsperEPL2Grammar()) ) { s = 1184; }

                   	else if ( (LA89_658 == WINDOW) && (synpred3_EsperEPL2Grammar()) ) { s = 1185; }

                   	 
                   	input.Seek(index89_658);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 13 : 
                   	int LA89_668 = input.LA(1);

                   	 
                   	int index89_668 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_668 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1186; }

                   	else if ( (LA89_668 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1187; }

                   	else if ( (LA89_668 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1188; }

                   	else if ( (LA89_668 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1189; }

                   	else if ( (LA89_668 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1190; }

                   	else if ( (LA89_668 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1191; }

                   	else if ( (LA89_668 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1192; }

                   	else if ( (LA89_668 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1193; }

                   	else if ( (LA89_668 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1194; }

                   	else if ( (LA89_668 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1195; }

                   	else if ( (LA89_668 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1196; }

                   	else if ( (LA89_668 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1197; }

                   	else if ( (LA89_668 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1198; }

                   	else if ( (LA89_668 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1199; }

                   	else if ( (LA89_668 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1200; }

                   	else if ( (LA89_668 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1201; }

                   	else if ( (LA89_668 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1202; }

                   	else if ( (LA89_668 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1203; }

                   	else if ( (LA89_668 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1204; }

                   	else if ( (LA89_668 == RPAREN) ) { s = 1205; }

                   	else if ( (LA89_668 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1206; }

                   	else if ( (LA89_668 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1207; }

                   	else if ( (LA89_668 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1208; }

                   	else if ( (LA89_668 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1209; }

                   	else if ( (LA89_668 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1210; }

                   	 
                   	input.Seek(index89_668);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 14 : 
                   	int LA89_669 = input.LA(1);

                   	 
                   	int index89_669 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_669 == RPAREN) ) { s = 1211; }

                   	else if ( (LA89_669 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1212; }

                   	else if ( (LA89_669 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1213; }

                   	else if ( (LA89_669 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1214; }

                   	else if ( (LA89_669 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1215; }

                   	else if ( (LA89_669 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1216; }

                   	else if ( (LA89_669 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1217; }

                   	else if ( (LA89_669 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1218; }

                   	else if ( (LA89_669 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1219; }

                   	else if ( (LA89_669 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1220; }

                   	else if ( (LA89_669 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1221; }

                   	else if ( (LA89_669 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1222; }

                   	else if ( (LA89_669 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1223; }

                   	else if ( (LA89_669 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1224; }

                   	else if ( (LA89_669 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1225; }

                   	else if ( (LA89_669 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1226; }

                   	else if ( (LA89_669 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1227; }

                   	else if ( (LA89_669 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1228; }

                   	else if ( (LA89_669 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1229; }

                   	else if ( (LA89_669 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1230; }

                   	else if ( (LA89_669 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1231; }

                   	else if ( (LA89_669 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1232; }

                   	else if ( (LA89_669 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1233; }

                   	else if ( (LA89_669 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1234; }

                   	else if ( (LA89_669 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1235; }

                   	 
                   	input.Seek(index89_669);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 15 : 
                   	int LA89_719 = input.LA(1);

                   	 
                   	int index89_719 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_719 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1236; }

                   	else if ( (LA89_719 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1237; }

                   	else if ( (LA89_719 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1238; }

                   	else if ( (LA89_719 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1239; }

                   	else if ( (LA89_719 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1240; }

                   	else if ( (LA89_719 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1241; }

                   	else if ( (LA89_719 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1242; }

                   	else if ( (LA89_719 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1243; }

                   	else if ( (LA89_719 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1244; }

                   	else if ( (LA89_719 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1245; }

                   	else if ( (LA89_719 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1246; }

                   	else if ( (LA89_719 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1247; }

                   	else if ( (LA89_719 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1248; }

                   	else if ( (LA89_719 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1249; }

                   	else if ( (LA89_719 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1250; }

                   	else if ( (LA89_719 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1251; }

                   	else if ( (LA89_719 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1252; }

                   	else if ( (LA89_719 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1253; }

                   	else if ( (LA89_719 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1254; }

                   	else if ( (LA89_719 == RPAREN) ) { s = 1255; }

                   	else if ( (LA89_719 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1256; }

                   	else if ( (LA89_719 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1257; }

                   	else if ( (LA89_719 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1258; }

                   	else if ( (LA89_719 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1259; }

                   	else if ( (LA89_719 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1260; }

                   	 
                   	input.Seek(index89_719);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 16 : 
                   	int LA89_720 = input.LA(1);

                   	 
                   	int index89_720 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_720 == RPAREN) ) { s = 1261; }

                   	else if ( (LA89_720 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1262; }

                   	else if ( (LA89_720 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1263; }

                   	else if ( (LA89_720 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1264; }

                   	else if ( (LA89_720 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1265; }

                   	else if ( (LA89_720 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1266; }

                   	else if ( (LA89_720 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1267; }

                   	else if ( (LA89_720 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1268; }

                   	else if ( (LA89_720 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1269; }

                   	else if ( (LA89_720 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1270; }

                   	else if ( (LA89_720 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1271; }

                   	else if ( (LA89_720 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1272; }

                   	else if ( (LA89_720 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1273; }

                   	else if ( (LA89_720 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1274; }

                   	else if ( (LA89_720 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1275; }

                   	else if ( (LA89_720 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1276; }

                   	else if ( (LA89_720 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1277; }

                   	else if ( (LA89_720 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1278; }

                   	else if ( (LA89_720 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1279; }

                   	else if ( (LA89_720 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1280; }

                   	else if ( (LA89_720 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1281; }

                   	else if ( (LA89_720 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1282; }

                   	else if ( (LA89_720 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1283; }

                   	else if ( (LA89_720 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1284; }

                   	else if ( (LA89_720 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1285; }

                   	 
                   	input.Seek(index89_720);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 17 : 
                   	int LA89_769 = input.LA(1);

                   	 
                   	int index89_769 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_769 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1286; }

                   	else if ( (LA89_769 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1287; }

                   	else if ( (LA89_769 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1288; }

                   	else if ( (LA89_769 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1289; }

                   	else if ( (LA89_769 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1290; }

                   	else if ( (LA89_769 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1291; }

                   	else if ( (LA89_769 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1292; }

                   	else if ( (LA89_769 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1293; }

                   	else if ( (LA89_769 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1294; }

                   	else if ( (LA89_769 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1295; }

                   	else if ( (LA89_769 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1296; }

                   	else if ( (LA89_769 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1297; }

                   	else if ( (LA89_769 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1298; }

                   	else if ( (LA89_769 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1299; }

                   	else if ( (LA89_769 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1300; }

                   	else if ( (LA89_769 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1301; }

                   	else if ( (LA89_769 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1302; }

                   	else if ( (LA89_769 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1303; }

                   	else if ( (LA89_769 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1304; }

                   	else if ( (LA89_769 == RPAREN) ) { s = 1305; }

                   	else if ( (LA89_769 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1306; }

                   	else if ( (LA89_769 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1307; }

                   	else if ( (LA89_769 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1308; }

                   	else if ( (LA89_769 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1309; }

                   	else if ( (LA89_769 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1310; }

                   	 
                   	input.Seek(index89_769);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 18 : 
                   	int LA89_770 = input.LA(1);

                   	 
                   	int index89_770 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_770 == RPAREN) ) { s = 1311; }

                   	else if ( (LA89_770 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1312; }

                   	else if ( (LA89_770 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1313; }

                   	else if ( (LA89_770 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1314; }

                   	else if ( (LA89_770 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1315; }

                   	else if ( (LA89_770 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1316; }

                   	else if ( (LA89_770 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1317; }

                   	else if ( (LA89_770 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1318; }

                   	else if ( (LA89_770 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1319; }

                   	else if ( (LA89_770 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1320; }

                   	else if ( (LA89_770 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1321; }

                   	else if ( (LA89_770 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1322; }

                   	else if ( (LA89_770 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1323; }

                   	else if ( (LA89_770 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1324; }

                   	else if ( (LA89_770 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1325; }

                   	else if ( (LA89_770 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1326; }

                   	else if ( (LA89_770 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1327; }

                   	else if ( (LA89_770 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1328; }

                   	else if ( (LA89_770 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1329; }

                   	else if ( (LA89_770 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1330; }

                   	else if ( (LA89_770 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1331; }

                   	else if ( (LA89_770 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1332; }

                   	else if ( (LA89_770 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1333; }

                   	else if ( (LA89_770 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1334; }

                   	else if ( (LA89_770 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1335; }

                   	 
                   	input.Seek(index89_770);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 19 : 
                   	int LA89_817 = input.LA(1);

                   	 
                   	int index89_817 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_817 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1336; }

                   	else if ( (LA89_817 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1337; }

                   	else if ( (LA89_817 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1338; }

                   	else if ( (LA89_817 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1339; }

                   	else if ( (LA89_817 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1340; }

                   	else if ( (LA89_817 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1341; }

                   	else if ( (LA89_817 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1342; }

                   	else if ( (LA89_817 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1343; }

                   	else if ( (LA89_817 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1344; }

                   	else if ( (LA89_817 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1345; }

                   	else if ( (LA89_817 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1346; }

                   	else if ( (LA89_817 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1347; }

                   	else if ( (LA89_817 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1348; }

                   	else if ( (LA89_817 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1349; }

                   	else if ( (LA89_817 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1350; }

                   	else if ( (LA89_817 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1351; }

                   	else if ( (LA89_817 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1352; }

                   	else if ( (LA89_817 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1353; }

                   	else if ( (LA89_817 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1354; }

                   	else if ( (LA89_817 == COMMA) && (synpred3_EsperEPL2Grammar()) ) { s = 1355; }

                   	else if ( (LA89_817 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1356; }

                   	else if ( (LA89_817 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1357; }

                   	else if ( (LA89_817 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1358; }

                   	else if ( (LA89_817 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1359; }

                   	else if ( (LA89_817 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1360; }

                   	else if ( (LA89_817 == RPAREN) ) { s = 14; }

                   	 
                   	input.Seek(index89_817);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 20 : 
                   	int LA89_818 = input.LA(1);

                   	 
                   	int index89_818 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_818 == RPAREN) ) { s = 14; }

                   	else if ( (LA89_818 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1363; }

                   	else if ( (LA89_818 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1364; }

                   	else if ( (LA89_818 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1365; }

                   	else if ( (LA89_818 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1366; }

                   	else if ( (LA89_818 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1367; }

                   	else if ( (LA89_818 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1368; }

                   	else if ( (LA89_818 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1369; }

                   	else if ( (LA89_818 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1370; }

                   	else if ( (LA89_818 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1371; }

                   	else if ( (LA89_818 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1372; }

                   	else if ( (LA89_818 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1373; }

                   	else if ( (LA89_818 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1374; }

                   	else if ( (LA89_818 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1375; }

                   	else if ( (LA89_818 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1376; }

                   	else if ( (LA89_818 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1377; }

                   	else if ( (LA89_818 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1378; }

                   	else if ( (LA89_818 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1379; }

                   	else if ( (LA89_818 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1380; }

                   	else if ( (LA89_818 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1381; }

                   	else if ( (LA89_818 == COMMA) && (synpred3_EsperEPL2Grammar()) ) { s = 1382; }

                   	else if ( (LA89_818 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1383; }

                   	else if ( (LA89_818 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1384; }

                   	else if ( (LA89_818 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1385; }

                   	else if ( (LA89_818 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1386; }

                   	else if ( (LA89_818 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1387; }

                   	 
                   	input.Seek(index89_818);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 21 : 
                   	int LA89_867 = input.LA(1);

                   	 
                   	int index89_867 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_867 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1388; }

                   	else if ( (LA89_867 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1389; }

                   	else if ( (LA89_867 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1390; }

                   	else if ( (LA89_867 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1391; }

                   	else if ( (LA89_867 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1392; }

                   	else if ( (LA89_867 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1393; }

                   	else if ( (LA89_867 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1394; }

                   	else if ( (LA89_867 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1395; }

                   	else if ( (LA89_867 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1396; }

                   	else if ( (LA89_867 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1397; }

                   	else if ( (LA89_867 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1398; }

                   	else if ( (LA89_867 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1399; }

                   	else if ( (LA89_867 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1400; }

                   	else if ( (LA89_867 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1401; }

                   	else if ( (LA89_867 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1402; }

                   	else if ( (LA89_867 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1403; }

                   	else if ( (LA89_867 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1404; }

                   	else if ( (LA89_867 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1405; }

                   	else if ( (LA89_867 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1406; }

                   	else if ( (LA89_867 == RPAREN) ) { s = 1407; }

                   	else if ( (LA89_867 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1408; }

                   	else if ( (LA89_867 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1409; }

                   	else if ( (LA89_867 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1410; }

                   	else if ( (LA89_867 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1411; }

                   	else if ( (LA89_867 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1412; }

                   	 
                   	input.Seek(index89_867);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 22 : 
                   	int LA89_868 = input.LA(1);

                   	 
                   	int index89_868 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_868 == RPAREN) ) { s = 1413; }

                   	else if ( (LA89_868 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1414; }

                   	else if ( (LA89_868 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1415; }

                   	else if ( (LA89_868 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1416; }

                   	else if ( (LA89_868 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1417; }

                   	else if ( (LA89_868 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1418; }

                   	else if ( (LA89_868 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1419; }

                   	else if ( (LA89_868 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1420; }

                   	else if ( (LA89_868 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1421; }

                   	else if ( (LA89_868 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1422; }

                   	else if ( (LA89_868 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1423; }

                   	else if ( (LA89_868 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1424; }

                   	else if ( (LA89_868 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1425; }

                   	else if ( (LA89_868 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1426; }

                   	else if ( (LA89_868 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1427; }

                   	else if ( (LA89_868 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1428; }

                   	else if ( (LA89_868 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1429; }

                   	else if ( (LA89_868 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1430; }

                   	else if ( (LA89_868 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1431; }

                   	else if ( (LA89_868 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1432; }

                   	else if ( (LA89_868 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1433; }

                   	else if ( (LA89_868 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1434; }

                   	else if ( (LA89_868 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1435; }

                   	else if ( (LA89_868 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1436; }

                   	else if ( (LA89_868 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1437; }

                   	 
                   	input.Seek(index89_868);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 23 : 
                   	int LA89_917 = input.LA(1);

                   	 
                   	int index89_917 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_917 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1438; }

                   	else if ( (LA89_917 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1439; }

                   	else if ( (LA89_917 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1440; }

                   	else if ( (LA89_917 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1441; }

                   	else if ( (LA89_917 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1442; }

                   	else if ( (LA89_917 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1443; }

                   	else if ( (LA89_917 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1444; }

                   	else if ( (LA89_917 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1445; }

                   	else if ( (LA89_917 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1446; }

                   	else if ( (LA89_917 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1447; }

                   	else if ( (LA89_917 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1448; }

                   	else if ( (LA89_917 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1449; }

                   	else if ( (LA89_917 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1450; }

                   	else if ( (LA89_917 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1451; }

                   	else if ( (LA89_917 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1452; }

                   	else if ( (LA89_917 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1453; }

                   	else if ( (LA89_917 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1454; }

                   	else if ( (LA89_917 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1455; }

                   	else if ( (LA89_917 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1456; }

                   	else if ( (LA89_917 == RPAREN) ) { s = 1457; }

                   	else if ( (LA89_917 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1458; }

                   	else if ( (LA89_917 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1459; }

                   	else if ( (LA89_917 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1460; }

                   	else if ( (LA89_917 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1461; }

                   	else if ( (LA89_917 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1462; }

                   	 
                   	input.Seek(index89_917);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 24 : 
                   	int LA89_918 = input.LA(1);

                   	 
                   	int index89_918 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_918 == RPAREN) ) { s = 1463; }

                   	else if ( (LA89_918 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1464; }

                   	else if ( (LA89_918 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1465; }

                   	else if ( (LA89_918 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1466; }

                   	else if ( (LA89_918 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1467; }

                   	else if ( (LA89_918 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1468; }

                   	else if ( (LA89_918 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1469; }

                   	else if ( (LA89_918 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1470; }

                   	else if ( (LA89_918 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1471; }

                   	else if ( (LA89_918 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1472; }

                   	else if ( (LA89_918 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1473; }

                   	else if ( (LA89_918 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1474; }

                   	else if ( (LA89_918 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1475; }

                   	else if ( (LA89_918 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1476; }

                   	else if ( (LA89_918 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1477; }

                   	else if ( (LA89_918 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1478; }

                   	else if ( (LA89_918 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1479; }

                   	else if ( (LA89_918 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1480; }

                   	else if ( (LA89_918 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1481; }

                   	else if ( (LA89_918 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1482; }

                   	else if ( (LA89_918 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1483; }

                   	else if ( (LA89_918 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1484; }

                   	else if ( (LA89_918 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1485; }

                   	else if ( (LA89_918 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1486; }

                   	else if ( (LA89_918 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1487; }

                   	 
                   	input.Seek(index89_918);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 25 : 
                   	int LA89_967 = input.LA(1);

                   	 
                   	int index89_967 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_967 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1488; }

                   	else if ( (LA89_967 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1489; }

                   	else if ( (LA89_967 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1490; }

                   	else if ( (LA89_967 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1491; }

                   	else if ( (LA89_967 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1492; }

                   	else if ( (LA89_967 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1493; }

                   	else if ( (LA89_967 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1494; }

                   	else if ( (LA89_967 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1495; }

                   	else if ( (LA89_967 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1496; }

                   	else if ( (LA89_967 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1497; }

                   	else if ( (LA89_967 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1498; }

                   	else if ( (LA89_967 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1499; }

                   	else if ( (LA89_967 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1500; }

                   	else if ( (LA89_967 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1501; }

                   	else if ( (LA89_967 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1502; }

                   	else if ( (LA89_967 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1503; }

                   	else if ( (LA89_967 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1504; }

                   	else if ( (LA89_967 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1505; }

                   	else if ( (LA89_967 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1506; }

                   	else if ( (LA89_967 == RPAREN) ) { s = 1507; }

                   	else if ( (LA89_967 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1508; }

                   	else if ( (LA89_967 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1509; }

                   	else if ( (LA89_967 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1510; }

                   	else if ( (LA89_967 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1511; }

                   	else if ( (LA89_967 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1512; }

                   	 
                   	input.Seek(index89_967);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 26 : 
                   	int LA89_968 = input.LA(1);

                   	 
                   	int index89_968 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_968 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1513; }

                   	else if ( (LA89_968 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1514; }

                   	else if ( (LA89_968 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1515; }

                   	else if ( (LA89_968 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1516; }

                   	else if ( (LA89_968 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1517; }

                   	else if ( (LA89_968 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1518; }

                   	else if ( (LA89_968 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1519; }

                   	else if ( (LA89_968 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1520; }

                   	else if ( (LA89_968 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1521; }

                   	else if ( (LA89_968 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1522; }

                   	else if ( (LA89_968 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1523; }

                   	else if ( (LA89_968 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1524; }

                   	else if ( (LA89_968 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1525; }

                   	else if ( (LA89_968 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1526; }

                   	else if ( (LA89_968 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1527; }

                   	else if ( (LA89_968 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1528; }

                   	else if ( (LA89_968 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1529; }

                   	else if ( (LA89_968 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1530; }

                   	else if ( (LA89_968 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1531; }

                   	else if ( (LA89_968 == RPAREN) ) { s = 1532; }

                   	else if ( (LA89_968 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1533; }

                   	else if ( (LA89_968 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1534; }

                   	else if ( (LA89_968 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1535; }

                   	else if ( (LA89_968 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1536; }

                   	else if ( (LA89_968 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1537; }

                   	 
                   	input.Seek(index89_968);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 27 : 
                   	int LA89_1015 = input.LA(1);

                   	 
                   	int index89_1015 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_1015 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1538; }

                   	else if ( (LA89_1015 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1539; }

                   	else if ( (LA89_1015 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1540; }

                   	else if ( (LA89_1015 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1541; }

                   	else if ( (LA89_1015 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1542; }

                   	else if ( (LA89_1015 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1543; }

                   	else if ( (LA89_1015 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1544; }

                   	else if ( (LA89_1015 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1545; }

                   	else if ( (LA89_1015 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1546; }

                   	else if ( (LA89_1015 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1547; }

                   	else if ( (LA89_1015 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1548; }

                   	else if ( (LA89_1015 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1549; }

                   	else if ( (LA89_1015 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1550; }

                   	else if ( (LA89_1015 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1551; }

                   	else if ( (LA89_1015 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1552; }

                   	else if ( (LA89_1015 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1553; }

                   	else if ( (LA89_1015 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1554; }

                   	else if ( (LA89_1015 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1555; }

                   	else if ( (LA89_1015 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1556; }

                   	else if ( (LA89_1015 == COMMA) && (synpred3_EsperEPL2Grammar()) ) { s = 1557; }

                   	else if ( (LA89_1015 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1558; }

                   	else if ( (LA89_1015 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1559; }

                   	else if ( (LA89_1015 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1560; }

                   	else if ( (LA89_1015 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1561; }

                   	else if ( (LA89_1015 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1562; }

                   	else if ( (LA89_1015 == RPAREN) ) { s = 14; }

                   	 
                   	input.Seek(index89_1015);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 28 : 
                   	int LA89_1016 = input.LA(1);

                   	 
                   	int index89_1016 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_1016 == RPAREN) ) { s = 14; }

                   	else if ( (LA89_1016 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1565; }

                   	else if ( (LA89_1016 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1566; }

                   	else if ( (LA89_1016 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1567; }

                   	else if ( (LA89_1016 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1568; }

                   	else if ( (LA89_1016 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1569; }

                   	else if ( (LA89_1016 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1570; }

                   	else if ( (LA89_1016 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1571; }

                   	else if ( (LA89_1016 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1572; }

                   	else if ( (LA89_1016 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1573; }

                   	else if ( (LA89_1016 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1574; }

                   	else if ( (LA89_1016 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1575; }

                   	else if ( (LA89_1016 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1576; }

                   	else if ( (LA89_1016 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1577; }

                   	else if ( (LA89_1016 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1578; }

                   	else if ( (LA89_1016 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1579; }

                   	else if ( (LA89_1016 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1580; }

                   	else if ( (LA89_1016 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1581; }

                   	else if ( (LA89_1016 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1582; }

                   	else if ( (LA89_1016 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1583; }

                   	else if ( (LA89_1016 == COMMA) && (synpred3_EsperEPL2Grammar()) ) { s = 1584; }

                   	else if ( (LA89_1016 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1585; }

                   	else if ( (LA89_1016 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1586; }

                   	else if ( (LA89_1016 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1587; }

                   	else if ( (LA89_1016 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1588; }

                   	else if ( (LA89_1016 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1589; }

                   	 
                   	input.Seek(index89_1016);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 29 : 
                   	int LA89_1066 = input.LA(1);

                   	 
                   	int index89_1066 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_1066 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1590; }

                   	else if ( (LA89_1066 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1591; }

                   	else if ( (LA89_1066 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1592; }

                   	else if ( (LA89_1066 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1593; }

                   	else if ( (LA89_1066 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1594; }

                   	else if ( (LA89_1066 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1595; }

                   	else if ( (LA89_1066 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1596; }

                   	else if ( (LA89_1066 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1597; }

                   	else if ( (LA89_1066 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1598; }

                   	else if ( (LA89_1066 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1599; }

                   	else if ( (LA89_1066 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1600; }

                   	else if ( (LA89_1066 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1601; }

                   	else if ( (LA89_1066 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1602; }

                   	else if ( (LA89_1066 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1603; }

                   	else if ( (LA89_1066 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1604; }

                   	else if ( (LA89_1066 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1605; }

                   	else if ( (LA89_1066 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1606; }

                   	else if ( (LA89_1066 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1607; }

                   	else if ( (LA89_1066 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1608; }

                   	else if ( (LA89_1066 == COMMA) && (synpred3_EsperEPL2Grammar()) ) { s = 1609; }

                   	else if ( (LA89_1066 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1610; }

                   	else if ( (LA89_1066 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1611; }

                   	else if ( (LA89_1066 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1612; }

                   	else if ( (LA89_1066 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1613; }

                   	else if ( (LA89_1066 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1614; }

                   	else if ( (LA89_1066 == RPAREN) ) { s = 14; }

                   	 
                   	input.Seek(index89_1066);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 30 : 
                   	int LA89_1067 = input.LA(1);

                   	 
                   	int index89_1067 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_1067 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1616; }

                   	else if ( (LA89_1067 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1617; }

                   	else if ( (LA89_1067 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1618; }

                   	else if ( (LA89_1067 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1619; }

                   	else if ( (LA89_1067 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1620; }

                   	else if ( (LA89_1067 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1621; }

                   	else if ( (LA89_1067 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1622; }

                   	else if ( (LA89_1067 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1623; }

                   	else if ( (LA89_1067 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1624; }

                   	else if ( (LA89_1067 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1625; }

                   	else if ( (LA89_1067 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1626; }

                   	else if ( (LA89_1067 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1627; }

                   	else if ( (LA89_1067 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1628; }

                   	else if ( (LA89_1067 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1629; }

                   	else if ( (LA89_1067 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1630; }

                   	else if ( (LA89_1067 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1631; }

                   	else if ( (LA89_1067 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1632; }

                   	else if ( (LA89_1067 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1633; }

                   	else if ( (LA89_1067 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1634; }

                   	else if ( (LA89_1067 == COMMA) && (synpred3_EsperEPL2Grammar()) ) { s = 1635; }

                   	else if ( (LA89_1067 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1636; }

                   	else if ( (LA89_1067 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1637; }

                   	else if ( (LA89_1067 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1638; }

                   	else if ( (LA89_1067 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1639; }

                   	else if ( (LA89_1067 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1640; }

                   	else if ( (LA89_1067 == RPAREN) ) { s = 14; }

                   	 
                   	input.Seek(index89_1067);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 31 : 
                   	int LA89_1107 = input.LA(1);

                   	 
                   	int index89_1107 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_1107 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1642; }

                   	else if ( (LA89_1107 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1643; }

                   	else if ( (LA89_1107 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1644; }

                   	else if ( (LA89_1107 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1645; }

                   	else if ( (LA89_1107 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1646; }

                   	else if ( (LA89_1107 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1647; }

                   	else if ( (LA89_1107 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1648; }

                   	else if ( (LA89_1107 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1649; }

                   	else if ( (LA89_1107 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1650; }

                   	else if ( (LA89_1107 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1651; }

                   	else if ( (LA89_1107 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1652; }

                   	else if ( (LA89_1107 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1653; }

                   	else if ( (LA89_1107 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1654; }

                   	else if ( (LA89_1107 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1655; }

                   	else if ( (LA89_1107 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1656; }

                   	else if ( (LA89_1107 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1657; }

                   	else if ( (LA89_1107 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1658; }

                   	else if ( (LA89_1107 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1659; }

                   	else if ( (LA89_1107 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1660; }

                   	else if ( (LA89_1107 == COMMA) && (synpred3_EsperEPL2Grammar()) ) { s = 1661; }

                   	else if ( (LA89_1107 == AS) && (synpred3_EsperEPL2Grammar()) ) { s = 1662; }

                   	else if ( (LA89_1107 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1663; }

                   	else if ( (LA89_1107 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1664; }

                   	else if ( (LA89_1107 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1665; }

                   	else if ( (LA89_1107 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1666; }

                   	else if ( (LA89_1107 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1667; }

                   	else if ( (LA89_1107 == RPAREN) ) { s = 14; }

                   	 
                   	input.Seek(index89_1107);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 32 : 
                   	int LA89_1108 = input.LA(1);

                   	 
                   	int index89_1108 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA89_1108 == RPAREN) ) { s = 14; }

                   	else if ( (LA89_1108 == STAR) && (synpred3_EsperEPL2Grammar()) ) { s = 1670; }

                   	else if ( (LA89_1108 == DIV) && (synpred3_EsperEPL2Grammar()) ) { s = 1671; }

                   	else if ( (LA89_1108 == MOD) && (synpred3_EsperEPL2Grammar()) ) { s = 1672; }

                   	else if ( (LA89_1108 == PLUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1673; }

                   	else if ( (LA89_1108 == MINUS) && (synpred3_EsperEPL2Grammar()) ) { s = 1674; }

                   	else if ( (LA89_1108 == LOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1675; }

                   	else if ( (LA89_1108 == LT) && (synpred3_EsperEPL2Grammar()) ) { s = 1676; }

                   	else if ( (LA89_1108 == GT) && (synpred3_EsperEPL2Grammar()) ) { s = 1677; }

                   	else if ( (LA89_1108 == LE) && (synpred3_EsperEPL2Grammar()) ) { s = 1678; }

                   	else if ( (LA89_1108 == GE) && (synpred3_EsperEPL2Grammar()) ) { s = 1679; }

                   	else if ( (LA89_1108 == EQUALS) && (synpred3_EsperEPL2Grammar()) ) { s = 1680; }

                   	else if ( (LA89_1108 == IS) && (synpred3_EsperEPL2Grammar()) ) { s = 1681; }

                   	else if ( (LA89_1108 == SQL_NE) && (synpred3_EsperEPL2Grammar()) ) { s = 1682; }

                   	else if ( (LA89_1108 == NOT_EQUAL) && (synpred3_EsperEPL2Grammar()) ) { s = 1683; }

                   	else if ( (LA89_1108 == BAND) && (synpred3_EsperEPL2Grammar()) ) { s = 1684; }

                   	else if ( (LA89_1108 == BOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1685; }

                   	else if ( (LA89_1108 == BXOR) && (synpred3_EsperEPL2Grammar()) ) { s = 1686; }

                   	else if ( (LA89_1108 == AND_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1687; }

                   	else if ( (LA89_1108 == OR_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1688; }

                   	else if ( (LA89_1108 == COMMA) && (synpred3_EsperEPL2Grammar()) ) { s = 1689; }

                   	else if ( (LA89_1108 == AS) && (synpred3_EsperEPL2Grammar()) ) { s = 1690; }

                   	else if ( (LA89_1108 == NOT_EXPR) && (synpred3_EsperEPL2Grammar()) ) { s = 1691; }

                   	else if ( (LA89_1108 == IN_SET) && (synpred3_EsperEPL2Grammar()) ) { s = 1692; }

                   	else if ( (LA89_1108 == BETWEEN) && (synpred3_EsperEPL2Grammar()) ) { s = 1693; }

                   	else if ( (LA89_1108 == LIKE) && (synpred3_EsperEPL2Grammar()) ) { s = 1694; }

                   	else if ( (LA89_1108 == REGEXP) && (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1108);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 33 : 
                   	int LA89_1205 = input.LA(1);

                   	 
                   	int index89_1205 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (true) ) { s = 14; }

                   	else if ( (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1205);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 34 : 
                   	int LA89_1211 = input.LA(1);

                   	 
                   	int index89_1211 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (true) ) { s = 14; }

                   	else if ( (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1211);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 35 : 
                   	int LA89_1255 = input.LA(1);

                   	 
                   	int index89_1255 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (true) ) { s = 14; }

                   	else if ( (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1255);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 36 : 
                   	int LA89_1261 = input.LA(1);

                   	 
                   	int index89_1261 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (true) ) { s = 14; }

                   	else if ( (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1261);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 37 : 
                   	int LA89_1305 = input.LA(1);

                   	 
                   	int index89_1305 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (true) ) { s = 14; }

                   	else if ( (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1305);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 38 : 
                   	int LA89_1311 = input.LA(1);

                   	 
                   	int index89_1311 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (true) ) { s = 14; }

                   	else if ( (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1311);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 39 : 
                   	int LA89_1407 = input.LA(1);

                   	 
                   	int index89_1407 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (true) ) { s = 14; }

                   	else if ( (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1407);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 40 : 
                   	int LA89_1413 = input.LA(1);

                   	 
                   	int index89_1413 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (true) ) { s = 14; }

                   	else if ( (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1413);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 41 : 
                   	int LA89_1457 = input.LA(1);

                   	 
                   	int index89_1457 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (true) ) { s = 14; }

                   	else if ( (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1457);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 42 : 
                   	int LA89_1463 = input.LA(1);

                   	 
                   	int index89_1463 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (true) ) { s = 14; }

                   	else if ( (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1463);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 43 : 
                   	int LA89_1507 = input.LA(1);

                   	 
                   	int index89_1507 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (true) ) { s = 14; }

                   	else if ( (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1507);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 44 : 
                   	int LA89_1532 = input.LA(1);

                   	 
                   	int index89_1532 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (true) ) { s = 14; }

                   	else if ( (synpred3_EsperEPL2Grammar()) ) { s = 1695; }

                   	 
                   	input.Seek(index89_1532);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 89, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA95_eotS =
        "\x32\uffff";
    const string DFA95_eofS =
        "\x32\uffff";
    const string DFA95_minS =
        "\x01\x05\x31\uffff";
    const string DFA95_maxS =
        "\x01\u00f0\x31\uffff";
    const string DFA95_acceptS =
        "\x01\uffff\x01\x01\x2f\uffff\x01\x02";
    const string DFA95_specialS =
        "\x32\uffff}>";
    static readonly string[] DFA95_transitionS = {
            "\x01\x01\x04\uffff\x01\x01\x02\uffff\x02\x01\x02\uffff\x09"+
            "\x01\x01\uffff\x01\x01\x13\uffff\x05\x01\x08\uffff\x0c\x01\x01"+
            "\uffff\x01\x01\x01\uffff\x01\x01\x62\uffff\x01\x01\x01\uffff"+
            "\x09\x01\x04\uffff\x01\x01\x10\uffff\x01\x01\x01\x31\x1e\uffff"+
            "\x03\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA95_eot = DFA.UnpackEncodedString(DFA95_eotS);
    static readonly short[] DFA95_eof = DFA.UnpackEncodedString(DFA95_eofS);
    static readonly char[] DFA95_min = DFA.UnpackEncodedStringToUnsignedChars(DFA95_minS);
    static readonly char[] DFA95_max = DFA.UnpackEncodedStringToUnsignedChars(DFA95_maxS);
    static readonly short[] DFA95_accept = DFA.UnpackEncodedString(DFA95_acceptS);
    static readonly short[] DFA95_special = DFA.UnpackEncodedString(DFA95_specialS);
    static readonly short[][] DFA95_transition = DFA.UnpackEncodedStringArray(DFA95_transitionS);

    protected class DFA95 : DFA
    {
        public DFA95(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;

        }

        override public string Description
        {
            get { return "821:11: ( expression ( COMMA expression )* )?"; }
        }

    }

    const string DFA107_eotS =
        "\x0e\uffff";
    const string DFA107_eofS =
        "\x0e\uffff";
    const string DFA107_minS =
        "\x01\x11\x0d\uffff";
    const string DFA107_maxS =
        "\x01\x47\x0d\uffff";
    const string DFA107_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
        "\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d";
    const string DFA107_specialS =
        "\x0e\uffff}>";
    static readonly string[] DFA107_transitionS = {
            "\x01\x01\x01\x02\x02\uffff\x01\x07\x01\x04\x01\x05\x01\x06"+
            "\x01\x03\x26\uffff\x01\x08\x01\x09\x01\x0c\x02\uffff\x01\x0a"+
            "\x01\x0b\x01\x0d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA107_eot = DFA.UnpackEncodedString(DFA107_eotS);
    static readonly short[] DFA107_eof = DFA.UnpackEncodedString(DFA107_eofS);
    static readonly char[] DFA107_min = DFA.UnpackEncodedStringToUnsignedChars(DFA107_minS);
    static readonly char[] DFA107_max = DFA.UnpackEncodedStringToUnsignedChars(DFA107_maxS);
    static readonly short[] DFA107_accept = DFA.UnpackEncodedString(DFA107_acceptS);
    static readonly short[] DFA107_special = DFA.UnpackEncodedString(DFA107_specialS);
    static readonly short[][] DFA107_transition = DFA.UnpackEncodedStringArray(DFA107_transitionS);

    protected class DFA107 : DFA
    {
        public DFA107(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;

        }

        override public string Description
        {
            get { return "825:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );"; }
        }

    }

    const string DFA96_eotS =
        "\x33\uffff";
    const string DFA96_eofS =
        "\x33\uffff";
    const string DFA96_minS =
        "\x01\x05\x32\uffff";
    const string DFA96_maxS =
        "\x01\u00f0\x32\uffff";
    const string DFA96_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x2f\uffff";
    const string DFA96_specialS =
        "\x33\uffff}>";
    static readonly string[] DFA96_transitionS = {
            "\x01\x03\x04\uffff\x01\x03\x02\uffff\x02\x03\x02\uffff\x09"+
            "\x03\x01\uffff\x01\x03\x10\uffff\x01\x02\x01\x01\x01\uffff\x05"+
            "\x03\x08\uffff\x0c\x03\x01\uffff\x01\x03\x01\uffff\x01\x03\x62"+
            "\uffff\x01\x03\x01\uffff\x09\x03\x04\uffff\x01\x03\x10\uffff"+
            "\x01\x03\x1f\uffff\x03\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA96_eot = DFA.UnpackEncodedString(DFA96_eotS);
    static readonly short[] DFA96_eof = DFA.UnpackEncodedString(DFA96_eofS);
    static readonly char[] DFA96_min = DFA.UnpackEncodedStringToUnsignedChars(DFA96_minS);
    static readonly char[] DFA96_max = DFA.UnpackEncodedStringToUnsignedChars(DFA96_maxS);
    static readonly short[] DFA96_accept = DFA.UnpackEncodedString(DFA96_acceptS);
    static readonly short[] DFA96_special = DFA.UnpackEncodedString(DFA96_specialS);
    static readonly short[][] DFA96_transition = DFA.UnpackEncodedStringArray(DFA96_transitionS);

    protected class DFA96 : DFA
    {
        public DFA96(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;

        }

        override public string Description
        {
            get { return "826:17: ( ALL | DISTINCT )?"; }
        }

    }

    const string DFA97_eotS =
        "\x33\uffff";
    const string DFA97_eofS =
        "\x33\uffff";
    const string DFA97_minS =
        "\x01\x05\x32\uffff";
    const string DFA97_maxS =
        "\x01\u00f0\x32\uffff";
    const string DFA97_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x2f\uffff";
    const string DFA97_specialS =
        "\x33\uffff}>";
    static readonly string[] DFA97_transitionS = {
            "\x01\x03\x04\uffff\x01\x03\x02\uffff\x02\x03\x02\uffff\x09"+
            "\x03\x01\uffff\x01\x03\x10\uffff\x01\x02\x01\x01\x01\uffff\x05"+
            "\x03\x08\uffff\x0c\x03\x01\uffff\x01\x03\x01\uffff\x01\x03\x62"+
            "\uffff\x01\x03\x01\uffff\x09\x03\x04\uffff\x01\x03\x10\uffff"+
            "\x01\x03\x1f\uffff\x03\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA97_eot = DFA.UnpackEncodedString(DFA97_eotS);
    static readonly short[] DFA97_eof = DFA.UnpackEncodedString(DFA97_eofS);
    static readonly char[] DFA97_min = DFA.UnpackEncodedStringToUnsignedChars(DFA97_minS);
    static readonly char[] DFA97_max = DFA.UnpackEncodedStringToUnsignedChars(DFA97_maxS);
    static readonly short[] DFA97_accept = DFA.UnpackEncodedString(DFA97_acceptS);
    static readonly short[] DFA97_special = DFA.UnpackEncodedString(DFA97_specialS);
    static readonly short[][] DFA97_transition = DFA.UnpackEncodedStringArray(DFA97_transitionS);

    protected class DFA97 : DFA
    {
        public DFA97(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;

        }

        override public string Description
        {
            get { return "827:17: ( ALL | DISTINCT )?"; }
        }

    }

    const string DFA99_eotS =
        "\x34\uffff";
    const string DFA99_eofS =
        "\x34\uffff";
    const string DFA99_minS =
        "\x01\x05\x33\uffff";
    const string DFA99_maxS =
        "\x01\u00f0\x33\uffff";
    const string DFA99_acceptS =
        "\x01\uffff\x01\x01\x31\uffff\x01\x02";
    const string DFA99_specialS =
        "\x34\uffff}>";
    static readonly string[] DFA99_transitionS = {
            "\x01\x01\x04\uffff\x01\x01\x02\uffff\x02\x01\x02\uffff\x09"+
            "\x01\x01\uffff\x01\x01\x10\uffff\x02\x01\x01\uffff\x05\x01\x08"+
            "\uffff\x0c\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x62\uffff"+
            "\x01\x01\x01\uffff\x09\x01\x03\uffff\x01\x33\x01\x01\x10\uffff"+
            "\x01\x01\x1f\uffff\x03\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA99_eot = DFA.UnpackEncodedString(DFA99_eotS);
    static readonly short[] DFA99_eof = DFA.UnpackEncodedString(DFA99_eofS);
    static readonly char[] DFA99_min = DFA.UnpackEncodedStringToUnsignedChars(DFA99_minS);
    static readonly char[] DFA99_max = DFA.UnpackEncodedStringToUnsignedChars(DFA99_maxS);
    static readonly short[] DFA99_accept = DFA.UnpackEncodedString(DFA99_acceptS);
    static readonly short[] DFA99_special = DFA.UnpackEncodedString(DFA99_specialS);
    static readonly short[][] DFA99_transition = DFA.UnpackEncodedStringArray(DFA99_transitionS);

    protected class DFA99 : DFA
    {
        public DFA99(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;

        }

        override public string Description
        {
            get { return "829:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )"; }
        }

    }

    const string DFA98_eotS =
        "\x33\uffff";
    const string DFA98_eofS =
        "\x33\uffff";
    const string DFA98_minS =
        "\x01\x05\x32\uffff";
    const string DFA98_maxS =
        "\x01\u00f0\x32\uffff";
    const string DFA98_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x2f\uffff";
    const string DFA98_specialS =
        "\x33\uffff}>";
    static readonly string[] DFA98_transitionS = {
            "\x01\x03\x04\uffff\x01\x03\x02\uffff\x02\x03\x02\uffff\x09"+
            "\x03\x01\uffff\x01\x03\x10\uffff\x01\x02\x01\x01\x01\uffff\x05"+
            "\x03\x08\uffff\x0c\x03\x01\uffff\x01\x03\x01\uffff\x01\x03\x62"+
            "\uffff\x01\x03\x01\uffff\x09\x03\x04\uffff\x01\x03\x10\uffff"+
            "\x01\x03\x1f\uffff\x03\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA98_eot = DFA.UnpackEncodedString(DFA98_eotS);
    static readonly short[] DFA98_eof = DFA.UnpackEncodedString(DFA98_eofS);
    static readonly char[] DFA98_min = DFA.UnpackEncodedStringToUnsignedChars(DFA98_minS);
    static readonly char[] DFA98_max = DFA.UnpackEncodedStringToUnsignedChars(DFA98_maxS);
    static readonly short[] DFA98_accept = DFA.UnpackEncodedString(DFA98_acceptS);
    static readonly short[] DFA98_special = DFA.UnpackEncodedString(DFA98_specialS);
    static readonly short[][] DFA98_transition = DFA.UnpackEncodedStringArray(DFA98_transitionS);

    protected class DFA98 : DFA
    {
        public DFA98(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;

        }

        override public string Description
        {
            get { return "830:5: ( ALL | DISTINCT )?"; }
        }

    }

    const string DFA100_eotS =
        "\x33\uffff";
    const string DFA100_eofS =
        "\x33\uffff";
    const string DFA100_minS =
        "\x01\x05\x32\uffff";
    const string DFA100_maxS =
        "\x01\u00f0\x32\uffff";
    const string DFA100_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x2f\uffff";
    const string DFA100_specialS =
        "\x33\uffff}>";
    static readonly string[] DFA100_transitionS = {
            "\x01\x03\x04\uffff\x01\x03\x02\uffff\x02\x03\x02\uffff\x09"+
            "\x03\x01\uffff\x01\x03\x10\uffff\x01\x02\x01\x01\x01\uffff\x05"+
            "\x03\x08\uffff\x0c\x03\x01\uffff\x01\x03\x01\uffff\x01\x03\x62"+
            "\uffff\x01\x03\x01\uffff\x09\x03\x04\uffff\x01\x03\x10\uffff"+
            "\x01\x03\x1f\uffff\x03\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA100_eot = DFA.UnpackEncodedString(DFA100_eotS);
    static readonly short[] DFA100_eof = DFA.UnpackEncodedString(DFA100_eofS);
    static readonly char[] DFA100_min = DFA.UnpackEncodedStringToUnsignedChars(DFA100_minS);
    static readonly char[] DFA100_max = DFA.UnpackEncodedStringToUnsignedChars(DFA100_maxS);
    static readonly short[] DFA100_accept = DFA.UnpackEncodedString(DFA100_acceptS);
    static readonly short[] DFA100_special = DFA.UnpackEncodedString(DFA100_specialS);
    static readonly short[][] DFA100_transition = DFA.UnpackEncodedStringArray(DFA100_transitionS);

    protected class DFA100 : DFA
    {
        public DFA100(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;

        }

        override public string Description
        {
            get { return "835:20: ( ALL | DISTINCT )?"; }
        }

    }

    const string DFA101_eotS =
        "\x33\uffff";
    const string DFA101_eofS =
        "\x33\uffff";
    const string DFA101_minS =
        "\x01\x05\x32\uffff";
    const string DFA101_maxS =
        "\x01\u00f0\x32\uffff";
    const string DFA101_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x2f\uffff";
    const string DFA101_specialS =
        "\x33\uffff}>";
    static readonly string[] DFA101_transitionS = {
            "\x01\x03\x04\uffff\x01\x03\x02\uffff\x02\x03\x02\uffff\x09"+
            "\x03\x01\uffff\x01\x03\x10\uffff\x01\x02\x01\x01\x01\uffff\x05"+
            "\x03\x08\uffff\x0c\x03\x01\uffff\x01\x03\x01\uffff\x01\x03\x62"+
            "\uffff\x01\x03\x01\uffff\x09\x03\x04\uffff\x01\x03\x10\uffff"+
            "\x01\x03\x1f\uffff\x03\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA101_eot = DFA.UnpackEncodedString(DFA101_eotS);
    static readonly short[] DFA101_eof = DFA.UnpackEncodedString(DFA101_eofS);
    static readonly char[] DFA101_min = DFA.UnpackEncodedStringToUnsignedChars(DFA101_minS);
    static readonly char[] DFA101_max = DFA.UnpackEncodedStringToUnsignedChars(DFA101_maxS);
    static readonly short[] DFA101_accept = DFA.UnpackEncodedString(DFA101_acceptS);
    static readonly short[] DFA101_special = DFA.UnpackEncodedString(DFA101_specialS);
    static readonly short[][] DFA101_transition = DFA.UnpackEncodedStringArray(DFA101_transitionS);

    protected class DFA101 : DFA
    {
        public DFA101(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;

        }

        override public string Description
        {
            get { return "836:20: ( ALL | DISTINCT )?"; }
        }

    }

    const string DFA102_eotS =
        "\x33\uffff";
    const string DFA102_eofS =
        "\x33\uffff";
    const string DFA102_minS =
        "\x01\x05\x32\uffff";
    const string DFA102_maxS =
        "\x01\u00f0\x32\uffff";
    const string DFA102_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x2f\uffff";
    const string DFA102_specialS =
        "\x33\uffff}>";
    static readonly string[] DFA102_transitionS = {
            "\x01\x03\x04\uffff\x01\x03\x02\uffff\x02\x03\x02\uffff\x09"+
            "\x03\x01\uffff\x01\x03\x10\uffff\x01\x02\x01\x01\x01\uffff\x05"+
            "\x03\x08\uffff\x0c\x03\x01\uffff\x01\x03\x01\uffff\x01\x03\x62"+
            "\uffff\x01\x03\x01\uffff\x09\x03\x04\uffff\x01\x03\x10\uffff"+
            "\x01\x03\x1f\uffff\x03\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA102_eot = DFA.UnpackEncodedString(DFA102_eotS);
    static readonly short[] DFA102_eof = DFA.UnpackEncodedString(DFA102_eofS);
    static readonly char[] DFA102_min = DFA.UnpackEncodedStringToUnsignedChars(DFA102_minS);
    static readonly char[] DFA102_max = DFA.UnpackEncodedStringToUnsignedChars(DFA102_maxS);
    static readonly short[] DFA102_accept = DFA.UnpackEncodedString(DFA102_acceptS);
    static readonly short[] DFA102_special = DFA.UnpackEncodedString(DFA102_specialS);
    static readonly short[][] DFA102_transition = DFA.UnpackEncodedStringArray(DFA102_transitionS);

    protected class DFA102 : DFA
    {
        public DFA102(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;

        }

        override public string Description
        {
            get { return "837:20: ( ALL | DISTINCT )?"; }
        }

    }

    const string DFA106_eotS =
        "\x2d\uffff";
    const string DFA106_eofS =
        "\x01\x02\x2c\uffff";
    const string DFA106_minS =
        "\x01\x06\x2c\uffff";
    const string DFA106_maxS =
        "\x01\u00cf\x2c\uffff";
    const string DFA106_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x2a\uffff";
    const string DFA106_specialS =
        "\x2d\uffff}>";
    static readonly string[] DFA106_transitionS = {
            "\x08\x02\x02\uffff\x01\x02\x0c\uffff\x05\x02\x06\uffff\x01"+
            "\x02\x01\uffff\x02\x02\x02\uffff\x01\x02\x07\uffff\x03\x02\x7b"+
            "\uffff\x02\x02\x03\uffff\x02\x02\x01\uffff\x01\x02\x01\x01\x01"+
            "\x02\x01\uffff\x0e\x02\x01\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA106_eot = DFA.UnpackEncodedString(DFA106_eotS);
    static readonly short[] DFA106_eof = DFA.UnpackEncodedString(DFA106_eofS);
    static readonly char[] DFA106_min = DFA.UnpackEncodedStringToUnsignedChars(DFA106_minS);
    static readonly char[] DFA106_max = DFA.UnpackEncodedStringToUnsignedChars(DFA106_maxS);
    static readonly short[] DFA106_accept = DFA.UnpackEncodedString(DFA106_acceptS);
    static readonly short[] DFA106_special = DFA.UnpackEncodedString(DFA106_specialS);
    static readonly short[][] DFA106_transition = DFA.UnpackEncodedStringArray(DFA106_transitionS);

    protected class DFA106 : DFA
    {
        public DFA106(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;

        }

        override public string Description
        {
            get { return "846:23: ( LPAREN RPAREN )?"; }
        }

    }

    const string DFA111_eotS =
        "\u0292\uffff";
    const string DFA111_eofS =
        "\x01\uffff\x01\x3b\x05\uffff\x01\x6b\x01\u009b\u00d9\uffff\x01"+
        "\u01b6\x01\u01e5\x01\u0215\u01ad\uffff";
    const string DFA111_minS =
        "\x01\x05\x01\x06\x05\uffff\x02\x06\x16\uffff\x01\x05\x03\uffff"+
        "\x01\x05\x2d\uffff\x01\x05\x2d\uffff\x01\x05\x38\uffff\x02\x06\x28"+
        "\uffff\x03\x06\x24\uffff\x02\x06\x31\uffff\x02\x06\x3c\uffff\x01"+
        "\x00\x19\uffff\x01\x00\x05\uffff\x02\x00\x30\uffff\x01\x00\x2d\uffff"+
        "\x01\x00\x43\uffff\x01\x00\x19\uffff\x01\x00\x19\uffff\x01\x00\x19"+
        "\uffff\x01\x00\x05\uffff";
    const string DFA111_maxS =
        "\x01\u00b8\x01\u00d1\x05\uffff\x02\u00d1\x16\uffff\x01\u00f0\x03"+
        "\uffff\x01\u00b8\x2d\uffff\x01\u00f0\x2d\uffff\x01\u00f0\x38\uffff"+
        "\x02\u00cd\x28\uffff\x03\u00d1\x24\uffff\x02\u00cd\x31\uffff\x02"+
        "\u00cd\x3c\uffff\x01\x00\x19\uffff\x01\x00\x05\uffff\x02\x00\x30"+
        "\uffff\x01\x00\x2d\uffff\x01\x00\x43\uffff\x01\x00\x19\uffff\x01"+
        "\x00\x19\uffff\x01\x00\x19\uffff\x01\x00\x05\uffff";
    const string DFA111_acceptS =
        "\x02\uffff\x05\x01\x02\uffff\x16\x01\x01\uffff\x03\x01\x01\uffff"+
        "\x2d\x01\x01\uffff\x2d\x01\x01\uffff\x2f\x01\x01\x02\x35\uffff\x1b"+
        "\x01\u009c\uffff\x30\x01\x01\uffff\x2d\x01\x01\uffff\x2f\x01\x68"+
        "\uffff";
    const string DFA111_specialS =
        "\x01\x00\x01\x01\x05\uffff\x01\x02\x01\x03\x1a\uffff\x01\x04\u00be"+
        "\uffff\x01\x05\x01\x06\x01\x07\u0095\uffff\x01\x08\x19\uffff\x01"+
        "\x09\x05\uffff\x01\x0a\x01\x0b\x30\uffff\x01\x0c\x2d\uffff\x01\x0d"+
        "\x43\uffff\x01\x0e\x19\uffff\x01\x0f\x19\uffff\x01\x10\x19\uffff"+
        "\x01\x11\x05\uffff}>";
    static readonly string[] DFA111_transitionS = {
            "\x01\x1e\x04\uffff\x01\x03\x03\uffff\x01\x04\x02\uffff\x01"+
            "\x05\x01\x06\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c"+
            "\x01\x02\x15\uffff\x01\x0d\x01\x0e\x01\x0f\x01\x10\x01\x11\x08"+
            "\uffff\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16\x01\x17\x01\uffff"+
            "\x01\x18\x01\x19\x01\x1a\x01\x1b\x02\uffff\x01\x1c\x01\uffff"+
            "\x01\x1d\x6c\uffff\x01\x01",
            "\x01\x4a\x01\x4b\x01\x4c\x01\x4d\x01\x4e\x01\x36\x01\x35\x01"+
            "\x49\x02\uffff\x01\x3e\x0c\uffff\x01\x43\x01\x45\x01\x42\x01"+
            "\x44\x01\x3f\x06\uffff\x01\x2f\x01\uffff\x01\x37\x01\x38\x02"+
            "\uffff\x01\x39\x07\uffff\x01\x3a\x01\x40\x01\x41\x7a\uffff\x01"+
            "\x22\x01\x28\x01\x27\x03\uffff\x01\x3d\x01\x2e\x01\x23\x01\x24"+
            "\x01\x1f\x01\x3c\x01\x21\x01\x47\x01\x46\x01\x32\x01\x33\x01"+
            "\x34\x01\x30\x01\x31\x01\x2a\x01\x2b\x01\x2c\x01\x2d\x01\x29"+
            "\x01\x25\x01\x26\x01\uffff\x01\x48\x01\uffff\x01\x20",
            "",
            "",
            "",
            "",
            "",
            "\x01\x7a\x01\x7b\x01\x7c\x01\x7d\x01\x7e\x01\x66\x01\x65\x01"+
            "\x79\x02\uffff\x01\x6e\x0c\uffff\x01\x73\x01\x75\x01\x72\x01"+
            "\x74\x01\x6f\x06\uffff\x01\x5f\x01\uffff\x01\x67\x01\x68\x02"+
            "\uffff\x01\x69\x07\uffff\x01\x6a\x01\x70\x01\x71\x7a\uffff\x01"+
            "\x52\x01\x58\x01\x57\x03\uffff\x01\x6d\x01\x5e\x01\x53\x01\x54"+
            "\x01\x51\x01\x6c\x01\x50\x01\x77\x01\x76\x01\x62\x01\x63\x01"+
            "\x64\x01\x60\x01\x61\x01\x5a\x01\x5b\x01\x5c\x01\x5d\x01\x59"+
            "\x01\x55\x01\x56\x01\uffff\x01\x78\x01\uffff\x01\x4f",
            "\x01\u00aa\x01\u00ab\x01\u00ac\x01\u00ad\x01\u00ae\x01\u0096"+
            "\x01\u0095\x01\u00a9\x02\uffff\x01\u009e\x0c\uffff\x01\u00a3"+
            "\x01\u00a5\x01\u00a2\x01\u00a4\x01\u009f\x06\uffff\x01\u008f"+
            "\x01\uffff\x01\u0097\x01\u0098\x02\uffff\x01\u0099\x07\uffff"+
            "\x01\u009a\x01\u00a0\x01\u00a1\x7a\uffff\x01\u0082\x01\u0088"+
            "\x01\u0087\x03\uffff\x01\u009d\x01\u008e\x01\u0083\x01\u0084"+
            "\x01\x7f\x01\u009c\x01\u0081\x01\u00a7\x01\u00a6\x01\u0092\x01"+
            "\u0093\x01\u0094\x01\u0090\x01\u0091\x01\u008a\x01\u008b\x01"+
            "\u008c\x01\u008d\x01\u0089\x01\u0085\x01\u0086\x01\uffff\x01"+
            "\u00a8\x01\uffff\x01\u0080",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u00af\x04\uffff\x01\u00af\x02\uffff\x02\u00af\x02\uffff"+
            "\x09\u00af\x01\uffff\x01\u00af\x10\uffff\x02\u00af\x01\uffff"+
            "\x05\u00af\x08\uffff\x0c\u00af\x01\uffff\x01\u00af\x01\uffff"+
            "\x01\u00af\x62\uffff\x01\u00af\x01\uffff\x06\u00af\x01\u00b8"+
            "\x01\u00b9\x01\u00af\x04\uffff\x02\u00af\x0f\uffff\x01\u00af"+
            "\x1f\uffff\x03\u00af",
            "",
            "",
            "",
            "\x01\u00ff\x04\uffff\x01\u00e6\x03\uffff\x01\u00e7\x02\uffff"+
            "\x01\u00e8\x01\u00e9\x01\u00e3\x01\u00e4\x01\u00ea\x01\u00eb"+
            "\x01\u00ec\x01\u00ed\x01\u00e5\x15\uffff\x01\u00ee\x01\u00ef"+
            "\x01\u00f0\x01\u00f1\x01\u00f2\x08\uffff\x01\u00f3\x01\u00f4"+
            "\x01\u00f5\x01\u00f6\x01\u00f7\x01\u00f8\x01\uffff\x01\u00f9"+
            "\x01\u00fa\x01\u00fb\x01\u00fc\x02\uffff\x01\u00fd\x01\uffff"+
            "\x01\u00fe\x6c\uffff\x01\u00e2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u00af\x04\uffff\x01\u00af\x02\uffff\x02\u00af\x02\uffff"+
            "\x09\u00af\x01\uffff\x01\u00af\x10\uffff\x02\u00af\x01\uffff"+
            "\x05\u00af\x08\uffff\x0c\u00af\x01\uffff\x01\u00af\x01\uffff"+
            "\x01\u00af\x62\uffff\x01\u00af\x01\uffff\x06\u00af\x01\u0109"+
            "\x01\u010a\x01\u00af\x04\uffff\x02\u00af\x0f\uffff\x01\u00af"+
            "\x1f\uffff\x03\u00af",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u00af\x04\uffff\x01\u00af\x02\uffff\x02\u00af\x02\uffff"+
            "\x09\u00af\x01\uffff\x01\u00af\x10\uffff\x02\u00af\x01\uffff"+
            "\x05\u00af\x08\uffff\x0c\u00af\x01\uffff\x01\u00af\x01\uffff"+
            "\x01\u00af\x62\uffff\x01\u00af\x01\uffff\x06\u00af\x01\u013c"+
            "\x01\u013d\x01\u00af\x04\uffff\x02\u00af\x0f\uffff\x01\u00af"+
            "\x1f\uffff\x03\u00af",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x04\u00af\x01\uffff\x03\u00af\x1a\uffff\x01\u00af\u008b\uffff"+
            "\x02\u00af\x03\uffff\x02\u00af\x01\uffff\x01\u00af\x01\uffff"+
            "\x01\u017a\x03\uffff\x0c\u00af",
            "\x04\u00af\x01\uffff\x03\u00af\x1a\uffff\x01\u00af\u008b\uffff"+
            "\x02\u00af\x03\uffff\x02\u00af\x01\uffff\x01\u00af\x01\uffff"+
            "\x01\u0194\x03\uffff\x0c\u00af",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\u01c5\x01\u01c6\x01\u01c7\x01\u01c8\x01\u01c9\x01\u01b1"+
            "\x01\u01b0\x01\u01c4\x02\uffff\x01\u01b9\x0c\uffff\x01\u01be"+
            "\x01\u01c0\x01\u01bd\x01\u01bf\x01\u01ba\x06\uffff\x01\u01aa"+
            "\x01\uffff\x01\u01b2\x01\u01b3\x02\uffff\x01\u01b4\x07\uffff"+
            "\x01\u01b5\x01\u01bb\x01\u01bc\x7a\uffff\x01\u019e\x01\u01a3"+
            "\x01\u01a2\x03\uffff\x01\u01b8\x01\u01a9\x01\u019b\x01\u019f"+
            "\x01\u019a\x01\u01b7\x01\u019d\x01\u01c2\x01\u01c1\x01\u01ad"+
            "\x01\u01ae\x01\u01af\x01\u01ab\x01\u01ac\x01\u01a5\x01\u01a6"+
            "\x01\u01a7\x01\u01a8\x01\u01a4\x01\u01a0\x01\u01a1\x01\uffff"+
            "\x01\u01c3\x01\uffff\x01\u019c",
            "\x01\u01f4\x01\u01f5\x01\u01f6\x01\u01f7\x01\u01f8\x01\u01e0"+
            "\x01\u01df\x01\u01f3\x02\uffff\x01\u01e8\x0c\uffff\x01\u01ed"+
            "\x01\u01ef\x01\u01ec\x01\u01ee\x01\u01e9\x06\uffff\x01\u01d9"+
            "\x01\uffff\x01\u01e1\x01\u01e2\x02\uffff\x01\u01e3\x07\uffff"+
            "\x01\u01e4\x01\u01ea\x01\u01eb\x7a\uffff\x01\u01cd\x01\u01d2"+
            "\x01\u01d1\x03\uffff\x01\u01e7\x01\u01d8\x01\u01f9\x01\u01ce"+
            "\x01\u01cc\x01\u01e6\x01\u01cb\x01\u01f1\x01\u01f0\x01\u01dc"+
            "\x01\u01dd\x01\u01de\x01\u01da\x01\u01db\x01\u01d4\x01\u01d5"+
            "\x01\u01d6\x01\u01d7\x01\u01d3\x01\u01cf\x01\u01d0\x01\uffff"+
            "\x01\u01f2\x01\uffff\x01\u01ca",
            "\x01\u0224\x01\u0225\x01\u0226\x01\u0227\x01\u0228\x01\u0210"+
            "\x01\u020f\x01\u0223\x02\uffff\x01\u0218\x0c\uffff\x01\u021d"+
            "\x01\u021f\x01\u021c\x01\u021e\x01\u0219\x06\uffff\x01\u0209"+
            "\x01\uffff\x01\u0211\x01\u0212\x02\uffff\x01\u0213\x07\uffff"+
            "\x01\u0214\x01\u021a\x01\u021b\x7a\uffff\x01\u01fd\x01\u0202"+
            "\x01\u0201\x03\uffff\x01\u0217\x01\u0208\x01\u0229\x01\u01fe"+
            "\x01\u01fa\x01\u0216\x01\u01fc\x01\u0221\x01\u0220\x01\u020c"+
            "\x01\u020d\x01\u020e\x01\u020a\x01\u020b\x01\u0204\x01\u0205"+
            "\x01\u0206\x01\u0207\x01\u0203\x01\u01ff\x01\u0200\x01\uffff"+
            "\x01\u0222\x01\uffff\x01\u01fb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x04\u00af\x01\uffff\x03\u00af\x1a\uffff\x01\u00af\u008b\uffff"+
            "\x02\u00af\x03\uffff\x02\u00af\x01\uffff\x01\u00af\x01\uffff"+
            "\x01\u023e\x03\uffff\x0c\u00af",
            "\x04\u00af\x01\uffff\x03\u00af\x1a\uffff\x01\u00af\u008b\uffff"+
            "\x02\u00af\x03\uffff\x02\u00af\x01\uffff\x01\u00af\x01\uffff"+
            "\x01\u0258\x03\uffff\x0c\u00af",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x04\u00af\x01\uffff\x03\u00af\x1a\uffff\x01\u00af\u008b\uffff"+
            "\x02\u00af\x03\uffff\x02\u00af\x01\uffff\x01\u00af\x01\uffff"+
            "\x01\u0272\x03\uffff\x0c\u00af",
            "\x04\u00af\x01\uffff\x03\u00af\x1a\uffff\x01\u00af\u008b\uffff"+
            "\x02\u00af\x03\uffff\x02\u00af\x01\uffff\x01\u00af\x01\uffff"+
            "\x01\u028c\x03\uffff\x0c\u00af",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA111_eot = DFA.UnpackEncodedString(DFA111_eotS);
    static readonly short[] DFA111_eof = DFA.UnpackEncodedString(DFA111_eofS);
    static readonly char[] DFA111_min = DFA.UnpackEncodedStringToUnsignedChars(DFA111_minS);
    static readonly char[] DFA111_max = DFA.UnpackEncodedStringToUnsignedChars(DFA111_maxS);
    static readonly short[] DFA111_accept = DFA.UnpackEncodedString(DFA111_acceptS);
    static readonly short[] DFA111_special = DFA.UnpackEncodedString(DFA111_specialS);
    static readonly short[][] DFA111_transition = DFA.UnpackEncodedStringArray(DFA111_transitionS);

    protected class DFA111 : DFA
    {
        public DFA111(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;

        }

        override public string Description
        {
            get { return "853:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );"; }
        }

    }


    protected internal int DFA111_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA111_0 = input.LA(1);

                   	 
                   	int index111_0 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA111_0 == IDENT) ) { s = 1; }

                   	else if ( (LA111_0 == COUNT) && (synpred4_EsperEPL2Grammar()) ) { s = 2; }

                   	else if ( (LA111_0 == ESCAPE) && (synpred4_EsperEPL2Grammar()) ) { s = 3; }

                   	else if ( (LA111_0 == EVERY_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 4; }

                   	else if ( (LA111_0 == SUM) && (synpred4_EsperEPL2Grammar()) ) { s = 5; }

                   	else if ( (LA111_0 == AVG) && (synpred4_EsperEPL2Grammar()) ) { s = 6; }

                   	else if ( (LA111_0 == MAX) ) { s = 7; }

                   	else if ( (LA111_0 == MIN) ) { s = 8; }

                   	else if ( (LA111_0 == COALESCE) && (synpred4_EsperEPL2Grammar()) ) { s = 9; }

                   	else if ( (LA111_0 == MEDIAN) && (synpred4_EsperEPL2Grammar()) ) { s = 10; }

                   	else if ( (LA111_0 == STDDEV) && (synpred4_EsperEPL2Grammar()) ) { s = 11; }

                   	else if ( (LA111_0 == AVEDEV) && (synpred4_EsperEPL2Grammar()) ) { s = 12; }

                   	else if ( (LA111_0 == EVENTS) && (synpred4_EsperEPL2Grammar()) ) { s = 13; }

                   	else if ( (LA111_0 == SECONDS) && (synpred4_EsperEPL2Grammar()) ) { s = 14; }

                   	else if ( (LA111_0 == MINUTES) && (synpred4_EsperEPL2Grammar()) ) { s = 15; }

                   	else if ( (LA111_0 == FIRST) && (synpred4_EsperEPL2Grammar()) ) { s = 16; }

                   	else if ( (LA111_0 == LAST) && (synpred4_EsperEPL2Grammar()) ) { s = 17; }

                   	else if ( (LA111_0 == UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar()) ) { s = 18; }

                   	else if ( (LA111_0 == PATTERN) && (synpred4_EsperEPL2Grammar()) ) { s = 19; }

                   	else if ( (LA111_0 == SQL) && (synpred4_EsperEPL2Grammar()) ) { s = 20; }

                   	else if ( (LA111_0 == METADATASQL) && (synpred4_EsperEPL2Grammar()) ) { s = 21; }

                   	else if ( (LA111_0 == PREVIOUS) && (synpred4_EsperEPL2Grammar()) ) { s = 22; }

                   	else if ( (LA111_0 == PRIOR) && (synpred4_EsperEPL2Grammar()) ) { s = 23; }

                   	else if ( (LA111_0 == WEEKDAY) && (synpred4_EsperEPL2Grammar()) ) { s = 24; }

                   	else if ( (LA111_0 == LW) && (synpred4_EsperEPL2Grammar()) ) { s = 25; }

                   	else if ( (LA111_0 == INSTANCEOF) && (synpred4_EsperEPL2Grammar()) ) { s = 26; }

                   	else if ( (LA111_0 == CAST) && (synpred4_EsperEPL2Grammar()) ) { s = 27; }

                   	else if ( (LA111_0 == SNAPSHOT) && (synpred4_EsperEPL2Grammar()) ) { s = 28; }

                   	else if ( (LA111_0 == VARIABLE) && (synpred4_EsperEPL2Grammar()) ) { s = 29; }

                   	else if ( (LA111_0 == WINDOW) && (synpred4_EsperEPL2Grammar()) ) { s = 30; }

                   	 
                   	input.Seek(index111_0);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA111_1 = input.LA(1);

                   	 
                   	int index111_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA111_1 == LPAREN) ) { s = 31; }

                   	else if ( (LA111_1 == ESCAPECHAR) && (synpred4_EsperEPL2Grammar()) ) { s = 32; }

                   	else if ( (LA111_1 == LBRACK) && (synpred4_EsperEPL2Grammar()) ) { s = 33; }

                   	else if ( (LA111_1 == QUESTION) && (synpred4_EsperEPL2Grammar()) ) { s = 34; }

                   	else if ( (LA111_1 == DOT) ) { s = 35; }

                   	else if ( (LA111_1 == STAR) && (synpred4_EsperEPL2Grammar()) ) { s = 36; }

                   	else if ( (LA111_1 == DIV) && (synpred4_EsperEPL2Grammar()) ) { s = 37; }

                   	else if ( (LA111_1 == MOD) && (synpred4_EsperEPL2Grammar()) ) { s = 38; }

                   	else if ( (LA111_1 == PLUS) && (synpred4_EsperEPL2Grammar()) ) { s = 39; }

                   	else if ( (LA111_1 == MINUS) && (synpred4_EsperEPL2Grammar()) ) { s = 40; }

                   	else if ( (LA111_1 == LOR) && (synpred4_EsperEPL2Grammar()) ) { s = 41; }

                   	else if ( (LA111_1 == LT) && (synpred4_EsperEPL2Grammar()) ) { s = 42; }

                   	else if ( (LA111_1 == GT) && (synpred4_EsperEPL2Grammar()) ) { s = 43; }

                   	else if ( (LA111_1 == LE) && (synpred4_EsperEPL2Grammar()) ) { s = 44; }

                   	else if ( (LA111_1 == GE) && (synpred4_EsperEPL2Grammar()) ) { s = 45; }

                   	else if ( (LA111_1 == EQUALS) && (synpred4_EsperEPL2Grammar()) ) { s = 46; }

                   	else if ( (LA111_1 == IS) && (synpred4_EsperEPL2Grammar()) ) { s = 47; }

                   	else if ( (LA111_1 == SQL_NE) && (synpred4_EsperEPL2Grammar()) ) { s = 48; }

                   	else if ( (LA111_1 == NOT_EQUAL) && (synpred4_EsperEPL2Grammar()) ) { s = 49; }

                   	else if ( (LA111_1 == BAND) && (synpred4_EsperEPL2Grammar()) ) { s = 50; }

                   	else if ( (LA111_1 == BOR) && (synpred4_EsperEPL2Grammar()) ) { s = 51; }

                   	else if ( (LA111_1 == BXOR) && (synpred4_EsperEPL2Grammar()) ) { s = 52; }

                   	else if ( (LA111_1 == AND_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 53; }

                   	else if ( (LA111_1 == OR_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 54; }

                   	else if ( (LA111_1 == GROUP) && (synpred4_EsperEPL2Grammar()) ) { s = 55; }

                   	else if ( (LA111_1 == HAVING) && (synpred4_EsperEPL2Grammar()) ) { s = 56; }

                   	else if ( (LA111_1 == OUTPUT) && (synpred4_EsperEPL2Grammar()) ) { s = 57; }

                   	else if ( (LA111_1 == ORDER) && (synpred4_EsperEPL2Grammar()) ) { s = 58; }

                   	else if ( (LA111_1 == EOF) && (synpred4_EsperEPL2Grammar()) ) { s = 59; }

                   	else if ( (LA111_1 == RPAREN) && (synpred4_EsperEPL2Grammar()) ) { s = 60; }

                   	else if ( (LA111_1 == COMMA) && (synpred4_EsperEPL2Grammar()) ) { s = 61; }

                   	else if ( (LA111_1 == AS) && (synpred4_EsperEPL2Grammar()) ) { s = 62; }

                   	else if ( (LA111_1 == FROM) && (synpred4_EsperEPL2Grammar()) ) { s = 63; }

                   	else if ( (LA111_1 == ASC) && (synpred4_EsperEPL2Grammar()) ) { s = 64; }

                   	else if ( (LA111_1 == DESC) && (synpred4_EsperEPL2Grammar()) ) { s = 65; }

                   	else if ( (LA111_1 == THEN) && (synpred4_EsperEPL2Grammar()) ) { s = 66; }

                   	else if ( (LA111_1 == ELSE) && (synpred4_EsperEPL2Grammar()) ) { s = 67; }

                   	else if ( (LA111_1 == END) && (synpred4_EsperEPL2Grammar()) ) { s = 68; }

                   	else if ( (LA111_1 == WHEN) && (synpred4_EsperEPL2Grammar()) ) { s = 69; }

                   	else if ( (LA111_1 == COLON) && (synpred4_EsperEPL2Grammar()) ) { s = 70; }

                   	else if ( (LA111_1 == RBRACK) && (synpred4_EsperEPL2Grammar()) ) { s = 71; }

                   	else if ( (LA111_1 == RCURLY) && (synpred4_EsperEPL2Grammar()) ) { s = 72; }

                   	else if ( (LA111_1 == NOT_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 73; }

                   	else if ( (LA111_1 == IN_SET) && (synpred4_EsperEPL2Grammar()) ) { s = 74; }

                   	else if ( (LA111_1 == BETWEEN) && (synpred4_EsperEPL2Grammar()) ) { s = 75; }

                   	else if ( (LA111_1 == LIKE) && (synpred4_EsperEPL2Grammar()) ) { s = 76; }

                   	else if ( (LA111_1 == REGEXP) && (synpred4_EsperEPL2Grammar()) ) { s = 77; }

                   	else if ( (LA111_1 == ESCAPE) && (synpred4_EsperEPL2Grammar()) ) { s = 78; }

                   	 
                   	input.Seek(index111_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA111_7 = input.LA(1);

                   	 
                   	int index111_7 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA111_7 == ESCAPECHAR) && (synpred4_EsperEPL2Grammar()) ) { s = 79; }

                   	else if ( (LA111_7 == LBRACK) && (synpred4_EsperEPL2Grammar()) ) { s = 80; }

                   	else if ( (LA111_7 == LPAREN) ) { s = 81; }

                   	else if ( (LA111_7 == QUESTION) && (synpred4_EsperEPL2Grammar()) ) { s = 82; }

                   	else if ( (LA111_7 == DOT) && (synpred4_EsperEPL2Grammar()) ) { s = 83; }

                   	else if ( (LA111_7 == STAR) && (synpred4_EsperEPL2Grammar()) ) { s = 84; }

                   	else if ( (LA111_7 == DIV) && (synpred4_EsperEPL2Grammar()) ) { s = 85; }

                   	else if ( (LA111_7 == MOD) && (synpred4_EsperEPL2Grammar()) ) { s = 86; }

                   	else if ( (LA111_7 == PLUS) && (synpred4_EsperEPL2Grammar()) ) { s = 87; }

                   	else if ( (LA111_7 == MINUS) && (synpred4_EsperEPL2Grammar()) ) { s = 88; }

                   	else if ( (LA111_7 == LOR) && (synpred4_EsperEPL2Grammar()) ) { s = 89; }

                   	else if ( (LA111_7 == LT) && (synpred4_EsperEPL2Grammar()) ) { s = 90; }

                   	else if ( (LA111_7 == GT) && (synpred4_EsperEPL2Grammar()) ) { s = 91; }

                   	else if ( (LA111_7 == LE) && (synpred4_EsperEPL2Grammar()) ) { s = 92; }

                   	else if ( (LA111_7 == GE) && (synpred4_EsperEPL2Grammar()) ) { s = 93; }

                   	else if ( (LA111_7 == EQUALS) && (synpred4_EsperEPL2Grammar()) ) { s = 94; }

                   	else if ( (LA111_7 == IS) && (synpred4_EsperEPL2Grammar()) ) { s = 95; }

                   	else if ( (LA111_7 == SQL_NE) && (synpred4_EsperEPL2Grammar()) ) { s = 96; }

                   	else if ( (LA111_7 == NOT_EQUAL) && (synpred4_EsperEPL2Grammar()) ) { s = 97; }

                   	else if ( (LA111_7 == BAND) && (synpred4_EsperEPL2Grammar()) ) { s = 98; }

                   	else if ( (LA111_7 == BOR) && (synpred4_EsperEPL2Grammar()) ) { s = 99; }

                   	else if ( (LA111_7 == BXOR) && (synpred4_EsperEPL2Grammar()) ) { s = 100; }

                   	else if ( (LA111_7 == AND_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 101; }

                   	else if ( (LA111_7 == OR_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 102; }

                   	else if ( (LA111_7 == GROUP) && (synpred4_EsperEPL2Grammar()) ) { s = 103; }

                   	else if ( (LA111_7 == HAVING) && (synpred4_EsperEPL2Grammar()) ) { s = 104; }

                   	else if ( (LA111_7 == OUTPUT) && (synpred4_EsperEPL2Grammar()) ) { s = 105; }

                   	else if ( (LA111_7 == ORDER) && (synpred4_EsperEPL2Grammar()) ) { s = 106; }

                   	else if ( (LA111_7 == EOF) && (synpred4_EsperEPL2Grammar()) ) { s = 107; }

                   	else if ( (LA111_7 == RPAREN) && (synpred4_EsperEPL2Grammar()) ) { s = 108; }

                   	else if ( (LA111_7 == COMMA) && (synpred4_EsperEPL2Grammar()) ) { s = 109; }

                   	else if ( (LA111_7 == AS) && (synpred4_EsperEPL2Grammar()) ) { s = 110; }

                   	else if ( (LA111_7 == FROM) && (synpred4_EsperEPL2Grammar()) ) { s = 111; }

                   	else if ( (LA111_7 == ASC) && (synpred4_EsperEPL2Grammar()) ) { s = 112; }

                   	else if ( (LA111_7 == DESC) && (synpred4_EsperEPL2Grammar()) ) { s = 113; }

                   	else if ( (LA111_7 == THEN) && (synpred4_EsperEPL2Grammar()) ) { s = 114; }

                   	else if ( (LA111_7 == ELSE) && (synpred4_EsperEPL2Grammar()) ) { s = 115; }

                   	else if ( (LA111_7 == END) && (synpred4_EsperEPL2Grammar()) ) { s = 116; }

                   	else if ( (LA111_7 == WHEN) && (synpred4_EsperEPL2Grammar()) ) { s = 117; }

                   	else if ( (LA111_7 == COLON) && (synpred4_EsperEPL2Grammar()) ) { s = 118; }

                   	else if ( (LA111_7 == RBRACK) && (synpred4_EsperEPL2Grammar()) ) { s = 119; }

                   	else if ( (LA111_7 == RCURLY) && (synpred4_EsperEPL2Grammar()) ) { s = 120; }

                   	else if ( (LA111_7 == NOT_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 121; }

                   	else if ( (LA111_7 == IN_SET) && (synpred4_EsperEPL2Grammar()) ) { s = 122; }

                   	else if ( (LA111_7 == BETWEEN) && (synpred4_EsperEPL2Grammar()) ) { s = 123; }

                   	else if ( (LA111_7 == LIKE) && (synpred4_EsperEPL2Grammar()) ) { s = 124; }

                   	else if ( (LA111_7 == REGEXP) && (synpred4_EsperEPL2Grammar()) ) { s = 125; }

                   	else if ( (LA111_7 == ESCAPE) && (synpred4_EsperEPL2Grammar()) ) { s = 126; }

                   	 
                   	input.Seek(index111_7);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA111_8 = input.LA(1);

                   	 
                   	int index111_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA111_8 == LPAREN) ) { s = 127; }

                   	else if ( (LA111_8 == ESCAPECHAR) && (synpred4_EsperEPL2Grammar()) ) { s = 128; }

                   	else if ( (LA111_8 == LBRACK) && (synpred4_EsperEPL2Grammar()) ) { s = 129; }

                   	else if ( (LA111_8 == QUESTION) && (synpred4_EsperEPL2Grammar()) ) { s = 130; }

                   	else if ( (LA111_8 == DOT) && (synpred4_EsperEPL2Grammar()) ) { s = 131; }

                   	else if ( (LA111_8 == STAR) && (synpred4_EsperEPL2Grammar()) ) { s = 132; }

                   	else if ( (LA111_8 == DIV) && (synpred4_EsperEPL2Grammar()) ) { s = 133; }

                   	else if ( (LA111_8 == MOD) && (synpred4_EsperEPL2Grammar()) ) { s = 134; }

                   	else if ( (LA111_8 == PLUS) && (synpred4_EsperEPL2Grammar()) ) { s = 135; }

                   	else if ( (LA111_8 == MINUS) && (synpred4_EsperEPL2Grammar()) ) { s = 136; }

                   	else if ( (LA111_8 == LOR) && (synpred4_EsperEPL2Grammar()) ) { s = 137; }

                   	else if ( (LA111_8 == LT) && (synpred4_EsperEPL2Grammar()) ) { s = 138; }

                   	else if ( (LA111_8 == GT) && (synpred4_EsperEPL2Grammar()) ) { s = 139; }

                   	else if ( (LA111_8 == LE) && (synpred4_EsperEPL2Grammar()) ) { s = 140; }

                   	else if ( (LA111_8 == GE) && (synpred4_EsperEPL2Grammar()) ) { s = 141; }

                   	else if ( (LA111_8 == EQUALS) && (synpred4_EsperEPL2Grammar()) ) { s = 142; }

                   	else if ( (LA111_8 == IS) && (synpred4_EsperEPL2Grammar()) ) { s = 143; }

                   	else if ( (LA111_8 == SQL_NE) && (synpred4_EsperEPL2Grammar()) ) { s = 144; }

                   	else if ( (LA111_8 == NOT_EQUAL) && (synpred4_EsperEPL2Grammar()) ) { s = 145; }

                   	else if ( (LA111_8 == BAND) && (synpred4_EsperEPL2Grammar()) ) { s = 146; }

                   	else if ( (LA111_8 == BOR) && (synpred4_EsperEPL2Grammar()) ) { s = 147; }

                   	else if ( (LA111_8 == BXOR) && (synpred4_EsperEPL2Grammar()) ) { s = 148; }

                   	else if ( (LA111_8 == AND_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 149; }

                   	else if ( (LA111_8 == OR_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 150; }

                   	else if ( (LA111_8 == GROUP) && (synpred4_EsperEPL2Grammar()) ) { s = 151; }

                   	else if ( (LA111_8 == HAVING) && (synpred4_EsperEPL2Grammar()) ) { s = 152; }

                   	else if ( (LA111_8 == OUTPUT) && (synpred4_EsperEPL2Grammar()) ) { s = 153; }

                   	else if ( (LA111_8 == ORDER) && (synpred4_EsperEPL2Grammar()) ) { s = 154; }

                   	else if ( (LA111_8 == EOF) && (synpred4_EsperEPL2Grammar()) ) { s = 155; }

                   	else if ( (LA111_8 == RPAREN) && (synpred4_EsperEPL2Grammar()) ) { s = 156; }

                   	else if ( (LA111_8 == COMMA) && (synpred4_EsperEPL2Grammar()) ) { s = 157; }

                   	else if ( (LA111_8 == AS) && (synpred4_EsperEPL2Grammar()) ) { s = 158; }

                   	else if ( (LA111_8 == FROM) && (synpred4_EsperEPL2Grammar()) ) { s = 159; }

                   	else if ( (LA111_8 == ASC) && (synpred4_EsperEPL2Grammar()) ) { s = 160; }

                   	else if ( (LA111_8 == DESC) && (synpred4_EsperEPL2Grammar()) ) { s = 161; }

                   	else if ( (LA111_8 == THEN) && (synpred4_EsperEPL2Grammar()) ) { s = 162; }

                   	else if ( (LA111_8 == ELSE) && (synpred4_EsperEPL2Grammar()) ) { s = 163; }

                   	else if ( (LA111_8 == END) && (synpred4_EsperEPL2Grammar()) ) { s = 164; }

                   	else if ( (LA111_8 == WHEN) && (synpred4_EsperEPL2Grammar()) ) { s = 165; }

                   	else if ( (LA111_8 == COLON) && (synpred4_EsperEPL2Grammar()) ) { s = 166; }

                   	else if ( (LA111_8 == RBRACK) && (synpred4_EsperEPL2Grammar()) ) { s = 167; }

                   	else if ( (LA111_8 == RCURLY) && (synpred4_EsperEPL2Grammar()) ) { s = 168; }

                   	else if ( (LA111_8 == NOT_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 169; }

                   	else if ( (LA111_8 == IN_SET) && (synpred4_EsperEPL2Grammar()) ) { s = 170; }

                   	else if ( (LA111_8 == BETWEEN) && (synpred4_EsperEPL2Grammar()) ) { s = 171; }

                   	else if ( (LA111_8 == LIKE) && (synpred4_EsperEPL2Grammar()) ) { s = 172; }

                   	else if ( (LA111_8 == REGEXP) && (synpred4_EsperEPL2Grammar()) ) { s = 173; }

                   	else if ( (LA111_8 == ESCAPE) && (synpred4_EsperEPL2Grammar()) ) { s = 174; }

                   	 
                   	input.Seek(index111_8);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA111_35 = input.LA(1);

                   	 
                   	int index111_35 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA111_35 == IDENT) ) { s = 226; }

                   	else if ( (LA111_35 == MAX) ) { s = 227; }

                   	else if ( (LA111_35 == MIN) ) { s = 228; }

                   	else if ( (LA111_35 == COUNT) && (synpred4_EsperEPL2Grammar()) ) { s = 229; }

                   	else if ( (LA111_35 == ESCAPE) && (synpred4_EsperEPL2Grammar()) ) { s = 230; }

                   	else if ( (LA111_35 == EVERY_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 231; }

                   	else if ( (LA111_35 == SUM) && (synpred4_EsperEPL2Grammar()) ) { s = 232; }

                   	else if ( (LA111_35 == AVG) && (synpred4_EsperEPL2Grammar()) ) { s = 233; }

                   	else if ( (LA111_35 == COALESCE) && (synpred4_EsperEPL2Grammar()) ) { s = 234; }

                   	else if ( (LA111_35 == MEDIAN) && (synpred4_EsperEPL2Grammar()) ) { s = 235; }

                   	else if ( (LA111_35 == STDDEV) && (synpred4_EsperEPL2Grammar()) ) { s = 236; }

                   	else if ( (LA111_35 == AVEDEV) && (synpred4_EsperEPL2Grammar()) ) { s = 237; }

                   	else if ( (LA111_35 == EVENTS) && (synpred4_EsperEPL2Grammar()) ) { s = 238; }

                   	else if ( (LA111_35 == SECONDS) && (synpred4_EsperEPL2Grammar()) ) { s = 239; }

                   	else if ( (LA111_35 == MINUTES) && (synpred4_EsperEPL2Grammar()) ) { s = 240; }

                   	else if ( (LA111_35 == FIRST) && (synpred4_EsperEPL2Grammar()) ) { s = 241; }

                   	else if ( (LA111_35 == LAST) && (synpred4_EsperEPL2Grammar()) ) { s = 242; }

                   	else if ( (LA111_35 == UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar()) ) { s = 243; }

                   	else if ( (LA111_35 == PATTERN) && (synpred4_EsperEPL2Grammar()) ) { s = 244; }

                   	else if ( (LA111_35 == SQL) && (synpred4_EsperEPL2Grammar()) ) { s = 245; }

                   	else if ( (LA111_35 == METADATASQL) && (synpred4_EsperEPL2Grammar()) ) { s = 246; }

                   	else if ( (LA111_35 == PREVIOUS) && (synpred4_EsperEPL2Grammar()) ) { s = 247; }

                   	else if ( (LA111_35 == PRIOR) && (synpred4_EsperEPL2Grammar()) ) { s = 248; }

                   	else if ( (LA111_35 == WEEKDAY) && (synpred4_EsperEPL2Grammar()) ) { s = 249; }

                   	else if ( (LA111_35 == LW) && (synpred4_EsperEPL2Grammar()) ) { s = 250; }

                   	else if ( (LA111_35 == INSTANCEOF) && (synpred4_EsperEPL2Grammar()) ) { s = 251; }

                   	else if ( (LA111_35 == CAST) && (synpred4_EsperEPL2Grammar()) ) { s = 252; }

                   	else if ( (LA111_35 == SNAPSHOT) && (synpred4_EsperEPL2Grammar()) ) { s = 253; }

                   	else if ( (LA111_35 == VARIABLE) && (synpred4_EsperEPL2Grammar()) ) { s = 254; }

                   	else if ( (LA111_35 == WINDOW) && (synpred4_EsperEPL2Grammar()) ) { s = 255; }

                   	 
                   	input.Seek(index111_35);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA111_226 = input.LA(1);

                   	 
                   	int index111_226 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA111_226 == LPAREN) ) { s = 410; }

                   	else if ( (LA111_226 == DOT) ) { s = 411; }

                   	else if ( (LA111_226 == ESCAPECHAR) && (synpred4_EsperEPL2Grammar()) ) { s = 412; }

                   	else if ( (LA111_226 == LBRACK) && (synpred4_EsperEPL2Grammar()) ) { s = 413; }

                   	else if ( (LA111_226 == QUESTION) && (synpred4_EsperEPL2Grammar()) ) { s = 414; }

                   	else if ( (LA111_226 == STAR) && (synpred4_EsperEPL2Grammar()) ) { s = 415; }

                   	else if ( (LA111_226 == DIV) && (synpred4_EsperEPL2Grammar()) ) { s = 416; }

                   	else if ( (LA111_226 == MOD) && (synpred4_EsperEPL2Grammar()) ) { s = 417; }

                   	else if ( (LA111_226 == PLUS) && (synpred4_EsperEPL2Grammar()) ) { s = 418; }

                   	else if ( (LA111_226 == MINUS) && (synpred4_EsperEPL2Grammar()) ) { s = 419; }

                   	else if ( (LA111_226 == LOR) && (synpred4_EsperEPL2Grammar()) ) { s = 420; }

                   	else if ( (LA111_226 == LT) && (synpred4_EsperEPL2Grammar()) ) { s = 421; }

                   	else if ( (LA111_226 == GT) && (synpred4_EsperEPL2Grammar()) ) { s = 422; }

                   	else if ( (LA111_226 == LE) && (synpred4_EsperEPL2Grammar()) ) { s = 423; }

                   	else if ( (LA111_226 == GE) && (synpred4_EsperEPL2Grammar()) ) { s = 424; }

                   	else if ( (LA111_226 == EQUALS) && (synpred4_EsperEPL2Grammar()) ) { s = 425; }

                   	else if ( (LA111_226 == IS) && (synpred4_EsperEPL2Grammar()) ) { s = 426; }

                   	else if ( (LA111_226 == SQL_NE) && (synpred4_EsperEPL2Grammar()) ) { s = 427; }

                   	else if ( (LA111_226 == NOT_EQUAL) && (synpred4_EsperEPL2Grammar()) ) { s = 428; }

                   	else if ( (LA111_226 == BAND) && (synpred4_EsperEPL2Grammar()) ) { s = 429; }

                   	else if ( (LA111_226 == BOR) && (synpred4_EsperEPL2Grammar()) ) { s = 430; }

                   	else if ( (LA111_226 == BXOR) && (synpred4_EsperEPL2Grammar()) ) { s = 431; }

                   	else if ( (LA111_226 == AND_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 432; }

                   	else if ( (LA111_226 == OR_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 433; }

                   	else if ( (LA111_226 == GROUP) && (synpred4_EsperEPL2Grammar()) ) { s = 434; }

                   	else if ( (LA111_226 == HAVING) && (synpred4_EsperEPL2Grammar()) ) { s = 435; }

                   	else if ( (LA111_226 == OUTPUT) && (synpred4_EsperEPL2Grammar()) ) { s = 436; }

                   	else if ( (LA111_226 == ORDER) && (synpred4_EsperEPL2Grammar()) ) { s = 437; }

                   	else if ( (LA111_226 == EOF) && (synpred4_EsperEPL2Grammar()) ) { s = 438; }

                   	else if ( (LA111_226 == RPAREN) && (synpred4_EsperEPL2Grammar()) ) { s = 439; }

                   	else if ( (LA111_226 == COMMA) && (synpred4_EsperEPL2Grammar()) ) { s = 440; }

                   	else if ( (LA111_226 == AS) && (synpred4_EsperEPL2Grammar()) ) { s = 441; }

                   	else if ( (LA111_226 == FROM) && (synpred4_EsperEPL2Grammar()) ) { s = 442; }

                   	else if ( (LA111_226 == ASC) && (synpred4_EsperEPL2Grammar()) ) { s = 443; }

                   	else if ( (LA111_226 == DESC) && (synpred4_EsperEPL2Grammar()) ) { s = 444; }

                   	else if ( (LA111_226 == THEN) && (synpred4_EsperEPL2Grammar()) ) { s = 445; }

                   	else if ( (LA111_226 == ELSE) && (synpred4_EsperEPL2Grammar()) ) { s = 446; }

                   	else if ( (LA111_226 == END) && (synpred4_EsperEPL2Grammar()) ) { s = 447; }

                   	else if ( (LA111_226 == WHEN) && (synpred4_EsperEPL2Grammar()) ) { s = 448; }

                   	else if ( (LA111_226 == COLON) && (synpred4_EsperEPL2Grammar()) ) { s = 449; }

                   	else if ( (LA111_226 == RBRACK) && (synpred4_EsperEPL2Grammar()) ) { s = 450; }

                   	else if ( (LA111_226 == RCURLY) && (synpred4_EsperEPL2Grammar()) ) { s = 451; }

                   	else if ( (LA111_226 == NOT_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 452; }

                   	else if ( (LA111_226 == IN_SET) && (synpred4_EsperEPL2Grammar()) ) { s = 453; }

                   	else if ( (LA111_226 == BETWEEN) && (synpred4_EsperEPL2Grammar()) ) { s = 454; }

                   	else if ( (LA111_226 == LIKE) && (synpred4_EsperEPL2Grammar()) ) { s = 455; }

                   	else if ( (LA111_226 == REGEXP) && (synpred4_EsperEPL2Grammar()) ) { s = 456; }

                   	else if ( (LA111_226 == ESCAPE) && (synpred4_EsperEPL2Grammar()) ) { s = 457; }

                   	 
                   	input.Seek(index111_226);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA111_227 = input.LA(1);

                   	 
                   	int index111_227 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA111_227 == ESCAPECHAR) && (synpred4_EsperEPL2Grammar()) ) { s = 458; }

                   	else if ( (LA111_227 == LBRACK) && (synpred4_EsperEPL2Grammar()) ) { s = 459; }

                   	else if ( (LA111_227 == LPAREN) ) { s = 460; }

                   	else if ( (LA111_227 == QUESTION) && (synpred4_EsperEPL2Grammar()) ) { s = 461; }

                   	else if ( (LA111_227 == STAR) && (synpred4_EsperEPL2Grammar()) ) { s = 462; }

                   	else if ( (LA111_227 == DIV) && (synpred4_EsperEPL2Grammar()) ) { s = 463; }

                   	else if ( (LA111_227 == MOD) && (synpred4_EsperEPL2Grammar()) ) { s = 464; }

                   	else if ( (LA111_227 == PLUS) && (synpred4_EsperEPL2Grammar()) ) { s = 465; }

                   	else if ( (LA111_227 == MINUS) && (synpred4_EsperEPL2Grammar()) ) { s = 466; }

                   	else if ( (LA111_227 == LOR) && (synpred4_EsperEPL2Grammar()) ) { s = 467; }

                   	else if ( (LA111_227 == LT) && (synpred4_EsperEPL2Grammar()) ) { s = 468; }

                   	else if ( (LA111_227 == GT) && (synpred4_EsperEPL2Grammar()) ) { s = 469; }

                   	else if ( (LA111_227 == LE) && (synpred4_EsperEPL2Grammar()) ) { s = 470; }

                   	else if ( (LA111_227 == GE) && (synpred4_EsperEPL2Grammar()) ) { s = 471; }

                   	else if ( (LA111_227 == EQUALS) && (synpred4_EsperEPL2Grammar()) ) { s = 472; }

                   	else if ( (LA111_227 == IS) && (synpred4_EsperEPL2Grammar()) ) { s = 473; }

                   	else if ( (LA111_227 == SQL_NE) && (synpred4_EsperEPL2Grammar()) ) { s = 474; }

                   	else if ( (LA111_227 == NOT_EQUAL) && (synpred4_EsperEPL2Grammar()) ) { s = 475; }

                   	else if ( (LA111_227 == BAND) && (synpred4_EsperEPL2Grammar()) ) { s = 476; }

                   	else if ( (LA111_227 == BOR) && (synpred4_EsperEPL2Grammar()) ) { s = 477; }

                   	else if ( (LA111_227 == BXOR) && (synpred4_EsperEPL2Grammar()) ) { s = 478; }

                   	else if ( (LA111_227 == AND_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 479; }

                   	else if ( (LA111_227 == OR_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 480; }

                   	else if ( (LA111_227 == GROUP) && (synpred4_EsperEPL2Grammar()) ) { s = 481; }

                   	else if ( (LA111_227 == HAVING) && (synpred4_EsperEPL2Grammar()) ) { s = 482; }

                   	else if ( (LA111_227 == OUTPUT) && (synpred4_EsperEPL2Grammar()) ) { s = 483; }

                   	else if ( (LA111_227 == ORDER) && (synpred4_EsperEPL2Grammar()) ) { s = 484; }

                   	else if ( (LA111_227 == EOF) && (synpred4_EsperEPL2Grammar()) ) { s = 485; }

                   	else if ( (LA111_227 == RPAREN) && (synpred4_EsperEPL2Grammar()) ) { s = 486; }

                   	else if ( (LA111_227 == COMMA) && (synpred4_EsperEPL2Grammar()) ) { s = 487; }

                   	else if ( (LA111_227 == AS) && (synpred4_EsperEPL2Grammar()) ) { s = 488; }

                   	else if ( (LA111_227 == FROM) && (synpred4_EsperEPL2Grammar()) ) { s = 489; }

                   	else if ( (LA111_227 == ASC) && (synpred4_EsperEPL2Grammar()) ) { s = 490; }

                   	else if ( (LA111_227 == DESC) && (synpred4_EsperEPL2Grammar()) ) { s = 491; }

                   	else if ( (LA111_227 == THEN) && (synpred4_EsperEPL2Grammar()) ) { s = 492; }

                   	else if ( (LA111_227 == ELSE) && (synpred4_EsperEPL2Grammar()) ) { s = 493; }

                   	else if ( (LA111_227 == END) && (synpred4_EsperEPL2Grammar()) ) { s = 494; }

                   	else if ( (LA111_227 == WHEN) && (synpred4_EsperEPL2Grammar()) ) { s = 495; }

                   	else if ( (LA111_227 == COLON) && (synpred4_EsperEPL2Grammar()) ) { s = 496; }

                   	else if ( (LA111_227 == RBRACK) && (synpred4_EsperEPL2Grammar()) ) { s = 497; }

                   	else if ( (LA111_227 == RCURLY) && (synpred4_EsperEPL2Grammar()) ) { s = 498; }

                   	else if ( (LA111_227 == NOT_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 499; }

                   	else if ( (LA111_227 == IN_SET) && (synpred4_EsperEPL2Grammar()) ) { s = 500; }

                   	else if ( (LA111_227 == BETWEEN) && (synpred4_EsperEPL2Grammar()) ) { s = 501; }

                   	else if ( (LA111_227 == LIKE) && (synpred4_EsperEPL2Grammar()) ) { s = 502; }

                   	else if ( (LA111_227 == REGEXP) && (synpred4_EsperEPL2Grammar()) ) { s = 503; }

                   	else if ( (LA111_227 == ESCAPE) && (synpred4_EsperEPL2Grammar()) ) { s = 504; }

                   	else if ( (LA111_227 == DOT) && (synpred4_EsperEPL2Grammar()) ) { s = 505; }

                   	 
                   	input.Seek(index111_227);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA111_228 = input.LA(1);

                   	 
                   	int index111_228 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA111_228 == LPAREN) ) { s = 506; }

                   	else if ( (LA111_228 == ESCAPECHAR) && (synpred4_EsperEPL2Grammar()) ) { s = 507; }

                   	else if ( (LA111_228 == LBRACK) && (synpred4_EsperEPL2Grammar()) ) { s = 508; }

                   	else if ( (LA111_228 == QUESTION) && (synpred4_EsperEPL2Grammar()) ) { s = 509; }

                   	else if ( (LA111_228 == STAR) && (synpred4_EsperEPL2Grammar()) ) { s = 510; }

                   	else if ( (LA111_228 == DIV) && (synpred4_EsperEPL2Grammar()) ) { s = 511; }

                   	else if ( (LA111_228 == MOD) && (synpred4_EsperEPL2Grammar()) ) { s = 512; }

                   	else if ( (LA111_228 == PLUS) && (synpred4_EsperEPL2Grammar()) ) { s = 513; }

                   	else if ( (LA111_228 == MINUS) && (synpred4_EsperEPL2Grammar()) ) { s = 514; }

                   	else if ( (LA111_228 == LOR) && (synpred4_EsperEPL2Grammar()) ) { s = 515; }

                   	else if ( (LA111_228 == LT) && (synpred4_EsperEPL2Grammar()) ) { s = 516; }

                   	else if ( (LA111_228 == GT) && (synpred4_EsperEPL2Grammar()) ) { s = 517; }

                   	else if ( (LA111_228 == LE) && (synpred4_EsperEPL2Grammar()) ) { s = 518; }

                   	else if ( (LA111_228 == GE) && (synpred4_EsperEPL2Grammar()) ) { s = 519; }

                   	else if ( (LA111_228 == EQUALS) && (synpred4_EsperEPL2Grammar()) ) { s = 520; }

                   	else if ( (LA111_228 == IS) && (synpred4_EsperEPL2Grammar()) ) { s = 521; }

                   	else if ( (LA111_228 == SQL_NE) && (synpred4_EsperEPL2Grammar()) ) { s = 522; }

                   	else if ( (LA111_228 == NOT_EQUAL) && (synpred4_EsperEPL2Grammar()) ) { s = 523; }

                   	else if ( (LA111_228 == BAND) && (synpred4_EsperEPL2Grammar()) ) { s = 524; }

                   	else if ( (LA111_228 == BOR) && (synpred4_EsperEPL2Grammar()) ) { s = 525; }

                   	else if ( (LA111_228 == BXOR) && (synpred4_EsperEPL2Grammar()) ) { s = 526; }

                   	else if ( (LA111_228 == AND_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 527; }

                   	else if ( (LA111_228 == OR_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 528; }

                   	else if ( (LA111_228 == GROUP) && (synpred4_EsperEPL2Grammar()) ) { s = 529; }

                   	else if ( (LA111_228 == HAVING) && (synpred4_EsperEPL2Grammar()) ) { s = 530; }

                   	else if ( (LA111_228 == OUTPUT) && (synpred4_EsperEPL2Grammar()) ) { s = 531; }

                   	else if ( (LA111_228 == ORDER) && (synpred4_EsperEPL2Grammar()) ) { s = 532; }

                   	else if ( (LA111_228 == EOF) && (synpred4_EsperEPL2Grammar()) ) { s = 533; }

                   	else if ( (LA111_228 == RPAREN) && (synpred4_EsperEPL2Grammar()) ) { s = 534; }

                   	else if ( (LA111_228 == COMMA) && (synpred4_EsperEPL2Grammar()) ) { s = 535; }

                   	else if ( (LA111_228 == AS) && (synpred4_EsperEPL2Grammar()) ) { s = 536; }

                   	else if ( (LA111_228 == FROM) && (synpred4_EsperEPL2Grammar()) ) { s = 537; }

                   	else if ( (LA111_228 == ASC) && (synpred4_EsperEPL2Grammar()) ) { s = 538; }

                   	else if ( (LA111_228 == DESC) && (synpred4_EsperEPL2Grammar()) ) { s = 539; }

                   	else if ( (LA111_228 == THEN) && (synpred4_EsperEPL2Grammar()) ) { s = 540; }

                   	else if ( (LA111_228 == ELSE) && (synpred4_EsperEPL2Grammar()) ) { s = 541; }

                   	else if ( (LA111_228 == END) && (synpred4_EsperEPL2Grammar()) ) { s = 542; }

                   	else if ( (LA111_228 == WHEN) && (synpred4_EsperEPL2Grammar()) ) { s = 543; }

                   	else if ( (LA111_228 == COLON) && (synpred4_EsperEPL2Grammar()) ) { s = 544; }

                   	else if ( (LA111_228 == RBRACK) && (synpred4_EsperEPL2Grammar()) ) { s = 545; }

                   	else if ( (LA111_228 == RCURLY) && (synpred4_EsperEPL2Grammar()) ) { s = 546; }

                   	else if ( (LA111_228 == NOT_EXPR) && (synpred4_EsperEPL2Grammar()) ) { s = 547; }

                   	else if ( (LA111_228 == IN_SET) && (synpred4_EsperEPL2Grammar()) ) { s = 548; }

                   	else if ( (LA111_228 == BETWEEN) && (synpred4_EsperEPL2Grammar()) ) { s = 549; }

                   	else if ( (LA111_228 == LIKE) && (synpred4_EsperEPL2Grammar()) ) { s = 550; }

                   	else if ( (LA111_228 == REGEXP) && (synpred4_EsperEPL2Grammar()) ) { s = 551; }

                   	else if ( (LA111_228 == ESCAPE) && (synpred4_EsperEPL2Grammar()) ) { s = 552; }

                   	else if ( (LA111_228 == DOT) && (synpred4_EsperEPL2Grammar()) ) { s = 553; }

                   	 
                   	input.Seek(index111_228);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA111_378 = input.LA(1);

                   	 
                   	int index111_378 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred4_EsperEPL2Grammar()) ) { s = 553; }

                   	else if ( (true) ) { s = 175; }

                   	 
                   	input.Seek(index111_378);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA111_404 = input.LA(1);

                   	 
                   	int index111_404 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred4_EsperEPL2Grammar()) ) { s = 553; }

                   	else if ( (true) ) { s = 175; }

                   	 
                   	input.Seek(index111_404);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA111_410 = input.LA(1);

                   	 
                   	int index111_410 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred4_EsperEPL2Grammar()) ) { s = 553; }

                   	else if ( (true) ) { s = 175; }

                   	 
                   	input.Seek(index111_410);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA111_411 = input.LA(1);

                   	 
                   	int index111_411 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred4_EsperEPL2Grammar()) ) { s = 553; }

                   	else if ( (true) ) { s = 175; }

                   	 
                   	input.Seek(index111_411);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 12 : 
                   	int LA111_460 = input.LA(1);

                   	 
                   	int index111_460 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred4_EsperEPL2Grammar()) ) { s = 553; }

                   	else if ( (true) ) { s = 175; }

                   	 
                   	input.Seek(index111_460);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 13 : 
                   	int LA111_506 = input.LA(1);

                   	 
                   	int index111_506 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred4_EsperEPL2Grammar()) ) { s = 553; }

                   	else if ( (true) ) { s = 175; }

                   	 
                   	input.Seek(index111_506);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 14 : 
                   	int LA111_574 = input.LA(1);

                   	 
                   	int index111_574 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred4_EsperEPL2Grammar()) ) { s = 553; }

                   	else if ( (true) ) { s = 175; }

                   	 
                   	input.Seek(index111_574);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 15 : 
                   	int LA111_600 = input.LA(1);

                   	 
                   	int index111_600 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred4_EsperEPL2Grammar()) ) { s = 553; }

                   	else if ( (true) ) { s = 175; }

                   	 
                   	input.Seek(index111_600);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 16 : 
                   	int LA111_626 = input.LA(1);

                   	 
                   	int index111_626 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred4_EsperEPL2Grammar()) ) { s = 553; }

                   	else if ( (true) ) { s = 175; }

                   	 
                   	input.Seek(index111_626);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 17 : 
                   	int LA111_652 = input.LA(1);

                   	 
                   	int index111_652 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred4_EsperEPL2Grammar()) ) { s = 553; }

                   	else if ( (true) ) { s = 175; }

                   	 
                   	input.Seek(index111_652);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 111, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA113_eotS =
        "\x34\uffff";
    const string DFA113_eofS =
        "\x34\uffff";
    const string DFA113_minS =
        "\x01\x05\x33\uffff";
    const string DFA113_maxS =
        "\x01\u00f0\x33\uffff";
    const string DFA113_acceptS =
        "\x01\uffff\x01\x01\x31\uffff\x01\x02";
    const string DFA113_specialS =
        "\x34\uffff}>";
    static readonly string[] DFA113_transitionS = {
            "\x01\x01\x04\uffff\x01\x01\x02\uffff\x02\x01\x02\uffff\x09"+
            "\x01\x01\uffff\x01\x01\x10\uffff\x02\x01\x01\uffff\x05\x01\x08"+
            "\uffff\x0c\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x62\uffff"+
            "\x01\x01\x01\uffff\x09\x01\x04\uffff\x01\x01\x01\x33\x0f\uffff"+
            "\x01\x01\x1f\uffff\x03\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA113_eot = DFA.UnpackEncodedString(DFA113_eotS);
    static readonly short[] DFA113_eof = DFA.UnpackEncodedString(DFA113_eofS);
    static readonly char[] DFA113_min = DFA.UnpackEncodedStringToUnsignedChars(DFA113_minS);
    static readonly char[] DFA113_max = DFA.UnpackEncodedStringToUnsignedChars(DFA113_maxS);
    static readonly short[] DFA113_accept = DFA.UnpackEncodedString(DFA113_acceptS);
    static readonly short[] DFA113_special = DFA.UnpackEncodedString(DFA113_specialS);
    static readonly short[][] DFA113_transition = DFA.UnpackEncodedStringArray(DFA113_transitionS);

    protected class DFA113 : DFA
    {
        public DFA113(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;

        }

        override public string Description
        {
            get { return "859:53: ( libFunctionArgs )?"; }
        }

    }

    const string DFA115_eotS =
        "\x33\uffff";
    const string DFA115_eofS =
        "\x33\uffff";
    const string DFA115_minS =
        "\x01\x05\x32\uffff";
    const string DFA115_maxS =
        "\x01\u00f0\x32\uffff";
    const string DFA115_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x2f\uffff";
    const string DFA115_specialS =
        "\x33\uffff}>";
    static readonly string[] DFA115_transitionS = {
            "\x01\x03\x04\uffff\x01\x03\x02\uffff\x02\x03\x02\uffff\x09"+
            "\x03\x01\uffff\x01\x03\x10\uffff\x01\x02\x01\x01\x01\uffff\x05"+
            "\x03\x08\uffff\x0c\x03\x01\uffff\x01\x03\x01\uffff\x01\x03\x62"+
            "\uffff\x01\x03\x01\uffff\x09\x03\x04\uffff\x01\x03\x10\uffff"+
            "\x01\x03\x1f\uffff\x03\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA115_eot = DFA.UnpackEncodedString(DFA115_eotS);
    static readonly short[] DFA115_eof = DFA.UnpackEncodedString(DFA115_eofS);
    static readonly char[] DFA115_min = DFA.UnpackEncodedStringToUnsignedChars(DFA115_minS);
    static readonly char[] DFA115_max = DFA.UnpackEncodedStringToUnsignedChars(DFA115_maxS);
    static readonly short[] DFA115_accept = DFA.UnpackEncodedString(DFA115_acceptS);
    static readonly short[] DFA115_special = DFA.UnpackEncodedString(DFA115_specialS);
    static readonly short[][] DFA115_transition = DFA.UnpackEncodedStringArray(DFA115_transitionS);

    protected class DFA115 : DFA
    {
        public DFA115(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;

        }

        override public string Description
        {
            get { return "870:4: ( ALL | DISTINCT )?"; }
        }

    }

    const string DFA123_eotS =
        "\x0d\uffff";
    const string DFA123_eofS =
        "\x01\uffff\x01\x03\x0b\uffff";
    const string DFA123_minS =
        "\x01\u00b8\x01\x0b\x0b\uffff";
    const string DFA123_maxS =
        "\x01\u00b8\x01\u00d0\x0b\uffff";
    const string DFA123_acceptS =
        "\x02\uffff\x01\x01\x01\x02\x09\uffff";
    const string DFA123_specialS =
        "\x0d\uffff}>";
    static readonly string[] DFA123_transitionS = {
            "\x01\x01",
            "\x02\x03\x02\uffff\x01\x03\u00aa\uffff\x02\x03\x01\uffff\x02"+
            "\x03\x01\uffff\x01\x03\x01\x02\x0e\uffff\x01\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA123_eot = DFA.UnpackEncodedString(DFA123_eotS);
    static readonly short[] DFA123_eof = DFA.UnpackEncodedString(DFA123_eofS);
    static readonly char[] DFA123_min = DFA.UnpackEncodedStringToUnsignedChars(DFA123_minS);
    static readonly char[] DFA123_max = DFA.UnpackEncodedStringToUnsignedChars(DFA123_maxS);
    static readonly short[] DFA123_accept = DFA.UnpackEncodedString(DFA123_acceptS);
    static readonly short[] DFA123_special = DFA.UnpackEncodedString(DFA123_specialS);
    static readonly short[][] DFA123_transition = DFA.UnpackEncodedStringArray(DFA123_transitionS);

    protected class DFA123 : DFA
    {
        public DFA123(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;

        }

        override public string Description
        {
            get { return "918:1: atomicExpression : ( observerExpression | eventFilterExpression );"; }
        }

    }

    const string DFA124_eotS =
        "\x2e\uffff";
    const string DFA124_eofS =
        "\x2e\uffff";
    const string DFA124_minS =
        "\x01\x05\x2d\uffff";
    const string DFA124_maxS =
        "\x01\u00f0\x2d\uffff";
    const string DFA124_acceptS =
        "\x01\uffff\x01\x01\x2b\uffff\x01\x02";
    const string DFA124_specialS =
        "\x2e\uffff}>";
    static readonly string[] DFA124_transitionS = {
            "\x01\x01\x04\uffff\x01\x01\x03\uffff\x01\x01\x02\uffff\x09"+
            "\x01\x15\uffff\x05\x01\x08\uffff\x06\x01\x01\uffff\x04\x01\x02"+
            "\uffff\x01\x01\x01\uffff\x01\x01\x62\uffff\x01\x01\x01\uffff"+
            "\x03\x01\x01\uffff\x05\x01\x03\uffff\x01\x01\x01\uffff\x01\x2d"+
            "\x01\x01\x0e\uffff\x01\x01\x1f\uffff\x03\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA124_eot = DFA.UnpackEncodedString(DFA124_eotS);
    static readonly short[] DFA124_eof = DFA.UnpackEncodedString(DFA124_eofS);
    static readonly char[] DFA124_min = DFA.UnpackEncodedStringToUnsignedChars(DFA124_minS);
    static readonly char[] DFA124_max = DFA.UnpackEncodedStringToUnsignedChars(DFA124_maxS);
    static readonly short[] DFA124_accept = DFA.UnpackEncodedString(DFA124_acceptS);
    static readonly short[] DFA124_special = DFA.UnpackEncodedString(DFA124_specialS);
    static readonly short[][] DFA124_transition = DFA.UnpackEncodedStringArray(DFA124_transitionS);

    protected class DFA124 : DFA
    {
        public DFA124(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;

        }

        override public string Description
        {
            get { return "923:35: ( parameterSet )?"; }
        }

    }

    const string DFA125_eotS =
        "\x2e\uffff";
    const string DFA125_eofS =
        "\x2e\uffff";
    const string DFA125_minS =
        "\x01\x05\x2d\uffff";
    const string DFA125_maxS =
        "\x01\u00f0\x2d\uffff";
    const string DFA125_acceptS =
        "\x01\uffff\x01\x01\x2b\uffff\x01\x02";
    const string DFA125_specialS =
        "\x2e\uffff}>";
    static readonly string[] DFA125_transitionS = {
            "\x01\x01\x04\uffff\x01\x01\x03\uffff\x01\x01\x02\uffff\x09"+
            "\x01\x15\uffff\x05\x01\x08\uffff\x06\x01\x01\uffff\x04\x01\x02"+
            "\uffff\x01\x01\x01\uffff\x01\x01\x62\uffff\x01\x01\x01\uffff"+
            "\x03\x01\x01\uffff\x05\x01\x03\uffff\x01\x01\x01\uffff\x01\x2d"+
            "\x01\x01\x0e\uffff\x01\x01\x1f\uffff\x03\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA125_eot = DFA.UnpackEncodedString(DFA125_eotS);
    static readonly short[] DFA125_eof = DFA.UnpackEncodedString(DFA125_eofS);
    static readonly char[] DFA125_min = DFA.UnpackEncodedStringToUnsignedChars(DFA125_minS);
    static readonly char[] DFA125_max = DFA.UnpackEncodedStringToUnsignedChars(DFA125_maxS);
    static readonly short[] DFA125_accept = DFA.UnpackEncodedString(DFA125_acceptS);
    static readonly short[] DFA125_special = DFA.UnpackEncodedString(DFA125_specialS);
    static readonly short[][] DFA125_transition = DFA.UnpackEncodedStringArray(DFA125_transitionS);

    protected class DFA125 : DFA
    {
        public DFA125(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;

        }

        override public string Description
        {
            get { return "928:31: ( parameterSet )?"; }
        }

    }

    const string DFA127_eotS =
        "\x3b\uffff";
    const string DFA127_eofS =
        "\x3b\uffff";
    const string DFA127_minS =
        "\x01\x05\x02\uffff\x02\x00\x36\uffff";
    const string DFA127_maxS =
        "\x01\u00f0\x02\uffff\x02\x00\x36\uffff";
    const string DFA127_acceptS =
        "\x01\uffff\x02\x01\x02\uffff\x0a\x01\x01\x02\x01\x03\x01\x04\x29"+
        "\uffff";
    const string DFA127_specialS =
        "\x01\x00\x02\uffff\x01\x01\x01\x02\x36\uffff}>";
    static readonly string[] DFA127_transitionS = {
            "\x01\x11\x04\uffff\x01\x11\x03\uffff\x01\x11\x02\uffff\x09"+
            "\x11\x15\uffff\x04\x11\x01\x03\x08\uffff\x06\x11\x01\uffff\x01"+
            "\x11\x01\x04\x02\x11\x02\uffff\x01\x11\x01\uffff\x01\x11\x62"+
            "\uffff\x01\x09\x01\uffff\x01\x01\x01\x07\x01\x08\x01\uffff\x01"+
            "\x05\x01\x06\x01\x0a\x01\x0b\x01\x11\x03\uffff\x01\x02\x02\uffff"+
            "\x01\x0f\x0e\uffff\x01\x10\x1f\uffff\x01\x0c\x01\x0d\x01\x0e",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA127_eot = DFA.UnpackEncodedString(DFA127_eotS);
    static readonly short[] DFA127_eof = DFA.UnpackEncodedString(DFA127_eofS);
    static readonly char[] DFA127_min = DFA.UnpackEncodedStringToUnsignedChars(DFA127_minS);
    static readonly char[] DFA127_max = DFA.UnpackEncodedStringToUnsignedChars(DFA127_maxS);
    static readonly short[] DFA127_accept = DFA.UnpackEncodedString(DFA127_acceptS);
    static readonly short[] DFA127_special = DFA.UnpackEncodedString(DFA127_specialS);
    static readonly short[][] DFA127_transition = DFA.UnpackEncodedStringArray(DFA127_transitionS);

    protected class DFA127 : DFA
    {
        public DFA127(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;

        }

        override public string Description
        {
            get { return "938:1: parameter : ( ( singleParameter )=> singleParameter | ( numericParameterList )=> numericParameterList | ( arrayParameterList )=> arrayParameterList | eventProperty );"; }
        }

    }


    protected internal int DFA127_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA127_0 = input.LA(1);

                   	 
                   	int index127_0 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA127_0 == NUM_INT) && (synpred5_EsperEPL2Grammar()) ) { s = 1; }

                   	else if ( (LA127_0 == STAR) && (synpred5_EsperEPL2Grammar()) ) { s = 2; }

                   	else if ( (LA127_0 == LAST) ) { s = 3; }

                   	else if ( (LA127_0 == LW) ) { s = 4; }

                   	else if ( (LA127_0 == MINUS) && (synpred5_EsperEPL2Grammar()) ) { s = 5; }

                   	else if ( (LA127_0 == PLUS) && (synpred5_EsperEPL2Grammar()) ) { s = 6; }

                   	else if ( (LA127_0 == NUM_LONG) && (synpred5_EsperEPL2Grammar()) ) { s = 7; }

                   	else if ( (LA127_0 == NUM_FLOAT) && (synpred5_EsperEPL2Grammar()) ) { s = 8; }

                   	else if ( (LA127_0 == NUM_DOUBLE) && (synpred5_EsperEPL2Grammar()) ) { s = 9; }

                   	else if ( (LA127_0 == STRING_LITERAL) && (synpred5_EsperEPL2Grammar()) ) { s = 10; }

                   	else if ( (LA127_0 == QUOTED_STRING_LITERAL) && (synpred5_EsperEPL2Grammar()) ) { s = 11; }

                   	else if ( (LA127_0 == 238) && (synpred5_EsperEPL2Grammar()) ) { s = 12; }

                   	else if ( (LA127_0 == 239) && (synpred5_EsperEPL2Grammar()) ) { s = 13; }

                   	else if ( (LA127_0 == 240) && (synpred5_EsperEPL2Grammar()) ) { s = 14; }

                   	else if ( (LA127_0 == LBRACK) && (synpred6_EsperEPL2Grammar()) ) { s = 15; }

                   	else if ( (LA127_0 == LCURLY) && (synpred7_EsperEPL2Grammar()) ) { s = 16; }

                   	else if ( (LA127_0 == WINDOW || LA127_0 == ESCAPE || LA127_0 == EVERY_EXPR || (LA127_0 >= SUM && LA127_0 <= COUNT) || (LA127_0 >= EVENTS && LA127_0 <= FIRST) || (LA127_0 >= UNIDIRECTIONAL && LA127_0 <= PRIOR) || LA127_0 == WEEKDAY || (LA127_0 >= INSTANCEOF && LA127_0 <= CAST) || LA127_0 == SNAPSHOT || LA127_0 == VARIABLE || LA127_0 == IDENT) ) { s = 17; }

                   	 
                   	input.Seek(index127_0);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA127_3 = input.LA(1);

                   	 
                   	int index127_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred5_EsperEPL2Grammar()) ) { s = 14; }

                   	else if ( (true) ) { s = 17; }

                   	 
                   	input.Seek(index127_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA127_4 = input.LA(1);

                   	 
                   	int index127_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred5_EsperEPL2Grammar()) ) { s = 14; }

                   	else if ( (true) ) { s = 17; }

                   	 
                   	input.Seek(index127_4);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 127, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
    const string DFA128_eotS =
        "\x56\uffff";
    const string DFA128_eofS =
        "\x01\uffff\x01\x05\x01\x23\x04\uffff\x03\x05\x4c\uffff";
    const string DFA128_minS =
        "\x01\x33\x01\x14\x01\u00b9\x04\uffff\x03\x14\x4c\uffff";
    const string DFA128_maxS =
        "\x01\u00f0\x01\u00fa\x01\u00cc\x04\uffff\x03\u00fa\x4c\uffff";
    const string DFA128_acceptS =
        "\x03\uffff\x01\x05\x01\x06\x01\x08\x09\uffff\x01\x01\x01\x03\x01"+
        "\x04\x01\x09\x0f\uffff\x01\x02\x01\x07\x32\uffff";
    const string DFA128_specialS =
        "\x56\uffff}>";
    static readonly string[] DFA128_transitionS = {
            "\x01\x03\x10\uffff\x01\x04\x69\uffff\x01\x09\x01\uffff\x01"+
            "\x01\x01\x07\x01\x08\x01\uffff\x04\x05\x04\uffff\x01\x02\x31"+
            "\uffff\x03\x05",
            "\x01\x12\x1b\uffff\x02\x12\x01\uffff\x01\x10\x0f\uffff\x01"+
            "\x11\x75\uffff\x01\x05\x04\uffff\x01\x05\x02\uffff\x01\x0f\x2f"+
            "\uffff\x0a\x12",
            "\x01\x23\x04\uffff\x01\x23\x0d\uffff\x01\x22",
            "",
            "",
            "",
            "",
            "\x01\x12\x1b\uffff\x02\x12\u0087\uffff\x01\x05\x04\uffff\x01"+
            "\x05\x32\uffff\x0a\x12",
            "\x01\x12\x1b\uffff\x02\x12\u0087\uffff\x01\x05\x04\uffff\x01"+
            "\x05\x32\uffff\x0a\x12",
            "\x01\x12\x1b\uffff\x02\x12\u0087\uffff\x01\x05\x04\uffff\x01"+
            "\x05\x32\uffff\x0a\x12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA128_eot = DFA.UnpackEncodedString(DFA128_eotS);
    static readonly short[] DFA128_eof = DFA.UnpackEncodedString(DFA128_eofS);
    static readonly char[] DFA128_min = DFA.UnpackEncodedStringToUnsignedChars(DFA128_minS);
    static readonly char[] DFA128_max = DFA.UnpackEncodedStringToUnsignedChars(DFA128_maxS);
    static readonly short[] DFA128_accept = DFA.UnpackEncodedString(DFA128_acceptS);
    static readonly short[] DFA128_special = DFA.UnpackEncodedString(DFA128_specialS);
    static readonly short[][] DFA128_transition = DFA.UnpackEncodedStringArray(DFA128_transitionS);

    protected class DFA128 : DFA
    {
        public DFA128(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;

        }

        override public string Description
        {
            get { return "945:1: singleParameter : ( rangeOperand | frequencyOperand | lastOperator | weekDayOperator | LAST | LW | STAR | constant | time_period );"; }
        }

    }

    const string DFA132_eotS =
        "\x0d\uffff";
    const string DFA132_eofS =
        "\x0d\uffff";
    const string DFA132_minS =
        "\x01\u00ae\x0c\uffff";
    const string DFA132_maxS =
        "\x01\u00f0\x0c\uffff";
    const string DFA132_acceptS =
        "\x01\uffff\x01\x01\x0a\uffff\x01\x02";
    const string DFA132_specialS =
        "\x0d\uffff}>";
    static readonly string[] DFA132_transitionS = {
            "\x01\x01\x01\uffff\x03\x01\x01\uffff\x04\x01\x17\uffff\x01"+
            "\x0c\x1e\uffff\x03\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA132_eot = DFA.UnpackEncodedString(DFA132_eotS);
    static readonly short[] DFA132_eof = DFA.UnpackEncodedString(DFA132_eofS);
    static readonly char[] DFA132_min = DFA.UnpackEncodedStringToUnsignedChars(DFA132_minS);
    static readonly char[] DFA132_max = DFA.UnpackEncodedStringToUnsignedChars(DFA132_maxS);
    static readonly short[] DFA132_accept = DFA.UnpackEncodedString(DFA132_acceptS);
    static readonly short[] DFA132_special = DFA.UnpackEncodedString(DFA132_specialS);
    static readonly short[][] DFA132_transition = DFA.UnpackEncodedStringArray(DFA132_transitionS);

    protected class DFA132 : DFA
    {
        public DFA132(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;

        }

        override public string Description
        {
            get { return "985:11: ( constant ( COMMA constant )* )?"; }
        }

    }

    const string DFA133_eotS =
        "\x1c\uffff";
    const string DFA133_eofS =
        "\x01\uffff\x01\x03\x1a\uffff";
    const string DFA133_minS =
        "\x01\u00b8\x01\x0b\x1a\uffff";
    const string DFA133_maxS =
        "\x01\u00b8\x01\u00d0\x1a\uffff";
    const string DFA133_acceptS =
        "\x02\uffff\x01\x01\x01\x02\x18\uffff";
    const string DFA133_specialS =
        "\x1c\uffff}>";
    static readonly string[] DFA133_transitionS = {
            "\x01\x01",
            "\x02\x03\x02\uffff\x02\x03\x09\uffff\x01\x03\x09\uffff\x04"+
            "\x03\x02\uffff\x02\x03\x02\uffff\x01\x03\x05\uffff\x01\x03\x01"+
            "\uffff\x01\x03\x05\uffff\x01\x03\x0b\uffff\x01\x03\x01\uffff"+
            "\x01\x03\x6d\uffff\x02\x03\x01\x02\x01\x03\x01\uffff\x02\x03"+
            "\x01\uffff\x01\x03\x0f\uffff\x01\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA133_eot = DFA.UnpackEncodedString(DFA133_eotS);
    static readonly short[] DFA133_eof = DFA.UnpackEncodedString(DFA133_eofS);
    static readonly char[] DFA133_min = DFA.UnpackEncodedStringToUnsignedChars(DFA133_minS);
    static readonly char[] DFA133_max = DFA.UnpackEncodedStringToUnsignedChars(DFA133_maxS);
    static readonly short[] DFA133_accept = DFA.UnpackEncodedString(DFA133_acceptS);
    static readonly short[] DFA133_special = DFA.UnpackEncodedString(DFA133_specialS);
    static readonly short[][] DFA133_transition = DFA.UnpackEncodedStringArray(DFA133_transitionS);

    protected class DFA133 : DFA
    {
        public DFA133(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;

        }

        override public string Description
        {
            get { return "997:9: (i= IDENT EQUALS )?"; }
        }

    }

    const string DFA135_eotS =
        "\x1a\uffff";
    const string DFA135_eofS =
        "\x01\x02\x19\uffff";
    const string DFA135_minS =
        "\x01\x0b\x19\uffff";
    const string DFA135_maxS =
        "\x01\u00d0\x19\uffff";
    const string DFA135_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x17\uffff";
    const string DFA135_specialS =
        "\x1a\uffff}>";
    static readonly string[] DFA135_transitionS = {
            "\x02\x02\x02\uffff\x02\x02\x09\uffff\x01\x02\x09\uffff\x04"+
            "\x02\x02\uffff\x02\x02\x02\uffff\x01\x02\x05\uffff\x01\x02\x01"+
            "\uffff\x01\x02\x05\uffff\x01\x02\x0b\uffff\x01\x02\x01\uffff"+
            "\x01\x02\x6d\uffff\x02\x02\x01\uffff\x01\x02\x01\uffff\x01\x01"+
            "\x01\x02\x01\uffff\x01\x02\x0f\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA135_eot = DFA.UnpackEncodedString(DFA135_eotS);
    static readonly short[] DFA135_eof = DFA.UnpackEncodedString(DFA135_eofS);
    static readonly char[] DFA135_min = DFA.UnpackEncodedStringToUnsignedChars(DFA135_minS);
    static readonly char[] DFA135_max = DFA.UnpackEncodedStringToUnsignedChars(DFA135_maxS);
    static readonly short[] DFA135_accept = DFA.UnpackEncodedString(DFA135_acceptS);
    static readonly short[] DFA135_special = DFA.UnpackEncodedString(DFA135_specialS);
    static readonly short[][] DFA135_transition = DFA.UnpackEncodedStringArray(DFA135_transitionS);

    protected class DFA135 : DFA
    {
        public DFA135(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;

        }

        override public string Description
        {
            get { return "999:9: ( LPAREN ( expressionList )? RPAREN )?"; }
        }

    }

    const string DFA134_eotS =
        "\x32\uffff";
    const string DFA134_eofS =
        "\x32\uffff";
    const string DFA134_minS =
        "\x01\x05\x31\uffff";
    const string DFA134_maxS =
        "\x01\u00f0\x31\uffff";
    const string DFA134_acceptS =
        "\x01\uffff\x01\x01\x2f\uffff\x01\x02";
    const string DFA134_specialS =
        "\x32\uffff}>";
    static readonly string[] DFA134_transitionS = {
            "\x01\x01\x04\uffff\x01\x01\x02\uffff\x02\x01\x02\uffff\x09"+
            "\x01\x01\uffff\x01\x01\x13\uffff\x05\x01\x08\uffff\x0c\x01\x01"+
            "\uffff\x01\x01\x01\uffff\x01\x01\x62\uffff\x01\x01\x01\uffff"+
            "\x09\x01\x04\uffff\x01\x01\x01\x31\x0f\uffff\x01\x01\x1f\uffff"+
            "\x03\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA134_eot = DFA.UnpackEncodedString(DFA134_eotS);
    static readonly short[] DFA134_eof = DFA.UnpackEncodedString(DFA134_eofS);
    static readonly char[] DFA134_min = DFA.UnpackEncodedStringToUnsignedChars(DFA134_minS);
    static readonly char[] DFA134_max = DFA.UnpackEncodedStringToUnsignedChars(DFA134_maxS);
    static readonly short[] DFA134_accept = DFA.UnpackEncodedString(DFA134_acceptS);
    static readonly short[] DFA134_special = DFA.UnpackEncodedString(DFA134_specialS);
    static readonly short[][] DFA134_transition = DFA.UnpackEncodedStringArray(DFA134_transitionS);

    protected class DFA134 : DFA
    {
        public DFA134(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;

        }

        override public string Description
        {
            get { return "999:17: ( expressionList )?"; }
        }

    }

    const string DFA136_eotS =
        "\x35\uffff";
    const string DFA136_eofS =
        "\x01\x01\x19\uffff\x01\x1c\x1a\uffff";
    const string DFA136_minS =
        "\x01\x0b\x02\uffff\x01\u00b8\x16\uffff\x01\x0b\x1a\uffff";
    const string DFA136_maxS =
        "\x01\u00d0\x02\uffff\x01\u00b8\x16\uffff\x01\u00d0\x1a\uffff";
    const string DFA136_acceptS =
        "\x01\uffff\x01\x02\x1a\uffff\x01\x01\x18\uffff";
    const string DFA136_specialS =
        "\x35\uffff}>";
    static readonly string[] DFA136_transitionS = {
            "\x02\x01\x02\uffff\x02\x01\x09\uffff\x01\x01\x09\uffff\x04"+
            "\x01\x02\uffff\x02\x01\x02\uffff\x01\x01\x05\uffff\x01\x01\x01"+
            "\uffff\x01\x01\x05\uffff\x01\x01\x0b\uffff\x01\x01\x01\uffff"+
            "\x01\x01\x6d\uffff\x02\x01\x01\uffff\x01\x03\x01\uffff\x02\x01"+
            "\x01\uffff\x01\x01\x0f\uffff\x01\x01",
            "",
            "",
            "\x01\x1a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x02\x1c\x02\uffff\x02\x1c\x09\uffff\x01\x1c\x09\uffff\x04"+
            "\x1c\x02\uffff\x02\x1c\x02\uffff\x01\x1c\x05\uffff\x01\x1c\x01"+
            "\uffff\x01\x1c\x05\uffff\x01\x1c\x0b\uffff\x01\x1c\x01\uffff"+
            "\x01\x1c\x6d\uffff\x02\x1c\x01\uffff\x01\x1c\x01\uffff\x02\x1c"+
            "\x01\uffff\x01\x1c\x01\x01\x0e\uffff\x01\x1c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA136_eot = DFA.UnpackEncodedString(DFA136_eotS);
    static readonly short[] DFA136_eof = DFA.UnpackEncodedString(DFA136_eofS);
    static readonly char[] DFA136_min = DFA.UnpackEncodedStringToUnsignedChars(DFA136_minS);
    static readonly char[] DFA136_max = DFA.UnpackEncodedStringToUnsignedChars(DFA136_maxS);
    static readonly short[] DFA136_accept = DFA.UnpackEncodedString(DFA136_acceptS);
    static readonly short[] DFA136_special = DFA.UnpackEncodedString(DFA136_specialS);
    static readonly short[][] DFA136_transition = DFA.UnpackEncodedStringArray(DFA136_transitionS);

    protected class DFA136 : DFA
    {
        public DFA136(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1006:6: ( DOT i2= IDENT )*"; }
        }

    }

    const string DFA139_eotS =
        "\x31\uffff";
    const string DFA139_eofS =
        "\x01\x01\x30\uffff";
    const string DFA139_minS =
        "\x01\x06\x30\uffff";
    const string DFA139_maxS =
        "\x01\u00cf\x30\uffff";
    const string DFA139_acceptS =
        "\x01\uffff\x01\x02\x2e\uffff\x01\x01";
    const string DFA139_specialS =
        "\x31\uffff}>";
    static readonly string[] DFA139_transitionS = {
            "\x08\x01\x01\uffff\x02\x01\x0c\uffff\x05\x01\x02\uffff\x03"+
            "\x01\x01\uffff\x01\x01\x01\uffff\x02\x01\x02\uffff\x01\x01\x07"+
            "\uffff\x03\x01\x7b\uffff\x02\x01\x03\uffff\x02\x01\x01\x30\x01"+
            "\x01\x01\uffff\x01\x01\x01\uffff\x0e\x01\x01\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA139_eot = DFA.UnpackEncodedString(DFA139_eotS);
    static readonly short[] DFA139_eof = DFA.UnpackEncodedString(DFA139_eofS);
    static readonly char[] DFA139_min = DFA.UnpackEncodedStringToUnsignedChars(DFA139_minS);
    static readonly char[] DFA139_max = DFA.UnpackEncodedStringToUnsignedChars(DFA139_maxS);
    static readonly short[] DFA139_accept = DFA.UnpackEncodedString(DFA139_acceptS);
    static readonly short[] DFA139_special = DFA.UnpackEncodedString(DFA139_specialS);
    static readonly short[][] DFA139_transition = DFA.UnpackEncodedStringArray(DFA139_transitionS);

    protected class DFA139 : DFA
    {
        public DFA139(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1027:24: ( DOT eventPropertyAtomic )*"; }
        }

    }

    const string DFA143_eotS =
        "\x34\uffff";
    const string DFA143_eofS =
        "\x01\x04\x33\uffff";
    const string DFA143_minS =
        "\x01\x06\x33\uffff";
    const string DFA143_maxS =
        "\x01\u00cf\x33\uffff";
    const string DFA143_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x2f\uffff";
    const string DFA143_specialS =
        "\x34\uffff}>";
    static readonly string[] DFA143_transitionS = {
            "\x08\x04\x01\uffff\x02\x04\x0c\uffff\x05\x04\x02\uffff\x03"+
            "\x04\x01\uffff\x01\x04\x01\uffff\x02\x04\x02\uffff\x01\x04\x07"+
            "\uffff\x03\x04\x7a\uffff\x01\x03\x02\x04\x03\uffff\x04\x04\x01"+
            "\x02\x01\x04\x01\x01\x0e\x04\x01\uffff\x01\x04",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA143_eot = DFA.UnpackEncodedString(DFA143_eotS);
    static readonly short[] DFA143_eof = DFA.UnpackEncodedString(DFA143_eofS);
    static readonly char[] DFA143_min = DFA.UnpackEncodedStringToUnsignedChars(DFA143_minS);
    static readonly char[] DFA143_max = DFA.UnpackEncodedStringToUnsignedChars(DFA143_maxS);
    static readonly short[] DFA143_accept = DFA.UnpackEncodedString(DFA143_acceptS);
    static readonly short[] DFA143_special = DFA.UnpackEncodedString(DFA143_specialS);
    static readonly short[][] DFA143_transition = DFA.UnpackEncodedStringArray(DFA143_transitionS);

    protected class DFA143 : DFA
    {
        public DFA143(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;

        }

        override public string Description
        {
            get { return "1032:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?"; }
        }

    }

    const string DFA140_eotS =
        "\x32\uffff";
    const string DFA140_eofS =
        "\x01\x02\x31\uffff";
    const string DFA140_minS =
        "\x01\x06\x31\uffff";
    const string DFA140_maxS =
        "\x01\u00cf\x31\uffff";
    const string DFA140_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x2f\uffff";
    const string DFA140_specialS =
        "\x32\uffff}>";
    static readonly string[] DFA140_transitionS = {
            "\x08\x02\x01\uffff\x02\x02\x0c\uffff\x05\x02\x02\uffff\x03"+
            "\x02\x01\uffff\x01\x02\x01\uffff\x02\x02\x02\uffff\x01\x02\x07"+
            "\uffff\x03\x02\x7a\uffff\x01\x01\x02\x02\x03\uffff\x04\x02\x01"+
            "\uffff\x01\x02\x01\uffff\x0e\x02\x01\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA140_eot = DFA.UnpackEncodedString(DFA140_eotS);
    static readonly short[] DFA140_eof = DFA.UnpackEncodedString(DFA140_eofS);
    static readonly char[] DFA140_min = DFA.UnpackEncodedStringToUnsignedChars(DFA140_minS);
    static readonly char[] DFA140_max = DFA.UnpackEncodedStringToUnsignedChars(DFA140_maxS);
    static readonly short[] DFA140_accept = DFA.UnpackEncodedString(DFA140_acceptS);
    static readonly short[] DFA140_special = DFA.UnpackEncodedString(DFA140_specialS);
    static readonly short[][] DFA140_transition = DFA.UnpackEncodedStringArray(DFA140_transitionS);

    protected class DFA140 : DFA
    {
        public DFA140(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;

        }

        override public string Description
        {
            get { return "1033:32: (q= QUESTION )?"; }
        }

    }

    const string DFA142_eotS =
        "\x32\uffff";
    const string DFA142_eofS =
        "\x01\x02\x31\uffff";
    const string DFA142_minS =
        "\x01\x06\x31\uffff";
    const string DFA142_maxS =
        "\x01\u00cf\x31\uffff";
    const string DFA142_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x2f\uffff";
    const string DFA142_specialS =
        "\x32\uffff}>";
    static readonly string[] DFA142_transitionS = {
            "\x08\x02\x01\uffff\x02\x02\x0c\uffff\x05\x02\x02\uffff\x03"+
            "\x02\x01\uffff\x01\x02\x01\uffff\x02\x02\x02\uffff\x01\x02\x07"+
            "\uffff\x03\x02\x7a\uffff\x01\x01\x02\x02\x03\uffff\x04\x02\x01"+
            "\uffff\x01\x02\x01\uffff\x0e\x02\x01\uffff\x01\x02",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA142_eot = DFA.UnpackEncodedString(DFA142_eotS);
    static readonly short[] DFA142_eof = DFA.UnpackEncodedString(DFA142_eofS);
    static readonly char[] DFA142_min = DFA.UnpackEncodedStringToUnsignedChars(DFA142_minS);
    static readonly char[] DFA142_max = DFA.UnpackEncodedStringToUnsignedChars(DFA142_maxS);
    static readonly short[] DFA142_accept = DFA.UnpackEncodedString(DFA142_acceptS);
    static readonly short[] DFA142_special = DFA.UnpackEncodedString(DFA142_specialS);
    static readonly short[][] DFA142_transition = DFA.UnpackEncodedStringArray(DFA142_transitionS);

    protected class DFA142 : DFA
    {
        public DFA142(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;

        }

        override public string Description
        {
            get { return "1035:66: (q= QUESTION )?"; }
        }

    }

    const string DFA145_eotS =
        "\x35\uffff";
    const string DFA145_eofS =
        "\x01\x01\x34\uffff";
    const string DFA145_minS =
        "\x01\x06\x34\uffff";
    const string DFA145_maxS =
        "\x01\u00d1\x34\uffff";
    const string DFA145_acceptS =
        "\x01\uffff\x01\x02\x32\uffff\x01\x01";
    const string DFA145_specialS =
        "\x35\uffff}>";
    static readonly string[] DFA145_transitionS = {
            "\x08\x01\x01\uffff\x02\x01\x0c\uffff\x05\x01\x02\uffff\x03"+
            "\x01\x01\uffff\x01\x01\x01\uffff\x02\x01\x02\uffff\x01\x01\x07"+
            "\uffff\x03\x01\x7a\uffff\x03\x01\x03\uffff\x15\x01\x01\uffff"+
            "\x01\x01\x01\uffff\x01\x34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA145_eot = DFA.UnpackEncodedString(DFA145_eotS);
    static readonly short[] DFA145_eof = DFA.UnpackEncodedString(DFA145_eofS);
    static readonly char[] DFA145_min = DFA.UnpackEncodedStringToUnsignedChars(DFA145_minS);
    static readonly char[] DFA145_max = DFA.UnpackEncodedStringToUnsignedChars(DFA145_maxS);
    static readonly short[] DFA145_accept = DFA.UnpackEncodedString(DFA145_acceptS);
    static readonly short[] DFA145_special = DFA.UnpackEncodedString(DFA145_specialS);
    static readonly short[][] DFA145_transition = DFA.UnpackEncodedStringArray(DFA145_transitionS);

    protected class DFA145 : DFA
    {
        public DFA145(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 1051:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*"; }
        }

    }

    const string DFA144_eotS =
        "\u0088\uffff";
    const string DFA144_eofS =
        "\x01\x1f\x02\uffff\x01\x01\u0084\uffff";
    const string DFA144_minS =
        "\x01\x05\x02\uffff\x01\x06\u0084\uffff";
    const string DFA144_maxS =
        "\x01\u00d1\x02\uffff\x01\u00d1\u0084\uffff";
    const string DFA144_acceptS =
        "\x01\uffff\x01\x01\x1d\uffff\x01\x02\x68\uffff";
    const string DFA144_specialS =
        "\u0088\uffff}>";
    static readonly string[] DFA144_transitionS = {
            "\x01\x01\x04\x1f\x01\x03\x03\x1f\x01\x01\x02\x1f\x09\x01\x03"+
            "\uffff\x05\x1f\x02\uffff\x03\x1f\x01\uffff\x01\x1f\x01\uffff"+
            "\x02\x1f\x02\uffff\x01\x1f\x05\x01\x02\uffff\x03\x1f\x03\uffff"+
            "\x06\x01\x01\uffff\x04\x01\x02\uffff\x01\x01\x01\uffff\x01\x01"+
            "\x67\uffff\x03\x1f\x02\uffff\x01\x01\x15\x1f\x01\uffff\x01\x1f"+
            "\x01\uffff\x01\x1f",
            "",
            "",
            "\x08\x01\x01\uffff\x02\x01\x0c\uffff\x05\x01\x02\uffff\x03"+
            "\x01\x01\uffff\x01\x01\x01\uffff\x02\x01\x02\uffff\x01\x01\x07"+
            "\uffff\x03\x01\x7a\uffff\x03\x01\x02\x1f\x01\uffff\x15\x01\x01"+
            "\uffff\x01\x01\x01\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA144_eot = DFA.UnpackEncodedString(DFA144_eotS);
    static readonly short[] DFA144_eof = DFA.UnpackEncodedString(DFA144_eofS);
    static readonly char[] DFA144_min = DFA.UnpackEncodedStringToUnsignedChars(DFA144_minS);
    static readonly char[] DFA144_max = DFA.UnpackEncodedStringToUnsignedChars(DFA144_maxS);
    static readonly short[] DFA144_accept = DFA.UnpackEncodedString(DFA144_acceptS);
    static readonly short[] DFA144_special = DFA.UnpackEncodedString(DFA144_specialS);
    static readonly short[][] DFA144_transition = DFA.UnpackEncodedStringArray(DFA144_transitionS);

    protected class DFA144 : DFA
    {
        public DFA144(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;

        }

        override public string Description
        {
            get { return "1052:24: (ipi2= keywordAllowedIdent )?"; }
        }

    }

    const string DFA146_eotS =
        "\x1f\uffff";
    const string DFA146_eofS =
        "\x1f\uffff";
    const string DFA146_minS =
        "\x01\x05\x1e\uffff";
    const string DFA146_maxS =
        "\x01\u00b8\x1e\uffff";
    const string DFA146_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
        "\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x0e\x01"+
        "\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16\x01"+
        "\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e";
    const string DFA146_specialS =
        "\x1f\uffff}>";
    static readonly string[] DFA146_transitionS = {
            "\x01\x1e\x04\uffff\x01\x03\x03\uffff\x01\x04\x02\uffff\x01"+
            "\x05\x01\x06\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c"+
            "\x01\x02\x15\uffff\x01\x0d\x01\x0e\x01\x0f\x01\x10\x01\x11\x08"+
            "\uffff\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16\x01\x17\x01\uffff"+
            "\x01\x18\x01\x19\x01\x1a\x01\x1b\x02\uffff\x01\x1c\x01\uffff"+
            "\x01\x1d\x6c\uffff\x01\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA146_eot = DFA.UnpackEncodedString(DFA146_eotS);
    static readonly short[] DFA146_eof = DFA.UnpackEncodedString(DFA146_eofS);
    static readonly char[] DFA146_min = DFA.UnpackEncodedStringToUnsignedChars(DFA146_minS);
    static readonly char[] DFA146_max = DFA.UnpackEncodedStringToUnsignedChars(DFA146_maxS);
    static readonly short[] DFA146_accept = DFA.UnpackEncodedString(DFA146_acceptS);
    static readonly short[] DFA146_special = DFA.UnpackEncodedString(DFA146_specialS);
    static readonly short[][] DFA146_transition = DFA.UnpackEncodedStringArray(DFA146_transitionS);

    protected class DFA146 : DFA
    {
        public DFA146(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;

        }

        override public string Description
        {
            get { return "1057:1: keywordAllowedIdent : (i1= IDENT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | SECONDS | MINUTES | FIRST | LAST | UNIDIRECTIONAL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW -> ^( IDENT[identifier] ) );"; }
        }

    }

    const string DFA157_eotS =
        "\x39\uffff";
    const string DFA157_eofS =
        "\x39\uffff";
    const string DFA157_minS =
        "\x01\u00ae\x04\x14\x34\uffff";
    const string DFA157_maxS =
        "\x01\u00b2\x04\u00fa\x34\uffff";
    const string DFA157_acceptS =
        "\x05\uffff\x01\x03\x02\uffff\x01\x04\x02\uffff\x01\x01\x01\uffff"+
        "\x01\x02\x01\uffff\x01\x05\x29\uffff";
    const string DFA157_specialS =
        "\x39\uffff}>";
    static readonly string[] DFA157_transitionS = {
            "\x01\x04\x01\uffff\x01\x01\x01\x02\x01\x03",
            "\x01\x05\x1b\uffff\x01\x08\x01\x05\u00bf\uffff\x02\x0b\x02"+
            "\x0d\x01\x05\x02\x08\x03\x0f",
            "\x01\x05\x1b\uffff\x01\x08\x01\x05\u00bf\uffff\x02\x0b\x02"+
            "\x0d\x01\x05\x02\x08\x03\x0f",
            "\x01\x05\x1b\uffff\x01\x08\x01\x05\u00bf\uffff\x02\x0b\x02"+
            "\x0d\x01\x05\x02\x08\x03\x0f",
            "\x01\x05\x1b\uffff\x01\x08\x01\x05\u00bf\uffff\x02\x0b\x02"+
            "\x0d\x01\x05\x02\x08\x03\x0f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA157_eot = DFA.UnpackEncodedString(DFA157_eotS);
    static readonly short[] DFA157_eof = DFA.UnpackEncodedString(DFA157_eofS);
    static readonly char[] DFA157_min = DFA.UnpackEncodedStringToUnsignedChars(DFA157_minS);
    static readonly char[] DFA157_max = DFA.UnpackEncodedStringToUnsignedChars(DFA157_maxS);
    static readonly short[] DFA157_accept = DFA.UnpackEncodedString(DFA157_acceptS);
    static readonly short[] DFA157_special = DFA.UnpackEncodedString(DFA157_specialS);
    static readonly short[][] DFA157_transition = DFA.UnpackEncodedStringArray(DFA157_transitionS);

    protected class DFA157 : DFA
    {
        public DFA157(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;

        }

        override public string Description
        {
            get { return "1094:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )"; }
        }

    }

    const string DFA147_eotS =
        "\x35\uffff";
    const string DFA147_eofS =
        "\x01\x05\x34\uffff";
    const string DFA147_minS =
        "\x01\x36\x04\x14\x30\uffff";
    const string DFA147_maxS =
        "\x01\u00be\x04\u00fa\x30\uffff";
    const string DFA147_acceptS =
        "\x05\uffff\x01\x02\x06\uffff\x01\x01\x28\uffff";
    const string DFA147_specialS =
        "\x35\uffff}>";
    static readonly string[] DFA147_transitionS = {
            "\x01\x05\x77\uffff\x01\x04\x01\uffff\x01\x01\x01\x02\x01\x03"+
            "\x06\uffff\x01\x05\x04\uffff\x01\x05",
            "\x01\x05\x1b\uffff\x02\x05\u00c1\uffff\x02\x0c\x06\x05",
            "\x01\x05\x1b\uffff\x02\x05\u00c1\uffff\x02\x0c\x06\x05",
            "\x01\x05\x1b\uffff\x02\x05\u00c1\uffff\x02\x0c\x06\x05",
            "\x01\x05\x1b\uffff\x02\x05\u00c1\uffff\x02\x0c\x06\x05",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA147_eot = DFA.UnpackEncodedString(DFA147_eotS);
    static readonly short[] DFA147_eof = DFA.UnpackEncodedString(DFA147_eofS);
    static readonly char[] DFA147_min = DFA.UnpackEncodedStringToUnsignedChars(DFA147_minS);
    static readonly char[] DFA147_max = DFA.UnpackEncodedStringToUnsignedChars(DFA147_maxS);
    static readonly short[] DFA147_accept = DFA.UnpackEncodedString(DFA147_acceptS);
    static readonly short[] DFA147_special = DFA.UnpackEncodedString(DFA147_specialS);
    static readonly short[][] DFA147_transition = DFA.UnpackEncodedStringArray(DFA147_transitionS);

    protected class DFA147 : DFA
    {
        public DFA147(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;

        }

        override public string Description
        {
            get { return "1095:11: ( hourPart )?"; }
        }

    }

    const string DFA148_eotS =
        "\x2d\uffff";
    const string DFA148_eofS =
        "\x01\x05\x2c\uffff";
    const string DFA148_minS =
        "\x01\x36\x04\x14\x28\uffff";
    const string DFA148_maxS =
        "\x01\u00be\x04\u00fa\x28\uffff";
    const string DFA148_acceptS =
        "\x05\uffff\x01\x02\x06\uffff\x01\x01\x20\uffff";
    const string DFA148_specialS =
        "\x2d\uffff}>";
    static readonly string[] DFA148_transitionS = {
            "\x01\x05\x77\uffff\x01\x04\x01\uffff\x01\x01\x01\x02\x01\x03"+
            "\x06\uffff\x01\x05\x04\uffff\x01\x05",
            "\x01\x0c\x1b\uffff\x01\x05\x01\x0c\u00c3\uffff\x01\x0c\x05"+
            "\x05",
            "\x01\x0c\x1b\uffff\x01\x05\x01\x0c\u00c3\uffff\x01\x0c\x05"+
            "\x05",
            "\x01\x0c\x1b\uffff\x01\x05\x01\x0c\u00c3\uffff\x01\x0c\x05"+
            "\x05",
            "\x01\x0c\x1b\uffff\x01\x05\x01\x0c\u00c3\uffff\x01\x0c\x05"+
            "\x05",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA148_eot = DFA.UnpackEncodedString(DFA148_eotS);
    static readonly short[] DFA148_eof = DFA.UnpackEncodedString(DFA148_eofS);
    static readonly char[] DFA148_min = DFA.UnpackEncodedStringToUnsignedChars(DFA148_minS);
    static readonly char[] DFA148_max = DFA.UnpackEncodedStringToUnsignedChars(DFA148_maxS);
    static readonly short[] DFA148_accept = DFA.UnpackEncodedString(DFA148_acceptS);
    static readonly short[] DFA148_special = DFA.UnpackEncodedString(DFA148_specialS);
    static readonly short[][] DFA148_transition = DFA.UnpackEncodedStringArray(DFA148_transitionS);

    protected class DFA148 : DFA
    {
        public DFA148(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;

        }

        override public string Description
        {
            get { return "1095:21: ( minutePart )?"; }
        }

    }

    const string DFA149_eotS =
        "\x21\uffff";
    const string DFA149_eofS =
        "\x01\x05\x20\uffff";
    const string DFA149_minS =
        "\x01\x36\x04\x30\x1c\uffff";
    const string DFA149_maxS =
        "\x01\u00be\x04\u00fa\x1c\uffff";
    const string DFA149_acceptS =
        "\x05\uffff\x01\x02\x06\uffff\x01\x01\x14\uffff";
    const string DFA149_specialS =
        "\x21\uffff}>";
    static readonly string[] DFA149_transitionS = {
            "\x01\x05\x77\uffff\x01\x04\x01\uffff\x01\x01\x01\x02\x01\x03"+
            "\x06\uffff\x01\x05\x04\uffff\x01\x05",
            "\x01\x0c\u00c5\uffff\x02\x0c\x03\x05",
            "\x01\x0c\u00c5\uffff\x02\x0c\x03\x05",
            "\x01\x0c\u00c5\uffff\x02\x0c\x03\x05",
            "\x01\x0c\u00c5\uffff\x02\x0c\x03\x05",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA149_eot = DFA.UnpackEncodedString(DFA149_eotS);
    static readonly short[] DFA149_eof = DFA.UnpackEncodedString(DFA149_eofS);
    static readonly char[] DFA149_min = DFA.UnpackEncodedStringToUnsignedChars(DFA149_minS);
    static readonly char[] DFA149_max = DFA.UnpackEncodedStringToUnsignedChars(DFA149_maxS);
    static readonly short[] DFA149_accept = DFA.UnpackEncodedString(DFA149_acceptS);
    static readonly short[] DFA149_special = DFA.UnpackEncodedString(DFA149_specialS);
    static readonly short[][] DFA149_transition = DFA.UnpackEncodedStringArray(DFA149_transitionS);

    protected class DFA149 : DFA
    {
        public DFA149(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;

        }

        override public string Description
        {
            get { return "1095:33: ( secondPart )?"; }
        }

    }

    const string DFA151_eotS =
        "\x2d\uffff";
    const string DFA151_eofS =
        "\x01\x05\x2c\uffff";
    const string DFA151_minS =
        "\x01\x36\x04\x14\x28\uffff";
    const string DFA151_maxS =
        "\x01\u00be\x04\u00fa\x28\uffff";
    const string DFA151_acceptS =
        "\x05\uffff\x01\x02\x06\uffff\x01\x01\x20\uffff";
    const string DFA151_specialS =
        "\x2d\uffff}>";
    static readonly string[] DFA151_transitionS = {
            "\x01\x05\x77\uffff\x01\x04\x01\uffff\x01\x01\x01\x02\x01\x03"+
            "\x06\uffff\x01\x05\x04\uffff\x01\x05",
            "\x01\x0c\x1b\uffff\x01\x05\x01\x0c\u00c3\uffff\x01\x0c\x05"+
            "\x05",
            "\x01\x0c\x1b\uffff\x01\x05\x01\x0c\u00c3\uffff\x01\x0c\x05"+
            "\x05",
            "\x01\x0c\x1b\uffff\x01\x05\x01\x0c\u00c3\uffff\x01\x0c\x05"+
            "\x05",
            "\x01\x0c\x1b\uffff\x01\x05\x01\x0c\u00c3\uffff\x01\x0c\x05"+
            "\x05",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA151_eot = DFA.UnpackEncodedString(DFA151_eotS);
    static readonly short[] DFA151_eof = DFA.UnpackEncodedString(DFA151_eofS);
    static readonly char[] DFA151_min = DFA.UnpackEncodedStringToUnsignedChars(DFA151_minS);
    static readonly char[] DFA151_max = DFA.UnpackEncodedStringToUnsignedChars(DFA151_maxS);
    static readonly short[] DFA151_accept = DFA.UnpackEncodedString(DFA151_acceptS);
    static readonly short[] DFA151_special = DFA.UnpackEncodedString(DFA151_specialS);
    static readonly short[][] DFA151_transition = DFA.UnpackEncodedStringArray(DFA151_transitionS);

    protected class DFA151 : DFA
    {
        public DFA151(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;

        }

        override public string Description
        {
            get { return "1096:13: ( minutePart )?"; }
        }

    }

    const string DFA152_eotS =
        "\x21\uffff";
    const string DFA152_eofS =
        "\x01\x05\x20\uffff";
    const string DFA152_minS =
        "\x01\x36\x04\x30\x1c\uffff";
    const string DFA152_maxS =
        "\x01\u00be\x04\u00fa\x1c\uffff";
    const string DFA152_acceptS =
        "\x05\uffff\x01\x02\x03\uffff\x01\x01\x17\uffff";
    const string DFA152_specialS =
        "\x21\uffff}>";
    static readonly string[] DFA152_transitionS = {
            "\x01\x05\x77\uffff\x01\x04\x01\uffff\x01\x01\x01\x02\x01\x03"+
            "\x06\uffff\x01\x05\x04\uffff\x01\x05",
            "\x01\x09\u00c5\uffff\x02\x09\x03\x05",
            "\x01\x09\u00c5\uffff\x02\x09\x03\x05",
            "\x01\x09\u00c5\uffff\x02\x09\x03\x05",
            "\x01\x09\u00c5\uffff\x02\x09\x03\x05",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA152_eot = DFA.UnpackEncodedString(DFA152_eotS);
    static readonly short[] DFA152_eof = DFA.UnpackEncodedString(DFA152_eofS);
    static readonly char[] DFA152_min = DFA.UnpackEncodedStringToUnsignedChars(DFA152_minS);
    static readonly char[] DFA152_max = DFA.UnpackEncodedStringToUnsignedChars(DFA152_maxS);
    static readonly short[] DFA152_accept = DFA.UnpackEncodedString(DFA152_acceptS);
    static readonly short[] DFA152_special = DFA.UnpackEncodedString(DFA152_specialS);
    static readonly short[][] DFA152_transition = DFA.UnpackEncodedStringArray(DFA152_transitionS);

    protected class DFA152 : DFA
    {
        public DFA152(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;

        }

        override public string Description
        {
            get { return "1096:25: ( secondPart )?"; }
        }

    }

    const string DFA154_eotS =
        "\x21\uffff";
    const string DFA154_eofS =
        "\x01\x05\x20\uffff";
    const string DFA154_minS =
        "\x01\x36\x04\x30\x1c\uffff";
    const string DFA154_maxS =
        "\x01\u00be\x04\u00fa\x1c\uffff";
    const string DFA154_acceptS =
        "\x05\uffff\x01\x02\x03\uffff\x01\x01\x17\uffff";
    const string DFA154_specialS =
        "\x21\uffff}>";
    static readonly string[] DFA154_transitionS = {
            "\x01\x05\x77\uffff\x01\x04\x01\uffff\x01\x01\x01\x02\x01\x03"+
            "\x06\uffff\x01\x05\x04\uffff\x01\x05",
            "\x01\x09\u00c5\uffff\x02\x09\x03\x05",
            "\x01\x09\u00c5\uffff\x02\x09\x03\x05",
            "\x01\x09\u00c5\uffff\x02\x09\x03\x05",
            "\x01\x09\u00c5\uffff\x02\x09\x03\x05",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA154_eot = DFA.UnpackEncodedString(DFA154_eotS);
    static readonly short[] DFA154_eof = DFA.UnpackEncodedString(DFA154_eofS);
    static readonly char[] DFA154_min = DFA.UnpackEncodedStringToUnsignedChars(DFA154_minS);
    static readonly char[] DFA154_max = DFA.UnpackEncodedStringToUnsignedChars(DFA154_maxS);
    static readonly short[] DFA154_accept = DFA.UnpackEncodedString(DFA154_acceptS);
    static readonly short[] DFA154_special = DFA.UnpackEncodedString(DFA154_specialS);
    static readonly short[][] DFA154_transition = DFA.UnpackEncodedStringArray(DFA154_transitionS);

    protected class DFA154 : DFA
    {
        public DFA154(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;

        }

        override public string Description
        {
            get { return "1097:15: ( secondPart )?"; }
        }

    }

 

    public static readonly BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1123 = new BitSet(new ulong[]{0x0000000000000000UL});
    public static readonly BitSet FOLLOW_EOF_in_startPatternExpressionRule1127 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1141 = new BitSet(new ulong[]{0x0000000000000000UL});
    public static readonly BitSet FOLLOW_EOF_in_startEPLExpressionRule1145 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_eventProperty_in_startEventPropertyRule1168 = new BitSet(new ulong[]{0x0000000000000000UL});
    public static readonly BitSet FOLLOW_EOF_in_startEventPropertyRule1172 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NUM_INT_in_number1191 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NUM_LONG_in_number1208 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NUM_FLOAT_in_number1225 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NUM_DOUBLE_in_number1242 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_QUESTION_in_substitution1263 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MINUS_in_constant1284 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0007400000000000UL});
    public static readonly BitSet FOLLOW_PLUS_in_constant1290 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0007400000000000UL});
    public static readonly BitSet FOLLOW_number_in_constant1294 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_stringconstant_in_constant1315 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_238_in_constant1328 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_239_in_constant1348 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_240_in_constant1368 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STRING_LITERAL_in_stringconstant1390 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant1406 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_selectExpr_in_eplExpression1428 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_createWindowExpr_in_eplExpression1433 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_createVariableExpr_in_eplExpression1438 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_onExpr_in_eplExpression1443 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INSERT_in_selectExpr1456 = new BitSet(new ulong[]{0x0620000000000000UL});
    public static readonly BitSet FOLLOW_insertIntoExpr_in_selectExpr1459 = new BitSet(new ulong[]{0x0000000004000000UL});
    public static readonly BitSet FOLLOW_SELECT_in_selectExpr1465 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_selectClause_in_selectExpr1468 = new BitSet(new ulong[]{0x0000000200000000UL});
    public static readonly BitSet FOLLOW_FROM_in_selectExpr1472 = new BitSet(new ulong[]{0x6000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_fromClause_in_selectExpr1475 = new BitSet(new ulong[]{0x00404C0000008002UL});
    public static readonly BitSet FOLLOW_WHERE_in_selectExpr1480 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_whereClause_in_selectExpr1483 = new BitSet(new ulong[]{0x00404C0000000002UL});
    public static readonly BitSet FOLLOW_GROUP_in_selectExpr1490 = new BitSet(new ulong[]{0x0000020000000000UL});
    public static readonly BitSet FOLLOW_BY_in_selectExpr1493 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_groupByListExpr_in_selectExpr1496 = new BitSet(new ulong[]{0x0040480000000002UL});
    public static readonly BitSet FOLLOW_HAVING_in_selectExpr1503 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_havingClause_in_selectExpr1506 = new BitSet(new ulong[]{0x0040400000000002UL});
    public static readonly BitSet FOLLOW_OUTPUT_in_selectExpr1513 = new BitSet(new ulong[]{0x000C200000004000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_outputLimit_in_selectExpr1516 = new BitSet(new ulong[]{0x0040000000000002UL});
    public static readonly BitSet FOLLOW_ORDER_in_selectExpr1523 = new BitSet(new ulong[]{0x0000020000000000UL});
    public static readonly BitSet FOLLOW_BY_in_selectExpr1526 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_orderByListExpr_in_selectExpr1529 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ON_in_onExpr1544 = new BitSet(new ulong[]{0x2000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_eventFilterExpression_in_onExpr1547 = new BitSet(new ulong[]{0x0010000004010000UL,0x0000000000000500UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_patternInclusionExpression_in_onExpr1551 = new BitSet(new ulong[]{0x0010000004010000UL,0x0000000000000500UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_AS_in_onExpr1555 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_onExpr1559 = new BitSet(new ulong[]{0x0010000004010000UL,0x0000000000000500UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_onExpr1565 = new BitSet(new ulong[]{0x0010000004010000UL,0x0000000000000500UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_onDeleteExpr_in_onExpr1573 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_onSelectExpr_in_onExpr1577 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_onSetExpr_in_onExpr1581 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INSERT_in_onSelectExpr1634 = new BitSet(new ulong[]{0x0620000000000000UL});
    public static readonly BitSet FOLLOW_insertIntoExpr_in_onSelectExpr1636 = new BitSet(new ulong[]{0x0000000004000000UL});
    public static readonly BitSet FOLLOW_SELECT_in_onSelectExpr1642 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_selectionList_in_onSelectExpr1644 = new BitSet(new ulong[]{0x0000000200000000UL});
    public static readonly BitSet FOLLOW_onExprFrom_in_onSelectExpr1648 = new BitSet(new ulong[]{0x00400C0000008002UL});
    public static readonly BitSet FOLLOW_WHERE_in_onSelectExpr1653 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_whereClause_in_onSelectExpr1655 = new BitSet(new ulong[]{0x00400C0000000002UL});
    public static readonly BitSet FOLLOW_GROUP_in_onSelectExpr1664 = new BitSet(new ulong[]{0x0000020000000000UL});
    public static readonly BitSet FOLLOW_BY_in_onSelectExpr1666 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_groupByListExpr_in_onSelectExpr1668 = new BitSet(new ulong[]{0x0040080000000002UL});
    public static readonly BitSet FOLLOW_HAVING_in_onSelectExpr1675 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_havingClause_in_onSelectExpr1677 = new BitSet(new ulong[]{0x0040000000000002UL});
    public static readonly BitSet FOLLOW_ORDER_in_onSelectExpr1684 = new BitSet(new ulong[]{0x0000020000000000UL});
    public static readonly BitSet FOLLOW_BY_in_onSelectExpr1686 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_orderByListExpr_in_onSelectExpr1688 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DELETE_in_onDeleteExpr1741 = new BitSet(new ulong[]{0x0000000200000000UL});
    public static readonly BitSet FOLLOW_onExprFrom_in_onDeleteExpr1745 = new BitSet(new ulong[]{0x0000000000008002UL});
    public static readonly BitSet FOLLOW_WHERE_in_onDeleteExpr1750 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_whereClause_in_onDeleteExpr1752 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SET_in_onSetExpr1792 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_onSetAssignment_in_onSetExpr1794 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_onSetExpr1797 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_onSetAssignment_in_onSetExpr1799 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_onSetAssignment1824 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0400000000000000UL});
    public static readonly BitSet FOLLOW_EQUALS_in_onSetAssignment1826 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_onSetAssignment1829 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_FROM_in_onExprFrom1842 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_onExprFrom1846 = new BitSet(new ulong[]{0x0000000000010002UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_AS_in_onExprFrom1849 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_onExprFrom1853 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_onExprFrom1859 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CREATE_in_createWindowExpr1887 = new BitSet(new ulong[]{0x0000000000000020UL});
    public static readonly BitSet FOLLOW_WINDOW_in_createWindowExpr1889 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_createWindowExpr1893 = new BitSet(new ulong[]{0x0000000000010000UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_createWindowExpr1896 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_viewExpression_in_createWindowExpr1898 = new BitSet(new ulong[]{0x0000000000010000UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_createWindowExpr1901 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_viewExpression_in_createWindowExpr1903 = new BitSet(new ulong[]{0x0000000000010000UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_AS_in_createWindowExpr1909 = new BitSet(new ulong[]{0x0000000004000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_SELECT_in_createWindowExpr1912 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x1100000000000000UL});
    public static readonly BitSet FOLLOW_createSelectionList_in_createWindowExpr1914 = new BitSet(new ulong[]{0x0000000200000000UL});
    public static readonly BitSet FOLLOW_FROM_in_createWindowExpr1916 = new BitSet(new ulong[]{0x0000000004000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_classIdentifier_in_createWindowExpr1920 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CREATE_in_createVariableExpr1952 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_VARIABLE_in_createVariableExpr1954 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_createVariableExpr1958 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_createVariableExpr1962 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0400000000000000UL});
    public static readonly BitSet FOLLOW_EQUALS_in_createVariableExpr1965 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_createVariableExpr1967 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_createSelectionListElement_in_createSelectionList2010 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_createSelectionList2013 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x1100000000000000UL});
    public static readonly BitSet FOLLOW_createSelectionListElement_in_createSelectionList2015 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_STAR_in_createSelectionListElement2044 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_eventProperty_in_createSelectionListElement2056 = new BitSet(new ulong[]{0x0000000000010002UL});
    public static readonly BitSet FOLLOW_AS_in_createSelectionListElement2059 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_createSelectionListElement2063 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ISTREAM_in_insertIntoExpr2104 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RSTREAM_in_insertIntoExpr2110 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_INTO_in_insertIntoExpr2114 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_insertIntoExpr2118 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_insertIntoColumnList_in_insertIntoExpr2121 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_insertIntoColumnList2155 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_insertIntoColumnList2157 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_insertIntoColumnList2160 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_insertIntoColumnList2162 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4200000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_insertIntoColumnList2166 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_streamExpression_in_fromClause2201 = new BitSet(new ulong[]{0x0000007000000000UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_regularJoin_in_fromClause2204 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_outerJoinList_in_fromClause2208 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_regularJoin2222 = new BitSet(new ulong[]{0x6000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_streamExpression_in_regularJoin2225 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_outerJoin_in_outerJoinList2239 = new BitSet(new ulong[]{0x0000007000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_outerJoin_in_outerJoinList2242 = new BitSet(new ulong[]{0x0000007000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_LEFT_in_outerJoin2269 = new BitSet(new ulong[]{0x0000000400000000UL});
    public static readonly BitSet FOLLOW_RIGHT_in_outerJoin2273 = new BitSet(new ulong[]{0x0000000400000000UL});
    public static readonly BitSet FOLLOW_FULL_in_outerJoin2277 = new BitSet(new ulong[]{0x0000000400000000UL});
    public static readonly BitSet FOLLOW_OUTER_in_outerJoin2280 = new BitSet(new ulong[]{0x0000000800000000UL});
    public static readonly BitSet FOLLOW_JOIN_in_outerJoin2282 = new BitSet(new ulong[]{0x6000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_streamExpression_in_outerJoin2284 = new BitSet(new ulong[]{0x0000008000000000UL});
    public static readonly BitSet FOLLOW_outerJoinIdent_in_outerJoin2286 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ON_in_outerJoinIdent2337 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x1100000000000000UL});
    public static readonly BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent2340 = new BitSet(new ulong[]{0x0000000000001002UL});
    public static readonly BitSet FOLLOW_AND_EXPR_in_outerJoinIdent2343 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x1100000000000000UL});
    public static readonly BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent2346 = new BitSet(new ulong[]{0x0000000000001002UL});
    public static readonly BitSet FOLLOW_eventProperty_in_outerJoinIdentPair2361 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0400000000000000UL});
    public static readonly BitSet FOLLOW_EQUALS_in_outerJoinIdentPair2363 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x1100000000000000UL});
    public static readonly BitSet FOLLOW_eventProperty_in_outerJoinIdentPair2366 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_evalOrExpression_in_whereClause2388 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_RSTREAM_in_selectClause2424 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_ISTREAM_in_selectClause2430 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_IRSTREAM_in_selectClause2436 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_selectionList_in_selectClause2440 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_selectionListElement_in_selectionList2467 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_selectionList2470 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_selectionListElement_in_selectionList2473 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_STAR_in_selectionListElement2499 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_streamSelector_in_selectionListElement2515 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_selectionListElement2520 = new BitSet(new ulong[]{0x0000000000010002UL});
    public static readonly BitSet FOLLOW_AS_in_selectionListElement2523 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x1100000000000000UL});
    public static readonly BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement2527 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_streamSelector2583 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_streamSelector2585 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x1000000000000000UL});
    public static readonly BitSet FOLLOW_STAR_in_streamSelector2587 = new BitSet(new ulong[]{0x0000000000010002UL});
    public static readonly BitSet FOLLOW_AS_in_streamSelector2590 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_streamSelector2594 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_eventFilterExpression_in_streamExpression2624 = new BitSet(new ulong[]{0x1000000000010002UL,0x0000000000000000UL,0x0900000000000000UL});
    public static readonly BitSet FOLLOW_patternInclusionExpression_in_streamExpression2628 = new BitSet(new ulong[]{0x1000000000010002UL,0x0000000000000000UL,0x0900000000000000UL});
    public static readonly BitSet FOLLOW_databaseJoinExpression_in_streamExpression2632 = new BitSet(new ulong[]{0x1000000000010002UL,0x0000000000000000UL,0x0900000000000000UL});
    public static readonly BitSet FOLLOW_methodJoinExpression_in_streamExpression2636 = new BitSet(new ulong[]{0x1000000000010002UL,0x0000000000000000UL,0x0900000000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_streamExpression2642 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_viewExpression_in_streamExpression2644 = new BitSet(new ulong[]{0x1000000000010002UL,0x0000000000000000UL,0x0900000000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_streamExpression2647 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_viewExpression_in_streamExpression2649 = new BitSet(new ulong[]{0x1000000000010002UL,0x0000000000000000UL,0x0900000000000000UL});
    public static readonly BitSet FOLLOW_AS_in_streamExpression2656 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_streamExpression2660 = new BitSet(new ulong[]{0x1000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_streamExpression2666 = new BitSet(new ulong[]{0x1000000000000002UL});
    public static readonly BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression2673 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PATTERN_in_patternInclusionExpression2722 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x8000000000000000UL});
    public static readonly BitSet FOLLOW_LBRACK_in_patternInclusionExpression2724 = new BitSet(new ulong[]{0x0000000004006000UL,0x0000000000000000UL,0x2100000000000000UL});
    public static readonly BitSet FOLLOW_patternExpression_in_patternInclusionExpression2726 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_RBRACK_in_patternInclusionExpression2728 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SQL_in_databaseJoinExpression2761 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COLON_in_databaseJoinExpression2763 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_databaseJoinExpression2767 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x8000000000000000UL});
    public static readonly BitSet FOLLOW_LBRACK_in_databaseJoinExpression2769 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x00C0000000000000UL});
    public static readonly BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression2774 = new BitSet(new ulong[]{0x8000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression2780 = new BitSet(new ulong[]{0x8000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_METADATASQL_in_databaseJoinExpression2784 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x00C0000000000000UL});
    public static readonly BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression2789 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression2795 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_RBRACK_in_databaseJoinExpression2800 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_methodJoinExpression2851 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COLON_in_methodJoinExpression2853 = new BitSet(new ulong[]{0x0000000004000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_classIdentifier_in_methodJoinExpression2855 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_methodJoinExpression2858 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x71FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expressionList_in_methodJoinExpression2860 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_methodJoinExpression2863 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_viewExpression2916 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COLON_in_viewExpression2918 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_viewExpression2922 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_viewExpression2924 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0xD1F7400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_parameterSet_in_viewExpression2926 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_viewExpression2929 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_groupByListExpr2968 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_groupByListExpr2971 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_groupByListExpr2973 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_orderByListElement_in_orderByListExpr3008 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_orderByListExpr3011 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_orderByListElement_in_orderByListExpr3013 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_expression_in_orderByListElement3038 = new BitSet(new ulong[]{0x0180000000000002UL});
    public static readonly BitSet FOLLOW_ASC_in_orderByListElement3043 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DESC_in_orderByListElement3047 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_evalOrExpression_in_havingClause3085 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ALL_in_outputLimit3123 = new BitSet(new ulong[]{0x0000000000004000UL});
    public static readonly BitSet FOLLOW_FIRST_in_outputLimit3127 = new BitSet(new ulong[]{0x0000000000004000UL});
    public static readonly BitSet FOLLOW_LAST_in_outputLimit3131 = new BitSet(new ulong[]{0x0000000000004000UL});
    public static readonly BitSet FOLLOW_SNAPSHOT_in_outputLimit3135 = new BitSet(new ulong[]{0x0000000000004000UL});
    public static readonly BitSet FOLLOW_EVERY_EXPR_in_outputLimit3139 = new BitSet(new ulong[]{0x0008000000000000UL,0x0000000000000010UL,0x11F7400000000000UL,0x0001C00000000000UL});
    public static readonly BitSet FOLLOW_time_period_in_outputLimit3157 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_number_in_outputLimit3164 = new BitSet(new ulong[]{0x0003800000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_outputLimit3170 = new BitSet(new ulong[]{0x0003800000000000UL});
    public static readonly BitSet FOLLOW_EVENTS_in_outputLimit3176 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SECONDS_in_outputLimit3180 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MINUTES_in_outputLimit3184 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_WHEN_in_whenClause3292 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_whenClause3295 = new BitSet(new ulong[]{0x0000000080000000UL});
    public static readonly BitSet FOLLOW_THEN_in_whenClause3297 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_whenClause3300 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ELSE_in_elseClause3313 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_elseClause3316 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_caseExpression_in_expression3329 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CASE_in_caseExpression3343 = new BitSet(new ulong[]{0x0000000040000000UL});
    public static readonly BitSet FOLLOW_whenClause_in_caseExpression3346 = new BitSet(new ulong[]{0x0000000160000000UL});
    public static readonly BitSet FOLLOW_elseClause_in_caseExpression3349 = new BitSet(new ulong[]{0x0000000100000000UL});
    public static readonly BitSet FOLLOW_END_in_caseExpression3352 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CASE_in_caseExpression3363 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_caseExpression3365 = new BitSet(new ulong[]{0x0000000160000000UL});
    public static readonly BitSet FOLLOW_whenClause_in_caseExpression3367 = new BitSet(new ulong[]{0x0000000160000000UL});
    public static readonly BitSet FOLLOW_elseClause_in_caseExpression3370 = new BitSet(new ulong[]{0x0000000100000000UL});
    public static readonly BitSet FOLLOW_END_in_caseExpression3373 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_evalOrExpression_in_caseExpression3397 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_evalAndExpression_in_evalOrExpression3408 = new BitSet(new ulong[]{0x0000000000000802UL});
    public static readonly BitSet FOLLOW_OR_EXPR_in_evalOrExpression3413 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_evalAndExpression_in_evalOrExpression3415 = new BitSet(new ulong[]{0x0000000000000802UL});
    public static readonly BitSet FOLLOW_bitWiseExpression_in_evalAndExpression3447 = new BitSet(new ulong[]{0x0000000000001002UL});
    public static readonly BitSet FOLLOW_AND_EXPR_in_evalAndExpression3452 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_bitWiseExpression_in_evalAndExpression3454 = new BitSet(new ulong[]{0x0000000000001002UL});
    public static readonly BitSet FOLLOW_negatedExpression_in_bitWiseExpression3486 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x000000000000001CUL});
    public static readonly BitSet FOLLOW_BAND_in_bitWiseExpression3491 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_BOR_in_bitWiseExpression3494 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_BXOR_in_bitWiseExpression3497 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_negatedExpression_in_bitWiseExpression3501 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x000000000000001CUL});
    public static readonly BitSet FOLLOW_evalEqualsExpression_in_negatedExpression3516 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NOT_EXPR_in_negatedExpression3522 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_evalEqualsExpression_in_negatedExpression3525 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression3538 = new BitSet(new ulong[]{0x0000010000000002UL,0x0000000000000000UL,0x0400000000000000UL,0x0000000000000060UL});
    public static readonly BitSet FOLLOW_EQUALS_in_evalEqualsExpression3551 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_IS_in_evalEqualsExpression3569 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_IS_in_evalEqualsExpression3583 = new BitSet(new ulong[]{0x0000000000002000UL});
    public static readonly BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression3585 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_SQL_NE_in_evalEqualsExpression3599 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression3613 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression3623 = new BitSet(new ulong[]{0x0000010000000002UL,0x0000000000000000UL,0x0400000000000000UL,0x0000000000000060UL});
    public static readonly BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression3684 = new BitSet(new ulong[]{0x00000000000023C2UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000780UL});
    public static readonly BitSet FOLLOW_LT_in_evalRelationalExpression3716 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_GT_in_evalRelationalExpression3720 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_LE_in_evalRelationalExpression3724 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_GE_in_evalRelationalExpression3728 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression3731 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000780UL});
    public static readonly BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression3782 = new BitSet(new ulong[]{0x00000000000003C0UL});
    public static readonly BitSet FOLLOW_IN_SET_in_evalRelationalExpression3809 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0xA000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_evalRelationalExpression3821 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_LBRACK_in_evalRelationalExpression3827 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_evalRelationalExpression3830 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4200000000000000UL,0x0000000000000003UL});
    public static readonly BitSet FOLLOW_COLON_in_evalRelationalExpression3852 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_evalRelationalExpression3855 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_COMMA_in_evalRelationalExpression3881 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_evalRelationalExpression3883 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4200000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_RPAREN_in_evalRelationalExpression3909 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_RBRACK_in_evalRelationalExpression3915 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IN_SET_in_evalRelationalExpression4038 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression4040 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BETWEEN_in_evalRelationalExpression4086 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_betweenList_in_evalRelationalExpression4088 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LIKE_in_evalRelationalExpression4138 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression4140 = new BitSet(new ulong[]{0x0000000000000402UL});
    public static readonly BitSet FOLLOW_ESCAPE_in_evalRelationalExpression4143 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x00C0000000000000UL});
    public static readonly BitSet FOLLOW_stringconstant_in_evalRelationalExpression4145 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_REGEXP_in_evalRelationalExpression4197 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression4199 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery4261 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_additiveExpression_in_concatenationExpr4286 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_LOR_in_concatenationExpr4292 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_additiveExpression_in_concatenationExpr4294 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_LOR_in_concatenationExpr4298 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_additiveExpression_in_concatenationExpr4300 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_multiplyExpression_in_additiveExpression4341 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0030000000000000UL});
    public static readonly BitSet FOLLOW_PLUS_in_additiveExpression4346 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_MINUS_in_additiveExpression4349 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_multiplyExpression_in_additiveExpression4353 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0030000000000000UL});
    public static readonly BitSet FOLLOW_unaryExpression_in_multiplyExpression4367 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x1000000000000000UL,0x0000000000003000UL});
    public static readonly BitSet FOLLOW_STAR_in_multiplyExpression4372 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_DIV_in_multiplyExpression4375 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_MOD_in_multiplyExpression4378 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_unaryExpression_in_multiplyExpression4382 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x1000000000000000UL,0x0000000000003000UL});
    public static readonly BitSet FOLLOW_MINUS_in_unaryExpression4397 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x91F7400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_eventProperty_in_unaryExpression4399 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constant_in_unaryExpression4412 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_substitution_in_unaryExpression4417 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_unaryExpression4422 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_unaryExpression4425 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_unaryExpression4427 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression4433 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_builtinFunc_in_unaryExpression4445 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arrayExpression_in_unaryExpression4451 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_subSelectExpression_in_unaryExpression4456 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression4461 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_subQueryExpr_in_subSelectExpression4478 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_EXISTS_in_existsSubSelectExpression4500 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression4502 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_subQueryExpr4535 = new BitSet(new ulong[]{0x0000000004000000UL});
    public static readonly BitSet FOLLOW_SELECT_in_subQueryExpr4541 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_selectionListElement_in_subQueryExpr4544 = new BitSet(new ulong[]{0x0000000200000000UL});
    public static readonly BitSet FOLLOW_FROM_in_subQueryExpr4551 = new BitSet(new ulong[]{0x0000000004000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr4554 = new BitSet(new ulong[]{0x0000000000008000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_WHERE_in_subQueryExpr4562 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_whereClause_in_subQueryExpr4565 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_subQueryExpr4574 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr4598 = new BitSet(new ulong[]{0x0000000000010002UL,0x0000000000000000UL,0x0900000000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_subSelectFilterExpr4603 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_viewExpression_in_subSelectFilterExpr4605 = new BitSet(new ulong[]{0x0000000000010002UL,0x0000000000000000UL,0x0900000000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_subSelectFilterExpr4608 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_viewExpression_in_subSelectFilterExpr4610 = new BitSet(new ulong[]{0x0000000000010002UL,0x0000000000000000UL,0x0900000000000000UL});
    public static readonly BitSet FOLLOW_AS_in_subSelectFilterExpr4617 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_subSelectFilterExpr4621 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_subSelectFilterExpr4627 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LCURLY_in_arrayExpression4659 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C0000000C000UL});
    public static readonly BitSet FOLLOW_expression_in_arrayExpression4662 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL,0x0000000000008000UL});
    public static readonly BitSet FOLLOW_COMMA_in_arrayExpression4665 = new BitSet(new ulong[]{0xFE0F80000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_arrayExpression4667 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL,0x0000000000008000UL});
    public static readonly BitSet FOLLOW_RCURLY_in_arrayExpression4674 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SUM_in_builtinFunc4697 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc4700 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_ALL_in_builtinFunc4704 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_DISTINCT_in_builtinFunc4709 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_builtinFunc4713 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc4715 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_AVG_in_builtinFunc4721 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc4724 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_ALL_in_builtinFunc4728 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_DISTINCT_in_builtinFunc4733 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_builtinFunc4737 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc4739 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COUNT_in_builtinFunc4745 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc4748 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_ALL_in_builtinFunc4760 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_DISTINCT_in_builtinFunc4765 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_builtinFunc4769 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_STAR_in_builtinFunc4780 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc4791 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MEDIAN_in_builtinFunc4797 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc4800 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_ALL_in_builtinFunc4804 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_DISTINCT_in_builtinFunc4809 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_builtinFunc4813 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc4815 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STDDEV_in_builtinFunc4821 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc4824 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_ALL_in_builtinFunc4828 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_DISTINCT_in_builtinFunc4833 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_builtinFunc4837 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc4839 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_AVEDEV_in_builtinFunc4845 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc4848 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_ALL_in_builtinFunc4852 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_DISTINCT_in_builtinFunc4857 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_builtinFunc4861 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc4863 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COALESCE_in_builtinFunc4869 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc4872 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_builtinFunc4875 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_builtinFunc4877 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_builtinFunc4880 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_builtinFunc4883 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_builtinFunc4886 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4200000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc4890 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PREVIOUS_in_builtinFunc4896 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc4899 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_builtinFunc4902 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_builtinFunc4904 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x91F7400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_eventProperty_in_builtinFunc4907 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc4909 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PRIOR_in_builtinFunc4915 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc4918 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_NUM_INT_in_builtinFunc4921 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_builtinFunc4923 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x91F7400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_eventProperty_in_builtinFunc4926 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc4928 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INSTANCEOF_in_builtinFunc4938 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc4941 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_builtinFunc4944 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_builtinFunc4946 = new BitSet(new ulong[]{0x0000000004000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_classIdentifier_in_builtinFunc4949 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_builtinFunc4952 = new BitSet(new ulong[]{0x0000000004000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_classIdentifier_in_builtinFunc4955 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4200000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc4959 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CAST_in_builtinFunc4965 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc4968 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_builtinFunc4971 = new BitSet(new ulong[]{0x0000000000010000UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_builtinFunc4974 = new BitSet(new ulong[]{0x0000000004000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_AS_in_builtinFunc4979 = new BitSet(new ulong[]{0x0000000004000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_classIdentifier_in_builtinFunc4983 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc4985 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_EXISTS_in_builtinFunc4991 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc4994 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x91F7400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_eventProperty_in_builtinFunc4997 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc4999 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc5005 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_builtinFunc5009 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_builtinFunc5012 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MAX_in_maxFunc5028 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_MIN_in_maxFunc5033 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_maxFunc5037 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_maxFunc5040 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_maxFunc5043 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_maxFunc5046 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_maxFunc5049 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_maxFunc5052 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4200000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_maxFunc5059 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction5078 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction5083 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction5096 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_libFunction5098 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_funcIdent_in_libFunction5102 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_libFunction5104 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x71FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_libFunctionArgs_in_libFunction5107 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_libFunction5111 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_funcIdent5141 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MAX_in_funcIdent5148 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MIN_in_funcIdent5160 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ALL_in_libFunctionArgs5178 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_DISTINCT_in_libFunctionArgs5183 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_libFunctionArgs5187 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_libFunctionArgs5190 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_libFunctionArgs5193 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_concatenationExpr_in_betweenList5207 = new BitSet(new ulong[]{0x0000000000001000UL});
    public static readonly BitSet FOLLOW_AND_EXPR_in_betweenList5209 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000AFFUL,0x21FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_concatenationExpr_in_betweenList5212 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_followedByExpression_in_patternExpression5240 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_orExpression_in_followedByExpression5252 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
    public static readonly BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression5257 = new BitSet(new ulong[]{0x0000000004006000UL,0x0000000000000000UL,0x2100000000000000UL});
    public static readonly BitSet FOLLOW_orExpression_in_followedByExpression5259 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
    public static readonly BitSet FOLLOW_andExpression_in_orExpression5298 = new BitSet(new ulong[]{0x0000000000000802UL});
    public static readonly BitSet FOLLOW_OR_EXPR_in_orExpression5303 = new BitSet(new ulong[]{0x0000000004006000UL,0x0000000000000000UL,0x2100000000000000UL});
    public static readonly BitSet FOLLOW_andExpression_in_orExpression5305 = new BitSet(new ulong[]{0x0000000000000802UL});
    public static readonly BitSet FOLLOW_qualifyExpression_in_andExpression5337 = new BitSet(new ulong[]{0x0000000000001002UL});
    public static readonly BitSet FOLLOW_AND_EXPR_in_andExpression5342 = new BitSet(new ulong[]{0x0000000004006000UL,0x0000000000000000UL,0x2100000000000000UL});
    public static readonly BitSet FOLLOW_qualifyExpression_in_andExpression5344 = new BitSet(new ulong[]{0x0000000000001002UL});
    public static readonly BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression5377 = new BitSet(new ulong[]{0x0000000004006000UL,0x0000000000000000UL,0x2100000000000000UL});
    public static readonly BitSet FOLLOW_NOT_EXPR_in_qualifyExpression5382 = new BitSet(new ulong[]{0x0000000004006000UL,0x0000000000000000UL,0x2100000000000000UL});
    public static readonly BitSet FOLLOW_guardPostFix_in_qualifyExpression5389 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_atomicExpression_in_guardPostFix5402 = new BitSet(new ulong[]{0x0000000000008002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_guardPostFix5408 = new BitSet(new ulong[]{0x0000000004006000UL,0x0000000000000000UL,0x2100000000000000UL});
    public static readonly BitSet FOLLOW_patternExpression_in_guardPostFix5410 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_guardPostFix5412 = new BitSet(new ulong[]{0x0000000000008002UL});
    public static readonly BitSet FOLLOW_WHERE_in_guardPostFix5418 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_guardExpression_in_guardPostFix5420 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_observerExpression_in_atomicExpression5462 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_eventFilterExpression_in_atomicExpression5466 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_observerExpression5481 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COLON_in_observerExpression5483 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_observerExpression5487 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_observerExpression5489 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0xD1F7400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_parameterSet_in_observerExpression5491 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_observerExpression5494 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_guardExpression5522 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COLON_in_guardExpression5524 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_guardExpression5527 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_guardExpression5529 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0xD1F7400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_parameterSet_in_guardExpression5533 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_guardExpression5537 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_parameter_in_parameterSet5552 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_parameterSet5555 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x91F7400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_parameter_in_parameterSet5558 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_singleParameter_in_parameter5581 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_numericParameterList_in_parameter5593 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arrayParameterList_in_parameter5604 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_eventProperty_in_parameter5609 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_rangeOperand_in_singleParameter5620 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_frequencyOperand_in_singleParameter5627 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_lastOperator_in_singleParameter5632 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_weekDayOperator_in_singleParameter5637 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LAST_in_singleParameter5642 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LW_in_singleParameter5648 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STAR_in_singleParameter5654 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constant_in_singleParameter5660 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_time_period_in_singleParameter5665 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STAR_in_frequencyOperand5676 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_DIV_in_frequencyOperand5678 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_NUM_INT_in_frequencyOperand5680 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NUM_INT_in_rangeOperand5701 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COLON_in_rangeOperand5703 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_NUM_INT_in_rangeOperand5707 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NUM_INT_in_lastOperator5732 = new BitSet(new ulong[]{0x0008000000000000UL});
    public static readonly BitSet FOLLOW_LAST_in_lastOperator5734 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NUM_INT_in_weekDayOperator5756 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000008UL});
    public static readonly BitSet FOLLOW_WEEKDAY_in_weekDayOperator5758 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LBRACK_in_numericParameterList5778 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x1001000000000000UL});
    public static readonly BitSet FOLLOW_numericListParameter_in_numericParameterList5780 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_COMMA_in_numericParameterList5783 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x1001000000000000UL});
    public static readonly BitSet FOLLOW_numericListParameter_in_numericParameterList5785 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_RBRACK_in_numericParameterList5789 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_rangeOperand_in_numericListParameter5811 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_frequencyOperand_in_numericListParameter5817 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NUM_INT_in_numericListParameter5822 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LCURLY_in_arrayParameterList5833 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x00F7400000000000UL,0x0001C00000008000UL});
    public static readonly BitSet FOLLOW_constant_in_arrayParameterList5836 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL,0x0000000000008000UL});
    public static readonly BitSet FOLLOW_COMMA_in_arrayParameterList5839 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x00F7400000000000UL,0x0001C00000000000UL});
    public static readonly BitSet FOLLOW_constant_in_arrayParameterList5841 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0200000000000000UL,0x0000000000008000UL});
    public static readonly BitSet FOLLOW_RCURLY_in_arrayParameterList5847 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_eventFilterExpression5893 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0400000000000000UL});
    public static readonly BitSet FOLLOW_EQUALS_in_eventFilterExpression5895 = new BitSet(new ulong[]{0x0000000004000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_classIdentifier_in_eventFilterExpression5904 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_LPAREN_in_eventFilterExpression5915 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x71FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expressionList_in_eventFilterExpression5917 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_eventFilterExpression5920 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_classIdentifier5968 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_classIdentifier5987 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_classIdentifier5991 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_classIdentifierNonGreedy6036 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_classIdentifierNonGreedy6071 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_IDENT_in_classIdentifierNonGreedy6075 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_expression_in_expressionList6115 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_COMMA_in_expressionList6118 = new BitSet(new ulong[]{0xFE0FB0000BFE6420UL,0x0000000000000AFFUL,0x31FF400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_expression_in_expressionList6121 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_eventPropertyAtomic_in_eventProperty6141 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_eventProperty6144 = new BitSet(new ulong[]{0xF00F800003FE4420UL,0x0000000000000A7BUL,0x91F7400000000000UL,0x0001C00000004000UL});
    public static readonly BitSet FOLLOW_eventPropertyAtomic_in_eventProperty6146 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic6172 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0xA008000000000000UL});
    public static readonly BitSet FOLLOW_LBRACK_in_eventPropertyAtomic6181 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic6185 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_RBRACK_in_eventPropertyAtomic6187 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0008000000000000UL});
    public static readonly BitSet FOLLOW_QUESTION_in_eventPropertyAtomic6192 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_eventPropertyAtomic6206 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x00C0000000000000UL});
    public static readonly BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic6211 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic6217 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_eventPropertyAtomic6220 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0008000000000000UL});
    public static readonly BitSet FOLLOW_QUESTION_in_eventPropertyAtomic6225 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_QUESTION_in_eventPropertyAtomic6239 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent6362 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000020000UL});
    public static readonly BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent6374 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_eventPropertyIdent6376 = new BitSet(new ulong[]{0xF00F800003FE4422UL,0x0000000000000A7BUL,0x91F7400000000000UL,0x0001C00000024000UL});
    public static readonly BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent6380 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000020000UL});
    public static readonly BitSet FOLLOW_IDENT_in_keywordAllowedIdent6423 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COUNT_in_keywordAllowedIdent6430 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent6437 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent6448 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SUM_in_keywordAllowedIdent6455 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_AVG_in_keywordAllowedIdent6462 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MAX_in_keywordAllowedIdent6469 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MIN_in_keywordAllowedIdent6476 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COALESCE_in_keywordAllowedIdent6483 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent6490 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STDDEV_in_keywordAllowedIdent6497 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent6504 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_EVENTS_in_keywordAllowedIdent6511 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SECONDS_in_keywordAllowedIdent6518 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MINUTES_in_keywordAllowedIdent6525 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_FIRST_in_keywordAllowedIdent6532 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LAST_in_keywordAllowedIdent6539 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent6546 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PATTERN_in_keywordAllowedIdent6553 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SQL_in_keywordAllowedIdent6560 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent6567 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent6574 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PRIOR_in_keywordAllowedIdent6581 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent6588 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LW_in_keywordAllowedIdent6595 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent6602 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CAST_in_keywordAllowedIdent6609 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent6616 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent6623 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_WINDOW_in_keywordAllowedIdent6632 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_dayPart_in_time_period6662 = new BitSet(new ulong[]{0x0008000000000002UL,0x0000000000000010UL,0x10F7400000000000UL,0x0001C00000000000UL});
    public static readonly BitSet FOLLOW_hourPart_in_time_period6664 = new BitSet(new ulong[]{0x0008000000000002UL,0x0000000000000010UL,0x10F7400000000000UL,0x0001C00000000000UL});
    public static readonly BitSet FOLLOW_minutePart_in_time_period6667 = new BitSet(new ulong[]{0x0008000000000002UL,0x0000000000000010UL,0x10F7400000000000UL,0x0001C00000000000UL});
    public static readonly BitSet FOLLOW_secondPart_in_time_period6670 = new BitSet(new ulong[]{0x0008000000000002UL,0x0000000000000010UL,0x10F7400000000000UL,0x0001C00000000000UL});
    public static readonly BitSet FOLLOW_millisecondPart_in_time_period6673 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_hourPart_in_time_period6679 = new BitSet(new ulong[]{0x0008000000000002UL,0x0000000000000010UL,0x10F7400000000000UL,0x0001C00000000000UL});
    public static readonly BitSet FOLLOW_minutePart_in_time_period6681 = new BitSet(new ulong[]{0x0008000000000002UL,0x0000000000000010UL,0x10F7400000000000UL,0x0001C00000000000UL});
    public static readonly BitSet FOLLOW_secondPart_in_time_period6684 = new BitSet(new ulong[]{0x0008000000000002UL,0x0000000000000010UL,0x10F7400000000000UL,0x0001C00000000000UL});
    public static readonly BitSet FOLLOW_millisecondPart_in_time_period6687 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_minutePart_in_time_period6693 = new BitSet(new ulong[]{0x0008000000000002UL,0x0000000000000010UL,0x10F7400000000000UL,0x0001C00000000000UL});
    public static readonly BitSet FOLLOW_secondPart_in_time_period6695 = new BitSet(new ulong[]{0x0008000000000002UL,0x0000000000000010UL,0x10F7400000000000UL,0x0001C00000000000UL});
    public static readonly BitSet FOLLOW_millisecondPart_in_time_period6698 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_secondPart_in_time_period6704 = new BitSet(new ulong[]{0x0008000000000002UL,0x0000000000000010UL,0x10F7400000000000UL,0x0001C00000000000UL});
    public static readonly BitSet FOLLOW_millisecondPart_in_time_period6706 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_millisecondPart_in_time_period6712 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_number_in_dayPart6749 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0006000000000000UL});
    public static readonly BitSet FOLLOW_241_in_dayPart6752 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_242_in_dayPart6756 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_number_in_hourPart6779 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0018000000000000UL});
    public static readonly BitSet FOLLOW_243_in_hourPart6782 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_244_in_hourPart6786 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_number_in_minutePart6809 = new BitSet(new ulong[]{0x0002000000100000UL,0x0000000000000000UL,0x0000000000000000UL,0x0020000000000000UL});
    public static readonly BitSet FOLLOW_MINUTES_in_minutePart6812 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_245_in_minutePart6816 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MIN_in_minutePart6820 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_number_in_secondPart6844 = new BitSet(new ulong[]{0x0001000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x00C0000000000000UL});
    public static readonly BitSet FOLLOW_SECONDS_in_secondPart6847 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_246_in_secondPart6851 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_247_in_secondPart6855 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_number_in_millisecondPart6879 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0700000000000000UL});
    public static readonly BitSet FOLLOW_248_in_millisecondPart6882 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_249_in_millisecondPart6886 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_250_in_millisecondPart6890 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar2510 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_time_period_in_synpred2_EsperEPL2Grammar3152 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar4439 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar5073 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_singleParameter_in_synpred5_EsperEPL2Grammar5576 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_numericParameterList_in_synpred6_EsperEPL2Grammar5588 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arrayParameterList_in_synpred7_EsperEPL2Grammar5599 = new BitSet(new ulong[]{0x0000000000000002UL});

}
}