<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NEsper</name>
    </assembly>
    <members>
        <member name="T:com.espertech.esper.view.window.TimeLengthBatchViewFactory">
            <summary>
            Factory for <see cref="T:com.espertech.esper.view.window.TimeLengthBatchView"/>.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.DataWindowViewFactory">
            <summary>
            Marker interface for use with view factories that create data window views only.
            <para/>
            Please <see cref="T:com.espertech.esper.view.DataWindowView"/> for details on views that meet data window requirements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.ViewFactory">
            <summary>
            Static factory for creating view instances based on a view specification and a given parent view.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>Indicates user EPL query view parameters to the view factory.</summary>
            <param name="viewFactoryContext">
            supplied context information for the view factory
            </param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">
            is the parent event stream's or view factory's event type
            </param>
            <param name="statementContext">
            contains the services needed for creating a new event type
            </param>
            <param name="optionalParentFactory">
            is null when there is no parent view factory, or contains the
            parent view factory
            </param>
            <param name="parentViewFactories">
            is a list of all the parent view factories or empty list if there are none
            </param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">
            is the callback to use to supply the resource needed
            </param>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>Create a new view.</summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeLengthBatchViewFactory.numberOfEvents">
            <summary>Number of events to collect before batch fires.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeLengthBatchViewFactory.millisecondsBeforeExpiry">
            <summary>
            Number of msec before batch fires (either interval or number of events).
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeLengthBatchViewFactory.isForceUpdate">
            <summary>
            Indicate whether to output only if there is data, or to keep outputing empty batches.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeLengthBatchViewFactory.isStartEager">
            <summary>
            Indicate whether to output only if there is data, or to keep outputing empty batches.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeLengthBatchViewFactory.relativeAccessGetterImpl">
            <summary>The access into the data window.</summary>
        </member>
        <member name="T:com.espertech.esper.view.window.LengthBatchView">
            <summary>
            A data view that aggregates events in a stream and releases them in one batch when a maximum number of events has
            been collected.
            <p>
            The view works similar to a length_window but is not continuous, and similar to a time_batch however is not time-based
            but reacts to the number of events.
            </p>
            <p>
            The view releases the batched events, when a certain number of batched events has been reached or exceeded,
            as new data to child views. The prior batch if
            not empty is released as old data to any child views. The view doesn't release intervals with no old or new data.
            It also does not collect old data published by a parent view.
            </p>
            <p>
            If there are no events in the current and prior batch, the view will not invoke the update method of child views.
            </p>
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.ViewSupport">
            <summary>
            A helper class for View implementations that provides generic implementation for some of the methods.
            Methods that contain the actual logic of the view are not implemented in this class.
            A common implementation normally does not need to override any of the methods implemented here, their
            implementation is generic and should suffice.
            <para>
            The class provides a convenience method for updateing it's children data UpdateChildren(Object[], Object[]).
            This method should be called from within the View.update(Object[], Object[]) methods in the subclasses.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.View">
            <summary> The View interface provides a way for a stream, data provider, or another view,
            to notify an object of additions and deletions to its data set.
            Views are themselves Viewable by other Views, and can implement their own set of cached data internally.
            The contract is that a View is wholly derived from the object (its parent) to which it is attached.
            That is, it must be able to reconstitute its cached state from a playback of source data passed to it
            through the update() method.
            
            A view's job is to derive some data from the data in the Viewable object to which it is attached.
            This can happen by a 'push' mechanism whereby new data in the underlying collection is pushed to the view
            through the update method. A view that operates in this mode incrementally updates its derived data and
            then provides this data to any queries or requesters through its Data interface and potentially through
            other customized methods it exposes. When these methods are called, the view in push mode does not contact
            its parent: it just supplies the requester with the data it already derived. The push mode is efficient
            when data in a view is slow-changing with respect to how much its data is requested. For example, a view
            calculating the mean of an intermittent signal over time may be queried very frequently. It incrementally
            updates its statistic and then provides that quantity to callers whenever they want it, which may be much
            more frequently than the incoming signal occurs.
            
            The 'pull' mechanism is driven by requests to the view's Data interface or other customized data access methods.
            A view operating in 'pull' mode may know whether it is "clean" or "dirty" by listening to its update method, or
            it may not get any calls to its update method, and have to consult its parent to re-derive data when it is called.
            This mode is efficient when requests to a view for its data are infrequent compared to the update frequency of its
            parent's data. For example, a temperature sensor may be changing on a near-continuous basis, and a view which
            derives some quantity from that sensor may be queried irregularly. It is most efficient for that view to operate
            in pull mode, and only update itself when it is asked by some consumer for its derived quantity. It then asks the
            temperature sensor for the current temperature, does its derivation, and returns to the requester.
            
            To feed views that are registered with it, a view should only call the update method on its child views when its own
            data has changed. If it receives an update which results in no change to its data, it should not update any children
            views. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.EventCollection">
            <summary> Interface that marks an event collection.
            Every event in the event collection must be of the same event type, as defined by the getEventType() call.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.EventCollection.EventType">
            <summary> Provides metadata information about the type of object the event collection contains.</summary>
            <returns> metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.Viewable">
            <summary> The Viewable interface marks an object as supporting zero, one or more View instances.
            All implementing classes must call each view's 'Update' method when new data enters it.
            Implementations must take care to synchronize methods of this interface with other methods
            such that data flow is threadsafe.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.Viewable.AddView(com.espertech.esper.view.View)">
            <summary> Add a view to the viewable object.</summary>
            <param name="view">to add
            </param>
            <returns> view to add
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.Viewable.RemoveView(com.espertech.esper.view.View)">
            <summary> Remove a view.</summary>
            <param name="view">to remove
            </param>
            <returns> true to indicate that the view to be removed existed within this view, false if the view to
            remove could not be found
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.Viewable.Views">
            <summary> Returns all added views.</summary>
            <returns> list of added views
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.Viewable.HasViews">
            <summary> Test is there are any views to the Viewable.</summary>
            <returns> true indicating there are child views, false indicating there are no child views
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.View.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            <para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view
            </param>
            <param name="oldData">is the old data that has been removed from the parent view
            </param>
        </member>
        <member name="P:com.espertech.esper.view.View.Parent">
            <summary> Gets or sets the View's parent Viewable.</summary>
            <returns> viewable
            </returns>
        </member>
        <member name="F:com.espertech.esper.view.ViewSupport.parent">
            <summary>
            Parent viewable to this view - directly accessible by subclasses.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.AddView(com.espertech.esper.view.View)">
            <summary>
            Add a view to the viewable object.
            </summary>
            <param name="view">to add</param>
            <returns>view to add</returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.RemoveView(com.espertech.esper.view.View)">
            <summary>
            Remove a view.
            </summary>
            <param name="view">to remove</param>
            <returns>
            true to indicate that the view to be removed existed within this view, false if the view to
            remove could not be found
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.UpdateChildren(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Updates all the children with new data.Views may want to use the hasViews method on the Viewable interface to determineif there are any child views attached at all, and save the work of constructing the arrays and
            making the call to UpdateChildren() in case there aren't any children attached.
            </summary>
            <param name="newData">is the array of new event data</param>
            <param name="oldData">is the array of old event data</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.UpdateChildren(System.Collections.Generic.IList{com.espertech.esper.view.View},com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Updates all the children with new data. Static convenience method that accepts the list of child
            views as a parameter.
            </summary>
            <param name="childViews">is the list of child views to send the data to</param>
            <param name="newData">is the array of new event data</param>
            <param name="oldData">is the array of old event data</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.DumpUpdateParams(System.String,com.espertech.esper.collection.UniformPair{com.espertech.esper.events.EventBean[]})">
            <summary>Convenience method for logging the parameters passed to the update method. Only logs if debug is enabled.</summary>
            <param name="prefix">is a prefix text to output for each line</param>
            <param name="result">is the data in an update call</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.DumpUpdateParams(System.String,System.Object[],System.Object[])">
            <summary>
            Convenience method for logging the parameters passed to the update method.
            Only logs if debug is enabled.
            </summary>
            <param name="prefix">is a prefix text to output for each line</param>
            <param name="newData">is the new data in an update call</param>
            <param name="oldData">is the old data in an update call</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.DumpChildViews(System.String,com.espertech.esper.view.Viewable)">
            <summary>
            Convenience method for logging the child views of a Viewable. Only logs if
            debug is enabled.This is a recursive method.
            </summary>
            <param name="prefix">is a text to print for each view printed</param>
            <param name="parentViewable">is the parent for which the child views are displayed.</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.FindDescendent(com.espertech.esper.view.Viewable,com.espertech.esper.view.Viewable)">
            <summary>
            Find the descendent view in the view tree under the parent view returning
            the list of view nodesbetween the parent view and the descendent view. Returns
            null if the descendent view is not found.Returns an empty list if the descendent
            view is a child view of the parent view.
            </summary>
            <param name="parentView">is the view to Start searching under</param>
            <param name="descendentView">is the view to find</param>
            <returns>list of Viewable nodes between parent and descendent view.</returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            <para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view
            </param>
            <param name="oldData">is the old data that has been removed from the parent view
            </param>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewSupport.Id">
            <summary>
            Gets the unique id for the view
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.ViewSupport.Parent">
            <summary>
            Gets or sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewSupport.Views">
            <summary>
            Returns all added views.
            </summary>
            <returns>list of added views</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewSupport.HasViews">
            <summary>
            Test is there are any views to the Viewable.
            </summary>
            <value></value>
            <returns> true indicating there are child views, false indicating there are no child views
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewSupport.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.CloneableView">
            <summary>
            Views that can work under a group-by must be able to duplicate and are required to implement this interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.CloneableView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="T:com.espertech.esper.view.BatchingDataWindowView">
            <summary>
            Tag interface for data window views that express a batch expiry policy.
            <pata/>
            Such data windows allow iteration through the currently batched events, and
            such data windows post insert stream events only when batching conditions have
            been met and the batch is released.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.DataWindowView">
            <summary>
            Tag interface for data window views. Data window views follow the view interface but keep a window over the
            data received by their parent view. Data window view may keep length windows or time windows or other windows.
            <para/>
            Data window views generally follow the following behavior:
            <para/>
            They publish the data that was received as new data from their parent view directly or at a later time as
            new data to child views.
            <para/>
            They publish the data that expires out of the window (for length or time reasons or other reasons) as old data to
            their child views.
            <para/>
            They do not change event type compared to their parent view, since they only hold events temporarily.
            <para/>
            They remove the data they receive as old data from their parent view out of the window and report the data
            removed as old data to child views (this is an optional capability for performance reasons).
            <para/>
            Certain views may decide to attach only to data window views directly. One reason for this is that
            window limit the number of event instances kept in a collection. Without this limitation some views may
            not work correctly over time as events accumulate but are not removed from the view by means old data updates
            received from a parent data window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchView.#ctor(com.espertech.esper.view.window.LengthBatchViewFactory,System.Int32,com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>Constructor.</summary>
            <param name="size">is the number of events to batch</param>
            <param name="viewUpdatedCollection">
            is a collection that the view must update when receiving events
            </param>
            <param name="lengthBatchViewFactory">for copying this view in a group-by</param>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchView.SendBatch">
            <summary>
            This method updates child views and clears the batch of events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthBatchView.Count">
            <summary>Returns the number of events to batch (data window size).</summary>
            <returns>batch size</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthBatchView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthBatchView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty.</summary>
            <returns>true if empty</returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewEnum">
            <summary>
            Enum for all build-in views.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.LENGTH">
            <summary>Length window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.LENGTH_BATCH">
            <summary>Length batch window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.TIME_WINDOW">
            <summary>Time window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.TIME_BATCH">
            <summary>Time batch.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.TIME_LENGTH_BATCH">
            <summary>Time length batch.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.TIME_ACCUM">
            <summary>Time accumulating view.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.EXT_TIMED_WINDOW">
            <summary>Externally timed window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.KEEPALL_WINDOW">
            <summary>Keep-all data window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.SIZE">
            <summary>Size view.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.LAST_EVENT">
            <summary>Last event.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.UNIQUE_BY_PROPERTY">
            <summary>Unique.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.GROUP_MERGE">
            <summary>Group-by merge.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.GROUP_PROPERTY">
            <summary>Group-by.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.UNIVARIATE_STATISTICS">
            <summary>Univariate statistics.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.WEIGHTED_AVERAGE">
            <summary>Weighted avg.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.CORRELATION">
            <summary>Correlation.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.REGRESSION_LINEST">
            <summary>Linest.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.MULTIDIM_VIEW">
            <summary>Cubes.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.SORT_WINDOW">
            <summary>Sorted window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.TIME_ORDER">
            <summary>Time order event window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.PRIOR_EVENT_VIEW">
            <summary>Prior event view.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.Values">
            <summary>
            All of the "values" in the pseudo-enum ViewEnum.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewEnum.ForName(System.String,System.String)">
            <summary>
            Returns the view enumeration value given the name of the view.
            </summary>
            <param name="nspace">The nspace.</param>
            <param name="name">is the short name of the view as used in view expressions</param>
            <returns>
            view enumeration value, or null if no such view name is among the enumerated values
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewEnum.Namespace">
            <summary> Returns namespace that the object belongs to.</summary>
            <returns> namespace
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewEnum.Name">
            <summary> Returns name of the view that can be used to reference the view in a view expression.</summary>
            <returns> short name of view
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewEnum.FactoryType">
            <summary> Gets the view's factory class.</summary>
            <returns> view's factory class
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewEnum.MergeView">
            <summary> Returns the enumeration value of the view for merging the data generated by another view.</summary>
            <returns> view enum for the merge view
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.StatementStopService">
            <summary>
            Provides statement resources with the means to register a callback and be informed when a statement stopped
            and resources for the statement must be release.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.StatementStopService.AddSubscriber(com.espertech.esper.view.StatementStopCallback)">
            <summary>Add a callback to perform for a stop of a statement.</summary>
            <param name="callback">is the callback function</param>
        </member>
        <member name="M:com.espertech.esper.view.StatementStopService.FireStatementStopped">
            <summary>
            Used by the engine to indicate a statement stopped, invoking any callbacks registered.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.WeightedAverageViewFactory">
            <summary>Factory for <see cref="T:com.espertech.esper.view.stat.WeightedAverageView"/> instances.</summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.WeightedAverageViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.CellImpl">
            <summary>
            Hold the measure information which consists of a double value.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.Cell">
            <summary> Cell is the analytic values or variable tracked by a cube.</summary>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.Cell.Value">
            <summary> Returns the value.</summary>
            <returns> double value
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.MetaDefItem">
            <summary>
            Marker interface for use with statement and engine-level specifications.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.CellImpl.#ctor(System.Double)">
            <summary> Constructor.</summary>
            <param name="value">is the measure value
            </param>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.CellImpl.Value">
            <summary>
            Returns the value.
            </summary>
            <value></value>
            <returns> double value
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.CorrelationBean">
            <summary>
            Bean for calculating the correlation (same to Microsoft Excel CORREL function).
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.BaseStatisticsBean">
            <summary> Bean for performing statistical calculations. The bean keeps sums of X and Y datapoints and sums on squares
            that can be reused by subclasses. The bean calculates standard deviation (sample and population), variance,
            average and sum.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.AddPoint(System.Double)">
            <summary> Add a data point for the X data set only.</summary>
            <param name="x">is the X data point to add.
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.AddPoint(System.Double,System.Double)">
            <summary> Add a data point.</summary>
            <param name="x">is the X data point to add.
            </param>
            <param name="y">is the Y data point to add.
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.RemovePoint(System.Double)">
            <summary> Remove a X data point only.</summary>
            <param name="x">is the X data point to remove.
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.RemovePoint(System.Double,System.Double)">
            <summary> Remove a data point.</summary>
            <param name="x">is the X data point to remove.
            </param>
            <param name="y">is the Y data point to remove.
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.XStandardDeviationPop">
            <summary> Calculates standard deviation for X based on the entire population given as arguments.
            Equivalent to Microsoft Excel formula STDEVPA.
            </summary>
            <returns> standard deviation assuming population for X
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.YStandardDeviationPop">
            <summary> Calculates standard deviation for Y based on the entire population given as arguments.
            Equivalent to Microsoft Excel formula STDEVPA.
            </summary>
            <returns> standard deviation assuming population for Y
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.XStandardDeviationSample">
            <summary> Calculates standard deviation for X based on the sample data points supplied.
            Equivalent to Microsoft Excel formula STDEV.
            </summary>
            <returns> standard deviation assuming sample for X
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.YStandardDeviationSample">
            <summary> Calculates standard deviation for Y based on the sample data points supplied.
            Equivalent to Microsoft Excel formula STDEV.
            </summary>
            <returns> standard deviation assuming sample for Y
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.XVariance">
            <summary> Calculates standard deviation for X based on the sample data points supplied.
            Equivalent to Microsoft Excel formula STDEV.
            </summary>
            <returns> variance as the square of the sample standard deviation for X
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.xvariance">
            <summary> Calculates standard deviation for X based on the sample data points supplied.
            Equivalent to Microsoft Excel formula STDEV.
            </summary>
            <returns> variance as the square of the sample standard deviation for X
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.YVariance">
            <summary> Calculates standard deviation for Y based on the sample data points supplied.
            Equivalent to Microsoft Excel formula STDEV.
            </summary>
            <returns> variance as the square of the sample standard deviation for Y
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.N">
            <summary> Returns the number of data points.</summary>
            <returns> number of data points
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.DataPoints">
            <summary>
            Gets or sets the number of data points.
            </summary>
            <value>The number of data points.</value>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.XSum">
            <summary> Returns the sum of all X data points.</summary>
            <returns> sum of X data points
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.YSum">
            <summary> Returns the sum of all Y data points.</summary>
            <returns> sum of Y data points
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.XAverage">
            <summary> Returns the average of all X data points.</summary>
            <returns> average of X data points
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.YAverage">
            <summary> Returns the average of all Y data points.</summary>
            <returns> average of Y data points
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.SumXSq">
            <summary> For use by subclasses, returns sum (X * X).</summary>
            <returns> sum of X squared
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.SumYSq">
            <summary> For use by subclasses, returns sum (Y * Y).</summary>
            <returns> sum of Y squared
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.SumXY">
            <summary> For use by subclasses, returns sum (X * Y).</summary>
            <returns> sum of X times Y
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.CorrelationBean.Correlation">
            <summary> Return the correlation value for the two data series (Microsoft Excel function CORREL).</summary>
            <returns> correlation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.CorrelationBean.correlation">
            <summary>
            Gets the correlation.
            </summary>
            <value>The correlation.</value>
        </member>
        <member name="T:com.espertech.esper.view.EventStream">
            <summary>
            A streams is a conduct for incoming events. Incoming data is placed into streams for consumption by queries.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.EventStream.Insert(com.espertech.esper.events.EventBean)">
            <summary> Insert a new event onto the stream.</summary>
            <param name="_event">to insert</param>
        </member>
        <member name="T:com.espertech.esper.util.SimpleTypeCaster">
            <summary>
            Casts an object to another type, typically for numeric types.
            <para/>
            May performs a compatibility check and returns null if not compatible.
            </summary>
            <param name="value">to cast</param>
            <returns>casted or transformed object, possibly the same, or null if the cast cannot be made</returns>
        </member>
        <member name="T:com.espertech.esper.util.NullableObject`1">
            <summary>
            A generic class to hold an object that may itself be a null value versus an
            undefined (not existing) value.
            <para/>
            The presence of a reference indicates that a value exists, the absence of a reference
            to this object indicates that there is no value (similar to a Pair&lt;Object, Boolean&gt;).
             </summary>
        </member>
        <member name="M:com.espertech.esper.util.NullableObject`1.#ctor(`0)">
            <summary>Ctor. </summary>
            <param name="value">the value to contain</param>
        </member>
        <member name="P:com.espertech.esper.util.NullableObject`1.Value">
            <summary>Returns the contained value. </summary>
            <returns>contained value</returns>
        </member>
        <member name="T:com.espertech.esper.util.DatabaseTypeBinding">
            <summary>
            Binding from database output column type to object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.DatabaseTypeBinding.GetValue(System.Object,System.String)">
            <summary>
            Returns the object for the given column.
            </summary>
            <param name="rawObject">The raw object.</param>
            <param name="columnName">is the column name</param>
            <returns>object</returns>
            <throws>SQLException if the mapping cannot be performed</throws>
        </member>
        <member name="P:com.espertech.esper.util.DatabaseTypeBinding.DataType">
            <summary>Returns the target data type.</summary>
            <returns>Data type</returns>
        </member>
        <member name="T:com.espertech.esper.util.DataRetriever">
            <summary>
            Returns the object for the given column.
            </summary>
        </member>
        <member name="T:com.espertech.esper.util.ProxyDatabaseTypeBinding`1">
            <summary>
            Implementation of the DataTypeBinding that uses delegates
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.util.ProxyDatabaseTypeBinding`1.#ctor(com.espertech.esper.util.DataRetriever)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.util.ProxyDatabaseTypeBinding`1"/> class.
            </summary>
            <param name="retriever">The retriever.</param>
        </member>
        <member name="M:com.espertech.esper.util.ProxyDatabaseTypeBinding`1.GetValue(System.Object,System.String)">
            <summary>
            Returns the object for the given column.
            </summary>
            <param name="rawObject">The raw object.</param>
            <param name="columnName">is the column name</param>
            <returns>object</returns>
            <throws>SQLException if the mapping cannot be performed</throws>
        </member>
        <member name="P:com.espertech.esper.util.ProxyDatabaseTypeBinding`1.DataType">
            <summary>Returns the target data type.</summary>
            <returns>Data type</returns>
        </member>
        <member name="T:com.espertech.esper.type.EQLParameterType">
            <summary>
            Interface for parameter types that can represent themselves as an EQL syntax.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.EQLParameterType.ToEPL(System.IO.StringWriter)">
            <summary>Returns the EQL representation of the parameter.</summary>
            <param name="writer">for output to</param>
        </member>
        <member name="T:com.espertech.esper.timer.TimerServiceImpl">
            <summary>
            Implementation of the internal clocking service interface.
            </summary>
        </member>
        <member name="T:com.espertech.esper.timer.TimerService">
            <summary>
            Service interface for repeated callbacks at regular intervals.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimerService.StartInternalClock">
            <summary> Start clock expecting callbacks at regular intervals and a fixed rate.
            Catch-up callbacks are possible should the callback fall behind.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimerService.StopInternalClock(System.Boolean)">
            <summary> Stop internal clock.</summary>
            <param name="warnIfNotStarted">use true to indicate whether to warn if the clock is not Started, use false to not warn
            and expect the clock to be not Started. 
            </param>
        </member>
        <member name="P:com.espertech.esper.timer.TimerService.Callback">
            <summary> Set the callback method to invoke for clock ticks.</summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerService.AreStatsEnabled">
            <summary>
            Returns a flag indicating whether statistics are enabled.
            </summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerService.MaxDrift">
            <summary>
            Gets the maximum drift.
            </summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerService.LastDrift">
            <summary>
            Gets the last drift.
            </summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerService.TotalDrift">
            <summary>
            Gets the total drift.
            </summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerService.InvocationCount">
            <summary>
             Gets the number of times the timer has been invoked.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimerServiceImpl.#ctor(System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="msecTimerResolution">the millisecond resolution or interval the internal timer thread</param>
        </member>
        <member name="M:com.espertech.esper.timer.TimerServiceImpl.OnTimerElapsed(System.Object)">
            <summary>
            Handles the timer event
            </summary>
            <param name="state">The user state object.</param>
        </member>
        <member name="M:com.espertech.esper.timer.TimerServiceImpl.StartInternalClock">
            <summary>
            Start clock expecting callbacks at regular intervals and a fixed rate.
            Catch-up callbacks are possible should the callback fall behind.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimerServiceImpl.StopInternalClock(System.Boolean)">
            <summary>
            Stop internal clock.
            </summary>
            <param name="warnIfNotStarted">use true to indicate whether to warn if the clock is not Started, use false to not warn
            and expect the clock to be not Started.</param>
        </member>
        <member name="P:com.espertech.esper.timer.TimerServiceImpl.Callback">
            <summary>
            Set the callback method to invoke for clock ticks.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.timer.TimerServiceImpl.MsecTimerResolution">
            <summary>
            Gets the msec timer resolution.
            </summary>
            <value>The msec timer resolution.</value>
        </member>
        <member name="P:com.espertech.esper.timer.TimerServiceImpl.AreStatsEnabled">
            <summary>
            Returns a flag indicating whether statistics are enabled.
            </summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerServiceImpl.InvocationCount">
            <summary>
             Gets the number of times the timer has been invoked.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.ObserverFactory">
            <summary> Interface for factories for making observer instances.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverFactory.MakeObserver(com.espertech.esper.pattern.PatternContext,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.observer.ObserverEventEvaluator,System.Object,System.Object)">
            <summary>
            Make an observer instance.
            </summary>
            <param name="context">services that may be required by observer implementation</param>
            <param name="beginState">start state for observer</param>
            <param name="observerEventEvaluator">receiver for events observed</param>
            <param name="stateNodeId">optional id for the associated pattern state node</param>
            <param name="observerState">state node for observer</param>
            <returns>observer instance</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.observer.ObserverFactory.ObserverParameters">
            <summary>
            Sets the observer object parameters.
            </summary>
            <value>The observer parameters.</value>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.GuardFactorySupport">
            <summary>
            Abstract class for applications to extend to implement pattern guard objects.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.GuardFactory">
            <summary>
            Interface for a factory for <see cref="T:com.espertech.esper.pattern.guard.Guard"/> instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardFactory.MakeGuard(com.espertech.esper.pattern.PatternContext,com.espertech.esper.pattern.guard.Quitable,System.Object,System.Object)">
            <summary> Constructs a guard instance.</summary>
            <param name="context">services for use by guard</param>
            <param name="quitable">to use for indicating the guard has quit</param>
            <param name="stateNodeId">a node id for the state object</param>
            <param name="guardState">state node for guard</param>
            <returns>guard instance</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.guard.GuardFactory.GuardParameters">
            <summary>Sets the guard object parameters.</summary>
            <throws>GuardParameterException thrown to indicate a parameter problem</throws>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardFactorySupport.MakeGuard(com.espertech.esper.pattern.PatternContext,com.espertech.esper.pattern.guard.Quitable,System.Object,System.Object)">
            <summary>
            Constructs a guard instance.
            </summary>
            <param name="context">services for use by guard</param>
            <param name="quitable">to use for indicating the guard has quit</param>
            <param name="stateNodeId">a node id for the state object</param>
            <param name="guardState">state node for guard</param>
            <returns>guard instance</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.guard.GuardFactorySupport.GuardParameters">
            <summary>
            Sets the guard object parameters.
            </summary>
            <value></value>
            <throws>GuardParameterException thrown to indicate a parameter problem</throws>
        </member>
        <member name="T:com.espertech.esper.filter.FilterValueSetParamComparator">
            <summary>
            Sort comparator for filter parameters that sorts filter parameters according to filter operator type, and
            within the same filter operator sorts by event property name.
            </summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterValueSetParamComparator.FilterOperator_SortOrder">
            <summary>
            Defines the sort order among filter operator types. The idea is to sort EQUAL-type operators first
            then RANGE then other operators, ie. sorting from a more restrictive (usually, not necessarily,
            really depends on the client application) to a less restrictive operand.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterValueSetParamComparator.Compare(com.espertech.esper.filter.FilterValueSetParam,com.espertech.esper.filter.FilterValueSetParam)">
            <summary>
            Compares the specified param1.
            </summary>
            <param name="param1">The param1.</param>
            <param name="param2">The param2.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterServiceImpl">
            <summary> Implementation of the filter service interface.
            Does not allow the same filter callback to be added more then once.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterService">
            <summary> Interface for filtering events by event type and event property values. Allows adding and removing filters.
            <para>
            Filters are defined by a <see cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> and are associated with a <see cref="T:com.espertech.esper.filter.FilterHandleCallback"/>
            callback. Implementations may decide if the same filter callback can be registered twice for different
            or some filter specifications.
            </para>
            <para>
            The performance of an implementation of this service is crucial in achieving a high overall event throughput.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterService.ResetStats">
            <summary>
            Reset the number of events evaluated
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterService.Evaluate(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Finds matching filters to the event passed in and invokes their associated callback method.
            </summary>
            <param name="_event">is the event to be matched against filters</param>
            <param name="matches">is a collection that is populated via add method with any handles for matching filters</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterService.Add(com.espertech.esper.filter.FilterValueSet,com.espertech.esper.filter.FilterHandle)">
            <summary> Add a filter for events as defined by the filter specification, and register a
            callback to be invoked upon evaluation of an event that matches the filter spec.
            </summary>
            <param name="filterValueSet">is a specification of filter parameters, contains
            event type information, event property values and operators
            </param>
            <param name="callback">is the callback to be invoked when the filter matches an event
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterService.Remove(com.espertech.esper.filter.FilterHandle)">
            <summary> Remove a filter callback.</summary>
            <param name="callback">is the callback to be removed
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterService.Destroy">
            <summary>
            Destroy the service.
            </summary>
        </member>
        <member name="P:com.espertech.esper.filter.FilterService.NumEventsEvaluated">
            <summary>
            Return a count of the number of events evaluated by this service.
            </summary>
            <value>The num events evaluated.</value>
            <returns> count of invocations of evaluate method
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceImpl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceImpl.Destroy">
            <summary>
            Destroy the service.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceImpl.Add(com.espertech.esper.filter.FilterValueSet,com.espertech.esper.filter.FilterHandle)">
            <summary>
            Adds the specified filter value set.
            </summary>
            <param name="filterValueSet">The filter value set.</param>
            <param name="filterCallback">The filter callback.</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceImpl.Remove(com.espertech.esper.filter.FilterHandle)">
            <summary>
            Removes the specified filter callback.
            </summary>
            <param name="filterCallback">The filter callback.</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceImpl.Evaluate(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Evaluates the specified event bean.
            </summary>
            <param name="eventBean">The event bean.</param>
            <param name="matches">The matches.</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceImpl.ResetStats">
            <summary>
            Reset the number of events evaluated
            </summary>
        </member>
        <member name="P:com.espertech.esper.filter.FilterServiceImpl.NumEventsEvaluated">
            <summary>
            Return a count of the number of events evaluated by this service.
            </summary>
            <value></value>
            <returns> count of invocations of evaluate method
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexBase">
            <summary>
            Each implementation of this abstract class represents an index of filter parameter constants supplied in filter
            parameters in filter specifications that feature the same event property and operator.
            <p>
            For example, a filter with a parameter of "count EQUALS 10" would be represented as index
            for a property named "count" and for a filter operator typed "EQUALS". The index
            would store a value of "10" in its internal structure.
            </p>
            <p>
            Implementations make sure that the type of the Object constant in get and put calls matches the event property type.
            </p>
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.EventEvaluator">
            <summary> Interface for matching an event instance based on the event's property values to
            filters, specifically filter parameter constants or ranges.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.EventEvaluator.MatchEvent(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary> Perform the matching of an event based on the event property values,
            adding any callbacks for matches found to the matches list.
            </summary>
            <param name="_event">is the event object wrapper to obtain event property values from
            </param>
            <param name="matches">accumulates the matching filter callbacks
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexBase.#ctor(com.espertech.esper.filter.FilterOperator)">
            <summary>Constructor.</summary>
            <param name="filterOperator">is the type of comparison performed.</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexBase.Remove(System.Object)">
            <summary>
            Remove the event evaluation instance for the given constant. Returns true if
            the constant was found, or false if not.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">is the value supplied in the filter paremeter</param>
            <returns>true if found and removed, false if not found</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexBase.MatchEvent(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Perform the matching of an event based on the event property values,
            adding any callbacks for matches found to the matches list.
            </summary>
            <param name="_event">is the event object wrapper to obtain event property values from</param>
            <param name="matches">accumulates the matching filter callbacks</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexBase.Item(System.Object)">
            <summary>
            Get the event evaluation instance associated with the constant. Returns null if no entry found for the constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock property must supply a lock for this purpose.
            
            Store the event evaluation instance for the given constant. Can override an existing value
            for the same constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">
            is the constant supplied in the event filter parameter
            </param>
            <returns>
            event evaluator stored for the filter constant, or null if not found
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexBase.Count">
            <summary>
            Return the number of distinct filter parameter constants stored.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <returns>Number of entries in index</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexBase.ReadWriteLock">
            <summary>Supplies the lock for protected access.</summary>
            <returns>lock</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexBase.FilterOperator">
            <summary>Returns the filter operator that the index matches for.</summary>
            <returns>filter operator</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterHandleCallback">
            <summary>
            Interface for a callback method to be called when an event matches a filter specification. Provided
            as a convenience for use as a filter handle for registering with the <see cref="T:com.espertech.esper.filter.FilterService"/>.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterHandle">
            <summary>
            Marker interface for use with <see cref="T:com.espertech.esper.filter.FilterService"/>. Implementations serve as a filter match values when
            events match filters, and also serve to enter and remove a filter from the filter subscription set.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleCallback.MatchFound(com.espertech.esper.events.EventBean)">
            <summary>
            Indicate that an event was evaluated by the <see cref="T:com.espertech.esper.filter.FilterService"/>
            which matches the filter specification <see cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> associated with this callback.
            </summary>
            <param name="_event">the event received that matches the filter specification</param>
        </member>
        <member name="T:com.espertech.esper.filter.FilterHandleCallbackDelegate">
            <summary>
            Indicate that an event was evaluated by the <see cref="T:com.espertech.esper.filter.FilterService"/>
            which matches the filter specification <see cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> associated with this callback.
            </summary>
            <param name="_event">the event received that matches the filter specification</param>
        </member>
        <member name="T:com.espertech.esper.events.property.PropertyListBuilderPublic">
            <summary>
            Implementation for a property list builder that considers any public methods,
            public fields, and public properties as the exposed event properties, plus any
            explicitly configured props.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.PropertyListBuilder">
            <summary>
            Interface for an introspector that generates a list of event property descriptors
            given a clazz.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilder.AssessProperties(System.Type)">
            <summary>
            Introspect the type and deterime exposed event properties.
            </summary>
            <param name="type">type to introspect</param>
            <returns>list of event property descriptors</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderPublic.#ctor(com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary> Ctor.</summary>
            <param name="legacyConfig">configures legacy type
            </param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderPublic.AssessProperties(System.Type)">
            <summary>
            Introspect the type and deterime exposed event properties.
            </summary>
            <param name="type">type to introspect</param>
            <returns>list of event property descriptors</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderPublic.AddPublicMethods(System.Collections.Generic.IList{com.espertech.esper.events.EventPropertyDescriptor},System.Type)">
            <summary>
            Adds the public methods.
            </summary>
            <param name="result">The result.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderPublic.AddPublicFields(System.Collections.Generic.IList{com.espertech.esper.events.EventPropertyDescriptor},System.Type)">
            <summary>
            Adds the public fields.
            </summary>
            <param name="result">The result.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderPublic.AddPublicProperties(System.Collections.Generic.IList{com.espertech.esper.events.EventPropertyDescriptor},System.Type)">
            <summary>
            Adds the public properties.
            </summary>
            <param name="result">The result.</param>
            <param name="type">The type.</param>
        </member>
        <member name="T:com.espertech.esper.events.property.NestedProperty">
            <summary> This class represents a nested property, each nesting level made up of a property instance that
            can be of type indexed, mapped or simple itself.
            <para>
            The syntax for nested properties is as follows.
            <c>
            a.n
            a[1].n
            a('1').n
            </c>
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.Property">
            <summary>
            Interface for a property of an event of type BeanEventType. Properties are designed to
            handle the different types of properties for such events: indexed, mapped, simple, nested,
            or a combination of those.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.GetPropertyType(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns the property type.
            </summary>
            <param name="eventType">is the event type representing the bean</param>
            <returns>property type class</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.GetGetter(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns value getter for the property of an event of the given event type.
            </summary>
            <param name="eventType">is the type of event to make a getter for</param>
            <returns>fast property value getter for property</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.GetPropertyTypeMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the property type for use with Map event representations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.GetGetterMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the getter-method for use with Map event representations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.ToPropertyEPL(System.IO.StringWriter)">
            <summary>Write the EPL-representation of the property.</summary>
            <param name="writer">to write to</param>
        </member>
        <member name="M:com.espertech.esper.events.property.NestedProperty.#ctor(System.Collections.Generic.IList{com.espertech.esper.events.property.Property},com.espertech.esper.events.BeanEventTypeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.property.NestedProperty"/> class.
            </summary>
            <param name="properties">the list of Property instances representing each nesting level</param>
            <param name="beanEventTypeFactory">the cache and factory for event bean types and event wrappers</param>
        </member>
        <member name="M:com.espertech.esper.events.property.NestedProperty.GetGetter(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns value getter for the property of an event of the given event type.
            </summary>
            <param name="eventType">is the type of event to make a getter for</param>
            <returns>fast property value getter for property</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.NestedProperty.GetPropertyType(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns the property type.
            </summary>
            <param name="eventType">is the event type representing the bean</param>
            <returns>property type class</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.NestedProperty.GetPropertyTypeMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the property type for use with Map event representations.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.NestedProperty.Properties">
            <summary> Returns the list of property instances making up the nesting levels.</summary>
            <returns> list of Property instances
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicSimpleProperty">
            <summary>
            Represents a dynamic simple property of a given name.
            <para>
            Dynamic properties always exist, have an Object type and are resolved to a method during runtime.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.PropertyBase">
            <summary>
            All properties have a property name and this is the abstract base class
            that serves up the property name.
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.property.PropertyBase.propertyNameAtomic">
            <summary>
            Property name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="propertyName">is the name of the property
            </param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetGetter(com.espertech.esper.events.BeanEventType)">
            <summary>
            Gets the getter.
            </summary>
            <param name="param1">The param1.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetPropertyType(com.espertech.esper.events.BeanEventType)">
            <summary>
            Gets the type of the property.
            </summary>
            <param name="param1">The param1.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetPropertyTypeMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the property type for use with Map event representations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetGetterMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the getter-method for use with Map event representations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.ToPropertyEPL(System.IO.StringWriter)">
            <summary>Write the EPL-representation of the property.</summary>
            <param name="writer">to write to</param>
        </member>
        <member name="P:com.espertech.esper.events.property.PropertyBase.PropertyNameAtomic">
            <summary> Returns the property name.</summary>
            <returns> name of property
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicProperty">
            <summary>Marker interface for dynamic properties.</summary>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicSimpleProperty.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="propertyName">is the property name</param>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicSimpleProperty.GetPropertyTypeMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the property type for use with Map event representations.
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicSimpleProperty.GetGetterMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the getter-method for use with Map event representations.
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicSimpleProperty.ToPropertyEPL(System.IO.StringWriter)">
            <summary>Write the EPL-representation of the property.</summary>
            <param name="writer">to write to</param>
        </member>
        <member name="T:com.espertech.esper.events.property.FastPropertyResolver">
            <summary>
            Resolves properties using the Reflection to identify the properties and then
            using dynamic property generation.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.PropertyResolver">
            <summary>
            Resolves properties for a given type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyResolver.GetProperties(System.Type)">
            <summary>
            Gets the properties for a given type.
            </summary>
            <param name="type">Type on which properties are to be resolved</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyResolver.GetPropertyFor(System.Reflection.PropertyInfo)">
            <summary>
            Gets a property descriptor for the given property.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyResolver.GetPropertyFor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Gets a property descriptor for the given property.
            </summary>
            <param name="property">The property.</param>
            <param name="name">The property name.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyResolver.GetPropertyFor(System.Reflection.FieldInfo)">
            <summary>
            Gets the property for the given field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyResolver.GetPropertyFor(System.Reflection.FieldInfo,System.String)">
            <summary>
            Gets the property for the given field.
            </summary>
            <param name="field">The field.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyResolver.Use(com.espertech.esper.events.property.PropertyResolver)">
            <summary>
            Uses the specified resolver for the given scope.  The resolver becomes
            bound to the property resolver for the duration of the scope on the
            thread that it is being used on.
            </summary>
            <param name="resolver">The resolver.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyResolver.CheckOverride(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Checks the override attribute and ensures that a proper descriptor is returned.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.events.property.PropertyResolver.Current">
            <summary>
            Gets the resolver currently in use on this thread.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.PropertyResolver.StackDisposable">
            <summary>
            Used internally to manage pseudo-allocations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyResolver.StackDisposable.#ctor(com.espertech.esper.events.property.PropertyResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.property.PropertyResolver.StackDisposable"/> class.
            </summary>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyResolver.StackDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyResolver.GetProperties(System.Type)">
            <summary>
            Gets the properties for a given type.
            </summary>
            <param name="type">Type on which properties are to be resolved</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyResolver.GetPropertyFor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Gets a property descriptor for the given property.
            </summary>
            <param name="property">The property.</param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyResolver.GetPropertyFor(System.Reflection.FieldInfo,System.String)">
            <summary>
            Gets the property for the given field.
            </summary>
            <param name="field">The field.</param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionFactory">
            <summary>
            Factory for output condition instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionFactory.CreateCondition(com.espertech.esper.epl.spec.OutputLimitSpec,com.espertech.esper.core.StatementContext,com.espertech.esper.epl.view.OutputCallback)">
            <summary>
            Creates an output condition instance.
            </summary>
            <param name="outputLimitSpec">specifies what kind of condition to create</param>
            <param name="statementContext">supplies the services required such as for scheduling callbacks</param>
            <param name="outputCallback">is the method to invoke for output</param>
            <returns>instance for performing output</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PluggableObjectCollection">
            <summary>
            Repository for pluggable objects of different types that follow a "namespace:name" notation.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.PluggableObjectCollection.pluggables">
            <summary>
            Map of namespace, name and class plus type
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PluggableObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.spec.PluggableObjectCollection"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PluggableObjectCollection.AddViews(System.Collections.Generic.IEnumerable{com.espertech.esper.client.ConfigurationPlugInView})">
            <summary>
            Add a plug-in view.
            </summary>
            <param name="configurationPlugInViews">a list of configured plug-in view objects.</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PluggableObjectCollection.AddPatternObjects(System.Collections.Generic.IEnumerable{com.espertech.esper.client.ConfigurationPlugInPatternObject})">
            <summary>
            Add a plug-in pattern object.
            </summary>
            <param name="configPattern">a list of configured plug-in pattern objects.</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PluggableObjectCollection.AddObjects(com.espertech.esper.epl.spec.PluggableObjectCollection)">
            <summary>
            Add a plug-in objects for another collection.
            </summary>
            <param name="other">the collection to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PluggableObjectCollection.AddObject(System.String,System.String,System.Type,com.espertech.esper.epl.spec.PluggableObjectType)">
            <summary>Add a single object to the collection.</summary>
            <param name="_namespace">is the object's namespace</param>
            <param name="name">is the object's name</param>
            <param name="clazz">is the class the object resolves to</param>
            <param name="type">is the object type</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PluggableObjectCollection.Pluggables">
            <summary>
            Gets the underlying nested map of namespace keys and name-to-object maps.
            </summary>
            <value>The pluggables.</value>
            Returns
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTParameterHelper">
            <summary>Parse AST parameter nodes including constants, arrays, lists. Distinguishes between uniform and non-uniform arrays. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTParameterHelper.MakeParameter(Antlr.Runtime.Tree.ITree,System.Int64)">
            <summary>Returns the parse Object for the parameter/constant AST node whose text to parse. </summary>
            <param name="parameterNode">AST node to parse</param>
            <param name="engineTime">the engine current time</param>
            <returns>object value</returns>
            <throws>ASTWalkException is thrown to indicate a parse error</throws>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTParameterHelper.MakeTimePeriod(Antlr.Runtime.Tree.ITree,System.Int64)">
            <summary>
            Returns a time period from an AST node and taking engine time (year etc) into account.
            </summary>
            <param name="node">is the AST root node of the time period</param>
            <param name="engineTime">current time</param>
            <returns>time period</returns>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTFilterSpecHelper">
            <summary>Builds a filter specification from filter AST nodes. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTFilterSpecHelper.GetPropertyName(Antlr.Runtime.Tree.ITree,System.Int32)">
            <summary>Return the generated property name that is defined by the AST child node and it's siblings. </summary>
            <param name="parentNode">the AST node to consider as the parent for the child nodes to look at</param>
            <param name="startIndex">the index of the child node to start looking at</param>
            <returns>property name, ie. indexed[1] or Mapped('key') or nested.nested or a combination or just 'simple'.</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTFilterSpecHelper.EscapeDot(System.String)">
            <summary>
            Escape all unescape dot characters in the text (identifier only) passed in.
            </summary>
            <param name="identifierToEscape">text to escape</param>
            <returns>text where dots are escaped</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTFilterSpecHelper.UnescapedIndexOfDot(System.String)">
            <summary>Find the index of an unescaped dot (.) character, or return -1 if none found.</summary>
            <param name="identifier">text to find an un-escaped dot character</param>
            <returns>index of first unescaped dot</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTFilterSpecHelper.UnescapeDot(System.String)">
            <summary>Un-Escape all escaped dot characters in the text (identifier only) passed in.</summary>
            <param name="identifierToUnescape">text to un-escape</param>
            <returns>string</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.UnindexedEventTable">
            <summary>
            Simple table of events without an index.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.EventTable">
            <summary> Table of events allowing add and remove. Lookup in table is coordinated
            through the underlying implementation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.EventTable.Add(System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean})">
            <summary> Add events to table.</summary>
            <param name="events">to add
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.EventTable.Remove(System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean})">
            <summary> Remove events from table.</summary>
            <param name="events">to remove
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.EventTable.Clear">
            <summary>Clear out index.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.join.table.EventTable.IsEmpty">
            <summary>Returns true if the index is empty, or false if not</summary>
            <returns>true for empty index</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTable.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="streamNum">is the indexed stream's number
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTable.Clear">
            <summary>
            Clear out index.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTable.Add(System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean})">
            <summary>
            Adds the specified events.
            </summary>
            <param name="addEvents">The events to add.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTable.Remove(System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean})">
            <summary>
            Removes the specified events.
            </summary>
            <param name="removeEvents">The events to remove.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTable.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.table.UnindexedEventTable.IsEmpty">
            <summary>
            Returns true if the index is empty, or false if not
            </summary>
            <value></value>
            <returns>true for empty index</returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.table.UnindexedEventTable.EventSet">
            <summary> Returns events in table.</summary>
            <returns> all events
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.TwoStreamQueryPlanBuilder">
            <summary>
            Builds a query plan for the simple 2-stream scenario.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TwoStreamQueryPlanBuilder.Build(com.espertech.esper.events.EventType[],com.espertech.esper.epl.join.plan.QueryGraph,System.Nullable{com.espertech.esper.type.OuterJoinType})">
            <summary>
             Build query plan.
            </summary>
            <param name="typesPerStream">event types for each stream</param>
            <param name="queryGraph">navigability info</param>
            <param name="optionalOuterJoinType">outer join type, null if not an outer join</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TwoStreamQueryPlanBuilder.GetCoercionTypes(com.espertech.esper.events.EventType[],System.Int32,System.Int32,System.String[],System.String[])">
            <summary>
             Returns null if no coercion is required, or an array of classes for use in coercing the
             lookup keys and index keys into a common type.
            </summary>
            <param name="typesPerStream">the event types for each stream</param>
            <param name="lookupStream">the stream looked up from</param>
            <param name="indexedStream">the indexed stream</param>
            <param name="keyProps">the properties to use to look up</param>
            <param name="indexProps">the properties to index on</param>
            <returns>coercion types, or null if none required</returns>
            <exception cref="T:com.espertech.esper.compat.IllegalStateException"></exception>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryPlanIndexBuilder">
            <summary>
            Build query index plans.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndexBuilder.BuildIndexSpec(com.espertech.esper.epl.join.plan.QueryGraph)">
            <summary>
            Build index specification from navigability info.
            <para>
            Looks at each stream and determines which properties in the stream must be indexed
            in order for other streams to look up into the stream. Determines the unique set of properties
            to avoid building duplicate indexes on the same set of properties.
            </para>
            </summary>
            <param name="queryGraph">navigability info</param>
            <returns>query index specs for each stream</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder">
            <summary>
            Builds a query plan for 3 or more streams in a outer join.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.Build(com.espertech.esper.epl.join.plan.QueryGraph,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc},System.String[],com.espertech.esper.events.EventType[])">
            <summary>
            Build a query plan based on the stream property relationships indicated in queryGraph.
            </summary>
            <param name="queryGraph">navigation info between streams</param>
            <param name="streamNames">stream names or aliases</param>
            <param name="outerJoinDescList">descriptors for all outer joins</param>
            <param name="typesPerStream">event types for each stream</param>
            <returns>query plan</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.Build(System.Int32,System.Int32,System.String[],com.espertech.esper.epl.join.plan.QueryGraph,com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph,com.espertech.esper.epl.join.plan.QueryPlanIndex[],com.espertech.esper.events.EventType[])">
            <summary>
            Builds the specified num streams.
            </summary>
            <param name="numStreams">The num streams.</param>
            <param name="streamNo">The stream no.</param>
            <param name="streamNames">The stream names.</param>
            <param name="queryGraph">The query graph.</param>
            <param name="outerInnerGraph">The outer inner graph.</param>
            <param name="indexSpecs">The index specs.</param>
            <param name="typesPerStream">The types per stream.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.BuildLookupInstructions(com.espertech.esper.compat.LinkedHashMap{System.Int32,System.Int32[]},System.Boolean[],System.String[],com.espertech.esper.epl.join.plan.QueryGraph,com.espertech.esper.epl.join.plan.QueryPlanIndex[],com.espertech.esper.events.EventType[])">
            <summary>
            Builds the lookup instructions.
            </summary>
            <param name="substreamsPerStream">The substreams per stream.</param>
            <param name="requiredPerStream">The required per stream.</param>
            <param name="streamNames">The stream names.</param>
            <param name="queryGraph">The query graph.</param>
            <param name="indexSpecs">The index specs.</param>
            <param name="typesPerStream">The types per stream.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.RecursiveBuild(System.Int32,com.espertech.esper.epl.join.plan.QueryGraph,com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph,com.espertech.esper.compat.Set{System.Int32},com.espertech.esper.compat.LinkedHashMap{System.Int32,System.Int32[]},System.Boolean[])">
            <summary>
            Recusivly builds a substream-per-stream ordered tree graph using the
            join information supplied for outer joins and from the query graph (where clause).
            <para>
            Required streams are considered first and their lookup is placed first in the list
            to gain performance.
            </para>
            </summary>
            <param name="streamNum">is the root stream number that supplies the incoming event to build the tree for</param>
            <param name="queryGraph">contains where-clause stream relationship info</param>
            <param name="outerInnerGraph">contains the outer join stream relationship info</param>
            <param name="completedStreams">is a temporary holder for streams already considered</param>
            <param name="substreamsPerStream">is the ordered, tree-like structure to be filled</param>
            <param name="requiredPerStream">indicates which streams are required and which are optional</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.GetInnerStreams(System.Int32,com.espertech.esper.compat.Set{System.Int32},com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph)">
            <summary>
            Gets the inner streams.
            </summary>
            <param name="fromStream">From stream.</param>
            <param name="toStreams">To streams.</param>
            <param name="outerInnerGraph">The outer inner graph.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.GraphOuterJoins(System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc})">
            <summary>
            Builds a graph of outer joins given the outer join information from the statement.
            Eliminates right and left joins and full joins by placing the information in a graph object.
            </summary>
            <param name="numStreams">is the number of streams</param>
            <param name="outerJoinDescList">list of outer join stream numbers and property names</param>
            <returns>graph object</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.VerifyJoinedPerStream(System.Int32,System.Collections.Generic.IDictionary{System.Int32,System.Int32[]})">
            <summary>
            Verifies that the tree-like structure representing which streams join (lookup) into which sub-streams
            is correct, ie. all streams are included and none are listed twice.
            </summary>
            <param name="rootStream">is the stream supplying the incoming event</param>
            <param name="streamsJoinedPerStream">is keyed by the from-stream number and contains as values all
            stream numbers of lookup into to-streams.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.Print(System.Collections.Generic.IDictionary{System.Int32,System.Int32[]})">
            <summary>
            Returns textual presentation of stream-substream relationships.
            </summary>
            <param name="streamsJoinedPerStream">is the tree-like structure of stream-substream</param>
            <returns>textual presentation</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.TableOuterLookupExecNode">
            <summary> Execution node for lookup in a table for outer joins. This execution node thus generates
            rows even if no joined events could be found, the joined table events are set to null if no
            joined events are found.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.ExecNode">
            <summary> Interface for an execution node that looks up events and builds a result set contributing to an overall
            join result set.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.ExecNode.Process(com.espertech.esper.events.EventBean,com.espertech.esper.events.EventBean[],System.Collections.Generic.IList{com.espertech.esper.events.EventBean[]})">
            <summary> Process single event using the prefill events to compile lookup results.</summary>
            <param name="lookupEvent">event to look up for or query for
            </param>
            <param name="prefillPath">set of events currently in the example tuple to serve
            as a prototype for result rows.
            </param>
            <param name="result">is the list of tuples to add a result row to
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.ExecNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary> Output the execution strategy.</summary>
            <param name="writer">to output to
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.ExecNode.Print(com.espertech.esper.epl.join.exec.ExecNode)">
            <summary> Print in readable format the execution strategy.</summary>
            <param name="execNode">execution node to print
            </param>
            <returns> readable text with execution nodes constructed for actual streams
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.TableOuterLookupExecNode.#ctor(System.Int32,com.espertech.esper.epl.join.exec.TableLookupStrategy)">
            <summary> Ctor.</summary>
            <param name="indexedStream">stream indexed for lookup
            </param>
            <param name="lookupStrategy">strategy to use for lookup (full table/indexed)
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.TableOuterLookupExecNode.Process(com.espertech.esper.events.EventBean,com.espertech.esper.events.EventBean[],System.Collections.Generic.IList{com.espertech.esper.events.EventBean[]})">
            <summary>
            Process single event using the prefill events to compile lookup results.
            </summary>
            <param name="lookupEvent">event to look up for or query for</param>
            <param name="prefillPath">set of events currently in the example tuple to serve
            as a prototype for result rows.</param>
            <param name="result">is the list of tuples to add a result row to</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.TableOuterLookupExecNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Output the execution strategy.
            </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.TableOuterLookupExecNode.LookupStrategy">
            <summary> Returns strategy for lookup.</summary>
            <returns> lookup strategy
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.TableOuterLookupExecNode.IndexedStream">
            <summary> Returns target stream for lookup.</summary>
            <returns> indexed stream
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.NestedIterationExecNode">
             <summary>
             Execution node that performs a nested iteration over all child nodes.
            
             Each child node under this node typically represents a table lookup. The implementation
             'hops' from the first child to the next recursively for each row returned by a child.
            
             It passes a 'prototype' row (prefillPath) to each new child which contains the current partial event set. 
             </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.NestedIterationExecNode.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.join.exec.NestedIterationExecNode"/> class.
            </summary>
            <param name="nestedStreams">The nested streams.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.NestedIterationExecNode.AddChildNode(com.espertech.esper.epl.join.exec.ExecNode)">
            <summary>
            Adds the child node.
            </summary>
            <param name="childNode">The child node.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.NestedIterationExecNode.Process(com.espertech.esper.events.EventBean,com.espertech.esper.events.EventBean[],System.Collections.Generic.IList{com.espertech.esper.events.EventBean[]})">
            <summary>
            Process single event using the prefill events to compile lookup results.
            </summary>
            <param name="lookupEvent">event to look up for or query for</param>
            <param name="prefillPath">set of events currently in the example tuple to serve
            as a prototype for result rows.</param>
            <param name="result">is the list of tuples to add a result row to</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.NestedIterationExecNode.RecursiveNestedJoin(com.espertech.esper.events.EventBean,System.Int32,com.espertech.esper.events.EventBean[],System.Collections.Generic.IList{com.espertech.esper.events.EventBean[]})">
            <summary>Recursive method to run through all child nodes and, for each result set tuple returnedby a child node, execute the inner child of the child node until there are no inner child nodes.</summary>
            <param name="lookupEvent">current event to use for lookup by child node</param>
            <param name="nestingOrderIndex">index within the child nodes indicating what nesting level we are at</param>
            <param name="currentPath">prototype result row to use by child nodes for generating result rows</param>
            <param name="result">result tuple rows to be populated</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.NestedIterationExecNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Output the execution strategy.
            </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.LeafAssemblyNode">
            <summary>
            Assembly node for an event stream that is a leaf with a no child nodes below it.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.BaseAssemblyNode">
            <summary>
            Represents a node in a tree responsible for assembling outer join query results.
            
            The tree is double-linked, child nodes know each parent and parent know all child nodes.
            
            Each specific subclass of this abstract assembly node is dedicated to assembling results for
            a certain event stream.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.ResultAssembler">
            <summary>
            Interface for indicating a result in the form of a single row of multiple events, which could
            represent either a full result over all streams or a partial result over a subset of streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.ResultAssembler.Result(com.espertech.esper.events.EventBean[],System.Int32,com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.rep.Node)">
            <summary> Publish a result row.</summary>
            <param name="row">is the result to publish</param>
            <param name="fromStreamNum">is the originitor that publishes the row</param>
            <param name="myEvent">is optional and is the event that led to the row result</param>
            <param name="myNode">is optional and is the result node of the event that led to the row result</param>
        </member>
        <member name="F:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.parentNode">
            <summary> Parent node.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.childNodes">
            <summary> Child nodes.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.streamNum">
            <summary> Stream number.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.numStreams">
            <summary> Number of streams in statement.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.#ctor(System.Int32,System.Int32)">
            <summary> Ctor.</summary>
            <param name="streamNum">stream number of the event stream that this node assembles results for.
            </param>
            <param name="numStreams">number of streams
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.Init(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary> Provides results to assembly nodes for initialization.</summary>
            <param name="result">is a list of result nodes per stream
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.Process(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary> Process results.</summary>
            <param name="result">is a list of result nodes per stream
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary> Output this node using writer, not outputting child nodes.</summary>
            <param name="indentWriter">to use for output
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.AddChild(com.espertech.esper.epl.join.assemble.BaseAssemblyNode)">
            <summary> Add a child node.</summary>
            <param name="childNode">to add
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.PrintDescendends(com.espertech.esper.util.IndentWriter)">
            <summary> Output this node and all descendent nodes using writer, outputting child nodes.</summary>
            <param name="indentWriter">to output to
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.GetDescendentNodesBottomUp(com.espertech.esper.epl.join.assemble.BaseAssemblyNode)">
            <summary> Returns all descendent nodes to the top node in a list in which the utmost descendants are
            listed first and the top node itself is listed last.
            </summary>
            <param name="topNode">is the root node of a tree structure
            </param>
            <returns> list of nodes with utmost descendants first ordered by level of depth in tree with top node last
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.Result(com.espertech.esper.events.EventBean[],System.Int32,com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.rep.Node)">
            <summary> Publish a result row.</summary>
            <param name="row">is the result to publish</param>
            <param name="fromStreamNum">is the originitor that publishes the row</param>
            <param name="myEvent">is optional and is the event that led to the row result</param>
            <param name="myNode">is optional and is the result node of the event that led to the row result</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.StreamNum">
            <summary> Returns the stream number.</summary>
            <returns> stream number
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.Substreams">
            <summary> Returns an array of stream numbers that lists all child node's stream numbers.</summary>
            <returns> child node stream numbers
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.ChildNodes">
            <summary> Returns child nodes.</summary>
            <returns> child nodes
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.ParentAssembler">
            <summary> Gets or sets the parent node.</summary>
            <returns> parent node
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.LeafAssemblyNode.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.join.assemble.LeafAssemblyNode"/> class.
            </summary>
            <param name="streamNum">stream number of the event stream that this node assembles results for.</param>
            <param name="numStreams">number of streams</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.LeafAssemblyNode.Init(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Provides results to assembly nodes for initialization.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.LeafAssemblyNode.Process(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Process results.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.LeafAssemblyNode.processEvent(com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.rep.Node)">
            <summary>
            Processes the event.
            </summary>
            <param name="ev">The ev.</param>
            <param name="currentNode">The current node.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.LeafAssemblyNode.Result(com.espertech.esper.events.EventBean[],System.Int32,com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.rep.Node)">
            <summary>
            Results the specified row.
            </summary>
            <param name="row">The row.</param>
            <param name="streamNum">The stream num.</param>
            <param name="myEvent">My event.</param>
            <param name="myNode">My node.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.LeafAssemblyNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Output this node using writer, not outputting child nodes.
            </summary>
            <param name="indentWriter">to use for output</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNode">
            <summary> Superclass for filter nodes in a filter expression tree. Allow
            validation against stream event types and evaluation of events against filter tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprValidator">
            <summary>
            Validation interface for expression nodes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprValidator.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">delegates for view resources to expression nodes</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprValidator.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated</returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprEvaluator">
            <summary>
            Interface for evaluating of an event tuple.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprEvaluator.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
             <summary>
             Return true if a expression node semantically equals the current node, or false if not.
            
             Concrete implementations should compare the type and any additional information
             that impact the evaluation of a node.
             </summary>
             <param name="node">to compare to
             </param>
             <returns> true if semantically equal, or false if not equals
             </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.#ctor">
            <summary>
            Constructor creates a list of child nodes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.GetValidatedSubtree(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validates the expression node subtree that has this
            node as root. Some of the nodes of the tree, including the
            root, might be replaced in the process.
            </summary>
            <param name="streamTypeService">serves stream type information</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">delegates for view resources to expression nodes</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <returns>
            the root node of the validated subtree, possibly
            different than the root node of the unvalidated subtree
            </returns>
            <throws>ExprValidationException when the validation fails</throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.Accept(com.espertech.esper.epl.expression.ExprNodeVisitor)">
             <summary>
             Accept the visitor. The visitor will first visit the parent then visit all child nodes, then their child nodes.
            
             The visitor can decide to skip child nodes by returning false in isVisit.
             </summary>
             <param name="visitor">to visit each node and each child node.
             </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.AddChildNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Adds a child node.
            </summary>
            <param name="childNode">is the child evaluation tree node to add
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.DumpDebug(System.String)">
            <summary> Recursively print out all nodes.</summary>
            <param name="prefix">is printed out for naming the printed info
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.DeepEquals(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprNode)">
             <summary> Compare two expression nodes and their children in exact child-node sequence,
             returning true if the 2 expression nodes trees are equals, or false if they are not equals.
            
             Recursive call since it uses this method to compare child nodes in the same exact sequence.
             Nodes are compared using the EqualsNode method.
             </summary>
             <param name="nodeOne">first expression top node of the tree to compare
             </param>
             <param name="nodeTwo">second expression top node of the tree to compare
             </param>
             <returns> false if this or all child nodes are not equal, true if equal
             </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.ParseMappedProperty(System.String)">
            <summary>
            Parse the mapped property into classname, method and string argument.
            Mind this has been parsed already and is a valid mapped property.
            </summary>
            <param name="property">
            is the string property to be passed as a static method invocation
            </param>
            <returns>descriptor object</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">delegates for view resources to expression nodes</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNode.ExpressionString">
            <summary> Returns the expression node rendered as a string.</summary>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNode.ChildNodes">
            <summary> Returns list of child nodes.</summary>
            <returns> list of child nodes
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNode.MappedPropertyParseResult">
            <summary>
            Encapsulates the parse result parsing a mapped property as a type and method name with args.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.MappedPropertyParseResult.#ctor(System.String,System.String,System.String)">
            <summary>Returns the parse result of the mapped property.</summary>
            <param name="typeName">is the type name, or null if there isn't one</param>
            <param name="methodName">is the method name</param>
            <param name="argString">is the argument</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNode.MappedPropertyParseResult.TypeName">
            <summary>Returns class name.</summary>
            <returns>name of class</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNode.MappedPropertyParseResult.MethodName">
            <summary>Returns the method name.</summary>
            <returns>method name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNode.MappedPropertyParseResult.ArgString">
            <summary>Returns the method argument.</summary>
            <returns>arg</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprEqualsNode">
            <summary>
            Represents an equals (=) comparator in a filter expressiun tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprEqualsNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="isNotEquals">true if this is a (!=) not equals rather then equals, false if its a '=' equals
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprEqualsNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprEqualsNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprEqualsNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEqualsNode.IsNotEquals">
            <summary>
            Returns true if this is a NOT EQUALS node, false if this is a EQUALS node.
            </summary>
            <value><c>true</c> if [not equals]; otherwise, <c>false</c>.</value>
            <returns> true for !=, false for =
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEqualsNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEqualsNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprBitWiseNode">
            <summary>
            Represents the bit-wise operators in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBitWiseNode.#ctor(com.espertech.esper.type.BitWiseOpEnum)">
            <summary>
            Ctor.
            </summary>
            <param name="bitWiseOpEnum_">type of math</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBitWiseNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">The time provider.</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBitWiseNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBitWiseNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBitWiseNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBitWiseNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <value></value>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBitWiseNode.BitWiseOpEnum">
            <summary>
            Gets the bitwise operator.
            </summary>
            <value>The bitwise operator.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBitWiseNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprAndNode">
            <summary>
            Represents And-condition.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAndNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAndNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAndNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAndNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAndNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprProcessorFactory">
            <summary>Factory for select expression processors. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprProcessorFactory.GetProcessor(System.Collections.Generic.IList{com.espertech.esper.epl.spec.SelectClauseElementCompiled},System.Boolean,com.espertech.esper.epl.spec.InsertIntoDesc,com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.events.EventAdapterService,com.espertech.esper.core.StatementResultService,com.espertech.esper.events.vaevent.ValueAddEventService)">
            <summary>
            Returns the processor to use for a given select-clause.
            </summary>
            <param name="selectionList">the list of select clause elements/items, which are expected to have been validated</param>
            <param name="isUsingWildcard">true if the wildcard (*) occurs in the select clause</param>
            <param name="insertIntoDesc">contains column names for the optional insert-into clause (if supplied)</param>
            <param name="typeService">serves stream type information</param>
            <param name="eventAdapterService">for generating wrapper instances for events</param>
            <param name="statementResultService">handles listeners/subscriptions awareness to reduce output result generation</param>
            <param name="valueAddEventService">service that handles update events and variant events</param>
            <returns>select-clause expression processor</returns>
            <throws>com.espertech.esper.epl.expression.ExprValidationException to indicate the select expression cannot be validated</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprProcessorFactory.VerifyNameUniqueness(System.Collections.Generic.IList{com.espertech.esper.epl.spec.SelectClauseElementCompiled})">
            <summary>Verify that each given name occurs exactly one. </summary>
            <param name="selectionList">is the list of select items to verify names</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException thrown if a name occured more then once</throws>
        </member>
        <member name="T:com.espertech.esper.core.EPStatementStopMethod">
            <summary>
            Method to call to Stop an EPStatement.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.EPServicesContext">
            <summary>
            Convenience class to hold implementations for all services.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPServicesContext.Destroy">
            <summary>
            Destroy services.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPServicesContext.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPServicesContext.#ctor(System.String,com.espertech.esper.schedule.SchedulingService,com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.core.EngineSettingsService,com.espertech.esper.epl.db.DatabaseConfigService,com.espertech.esper.epl.spec.PluggableObjectCollection,com.espertech.esper.core.StatementLockFactory,com.espertech.esper.util.ManagedReadWriteLock,com.espertech.esper.core.ExtensionServicesContext,com.espertech.esper.core.Directory,com.espertech.esper.core.StatementContextFactory,com.espertech.esper.epl.spec.PluggableObjectCollection,com.espertech.esper.epl.view.OutputConditionFactory,com.espertech.esper.timer.TimerService,com.espertech.esper.filter.FilterService,com.espertech.esper.view.stream.StreamFactoryService,com.espertech.esper.epl.named.NamedWindowService,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.timer.TimeSourceService,com.espertech.esper.events.vaevent.ValueAddEventService)">
            <summary>Constructor - sets up new set of services.</summary>
            <param name="engineURI">is the engine URI</param>
            <param name="schedulingService">service to get time and schedule callbacks</param>
            <param name="eventAdapterService">service to resolve event types</param>
            <param name="databaseConfigService">service to resolve a database name to database connection factory and configs</param>
            <param name="plugInViews">resolves view namespace and name to view factory class</param>
            <param name="statementLockFactory">creates statement-level locks</param>
            <param name="eventProcessingRWLock">is the engine lock for statement management</param>
            <param name="extensionServicesContext">marker interface allows adding additional services</param>
            <param name="engineImportService">is engine imported static func packages and aggregation functions</param>
            <param name="engineSettingsService">provides engine settings</param>
            <param name="statementContextFactory">is the factory to use to create statement context objects</param>
            <param name="engineDirectory">is engine environment/directory information for use with adapters and external env</param>
            <param name="plugInPatternObjects">resolves plug-in pattern objects</param>
            <param name="outputConditionFactory">factory for output condition objects</param>
            <param name="timerService">is the timer service</param>
            <param name="filterService">the filter service</param>
            <param name="streamFactoryService">is hooking up filters to streams</param>
            <param name="namedWindowService">is holding information about the named windows active in the system</param>
            <param name="variableService">provides access to variable values</param>
            <param name="valueAddEventService">handles update events</param>
            <param name="timeSourceService">time source provider class</param>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.EngineInstanceId">
            <summary>
            Gets the engine instance id.
            </summary>
            <value>The engine instance id.</value>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.InternalEventRouter">
            <summary>
            Gets or sets router for internal event processing.
            </summary>
            <value>The internal event router.</value>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.FilterService">
            <summary> Returns filter evaluation service implementation.</summary>
            <returns> filter evaluation service
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.TimerService">
            <summary> Returns time provider service implementation.</summary>
            <returns> time provider service
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.SchedulingService">
            <summary> Returns scheduling service implementation.</summary>
            <returns> scheduling service
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.EmitService">
            <summary> Returns service for emitting events.</summary>
            <returns> emit event service
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.DispatchService">
            <summary> Returns dispatch service responsible for dispatching events to listeners.</summary>
            <returns> dispatch service.
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.ViewService">
            <summary> Returns services for view creation, sharing and removal.</summary>
            <returns> view service
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.StreamService">
            <summary> Returns stream service.</summary>
            <returns> stream service
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.EventAdapterService">
            <summary> Returns event type resolution service.</summary>
            <returns> service resolving event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.EngineImportService">
            <summary> Returns the import and class name resolution service.</summary>
            <returns> import service
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.DatabaseRefService">
            <summary> Returns the database settings service.</summary>
            <returns> database info service
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.PlugInViews">
            <summary>
            Information to resolve plug-in view namespace and name.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.PlugInPatternObjects">
            <summary>
            Information to resolve plug-in pattern object namespace and name.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.StatementLockFactory">
            <summary>
            Factory for statement-level locks.
            </summary>
            <returns> factory</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.EventProcessingRWLock">
            <summary>
            Returns the event processing lock for coordinating statement administration with event processing.
            </summary>
            <returns> lock</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.StatementLifecycleSvc">
            <summary>
            Gets or sets the service dealing with starting and stopping statements.
            </summary>
            <returns> service for statement start and stop</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.ExtensionServicesContext">
            <summary>
            Returns extension service for adding custom the services.
            </summary>
            <returns> extension service context</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.EngineDirectory">
            <summary>
            Returns the engine directory for getting access to engine-external resources, such as adapters
            </summary>
            <returns> engine directory</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.StatementContextFactory">
            <summary>
            Returns the factory to use for creating a statement context.
            </summary>
            <returns> statement context factory</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.EngineURI">
            <summary>
            Returns the engine URI.
            </summary>
            <returns> engine URI</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.EngineSettingsService">
            <summary>
            Gets the engine settings service.
            </summary>
            <value>The engine settings service.</value>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.OutputConditionFactory">
            <summary>
            Gets the output condition factory.
            </summary>
            <value>The output condition factory.</value>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.NamedWindowService">
            <summary>Returns the named window management service.</summary>
            <returns>service for managing named windows</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.VariableService">
            <summary>Returns the variable service.</summary>
            <returns>variable service</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.TimeSource">
            <summary>
            Returns the time source provider class.
            </summary>
            <value>The time source.</value>
            <returns>time source</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServicesContext.ValueAddEventService">
            <summary>
            Returns the service for handling updates to events.
            </summary>
            <value>The value add event service.</value>
            <returns>revision service</returns>
        </member>
        <member name="T:com.espertech.esper.core.EPServiceProviderSPI">
            <summary>
            A service provider interface that makes available internal engine services.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPServiceProvider">
            <summary>
            This class provides access to the EPRuntime and EPAdministrator implementations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProvider.Initialize">
            <summary> Frees any resources associated with this runtime instance.
            Stops and destroys any event filters, patterns, expressions, views.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProvider.Destroy">
            <summary>
            Destroys the service.
            <para>
            Releases any resources held by the service. The service enteres a state in
            which operations provided by administrative and runtime interfaces originiated by the service
            are not guaranteed to operate properly.
            </para>
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProvider.EPRuntime">
            <summary> Returns a class instance of EPRuntime.</summary>
            <returns> an instance of EPRuntime
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProvider.EPAdministrator">
            <summary> Returns a class instance of EPAdministrator.</summary>
            <returns> an instance of EPAdministrator
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProvider.EnvDirectory">
            <summary>
            Returns the engine environment directory for engine-external
            resources such as adapters.
            </summary>
            <returns>engine environment directory</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProvider.URI">
            <summary>Returns the provider URI, or null if this is the default provider.</summary>
            <returns>provider URI</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProvider.IsDestroyed">
            <summary>
            Returns true if the service is in destroyed state, or false if not.
            </summary>
            <returns>indicator whether the service has been destroyed</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderSPI.StatementLifecycleSvc">
            <summary>Returns statement management service for the engine.</summary>
            <returns>the StatementLifecycleSvc</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderSPI.EventAdapterService">
            <summary>Get the EventAdapterService for this engine.</summary>
            <returns>the EventAdapterService</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderSPI.SchedulingService">
            <summary>Get the SchedulingService for this engine.</summary>
            <returns>the SchedulingService</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderSPI.FilterService">
            <summary>Returns the filter service.</summary>
            <returns>filter service</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderSPI.TimerService">
            <summary>Returns the timer service.</summary>
            <returns>timer service</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderSPI.NamedWindowService">
            <summary>Returns the named window service.</summary>
            <returns>named window service</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderSPI.ConfigurationInformation">
            <summary>Returns the current configuration.</summary>
            <returns>configuration information</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderSPI.ExtensionServicesContext">
            <summary>
            Gets the extension services context.
            </summary>
        </member>
        <member name="F:com.espertech.esper.core.EPServiceProviderConstants.DEFAULT_ENGINE_URI__QUALIFIER">
            <summary>
            For the default provider instance, which carries a null provider URI,
            the property name qualification and stream name qualification may use
            "default".</summary>
        </member>
        <member name="T:com.espertech.esper.core.EPStatementObjectModelHelper">
            <summary>
            Helper methods for use by the statement object model.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementObjectModelHelper.RenderEQL(System.IO.StringWriter,System.Object)">
            <summary>Renders a constant as an EPL.</summary>
            <param name="writer">to output to</param>
            <param name="constant">to render</param>
        </member>
        <member name="T:com.espertech.esper.compat.SystemTimerFactory">
            <summary>
            Implementation of the timer factory that uses the system timer.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.ITimerFactory">
            <summary>
            Factory object that creates timers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ITimerFactory.CreateTimer(System.Threading.TimerCallback,System.Int64)">
            <summary>
            Creates a timer.  The timer will begin after dueTime (in milliseconds)
            has passed and will occur at an interval specified by the period.
            </summary>
            <param name="timerCallback"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.SystemTimerFactory.CreateBaseTimer">
            <summary>
            Creates the timer.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SystemTimerFactory.IsIdling(System.Int64)">
            <summary>
            Determines whether the specified generations are idling.
            </summary>
            <param name="idleGenerations">The idle generations.</param>
            <returns>
            	<c>true</c> if the specified idle generations is idling; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.SystemTimerFactory.IsPruneGeneration(System.Int64)">
            <summary>
            Determines whether [is prune generation] [the specified generation].
            </summary>
            <param name="generation">The generation.</param>
            <returns>
            	<c>true</c> if [is prune generation] [the specified generation]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.SystemTimerFactory.OnPruneCallbacks">
            <summary>
            Prunes dead callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SystemTimerFactory.OnTimerEvent(System.Object)">
            <summary>
            Occurs when the timer event fires.
            </summary>
            <param name="userData">The user data.</param>
        </member>
        <member name="M:com.espertech.esper.compat.SystemTimerFactory.CreateTimer(System.Threading.TimerCallback,System.Int64)">
            <summary>
            Creates a timer.  The timer will begin after dueTime (in milliseconds)
            has passed and will occur at an interval specified by the period.
            </summary>
            <param name="timerCallback"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.SystemTimerFactory.InternalTimer">
            <summary>
            Disposable timer kept for internal purposes; cascades the timer effect.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.ITimer">
            <summary>
            An object that represents a timer.  Timers must be
            disposable.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SystemTimerFactory.InternalTimer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.SystemTimerFactory.InternalTimer"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SystemTimerFactory.InternalTimer.OnTimerCallback(System.Int64)">
            <summary>
            Called when [timer callback].
            </summary>
            <param name="currTime">The curr time.</param>
        </member>
        <member name="M:com.espertech.esper.compat.SystemTimerFactory.InternalTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.SpinLock">
            <summary>
            Implements a simple spinLock algorithm.  The spinLock will attempt
            to exchange a value atomically.  If the exchange can not be done then
            the spinLock will enter a loop for a maximum amount of time as
            specified.  In the loop it will use a spinWait to allow the CPU to
            idle for a few cycles in an attempt to wait for the resource to be
            freed up.  If after a number of attempts the resource has not been
            freed, the spinLock will give up its quanta using a sleep.  The sleep
            will force the thread to yield and if all goes well releases the thread
            (which may be on the same processor) to release the critical resource.
            There's no reason to use this as a general purpose lock, monitors do
            just fine.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SpinLock.Enter(System.Int32)">
            <summary>
            Acquires the lock.  If the lock can be acquired immediately
            it does so.  In the event that the lock can not be acquired
            the lock will use a spin-lock algorithm to acquire the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SpinLock.Enter">
            <summary>
            Acquires the lock.  If the lock can be acquired immediately
            it does so.  In the event that the lock can not be acquired
            the lock will use a spin-lock algorithm to acquire the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SpinLock.EnterMyLockSpin(System.Int32)">
            <summary>
            Enters the lock spin with a timeout.  Returns true if the
            lock was acquired within the time allotted.
            </summary>
            <param name="timeoutInMillis"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.SpinLock.Release">
            <summary>
            Releases the lock, allowing waiters to proceed.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.ELinkedList`1">
            <summary>
            Linked list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.ELinkedList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ELinkedList`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ELinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ELinkedList`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ELinkedList`1.AddFirst(`0)">
            <summary>
            Adds the item at the front of the list.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:com.espertech.esper.compat.Map`2">
            <summary>
            Extended dictionary functionality.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.Map`2.Get(`0,`1)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then the defaultValue is
            returned.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.Map`2.Get(`0)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.Map`2.Put(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.Map`2.Push(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            If a value was previously mapped it is returned.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.Map`2.PutAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Puts all values from the source dictionary into
            this dictionary.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:com.espertech.esper.compat.Map`2.Remove(`0,`1@)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.
            </summary>
            <param name="key">Search key into the dictionary</param>
            <param name="value">The value removed from the dictionary (if found).</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.Map`2.RemoveAndReturn(`0)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  The item if found is returned; if not,
            default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.Map`2.FirstValue">
            <summary>
            Returns the first value in the enumeration of values
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.SumProjectionExpression">
            <summary>
            Sum of the (distinct) values returned by an expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.ExpressionBase">
            <summary>
            Base expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.Expression">
            <summary>
            Interface representing an expression for use in select-clauses, where-clauses, having-clauses, order-by clauses and
            streams based on filters and pattern filter expressions.
            <para>
            Expressions are organized into a tree-like structure with nodes representing sub-expressions.
            </para>
            <para>
            Certain types of nodes have certain requirements towards the number or types of nodes that
            are expected as sub-expressions to an expression.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expression.ToEPL(System.IO.StringWriter)">
            <summary>
            Renders the expressions and all it's child expression, in full tree depth, as a string in
            language syntax.
            </summary>
            <param name="writer">is the output to use</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.Expression.Children">
            <summary>
            Returns the list of sub-expressions (child expressions) to the current expression node.
            </summary>
            <returns>child expressions or empty list if there are no child expressions</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ExpressionBase.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ExpressionBase.AddChild(com.espertech.esper.client.soda.Expression)">
            <summary>Adds a new child expression to the current expression.</summary>
            <param name="expression">to add</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ExpressionBase.ToEPL(System.IO.StringWriter)">
            <summary>
            Renders the expressions and all it's child expression, in full tree depth, as a string in
            language syntax.
            </summary>
            <param name="writer">is the output to use</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ExpressionBase.Children">
            <summary>Gets or sets the list of sub-expressions to the current expression.</summary>
            <returns>list of child expressions</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SumProjectionExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without inner expression
            </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SumProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project.</summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SumProjectionExpression.IsDistinct">
            <summary>Gets or sets the true if the projection considers distinct values only.</summary>
            <returns>true if distinct</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.RegExpExpression">
            <summary>
            Regular expression evaluates a "regexp" regular expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.RegExpExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.RegExpExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="left">provides values to match against regexp string</param>
            <param name="right">provides the regexp string</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.RegExpExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="left">provides values to match against regexp string</param>
            <param name="right">provides the regexp string</param>
            <param name="escape">provides the escape character</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.RegExpExpression.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternFilterExpr">
            <summary>
            Filter for use in pattern expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternExprBase">
            <summary>
            Abstract base class for all pattern expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternExpr">
            <summary>
            Interface representing a pattern expression.
            <para/>
            Pattern expressions are organized into a tree-like structure with nodes representing sub-expressions (composite).
            <para/>
            Certain types of nodes have certain requirements towards the number or types of nodes that
            are expected as pattern sub-expressions to an pattern expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternExpr.ToEPL(System.IO.StringWriter)">
            <summary>
            Renders the pattern expression and all it's child expressions, in full tree depth, as a string in
            language syntax.
            </summary>
            <param name="writer">is the output to use</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternExpr.Children">
            <summary>
            Returns the list of pattern sub-expressions (child expressions) to the current pattern expression node.
            </summary>
            <returns>
            pattern child expressions or empty list if there are no child expressions
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternExprBase.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternExprBase.AddChild(com.espertech.esper.client.soda.PatternExpr)">
            <summary>Adds a sub-expression to the pattern expression.</summary>
            <param name="expression">to add</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternExprBase.ToEPL(System.IO.StringWriter)">
            <summary>
            Renders the pattern expression and all it's child expressions, in full tree depth, as a string in
            language syntax.
            </summary>
            <param name="writer">is the output to use</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternExprBase.Children">
            <summary>
            Returns the list of pattern sub-expressions (child expressions) to the current pattern expression node.
            </summary>
            <returns>
            pattern child expressions or empty list if there are no child expressions
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternFilterExpr.#ctor(com.espertech.esper.client.soda.Filter)">
            <summary>Ctor.</summary>
            <param name="filter">specifies to events to filter out</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternFilterExpr.#ctor(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>Ctor.</summary>
            <param name="filter">specifies to events to filter out</param>
            <param name="tagName">
            specifies the name of the tag to assigned to matching events
            </param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternFilterExpr.TagName">
            <summary>Gets or sets the tag name.</summary>
            <returns>tag name.</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternFilterExpr.Filter">
            <summary>Gets or sets the filter specification.</summary>
            <returns>filter</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.OrderByClause">
            <summary>
            An order-by clause consists of expressions and flags indicating if ascending or descending.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.Create">
            <summary>Create an empty order-by clause.</summary>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.Create(System.String[])">
            <summary>Create an order-by clause.</summary>
            <param name="properties">is the property names to order by</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.Create(com.espertech.esper.client.soda.Expression[])">
            <summary>Create an order-by clause.</summary>
            <param name="expressions">is the expressios returning values to order by</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.Add(System.String,System.Boolean)">
            <summary>Adds a property and flag.</summary>
            <param name="property">is the name of the property to add</param>
            <param name="isDescending">true for descending, false for ascending sort</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.Add(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Adds an expression and flag.</summary>
            <param name="expression">returns values to order by</param>
            <param name="isDescending">true for descending, false for ascending sort</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.#ctor(System.String[])">
            <summary>Ctor.</summary>
            <param name="properties">property names</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.#ctor(com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="expressions">is the expressions</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OrderByClause.OrderByExpressions">
            <summary>Gets or set a list of expressions and flags to order by.</summary>
            <returns>order-by elements</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.Conjunction">
            <summary>
            Conjunction represents a logical AND allowing multiple sub-expressions to be connected by AND.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.Junction">
            <summary>
            Base junction for conjunction (and) and disjunction (or).
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Junction.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Expression to add to the conjunction (AND) or disjunction (OR).</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Junction.Add(System.String)">
            <summary>Property to add to the conjunction (AND) or disjunction (OR).</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Conjunction.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Conjunction.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="first">provides value to AND</param>
            <param name="second">provides value to AND</param>
            <param name="expressions">is more expressions to put in the AND-relationship.</param>
        </member>
        <member name="T:com.espertech.esper.client.EPAdministrator">
            <summary>
            Administrative interface to the event stream processing engine. Includes methods to create
            patterns and EPL statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CreatePattern(System.String)">
            <summary> Create and starts an event pattern statement for the expressing string passed.
            <p>The engine assigns a unique name to the statement.</p>
            </summary>
            <param name="onExpression">must follow the documented syntax for pattern statements
            </param>
            <returns> EPStatement to poll data from or to add listeners to
            </returns>
            <throws>  EPException when the expression was not valid </throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CreateEPL(System.String)">
            <summary> Create and starts an EPL statement.
            <para>The engine assigns a unique name to the statement.  The returned statement is in started state.</para>
            </summary>
            <param name="eplStatement">is the query language statement
            </param>
            <returns> EPStatement to poll data from or to add listeners to
            </returns>
            <throws>  EPException when the expression was not valid </throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CreatePattern(System.String,System.String)">
            <summary>
            Create and starts an event pattern statement for the expressing string passed and assign the name passed.
            <para>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique statement name.
            </para>
            </summary>
            <param name="onExpression">
            must follow the documented syntax for pattern statements
            </param>
            <param name="statementName">
            is the name to assign to the statement for use in manageing the statement
            </param>
            <returns>EPStatement to poll data from or to add listeners to</returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CreateEPL(System.String,System.String)">
            <summary>
            Create and starts an EPL statement.
            <para>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique statement name.
            </para>
            </summary>
            <param name="eplStatement">is the query language statement</param>
            <param name="statementName">
            is the name to assign to the statement for use in manageing the statement
            </param>
            <returns>EPStatement to poll data from or to add listeners to</returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.Create(com.espertech.esper.client.soda.EPStatementObjectModel,System.String)">
            <summary>
            Creates and starts an EPL statement.
            <para>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique statement name.
            </para>
            </summary>
            <param name="sodaStatement">is the statement object model</param>
            <param name="statementName">
            is the name to assign to the statement for use in managing the statement
            </param>
            <returns>EPStatement to poll data from or to add listeners to</returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.Create(com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>Creates and starts an EPL statement.</summary>
            <param name="sodaStatement">is the statement object model</param>
            <returns>EPStatement to poll data from or to add listeners to</returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CompileEPL(System.String)">
            <summary>
            Compiles a given EPL into an object model representation of the query.
            </summary>
            <param name="eplExpression">is the statement text to compile</param>
            <returns>object model of statement</returns>
            <throws>EPException indicates compilation errors.</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.PrepareEPL(System.String)">
            <summary>
            Prepares a statement for the given EPL, which can include substitution parameters marked via question mark '?'.
            </summary>
            <param name="eplExpression">is the statement text to prepare</param>
            <returns>prepared statement</returns>
            <throws>EPException indicates compilation errors.</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.PreparePattern(System.String)">
            <summary>
            Prepares a statement for the given pattern, which can include substitution parameters marked via question mark '?'.
            </summary>
            <param name="patternExpression">is the statement text to prepare</param>
            <returns>prepared statement</returns>
            <throws>EPException indicates compilation errors.</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.Create(com.espertech.esper.client.EPPreparedStatement,System.String)">
            <summary>
            Creates and starts a prepared statement.
            <para>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique statement name.
            </para>
            </summary>
            <param name="prepared">
            is the prepared statement for which all substitution values have been provided
            </param>
            <param name="statementName">
            is the name to assign to the statement for use in manageing the statement
            </param>
            <returns>EPStatement to poll data from or to add listeners to</returns>
            <throws>EPException when the prepared statement was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.Create(com.espertech.esper.client.EPPreparedStatement)">
            <summary>Creates and starts a prepared statement.</summary>
            <param name="prepared">
            is the prepared statement for which all substitution values have been provided
            </param>
            <returns>EPStatement to poll data from or to add listeners to</returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.GetStatement(System.String)">
            <summary>
            Returns the statement by the given statement name. Returns null if a statement of that name has not
            been created, or if the statement by that name has been destroyed.
            </summary>
            <param name="name">is the statement name to return the statement for</param>
            <returns>
            statement for the given name, or null if no such started or stopped statement exists
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.StartAllStatements">
            <summary>
            Starts all statements that are in stopped state. Statements in started state
            are not affected by this method.
            </summary>
            <throws>EPException when an error occured starting statements.</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.StopAllStatements">
            <summary>
            Stops all statements that are in started state. Statements in stopped state are not affected by this method.
            </summary>
            <throws>EPException when an error occured stopping statements</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.DestroyAllStatements">
            <summary>Stops and destroys all statements.</summary>
            <throws>EPException when an error occured stopping or destroying statements</throws>
        </member>
        <member name="P:com.espertech.esper.client.EPAdministrator.StatementNames">
            <summary>
            Returns the statement names of all started and stopped statements.
            <para>
            This excludes the name of destroyed statements.
            </para>
            </summary>
            <returns>statement names</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPAdministrator.Configuration">
            <summary>Returns configuration operations for runtime engine configuration.</summary>
            <returns>runtime engine configuration operations</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantPropResolutionStrategy">
            <summary>
            Strategy for resolving a property against any of the variant types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropResolutionStrategy.ResolveProperty(System.String,com.espertech.esper.events.EventType[])">
            <summary>
            Resolve the property for each of the types.
            </summary>
            <param name="propertyName">to resolve</param>
            <param name="variants">the variants to resolve the property for</param>
            <returns>property descriptor</returns>
        </member>
        <member name="T:com.espertech.esper.events.MapEventPropertyGetter">
            <summary>
            A getter for use with Map-based events simply returns the value for the key.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.EventPropertyGetter">
            <summary> Get property values from an event instance for a given event property.
            Instances that implement this interface are usually bound to a particular <see cref="T:com.espertech.esper.events.EventType"/> and cannot
            be used to access <see cref="T:com.espertech.esper.events.EventBean"/> instances of a different type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary> Return the value for the property in the event object specified when the instance was obtained.
            Useful for fast access to event properties. Throws a PropertyAccessException if the getter instance
            doesn't match the EventType it was obtained from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from
            </param>
            <returns> value of property in event
            </returns>
            <throws>  PropertyAccessException to indicate that property access failed </throws>
        </member>
        <member name="M:com.espertech.esper.events.EventPropertyGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
             <summary>
             Returns true if the property exists, or false if the type does not have such a property.
             <para>
             Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
             Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
             If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
             does not exists and the method returns false.
             </para>
             <para>
             For non-dynamic properties, this method always returns true since a getter would not be available
             unless
             </para>
             </summary>
             <param name="eventBean">the event to check if the dynamic property exists</param>
             <returns>
             indictor whether the property exists, always true for non-dynamic (default) properties
             </returns>
            
        </member>
        <member name="M:com.espertech.esper.events.MapEventPropertyGetter.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="propertyName">property to get</param>
        </member>
        <member name="T:com.espertech.esper.events.EventSenderImpl">
            <summary>
            Event sender for use with plug-in event representations.
            <para/>
            The implementation asks a list of event bean factories originating from plug-in event
            representations to each reflect on the event and generate an event bean. The first one
            to return an event bean wins.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventSenderImpl.Create(System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventSenderURIDesc},com.espertech.esper.core.EPRuntimeEventSender)">
            <summary>
            Creates the specified runtime event sender.
            </summary>
            <param name="handlingFactories">The handling factories.</param>
            <param name="epRuntime">The ep runtime.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputStrategySimple">
            <summary>
            An output strategy that outputs if there are results of if the force-update flag is set.
             </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputStrategy">
            <summary>Strategy for performing an output via dispatch view. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputStrategy.Output(System.Boolean,com.espertech.esper.collection.UniformPair{com.espertech.esper.events.EventBean[]},com.espertech.esper.core.UpdateDispatchView)">
            <summary>Outputs the result to the output view and following update policy. </summary>
            <param name="forceUpdate">indicates whether output can be skipped, such as when no results collected</param>
            <param name="result">the output to indicate</param>
            <param name="outputView">the view to output to</param>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableDeclarationException">
            <summary>
            Exception indicating a problem in a variable declaration.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableDeclarationException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="msg">the exception message.</param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerType">
            <summary>Enum for the type of on-trigger statement.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OnTriggerType.ON_DELETE">
            <summary>
            For on-delete triggers that delete from a named window when a triggering event arrives.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OnTriggerType.ON_SELECT">
            <summary>
            For on-select triggers that selected from a named window when a triggering event arrives.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OnTriggerType.ON_SET">
            <summary>
            For on-set triggers that set variable values when a triggering event arrives.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowConsumerDispatchUnit">
            <summary>
            Holds a unit of dispatch that is a result of a named window processing incoming or timer events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowConsumerDispatchUnit.#ctor(com.espertech.esper.epl.named.NamedWindowDeltaData,com.espertech.esper.compat.Map{com.espertech.esper.core.EPStatementHandle,System.Collections.Generic.IList{com.espertech.esper.epl.named.NamedWindowConsumerView}})">
            <summary>Ctor.</summary>
            <param name="deltaData">
            the insert and remove stream posted by the named window
            </param>
            <param name="dispatchTo">
            the list of consuming statements, and for each the list of consumer views
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowConsumerDispatchUnit.DeltaData">
            <summary>Returns the data to dispatch.</summary>
            <returns>dispatch insert and remove stream events</returns>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowConsumerDispatchUnit.DispatchTo">
            <summary>
            Returns the destination of the dispatch: a map of statements and their consuming views (one or multiple)
            </summary>
            <returns>map of statement to consumer views</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprVariableNode">
            <summary>Represents a variable in an expression tree.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprVariableNode.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="variableName">is the name of the variable</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprVariableNode.VariableName">
            <summary>Returns the name of the variable.</summary>
            <returns>variable name</returns>
        </member>
        <member name="T:com.espertech.esper.compat.EnumHelper">
            <summary>
            Collection of utility methods to help with enumerated types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.EnumHelper.Parse``1(System.String,System.Boolean)">
            <summary>
            Parses the specified text value and converts it into the specified
            type of enumeration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="textValue">The text value.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.EnumHelper.Parse``1(System.String)">
            <summary>
            Parses the specified text value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="textValue">The text value.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.VariableNotFoundException">
            <summary>Indicates that a variable was not found. </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPException">
            <summary> 
            This exception is thrown to indicate a problem in administration and runtime.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
        </member>
        <member name="M:com.espertech.esper.client.EPException.#ctor(System.String,System.Exception)">
            <summary> Ctor for an inner exception and message.</summary>
            <param name="message">error message
            </param>
            <param name="cause">inner exception
            </param>
        </member>
        <member name="M:com.espertech.esper.client.EPException.#ctor(System.Exception)">
            <summary> Ctor - just an inner exception.</summary>
            <param name="cause">inner exception
            </param>
        </member>
        <member name="M:com.espertech.esper.client.VariableNotFoundException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">supplies exception details</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.CreateWindowClause">
            <summary>
            Create a named window, defining the parameter of the named window such as
            window name and data window view Name(s).
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.Create(System.String,com.espertech.esper.client.soda.View)">
            <summary>Creates a clause to create a named window.</summary>
            <param name="windowName">is the name of the named window</param>
            <param name="view">is a data window view</param>
            <returns>create window clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.Create(System.String,com.espertech.esper.client.soda.View[])">
            <summary>Creates a clause to create a named window.</summary>
            <param name="windowName">is the name of the named window</param>
            <param name="views">is the data window views</param>
            <returns>create window clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.AddView(System.String,System.String)">
            <summary>
            Adds an un-parameterized view to the named window.
            </summary>
            <param name="namespace">is the view namespace, for example "win" for most data windows</param>
            <param name="name">is the view name, for example "length" for a length window</param>
            <returns>named window creation clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.AddView(System.String,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Adds a parameterized view to the named window.
            </summary>
            <param name="namespace">is the view namespace, for example "win" for most data windows</param>
            <param name="name">is the view name, for example "length" for a length window</param>
            <param name="parameters">is a list of view parameters</param>
            <returns>named window creation clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.AddView(System.String,System.String,System.Object[])">
            <summary>Adds a parameterized view to the named window.</summary>
            <param name="namespace">is the view namespace, for example "win" for most data windows</param>
            <param name="name">is the view name, for example "length" for a length window</param>
            <param name="parameters">is a list of view parameters</param>
            <returns>named window creation clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.#ctor(System.String,System.Collections.Generic.IEnumerable{com.espertech.esper.client.soda.View})">
            <summary>Ctor.</summary>
            <param name="windowName">is the name of the window to create</param>
            <param name="views">is a list of data window views</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateWindowClause.WindowName">
            <summary>
            Gets or sets the name of the window.
            </summary>
            <value>The name of the window.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateWindowClause.Views">
            <summary>
            Gets or sets the views onto the named window.
            </summary>
            <value>The views.</value>
        </member>
        <member name="T:com.espertech.esper.client.EventSender">
            <summary>
            Returns a facility to process event objects that are of a known type.
            Obtained via the method <see cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.String)"/> the sender 
            is specific to a given event type and may not process event objects of any
            other event type; See the method documentatiom for more details.
            <para/>
            Obtained via the method <see cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Collections.Generic.IEnumerable{System.Uri})"/> the
            sender cooperates with plug-in event representations to reflect upon the event
            object to determine an appropriate event type to process the event. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.RandomAccessByIndex">
            <summary>
            Random access interface to insert stream and remove stream data based on an index.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.RandomAccessByIndex.GetNewData(System.Int32)">
            <summary>Returns an new data event given an index.</summary>
            <param name="index">to return new data for</param>
            <returns>new data event</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.RandomAccessByIndex.GetOldData(System.Int32)">
            <summary>Returns an old data event given an index.</summary>
            <param name="index">to return old data for</param>
            <returns>old data event</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.LengthBatchViewRStream">
            <summary>
            Same as the <see cref="T:com.espertech.esper.view.window.LengthBatchView"/>, this view also supports fast-remove from
             the batch for remove stream events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchViewRStream.#ctor(com.espertech.esper.view.window.LengthBatchViewFactory,System.Int32)">
            <summary>Constructor.</summary>
            <param name="size">is the number of events to batch</param>
            <param name="lengthBatchViewFactory">for copying this view in a group-by</param>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchViewRStream.SendBatch">
            <summary>
            This method updates child views and clears the batch of events.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthBatchViewRStream.Count">
            <summary>Returns the number of events to batch (data window size).</summary>
            <returns>batch size</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthBatchViewRStream.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty.</summary>
            <returns>true if empty</returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewServiceProvider">
            <summary>
            Static factory for implementations of the <see cref="T:com.espertech.esper.view.ViewService"/> interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceProvider.NewService">
            <summary> Creates an implementation of the ViewService interface.</summary>
            <returns> implementation
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewServiceImpl">
            <summary>
            Implementation of the view evaluation service business interface.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.ViewService">
            <summary> Service interface for creating views.</summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewService.CreateFactories(System.Int32,com.espertech.esper.events.EventType,System.Collections.Generic.IList{com.espertech.esper.epl.spec.ViewSpec},com.espertech.esper.core.StatementContext)">
            <summary>
            Returns a chain of view factories that can be used to obtain the final event type,
            and that can later be used to actually create the chain of views or reuse existing views.
            <p>
            Does not actually hook up the view factories or views against the event stream, but creates view
            factories and sets parameters on each view factory as supplied. Determines if
            view factories are compatible in the chain via the attach method.
            </p>
            </summary>
            <param name="streamNum">the stream number starting at zero, a join would have N streams</param>
            <param name="parentEventType">the event type of the event stream that originates the raw events</param>
            <param name="viewSpecList">the specification for each view factory in the chain to be created</param>
            <param name="context">dependent services</param>
            <returns>chain of view factories</returns>
            <throws>
            ViewProcessingException thrown if a view factory doesn't take parameters as supplied,
            or cannot hook onto it's parent view or event stream
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewService.CreateViews(com.espertech.esper.view.Viewable,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory},com.espertech.esper.core.StatementContext)">
            <summary>
            Creates the views given a chain of view factories.
            <para>
            Attempts to reuse compatible views under then parent event stream viewable as
            indicated by each view factories reuse method.
            </para>
            </summary>
            <param name="eventStreamViewable">is the event stream to hook into</param>
            <param name="viewFactoryChain">defines the list of view factorys to call makeView or canReuse on</param>
            <param name="context">provides services</param>
            <returns>
            last viewable in chain, or the eventStreamViewable if no view factories are supplied
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewService.Remove(com.espertech.esper.view.EventStream,com.espertech.esper.view.Viewable)">
            <summary> Removes a view discoupling the view and any of it's parent views up the tree to the last shared parent view.</summary>
            <param name="eventStream">the event stream that originates the raw events
            </param>
            <param name="view">the view (should be the last in a chain) to remove
            </param>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceImpl.#ctor">
            <summary> Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceImpl.CreateFactories(System.Int32,com.espertech.esper.events.EventType,System.Collections.Generic.IList{com.espertech.esper.epl.spec.ViewSpec},com.espertech.esper.core.StatementContext)">
            <summary>
            Creates the factories.
            </summary>
            <param name="streamNum">The stream num.</param>
            <param name="parentEventType">Type of the parent event.</param>
            <param name="viewSpecDefinitions">The view spec definitions.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceImpl.CreateViews(com.espertech.esper.view.Viewable,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory},com.espertech.esper.core.StatementContext)">
            <summary>
            Creates the views.
            </summary>
            <param name="eventStreamViewable">The event stream viewable.</param>
            <param name="viewFactories">The view factories.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceImpl.Remove(com.espertech.esper.view.EventStream,com.espertech.esper.view.Viewable)">
            <summary>
            Removes the specified event stream.
            </summary>
            <param name="eventStream">The event stream.</param>
            <param name="viewToRemove">The view to remove.</param>
        </member>
        <member name="T:com.espertech.esper.view.ViewCapDataWindowAccess">
            <summary>Describes that we need random access into a data window by index.</summary>
        </member>
        <member name="T:com.espertech.esper.view.ViewCapability">
            <summary>
            Interface for use by expression nodes to indicate view resource requirements
            allowing inspection and modification of view factories.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewCapability.Inspect(System.Int32,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory},com.espertech.esper.core.StatementContext)">
            <summary>
            Inspect view factories returning false to indicate that view factories do not meetview resource requirements, or true to indicate view capability and view factories can be compatible.
            </summary>
            <param name="streamNumber">is the number of the stream</param>
            <param name="viewFactories">is a list of view factories that originate the final views</param>
            <param name="statementContext">is the statement-level services</param>
            <returns>
            true to indicate inspection success, or false to indicate inspection failure
            </returns>
            <throws>ExprValidationException to indicate the inspect operation failed and a capability is not provided</throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewCapability.RequiresChildViews">
            <summary>
            Returns true to indicate that the capability requirs one or more child views, or can work without child views.
            </summary>
            <returns>
            true for child views required, false for not required
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewCapDataWindowAccess.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.view.ViewCapDataWindowAccess"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewCapDataWindowAccess.Inspect(System.Int32,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory},com.espertech.esper.core.StatementContext)">
            <summary>
            Inspect view factories returning false to indicate that view factories do not meet
            view resource requirements, or true to indicate view capability and view factories can be compatible.
            </summary>
            <param name="streamNumber">is the number of the stream</param>
            <param name="viewFactories">is a list of view factories that originate the final views</param>
            <param name="statementContext">is the statement-level services</param>
            <returns>
            true to indicate inspection success, or false to indicate inspection failure
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewCapDataWindowAccess.RequiresChildViews">
            <summary>
            Returns true to indicate that the capability requirs one or more child views, or can work without child views.
            </summary>
            <returns>
            true for child views required, false for not required
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.stream.StreamFactoryService">
            <summary>
            Service on top of the filter service for reuseing filter callbacks and their associated EventStream instances.
            Same filter specifications (equal) do not need to be added to the filter service twice and the
            EventStream instance that is the stream of events for that filter can be reused.
            <para>
            We are re-using streams such that views under such streams can be reused for efficient resource use.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactoryService.CreateStream(com.espertech.esper.filter.FilterSpecCompiled,com.espertech.esper.filter.FilterService,com.espertech.esper.core.EPStatementHandle,System.Boolean)">
            <summary>
            Create or reuse existing EventStream instance representing that event filter.
            When called for some filters, should return same stream.
            </summary>
            <param name="filterSpec">event filter definition</param>
            <param name="filterService">filter service to activate filter if not already active</param>
            <param name="epStatementHandle">is the statements-own handle for use in registering callbacks with services</param>
            <param name="isJoin">is indicatng whether the stream will participate in a join statement, information
            necessary for stream reuse and multithreading concerns</param>
            <returns>event stream representing active filter</returns>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactoryService.DropStream(com.espertech.esper.filter.FilterSpecCompiled,com.espertech.esper.filter.FilterService,System.Boolean)">
            <summary>
            Drop the event stream associated with the filter passed in.
            Throws an exception if already dropped.
            </summary>
            <param name="filterSpec">is the event filter definition associated with the event stream to be dropped</param>
            <param name="filterService">to be used to deactivate filter when the last event stream is dropped</param>
            <param name="isJoin">is indicatng whether the stream will participate in a join statement, information
            necessary for stream reuse and multithreading concerns</param>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactoryService.Destroy">
            <summary>
            Destroy the service.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.std.UniqueByPropertyView">
            <summary>
            This view includes only the most recent among events having the same value for the specified field.
            The view accepts the field name as parameter from which the unique values are obtained.
            For example, a trade's symbol could be used as a unique value.
            In this example, the first trade for symbol IBM would be posted as new data to child views.
            When the second trade for symbol IBM arrives the second trade is posted as new data to child views,
            and the first trade is posted as old data.
            Should more than one trades for symbol IBM arrive at the same time (like when batched)
            then the child view will get all new events in newData and all new events in oldData minus the most
            recent event. When the current new event arrives as old data, the the current unique event gets thrown away and
            posted as old data to child views.
            Iteration through the views data shows only the most recent events received for the unique value in the
            order that events arrived in.
            The type of the field returning the unique value can be any type but should override Equals and
            GetHashCode() as the type plays the role of a key in a map storing unique values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyView.#ctor(System.String[])">
            <summary>Constructor.</summary>
            <param name="uniqueFieldNames">is the fields from which to pull the unique value</param>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.std.UniqueByPropertyView.UniqueFieldNames">
            <summary>
            Gets or sets the names of the fields supplying the unique values
            to keep the most recent record for.
            </summary>
            <value>The name of the unique field.</value>
        </member>
        <member name="P:com.espertech.esper.view.std.UniqueByPropertyView.Parent">
            <summary>
            Gets or sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.std.UniqueByPropertyView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.std.SizeViewFactory">
            <summary>
            Factory for <see cref="T:com.espertech.esper.view.std.SizeView"/> instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.std.SizeViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.util.TypeHelper">
            <summary> Helper for questions about types.
            <para> what is the boxed type for a primitive type</para>
            <para> is this a numeric type.</para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.util.TypeHelper.s_integralTypes">
            <summary>
            Integral types (used for testing)
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.util.TypeHelper"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetParameterAsString(System.Type[])">
            <summary>Returns a comma-separated parameter type list in readable form,considering arrays and null-type parameters.</summary>
            <param name="parameters">is the parameter types to render</param>
            <returns>rendered list of parameters</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetParameterAsString(System.Type)">
            <summary>Returns a parameter as a string text, allowing null values to represent a nullselect expression type.</summary>
            <param name="param">is the parameter type</param>
            <returns>string representation of parameter</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetBoxedType(System.Type)">
            <summary>
            Returns the boxed class for the given class, or the class itself if already boxed or not a primitive type.
            For primitive unboxed types returns the boxed types, e.g. returns typeof(int?) for passing typeof(int).
            For any other class, returns the class passed.
            </summary>
            <param name="type">is the type to return the boxed type for</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetPrimitiveType(System.Type)">
            <summary>
            Returns the un-boxed class for the given class, or the class itself if already un-boxed or not a primitive type.
            For primitive boxed types returns the unboxed primitive type, e.g. returns typeof(int) for passing typeof(Integer).
            For any other class, returns the class passed.
            </summary>
            <param name="type">
            is the class to return the unboxed (or primitive) class for
            </param>
            <returns>primitive variant of the same class</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetBoxedTypeName(System.String)">
            <summary>
            Returns for the class name given the class name of the boxed (wrapped) type if
            the class name is one of the CLR primitive types.
            </summary>
            <param name="typeName">a type name, a CLR primitive type or other class</param>
            <returns>boxed type name if CLR primitive type, or just same class name passed in if not a primitive type</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsBoolean(System.Type)">
            <summary>
            Determines whether the specified type is bool.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified type is bool; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsCharacter(System.Type)">
            <summary>
            Returns true if the type represents a character type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsFloatingPoint(System.Type)">
            <summary>
            Returns true if the type represents a floating point numeric type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsIntegral(System.Type,System.Type)">
            <summary>
            Determines whether the specified type is integral.
            </summary>
            <param name="type">The type.</param>
            <param name="maxIntegralType">Widest integral type.</param>
            <returns>
            	<c>true</c> if the specified type is integral; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsIntegral(System.Type)">
            <summary> Determines if the type passed in is one of the integral numeric types.</summary>
            <param name="type">to check</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsIntegralNumber(System.Object,System.Type)">
            <summary>
            Determines if the type passed in is one of the integral numeric types.
            </summary>
            <param name="value">to check</param>
            <param name="maxIntegralType">Type of the max integral.</param>
            <returns>
            	<c>true</c> if [is integral number] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsIntegralNumber(System.Object)">
            <summary> Determines if the type passed in is one of the integral numeric types.</summary>
            <param name="value">to check</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsNumeric(System.Type)">
            <summary> Determines if the type passed in is one of the numeric types.</summary>
            <param name="type">to check</param>
            <returns> true if numeric, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsNumericNonFP(System.Type)">
            <summary>Determines if the class passed in is one of the numeric classes and not a floating point.</summary>
            <param name="type">type to check</param>
            <returns>true if numeric and not a floating point, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsNumericValue(System.Object)">
            <summary> Determines if the value passed in is one of the numeric types.</summary>
            <param name="value">to check</param>
            <returns> true if numeric, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.CoerceBoxed(System.Object,System.Type)">
            <summary>
            Coerce the given number to the given type. Allows coerce to lower resultion number.
            Doesn't coerce to primitive types.
            <param name="numToCoerce">numToCoerce is the number to coerce to the given type</param>
            <param name="resultBoxedType">the result type to return</param>
            <returns>the numToCoerce as a value in the given result type</returns>
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetArithmaticCoercionType(System.Type,System.Type)">
            <summary>
            Returns the coercion type for the 2 numeric types for use in arithmatic.
            Note: byte and short types always result in integer.
            </summary>
            <param name="typeOne">The first type.</param>
            <param name="typeTwo">The second type.</param>
            <returns>coerced type</returns>
            <throws>  CoercionException if types don't allow coercion </throws>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsFloatingPointNumber(System.Object)">
            <summary>
            Returns true if the Number instance is a floating point number.
            </summary>
            <param name="number">to check</param>
            <returns>true if number is Float or double type</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsFloatingPointClass(System.Type)">
            <summary>
            Returns true if the supplied type is a floating point number.
            </summary>
            <param name="type">to check</param>
            <returns>
            true if primitive or boxed float or double
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetCompareToCoercionType(System.Type,System.Type)">
            <summary>
            Returns for 2 classes to be compared via relational operator the Class type of
            common comparison. The output is always typeof(long?), typeof(double), typeof(String) or typeof(bool)
            depending on whether the passed types are numeric and floating-point.
            Accepts primitive as well as boxed types.
            </summary>
            <param name="typeOne">The first type.</param>
            <param name="typeTwo">The second type.</param>
            <returns>
            One of typeof(long?), typeof(double) or typeof(String)
            </returns>
            <throws>  ArgumentException if the types cannot be compared </throws>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.CanCoerce(System.Type,System.Type)">
            <summary>
            Determines if a number can be coerced upwards to another number class without loss.
            <para>
            Clients must pass in two classes that are numeric types.
            </para>
            <para>
            Any number class can be coerced to double, while only double cannot be coerced to float.
            Any non-floating point number can be coerced to long.
            Integer can be coerced to Byte and Short even though loss is possible, for convenience.
            </para>
            </summary>
            <param name="numberClassToBeCoerced">the number class to be coerced</param>
            <param name="numberClassToCoerceTo">the number class to coerce to</param>
            <returns>true if numbers can be coerced without loss, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsBuiltinDataType(System.Type)">
            <summary>
            Returns true if the class passed in is a built-in data type (primitive or wrapper)
            including String.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if built-in data type, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsAssignmentCompatible(System.Type,System.Type)">
            <summary>
            Returns true if 2 classes are assignment compatible.
            </summary>
            <param name="invocationType">type to assign from</param>
            <param name="declarationType">type to assign to</param>
            <returns>
            true if assignment compatible, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetCommonCoercionType(System.Type[])">
            <summary>
            Determines a common denominator type to which one or more types can be casted or coerced.
            For use in determining the result type in certain expressions (coalesce, case).
            <para>
            Null values are allowed as part of the input and indicate a 'null' constant value
            in an expression tree. Such as value doesn't have any type and can be ignored in
            determining a result type.
            </para>
            	<para>
            For numeric types, determines a coercion type that all types can be converted to
            via the method GetArithmaticCoercionType.
            </para>
            	<para>
            Indicates that there is no common denominator type by throwing <see cref="T:com.espertech.esper.util.CoercionException"/>.
            </para>
            </summary>
            <param name="types">is an array of one or more types, which can be built-in (primitive or wrapper)
            or user types</param>
            <returns>
            common denominator type if any can be found, for use in comparison
            </returns>
            <throws>  CoercionException </throws>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetTypeForSimpleName(System.String)">
            <summary>
            Returns the boxed class for the given type name, recognizing all primitive and abbreviations,
            uppercase and lowercase.
            <para/>
            Recognizes "int" as System.Int32 and "strIng" as System.String, and "Integer" as System.Int32,
            and so on.
            </summary>
            <param name="typeName">is the name to recognize</param>
            <returns>class</returns>
            <throws>EventAdapterException is throw if the class cannot be identified</throws>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetPrimitiveTypeForName(System.String)">
            <summary>
            Gets the primitive type for the given name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.Parse(System.Type,System.String)">
            <summary>Parse the String using the given built-in class for parsing.</summary>
            <param name="clazz">is the class to parse the value to</param>
            <param name="text">is the text to parse</param>
            <returns>value matching the type passed in</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsImplementsInterface(System.Type,System.Type)">
            <summary>
            Method to check if a given class, and its superclasses and interfaces (deep), implement a given interface.
            </summary>
            <param name="clazz">to check, including all its superclasses and their interfaces and extends</param>
            <param name="interfaceClass">is the interface class to look for</param>
            <returns>
            true if such interface is implemented by any of the clazz or its superclasses orextends by any interface and superclasses (deep check)
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.ResolveType(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Resolves a type using the assembly qualified type name.  If the type
            can not be resolved using a simple Type.GetType() [which many can not],
            then the method will check all assemblies in the assembly search path.
            </summary>
            <param name="assemblyQualifiedTypeName">Name of the assembly qualified type.</param>
            <param name="assemblySearchPath">The assembly search path.</param>
            <param name="throwOnError">if set to <c>true</c> [throw on missing].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.ResolveType(System.String,System.Boolean)">
            <summary>
            Resolves a type using the assembly qualified type name.  If the type
            can not be resolved using a simple Type.GetType() [which many can not],
            then the method will check all assemblies currently loaded into the
            AppDomain.
            </summary>
            <param name="assemblyQualifiedTypeName">Name of the assembly qualified type.</param>
            <param name="throwOnError">if set to <c>true</c> [throw on missing].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.ResolveType(System.String)">
            <summary>
            Resolves a type using the assembly qualified type name.  If the type
            can not be resolved using a simple Type.GetType() [which many can not],
            then the method will check all assemblies currently loaded into the
            AppDomain.
            </summary>
            <param name="assemblyQualifiedTypeName">Name of the assembly qualified type.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsOpenDictionary(System.Type)">
            <summary>
            Determines whether the type is usable as an dictionary.
            </summary>
            <param name="t">The t.</param>
            <returns>
            	<c>true</c> if [is dictionary type] [the specified t]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsSubclassOrImplementsInterface(System.Type,System.Type)">
            <summary>Method to check if a given class, and its superclasses and interfaces (deep), implement a given interface or extend a given class.</summary>
            <param name="extendorOrImplementor">is the class to inspects its extends and implements clauses</param>
            <param name="extendedOrImplemented">is the potential interface, or superclass, to check</param>
            <returns>true if such interface is implemented by any of the clazz or its superclasses orextends by any interface and superclasses (deep check)</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.Instantiate(System.Type,System.String)">
            <summary>Looks up the given class and checks that it implements or extends the required interface,and instantiates an object.</summary>
            <param name="implementedOrExtendedType">is the class that the looked-up class should extend or implement</param>
            <param name="typeName">of the class to load, check type and instantiate</param>
            <returns>instance of given class, via newInstance</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetBaseInterfaces(System.Type,com.espertech.esper.compat.Set{System.Type})">
            <summary>
            Gets the base interfaces for the provided type and store them
            in the result set.
            </summary>
            <param name="type">The type.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetBaseClasses(System.Type,com.espertech.esper.compat.Set{System.Type})">
            <summary>
            Gets the base classes for the provided type and store them
            in the result set.
            </summary>
            <param name="type">The type.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetBase(System.Type,com.espertech.esper.compat.Set{System.Type})">
            <summary>
            Populates all interface and superclasses for the given class, recursivly.
            </summary>
            <param name="type">to reflect upon</param>
            <param name="result">set of classes to populate</param>
        </member>
        <member name="T:com.espertech.esper.util.ManagedLockImpl">
            <summary>
            Simple lock based on <see cref="!:ReentrantLock"/> that associates a name with the lock and traces locking and unlocking.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.ILockable">
            <summary>
            A simple locking mechanism
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ILockable.Acquire">
            <summary>
            Acquires the lock; the lock is released when the disposable
            object that was returned is disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorSpinLock.s_uDefaultLockTimeout">
            <summary>
            Default timeout for lock acquisition.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorSpinLock.m_uLockId">
            <summary>
            Uniquely identifies the lock.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorSpinLock.m_uLockObj">
            <summary>
            Underlying object that is locked
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorSpinLock.m_uLockTimeout">
            <summary>
            Number of milliseconds until the lock acquisition fails
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorSpinLock.m_uLockOwner">
            <summary>
            Owner of the lock.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorSpinLock.m_uLockDepth">
            <summary>
            Used to track recursive locks.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorSpinLock.m_uLockDebug">
            <summary>
            Indication as to whether we are debugging or not
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorSpinLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.MonitorLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorSpinLock.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.MonitorLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorSpinLock.Acquire">
            <summary>
            Acquires a lock against this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorSpinLock.InternalAcquire">
            <summary>
            Internally acquires the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorSpinLock.InternalRelease">
            <summary>
            Internally releases the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorSpinLock.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.MonitorSpinLock.DefaultTimeout">
            <summary>
            Gets the default timeout.
            </summary>
            <value>The default timeout.</value>
        </member>
        <member name="P:com.espertech.esper.compat.MonitorSpinLock.LockTimeout">
            <summary>
            Gets the number of milliseconds until the lock acquisition fails.
            </summary>
            <value>The lock timeout.</value>
        </member>
        <member name="P:com.espertech.esper.compat.MonitorSpinLock.LockDepth">
            <summary>
            Gets the lock depth.
            </summary>
            <value>The lock depth.</value>
        </member>
        <member name="P:com.espertech.esper.compat.MonitorSpinLock.IsHeldByCurrentThread">
            <summary>
            Gets a value indicating whether this instance is held by current thread.
            </summary>
            <value>
            	<c>true</c> if this instance is held by current thread; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:com.espertech.esper.compat.MonitorSpinLock.DisposableLock">
            <summary>
            A disposable object that is allocated and acquires the
            lock and automatically releases the lock when it is
            disposed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorSpinLock.DisposableLock.#ctor(com.espertech.esper.compat.MonitorSpinLock)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.MonitorSpinLock.DisposableLock"/> class.
            </summary>
            <param name="lockObj">The lock obj.</param>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorSpinLock.DisposableLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.util.ManagedLock">
            <summary>Interface for a lock for use to perform statement-level locking.</summary>
        </member>
        <member name="M:com.espertech.esper.util.ManagedLock.AcquireLock(com.espertech.esper.core.StatementLockFactory)">
            <summary>Acquire a lock.</summary>
            <param name="statementLockFactory">
            is the engine lock factory service that the lock can use for engine lock services
            </param>
        </member>
        <member name="P:com.espertech.esper.util.ManagedLock.IsHeldByCurrentThread">
            <summary>
            Returns true if the current thread holds the lock, or false if not.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.ManagedLockImpl.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="name">of lock</param>
        </member>
        <member name="M:com.espertech.esper.util.ManagedLockImpl.AcquireLock(com.espertech.esper.core.StatementLockFactory)">
            <summary>Lock.</summary>
        </member>
        <member name="M:com.espertech.esper.util.ManagedLockImpl.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.ExecutionPathDebugLog">
            <summary>
            Utility class that control debug-level logging in the execution path
            beyond which is controlled by Log4net.
            </summary>
        </member>
        <member name="P:com.espertech.esper.util.ExecutionPathDebugLog.IsEnabled">
            <summary>
            Gets or sets a flag that allows execution path debug logging.
            </summary>
        </member>
        <member name="T:com.espertech.esper.schedule.SchedulingServiceProvider">
            <summary>
            Static factory for implementations of the SchedulingService interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingServiceProvider.NewService(com.espertech.esper.timer.TimeSourceService)">
            <summary>
            Creates an implementation of the SchedulingService interface.
            </summary>
            <param name="timeSourceService">time source provider</param>
            <returns>implementation</returns>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleComputeHelper">
            <summary>
            For a crontab-like schedule, this class computes the next occurance given a Start time and a specification of
            what the schedule looks like.
            The resolution at which this works is at the second level. The next occurance
            is always at least 1 second ahead.
            The class implements an algorithm that Starts at the highest precision (seconds) and
            continues to the lowest precicion (month). For each precision level the
            algorithm looks at the list of valid values and finds a value for each that is equal to or greater then
            the valid values supplied. If no equal or
            greater value was supplied, it will reset all higher precision elements to its minimum value.
            </summary>
        </member>
        <member name="F:com.espertech.esper.schedule.ScheduleComputeHelper.MIN_OFFSET_MSEC">
            <summary>
            Minimum time to next occurance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleComputeHelper.ComputeNextOccurance(com.espertech.esper.schedule.ScheduleSpec,System.Int64)">
            <summary> Computes the next lowest date in milliseconds based on a specification and the
            from-time passed in.
            </summary>
            <param name="spec">defines the schedule
            </param>
            <param name="afterTimeInMillis">defines the start time
            </param>
            <returns> a long date tick value for the next schedule occurance matching the spec
            </returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleComputeHelper.DetermineDayOfMonth(com.espertech.esper.schedule.ScheduleSpec,System.DateTime@,com.espertech.esper.schedule.ScheduleCalendar)">
            <summary>
            Determine the next valid day of month based on the given specification of valid days in month and
            valid days in week. If both days in week and days in month are supplied, the days are OR-ed.
            </summary>
            <param name="spec"></param>
            <param name="after"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleComputeHelper.CheckDayValidInMonth(System.Int32,System.Int32,System.Int32)">
            <summary>
            Check if this is a valid date.
            </summary>
            <param name="day"></param>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleComputeHelper.NextValue(com.espertech.esper.compat.TreeSet{System.Int32},System.Int32)">
            <summary>
            Determine if in the supplied valueSet there is a value after the given Start value.
            Return -1 to indicate that there is no value after the given StartValue.
            If the valueSet passed is null it is treated as a wildcard and the same StartValue is returned
            </summary>
            <param name="valueSet"></param>
            <param name="startValue"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternMatchCallback">
            <summary>
            Callback interface for anything that requires to be informed of matching events which would be stored
            in the MatchedEventMap structure passed to the implementation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternMatchCallback.MatchFound(com.espertech.esper.compat.Map{System.String,com.espertech.esper.events.EventBean})">
            <summary>Indicate matching events.</summary>
            <param name="matchEvent">contains a map of event tags and event objects</param>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternMatcherDelegate">
            <summary>
            A delegate that mimics the behavior of the PatternMatchCallback.
            At some time in the future, this delegate should replace the
            PatternMatchCallback interface.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.ProxyPatternMatchCallback">
            <summary>
            An implementation of the PatternMatchCallback that proxies the
            interface through a delegate.  IMO, this is a lot of extra baggage
            that is cleanly handled thorugh the delegate interface, but will
            remain intact until we can review the interaction points and
            convert them to delegates.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.ProxyPatternMatchCallback.#ctor(com.espertech.esper.pattern.PatternMatcherDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.pattern.ProxyPatternMatchCallback"/> class.
            </summary>
            <param name="_delegate">The _delegate.</param>
        </member>
        <member name="M:com.espertech.esper.pattern.ProxyPatternMatchCallback.MatchFound(com.espertech.esper.compat.Map{System.String,com.espertech.esper.events.EventBean})">
            <summary>Indicate matching events.</summary>
            <param name="matchEvent">contains a map of event tags and event objects</param>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.TimerIntervalObserverFactory">
            <summary>
            Factory for making observer instances.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.TimerIntervalObserverFactory.milliseconds">
            <summary>Number of milliseconds after which the interval should fire.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerIntervalObserverFactory.MakeObserver(com.espertech.esper.pattern.PatternContext,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.observer.ObserverEventEvaluator,System.Object,System.Object)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="beginState"></param>
            <param name="observerEventEvaluator"></param>
            <param name="stateNodeId"></param>
            <param name="observerState"></param>
            <returns></returns>
            Make an observer instance.
            @param context - services that may be required by observer implementation
            @param beginState - start state for observer
            @param observerEventEvaluator - receiver for events observed
            @param stateNodeId - optional id for the associated pattern state node
            @param observerState - state node for observer
            @return observer instance
        </member>
        <member name="P:com.espertech.esper.pattern.observer.TimerIntervalObserverFactory.ObserverParameters">
            <summary>
            </summary>
            <value></value>
            Sets the observer object parameters.
            @param observerParameters is a list of parameters
            @throws ObserverParameterException thrown to indicate a parameter problem
        </member>
        <member name="T:com.espertech.esper.pattern.observer.ObserverFactorySupport">
            <summary>
            Abstract class for applications to extend to implement a pattern observer factory.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalNodeNumber">
            <summary>
            A node number assigned to evaluation nodes in a tree-structure.
            <para>
            Represents node numbers as an array of short. Root nodes get an empty array while each level of child
            node adds an element. New child nodes are obtained from a parent and subsequent child nodes from the last sibling node.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeNumber.#ctor">
            <summary>Constructs a root node number.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeNumber.NewChildNumber">
            <summary>Returns a new child node number.</summary>
            <returns>child node number</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeNumber.NewSiblingNumber">
            <summary>
            Returns a new sibling node number based on the current node. This call is invalid for root nodes.
            </summary>
            <returns>sibling node number</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeNumber.ChildNumber">
            <summary>Returns the child number.</summary>
            <returns>child number</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeNumber.IsRoot">
            <summary>Returns true for a root node, false for child nodes.</summary>
            <returns>true if root, false if child node</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeNumber.ParentNumber">
            <summary>
            Returns the parent's node number, of null if this is the root node number.
            </summary>
            <returns>parent node number</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeNumber.Number">
            <summary>Returns the node number representation in an array of short.</summary>
            <returns>node number as short array</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFilterStateNode">
            <summary>
            This class contains the state of a single filter expression in the evaluation state tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalStateNode">
            <summary> Superclass of all state nodes in an evaluation node tree representing an event expressions.
            Follows the Composite pattern. Subclasses are expected to keep their own collection containing child nodes
            as needed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNode.Start">
            <summary> Starts the event expression or an instance of it.
            Child classes are expected to initialize and Start any event listeners
            or schedule any time-based callbacks as needed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNode.Quit">
            <summary> Stops the event expression or an instance of it. Child classes are expected to free resources
            and Stop any event listeners or remove any time-based callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNode.Accept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary> Accept a visitor. Child classes are expected to invoke the visit method on the visitor instance
            passed in.
            </summary>
            <param name="visitor">on which the visit method is invoked by each node
            </param>
            <param name="data">any additional data the visitor may need is passed in this parameter
            </param>
            <returns> any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNode.ChildrenAccept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary> Pass the visitor to all child nodes.</summary>
            <param name="visitor">is the instance to be passed to all child nodes
            </param>
            <param name="data">any additional data the visitor may need is passed in this parameter
            </param>
            <returns> any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNode.#ctor(com.espertech.esper.pattern.EvalNode,com.espertech.esper.pattern.Evaluator,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryNode">The factory node.</param>
            <param name="parentNode">is the evaluator for this node on which to indicate a change in truth value</param>
            <param name="stateObjectId">The state object id.</param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalStateNode.ParentEvaluator">
            <summary> Gets or sets the parent evaluator.</summary>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalStateNode.StateObjectId">
            <summary>Gets the state nodes object id.</summary>
            <returns>object id</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalStateNode.FactoryNode">
            <summary>
            Gets the factory node for the state node.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFilterStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalFilterNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext)">
            <summary>Constructor.</summary>
            <param name="parentNode">
            is the parent evaluator to call to indicate truth value
            </param>
            <param name="beginState">contains the events that make up prior matches</param>
            <param name="context">contains handles to services required</param>
            <param name="evalFilterNode">is the factory node associated to the state</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFilterStateNode.Start">
            <summary>
            Starts the event expression or an instance of it.
            Child classes are expected to initialize and Start any event listeners
            or schedule any time-based callbacks as needed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFilterStateNode.Quit">
            <summary>
            Stops the event expression or an instance of it. Child classes are expected to free resources
            and Stop any event listeners or remove any time-based callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFilterStateNode.MatchFound(com.espertech.esper.events.EventBean)">
            <summary>
            Indicate that an event was evaluated by the <see cref="T:com.espertech.esper.filter.FilterService"/>
            which matches the filter specification <see cref="!:FilterSpec"/> associated with this callback.
            </summary>
            <param name="_event"></param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFilterStateNode.Accept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Accept a visitor. Child classes are expected to invoke the visit method on the visitor instance
            passed in.
            </summary>
            <param name="visitor">on which the visit method is invoked by each node</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFilterStateNode.ChildrenAccept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Pass the visitor to all child nodes.
            </summary>
            <param name="visitor">is the instance to be passed to all child nodes</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFilterStateNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.IndexHelper">
            <summary>
            Utility class for matching filter parameters to indizes. Matches are indicated by the index <see cref="T:com.espertech.esper.filter.FilterParamIndexBase"/>
            and the filter parameter <see cref="T:com.espertech.esper.filter.FilterSpecParam"/> featuring the same event property name and filter operator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.IndexHelper.FindIndex(com.espertech.esper.compat.TreeSet{com.espertech.esper.filter.FilterValueSetParam},System.Collections.Generic.IList{com.espertech.esper.filter.FilterParamIndexBase})">
            <summary> Find an index that matches one of the filter parameters passed.
            The parameter type and index type match up if the property name and
            filter operator are the same for the index and the filter parameter.
            For instance, for a filter parameter of "count EQUALS 10", the index against property "count" with
            operator type EQUALS will be returned, if present.
            NOTE: The caller is expected to obtain locks, if necessary, on the collections passed in.
            NOTE: Doesn't match non-property based index - thus boolean expressions don't get found and are always entered as a new index
            
            </summary>
            <param name="parameters">is the list of sorted filter parameters
            </param>
            <param name="indizes">is the collection of indexes
            </param>
            <returns> A matching pair of filter parameter and index, if any matches were found. Null if no matches were found.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.IndexHelper.FindParameter(com.espertech.esper.compat.TreeSet{com.espertech.esper.filter.FilterValueSetParam},com.espertech.esper.filter.FilterParamIndexBase)">
            <summary> Determine among the passed in filter parameters any parameter that matches the given index on property name and
            filter operator type. Returns null if none of the parameters matches the index.
            </summary>
            <param name="parameters">is the filter parameter list
            </param>
            <param name="index">is a filter parameter constant value index
            </param>
            <returns> filter parameter, or null if no matching parameter found.
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamRangeValue">
            <summary> Interface for range-type filter parameters for type checking and to obtain the filter values for endpoints based
            on prior results.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamRangeValue.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>Returns the filter value representing the endpoint.</summary>
            <param name="matchedEvents">is the prior results</param>
            <returns>filter value</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamInValue">
            <summary>Denotes a value for use by the in-keyword within a list of values</summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamInValue.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>Returns the actual value to filter for from prior matching events</summary>
            <param name="matchedEvents">is a map of matching events</param>
            <returns>filter-for value</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParam">
            <summary>
            This class represents one filter parameter in an <see cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> filter specification.
            <para>Each filerting parameter has an attribute name and operator type.</para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParam.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary> Return the filter parameter constant to filter for.</summary>
            <param name="matchedEvents">is the prior results that can be used to determine filter parameters
            </param>
            <returns> filter parameter constant's value
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParam.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParam.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParam.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParam.PropertyName">
            <summary> Returns the property name for the filter parameter.</summary>
            <returns> property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParam.FilterOperator">
            <summary> Returns the filter operator type.</summary>
            <returns> filter operator type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.WrappedPropertyDescriptor.#ctor(System.String,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.property.WrappedPropertyDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseProperty">The base property.</param>
        </member>
        <member name="M:com.espertech.esper.events.property.WrappedPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates whether the value of this property should be
            persisted.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.WrappedPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Call the accessor method
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.WrappedPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.WrappedPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Can not override values with the simple accessor model
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.WrappedPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value of the property
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.WrappedPropertyDescriptor.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.WrappedPropertyDescriptor.GetHashCode">
            <summary>
            Returns a hahscode for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.events.property.WrappedPropertyDescriptor.IsReadOnly">
            <summary>
            Indicates whether or not the descriptor is readonly
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.WrappedPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of component this property is bound to.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.WrappedPropertyDescriptor.PropertyType">
            <summary>
            Gets the return type of the property
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.IndexedProperty">
            <summary>
            Represents an indexed property or array property, ie. an 'value' property with read method getValue(int index)
            or a 'array' property via read method Array returning an array.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedProperty.#ctor(System.String,System.Int32)">
            <summary> Ctor.</summary>
            <param name="propertyName">is the property name
            </param>
            <param name="index">is the index to use to access the property value
            </param>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedProperty.GetGetter(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns value getter for the property of an event of the given event type.
            </summary>
            <param name="eventType">is the type of event to make a getter for</param>
            <returns>fast property value getter for property</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedProperty.GetPropertyType(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns the property type.
            </summary>
            <param name="eventType">is the event type representing the Object</param>
            <returns>property type class</returns>
        </member>
        <member name="P:com.espertech.esper.events.property.IndexedProperty.Index">
            <summary> Returns index for indexed access.</summary>
            <returns> index value
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.ArrayMethodPropertyGetter">
            <summary>
            Getter for an array property identified by a given index, using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.ArrayMethodPropertyGetter.#ctor(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="method">is the method to use to retrieve a value from the object</param>
            <param name="index">is tge index within the array to get the property from</param>
        </member>
        <member name="M:com.espertech.esper.events.property.ArrayMethodPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.ArrayMethodPropertyGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a property.
            <para>
            Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
            Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
            If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
            does not exists and the method returns false.
            </para>
            	<para>
            For non-dynamic properties, this method always returns true since a getter would not be available
            unless
            </para>
            </summary>
            <param name="eventBean">the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default) properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.ArrayMethodPropertyGetter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.AbstractPropertyDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.property.AbstractPropertyDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:com.espertech.esper.events.property.AbstractPropertyDescriptor.InitializeAttributes(System.Reflection.MemberInfo)">
            <summary>
            Proxies the attributes.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:com.espertech.esper.events.property.AbstractPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.AbstractPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:com.espertech.esper.events.property.AbstractPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:com.espertech.esper.events.property.AbstractPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.property.AbstractPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <value></value>
            <returns>true if the property is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTWalkException">
            <summary>
            This exception is thrown to indicate a problem in statement creation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTWalkException.#ctor(System.String,System.Exception)">
            <summary> Ctor.</summary>
            <param name="message">is the error message
            </param>
            <param name="t">is the inner throwable
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTWalkException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">is the error message
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph">
            <summary> This class represents outer-join relationships between outer and inner tables.
            To add a left outer join between streams 0 and 1 use "Add(0, 1)".
            To add a full outer join between streams 0 and 1 use "Add(0, 1)" and "Add(1, 0)".
            To add a right outer join between streams 0 and 1 use "Add(1, 0)".
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="numStreams">number of streams
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.Add(System.Int32,System.Int32)">
            <summary> Add an outer-to-inner join stream relationship.</summary>
            <param name="outerStream">is the stream number of the outer stream
            </param>
            <param name="innerStream">is the stream number of the inner stream
            </param>
            <returns> graph object
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.GetInner(System.Int32)">
            <summary> Returns the set of inner streams for the given outer stream number.</summary>
            <param name="outerStream">is the stream number of the outer stream
            </param>
            <returns> set of inner streams, or null if empty
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.GetOuter(System.Int32)">
            <summary> Returns the set of outer streams for the given inner stream number.</summary>
            <param name="innerStream">is the stream number of the inner stream
            </param>
            <returns> set of outer streams, or null if empty
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.IsInner(System.Int32,System.Int32)">
            <summary> Returns true if the outer stream has an optional relationship to the inner stream.</summary>
            <param name="outerStream">is the stream number of the outer stream
            </param>
            <param name="innerStream">is the stream number of the inner stream
            </param>
            <returns> true if outer-inner relationship between streams, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.IsOuter(System.Int32,System.Int32)">
            <summary> Returns true if the inner stream has a relationship to the outer stream.</summary>
            <param name="outerStream">is the stream number of the outer stream
            </param>
            <param name="innerStream">is the stream number of the inner stream
            </param>
            <returns> true if outer-inner relationship between streams, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.Print">
            <summary> Prints out collection.</summary>
            <returns> textual output of keys and values
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.NestedIterationNode">
            <summary>
            Plan to perform a nested iteration over child nodes.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryPlanNode">
            <summary>
            Specification node for a query execution plan to be extended by specific execution specification nodes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanNode.MakeExec(com.espertech.esper.epl.join.table.EventTable[][],com.espertech.esper.events.EventType[])">
            <summary> Make execution node from this specification.</summary>
            <param name="indexesPerStream">tables build for each stream
            </param>
            <param name="streamTypes">event type of each stream
            </param>
            <returns> execution node matching spec
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary> Print a long readable format of the query node to the supplied PrintWriter.</summary>
            <param name="writer">is the indentation writer to print to
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanNode.Print(com.espertech.esper.epl.join.plan.QueryPlanNode[])">
            <summary> Print in readable format the execution plan spec.</summary>
            <param name="execNodeSpecs">plans to print
            </param>
            <returns> readable text with plans
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NestedIterationNode.#ctor(System.Int32[])">
            <summary> Ctor.</summary>
            <param name="nestingOrder">order of streams in nested iteration
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NestedIterationNode.AddChildNode(com.espertech.esper.epl.join.plan.QueryPlanNode)">
            <summary> Adds a child node.</summary>
            <param name="childNode">is the child evaluation tree node to add
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NestedIterationNode.MakeExec(com.espertech.esper.epl.join.table.EventTable[][],com.espertech.esper.events.EventType[])">
            <summary>
            Makes the exec.
            </summary>
            <param name="indexPerStream">The index per stream.</param>
            <param name="streamTypes">The stream types.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NestedIterationNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Prints the specified indent writer.
            </summary>
            <param name="indentWriter">The indent writer.</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.NestedIterationNode.ChildNodes">
            <summary> Returns list of child nodes.</summary>
            <returns> list of child nodes
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.LookupInstructionExecNode">
            <summary> Execution for a set of lookup instructions and for a set of result assemble instructions to perform
            joins and construct a complex result.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.LookupInstructionExecNode.#ctor(System.Int32,System.String,System.Int32,com.espertech.esper.epl.join.exec.LookupInstructionExec[],System.Boolean[],com.espertech.esper.epl.join.assemble.BaseAssemblyNode[])">
            <summary> Ctor.</summary>
            <param name="rootStream">is the stream supplying the lookup event
            </param>
            <param name="rootStreamName">is the name of the stream supplying the lookup event
            </param>
            <param name="numStreams">is the number of streams
            </param>
            <param name="lookupInstructions">is a list of lookups to perform
            </param>
            <param name="requiredPerStream">indicates which streams are required and which are optional in the lookup
            </param>
            <param name="assemblyInstructions">is the bottom-up assembly nodes to assemble a lookup result nodes
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.LookupInstructionExecNode.Process(com.espertech.esper.events.EventBean,com.espertech.esper.events.EventBean[],System.Collections.Generic.IList{com.espertech.esper.events.EventBean[]})">
            <summary>
            Process single event using the prefill events to compile lookup results.
            </summary>
            <param name="lookupEvent">event to look up for or query for</param>
            <param name="prefillPath">set of events currently in the example tuple to serve
            as a prototype for result rows.</param>
            <param name="result">is the list of tuples to add a result row to</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.LookupInstructionExecNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Output the execution strategy.
            </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.LookupInstructionExecNode.MyResultAssembler">
            <summary>
            Receives result rows posted by result set assembly nodes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.LookupInstructionExecNode.MyResultAssembler.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="rootStream">is the root stream for which we get results
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.LookupInstructionExecNode.MyResultAssembler.SetResult(System.Collections.Generic.IList{com.espertech.esper.events.EventBean[]},com.espertech.esper.events.EventBean)">
            <summary> Supplies the result list to which to add result rows.</summary>
            <param name="result">is the list of rows
            </param>
            <param name="rootEvent">is the event for lookup in other streams
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.LookupInstructionExecNode.MyResultAssembler.Result(com.espertech.esper.events.EventBean[],System.Int32,com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.rep.Node)">
            <summary>
            Publish a result row.
            </summary>
            <param name="row">is the result to publish</param>
            <param name="fromStreamNum">is the originitor that publishes the row</param>
            <param name="myEvent">is optional and is the event that led to the row result</param>
            <param name="myNode">is optional and is the result node of the event that led to the row result</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.LookupInstructionExec">
            <summary>
            Execution for a lookup instruction to look up in one or more event streams with a supplied event
            and using a given set of lookup strategies, and adding any lookup results to a lighweight repository object
            for later result assembly.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.LookupInstructionExec.#ctor(System.Int32,System.String,System.Int32[],com.espertech.esper.epl.join.exec.TableLookupStrategy[],System.Boolean[])">
            <summary>Ctor.</summary>
            <param name="fromStream">the stream supplying the lookup event</param>
            <param name="fromStreamName">the stream name supplying the lookup event</param>
            <param name="toStreams">the set of streams to look up in</param>
            <param name="lookupStrategies">the strategy to use for each stream to look up in</param>
            <param name="requiredPerStream">indicates which of the lookup streams are required to build a result and which are not</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.LookupInstructionExec.Process(com.espertech.esper.epl.join.rep.Repository)">
            <summary>Execute the instruction adding results to the repository and obtaining events for lookup from therepository.</summary>
            <param name="repository">supplies events for lookup, and place to add results to</param>
            <returns>true if one or more results, false if no results</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.LookupInstructionExec.Print(com.espertech.esper.util.IndentWriter)">
            <summary>Output the instruction.</summary>
            <param name="writer">is the write to output to</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.LookupInstructionExec.FromStream">
            <summary>Returns the stream number of the stream supplying the event to use for lookup.</summary>
            <returns>stream number</returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.LookupInstructionExec.HasRequiredStream">
            <summary>Returns true if there is one or more required substreams or false if no substreams are required joins.</summary>
            <returns>true if any substreams are required (inner) joins, or false if not</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.IndexedTableLookupStrategy">
            <summary>
            Lookup on an index using a set of properties as key values.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.TableLookupStrategy">
            <summary> Strategy for looking up, in some sort of table or index, an event, potentially based on the
            events properties, and returning a set of matched events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.TableLookupStrategy.Lookup(com.espertech.esper.events.EventBean)">
            <summary> Returns matched events for a event to look up for. Never returns an empty result set,
            always returns null to indicate no results.
            </summary>
            <param name="ev">to look up
            </param>
            <returns> set of matching events, or null if none matching
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.IndexedTableLookupStrategy.#ctor(com.espertech.esper.events.EventType,System.String[],com.espertech.esper.epl.join.table.PropertyIndexedEventTable)">
            <summary> Ctor.</summary>
            <param name="eventType">event type to expect for lookup
            </param>
            <param name="properties">key properties
            </param>
            <param name="index">index to look up in
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.IndexedTableLookupStrategy.Lookup(com.espertech.esper.events.EventBean)">
            <summary>
            Returns matched events for a event to look up for. Never returns an empty result set,
            always returns null to indicate no results.
            </summary>
            <param name="ev">to look up</param>
            <returns>
            set of matching events, or null if none matching
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.IndexedTableLookupStrategy.GetKeys(com.espertech.esper.events.EventBean)">
            <summary>
            Gets the keys.
            </summary>
            <param name="_event">The _event.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.IndexedTableLookupStrategy.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.IndexedTableLookupStrategy.EventType">
            <summary> Returns event type of the lookup event.</summary>
            <returns> event type of the lookup event
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.IndexedTableLookupStrategy.Properties">
            <summary> Returns properties to use from lookup event to look up in index.</summary>
            <returns> properties to use from lookup event
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.IndexedTableLookupStrategy.Index">
            <summary> Returns index to look up in.</summary>
            <returns> index to use
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprValidationException">
            <summary> Thrown to indicate a validation error in a filter expression.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprValidationException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">validation error message
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.expression.ExprValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSumNode">
            <summary>
            Represents the sum(...) aggregate function is an expression tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprAggregateNode">
            	<summary>
             Base expression node that represents an aggregation function such as 'sum' or 'count'.
            
             In terms of validation each concrete aggregation node must implement it's own validation.
            
             In terms of evaluation this base class will ask the assigned
             <see cref="T:com.espertech.esper.epl.agg.AggregationResultFuture"/>
             for the current state, using a column number assigned to the node.
            
             Concrete subclasses must supply an aggregation state prototype node <see cref="T:com.espertech.esper.epl.agg.AggregationMethod"/>
             that reflects each group's (there may be group-by critera) current aggregation state.
            	</summary>
        </member>
        <member name="F:com.espertech.esper.epl.expression.ExprAggregateNode.isDistinct">
            <summary>
            Indicator for whether the aggregation is distinct - i.e. only unique
            values are considered.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNode.ValidateAggregationChild(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Gives the aggregation node a chance to validate the sub-expression types.
            </summary>
            <param name="streamTypeService">is the types per stream</param>
            <param name="methodResolutionService">
            used for resolving method and function names
            </param>
            <returns>aggregation function use</returns>
            <throws>ExprValidationException when expression validation failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">The time provider.</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="distinct">sets the flag indicatating whether only unique values should be aggregated
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNode.EqualsNodeAggregate(com.espertech.esper.epl.expression.ExprAggregateNode)">
            <summary>
            Return true if a expression aggregate node semantically equals the current node, or false if not.
            For use by the EqualsNode implementation which compares the distinct flag.
            </summary>
            <param name="node">to compare to</param>
            <returns> true if semantically equal, or false if not equals</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNode.SetAggregationResultFuture(com.espertech.esper.epl.agg.AggregationResultFuture,System.Int32)">
            <summary>
            Assigns to the node the future which can be queried for the current aggregation state at evaluation time.
            </summary>
            <param name="aggregationResultFuture">future containing state</param>
            <param name="column">column to hand to future for easy access</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluates the specified events.
            </summary>
            <param name="events">The events.</param>
            <param name="isNewData">if set to <c>true</c> [is new data].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNode.GetAggregatesBottomUp(com.espertech.esper.epl.expression.ExprNode,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprAggregateNode})">
            <summary> Populates into the supplied list all aggregation functions within this expression, if any.
            <para>Populates by going bottom-up such that nested aggregates appear first.</para>
            <para>I.e. sum(volume * sum(price)) would put first A then B into the list with A=sum(price) and B=sum(volume * A)</para>
            </summary>
            <param name="topNode">is the expression node to deep inspect
            </param>
            <param name="aggregateNodes">is a list of node to populate into
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNode.ValidateSingleNumericChild(com.espertech.esper.epl.core.StreamTypeService)">
            <summary> For use by implementing classes, validates the aggregation node expecting
            a single numeric-type child node.
            </summary>
            <param name="streamTypeService">types represented in streams
            </param>
            <returns> numeric type of single child
            </returns>
            <throws> ExprValidationException if the validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAggregateNode.AggregationFunctionName">
            <summary>
            Returns the aggregation function name for representation in a generate expression string.
            </summary>
            <returns>aggregation function name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAggregateNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <value></value>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAggregateNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAggregateNode.PrototypeAggregator">
            <summary>
            Returns the aggregation state prototype for use in grouping aggregation states per group-by keys.
            </summary>
            <returns>
            prototype aggregation state as a factory for aggregation states per group-by key value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAggregateNode.IsDistinct">
            <summary>
            Returns true if the aggregation node is only aggregatig distinct values, or false if
            aggregating all values.
            </summary>
            <returns> true if 'distinct' keyword was given, false if not
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAggregateNode.ExpressionString">
            <summary> Renders the aggregation function expression.</summary>
            <returns> expression string is the textual rendering of the aggregation function and it's sub-expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSumNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSumNode.EqualsNodeAggregate(com.espertech.esper.epl.expression.ExprAggregateNode)">
            <summary>
            Return true if a expression aggregate node semantically equals the current node, or false if not.
            For use by the EqualsNode implementation which compares the distinct flag.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSumNode.AggregationFunctionName">
            <summary>
            Returns the aggregation function name for representation in a generate expression string.
            </summary>
            <value></value>
            <returns> aggregation function name
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeVisitor">
            <summary>
            Visitor interface for use with expression node trees.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeVisitor.IsVisit(com.espertech.esper.epl.expression.ExprNode)">
            <summary> Allows visitor to indicate whether to visit a given node.
            Implicitly if a visitor doesn't visit a node it would also not visit any descendent child nodes of that node.
            </summary>
            <param name="exprNode">is the node in questions
            </param>
            <returns> true if the visitor wants to visit the child node (next call is visit), or false to skip child
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeVisitor.Visit(com.espertech.esper.epl.expression.ExprNode)">
            <summary> Visit the given expression node.</summary>
            <param name="exprNode">is the expression node to visit
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprCountNode">
            <summary>
            Represents the count(...) and count(*) and count(distinct ...) aggregate function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCountNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCountNode.ValidateAggregationChild(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Gives the aggregation node a chance to validate the sub-expression types.
            </summary>
            <param name="streamTypeService">is the types per stream</param>
            <param name="methodResolutionService">used for resolving method and function names</param>
            <returns>aggregation function use</returns>
            <throws>ExprValidationException when expression validation failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCountNode.EqualsNodeAggregate(com.espertech.esper.epl.expression.ExprAggregateNode)">
            <summary>
            Return true if a expression aggregate node semantically equals the current node, or false if not.
            For use by the EqualsNode implementation which compares the distinct flag.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCountNode.AggregationFunctionName">
            <summary>
            Returns the aggregation function name for representation in a generate expression string.
            </summary>
            <value></value>
            <returns> aggregation function name
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprArrayNode">
            <summary>
            Represents an array in a filter expressiun tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprArrayNode.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprArrayNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">The time provider.</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprArrayNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprArrayNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprArrayNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <value></value>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprArrayNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprArrayNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.ColumnSettings">
            <summary>
            Column-level configuration settings are held in this immutable descriptor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.ColumnSettings.#ctor(com.espertech.esper.client.ConfigurationDBRef.MetadataOriginEnum,com.espertech.esper.client.ConfigurationDBRef.ColumnChangeCaseEnum,com.espertech.esper.compat.Map{System.Type,System.Type})">
            <summary>
            Ctor.
            </summary>
            <param name="metadataOriginEnum">defines how to obtain output columnn metadata</param>
            <param name="columnCaseConversionEnum">defines if to change case on output columns</param>
            <param name="dataTypesMapping">The data types mapping.</param>
        </member>
        <member name="P:com.espertech.esper.epl.db.ColumnSettings.MetadataRetrievalEnum">
            <summary>Returns the metadata orgin.</summary>
            <returns>indicator how the engine obtains output column metadata</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.ColumnSettings.ColumnCaseConversionEnum">
            <summary>Returns the change case policy.</summary>
            <returns>indicator how the engine should change case on output columns</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.ColumnSettings.DataTypesMapping">
            <summary>
            Gets the data types mapping.
            </summary>
            <value>The data types mapping.</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.OrderByProcessor">
            <summary>
            A processor for ordering output events according to the order specified in the order-by clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessor.Sort(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[][],System.Boolean)">
            <summary>
            Sort the output events. If the order-by processor needs group-by
            keys to evaluate the expressions in the order-by clause, these will
            be computed from the generating events.
            </summary>
            <param name="outgoingEvents">the events to be sorted</param>
            <param name="generatingEvents">the events that generated the output events (each event has a corresponding array of generating events per different event streams)</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            an array containing the output events in sorted order
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessor.Sort(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[][],com.espertech.esper.collection.MultiKeyUntyped[],System.Boolean)">
            <summary>
            Sort the output events, using the provided group-by keys for
            evaluating grouped aggregation functions, and avoiding the cost of
            recomputing the keys.
            </summary>
            <param name="outgoingEvents">the events to sort</param>
            <param name="generatingEvents">the events that generated the output events (each event has a corresponding array of generating events per different event streams)</param>
            <param name="groupByKeys">the keys to use for determining the group-by group of output events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            an array containing the output events in sorted order
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessor.GetSortKey(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Returns the sort key for a given row.
            </summary>
            <param name="eventsPerStream">is the row consisting of one event per stream</param>
            <param name="isNewData">is true for new data</param>
            <returns>sort key</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessor.GetSortKeyPerRow(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Returns the sort key for a each row where a row is a single event (no join, single stream).
            </summary>
            <param name="generatingEvents">is the rows consisting of one event per row</param>
            <param name="isNewData">is true for new data</param>
            <returns>sort key for each row</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessor.Sort(com.espertech.esper.events.EventBean[],com.espertech.esper.collection.MultiKeyUntyped[])">
            <summary>
            Sort a given array of outgoing events using the sort keys returning a sorted outgoing event array.
            </summary>
            <param name="outgoingEvents">is the events to sort</param>
            <param name="orderKeys">is the keys to sort by</param>
            <returns>sorted events</returns>
        </member>
        <member name="T:com.espertech.esper.core.StatementContextFactory">
            <summary>
            Interface for a factory class that makes statement context specific to a statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementContextFactory.MakeContext(System.String,System.String,System.String,System.Boolean,com.espertech.esper.core.EPServicesContext,com.espertech.esper.compat.Map{System.String,System.Object},com.espertech.esper.epl.spec.OnTriggerDesc,com.espertech.esper.epl.spec.CreateWindowDesc)">
            <summary>Create a new statement context consisting of statement-level services.</summary>
            <param name="statementId">is the statement is</param>
            <param name="statementName">is the statement name</param>
            <param name="expression">is the statement expression</param>
            <param name="engineServices">is engine services</param>
            <param name="optAdditionalContext">addtional context to pass to the statement</param>
            <param name="optOnTriggerDesc">the on-delete statement descriptor for named window context creation</param>
            <param name="optCreateWindowDesc">the create-window statement descriptor for named window context creation</param>
            <param name="hasVariables">indicator whether the statement uses variables anywhere in the statement</param>
            <returns>statement context</returns>
        </member>
        <member name="T:com.espertech.esper.core.EPStatementListenerSet">
            <summary>
            Provides update listeners for use by statement instances, and the management methods around these.
            <para>
            The collection of update listeners is based on copy-on-write:
            When the engine dispatches events to a set of listeners, then while iterating through the set there
            may be listeners added or removed (the listener may remove itself).
            </para>
            <para>
            Additionally, events may be dispatched by multiple threads to the same listener.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementListenerSet.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementListenerSet.#ctor(com.espertech.esper.compat.CopyOnWriteArraySet{com.espertech.esper.client.UpdateListener},com.espertech.esper.compat.CopyOnWriteArraySet{com.espertech.esper.client.StatementAwareUpdateListener})">
            <summary>Ctor.</summary>
            <param name="listeners">is a set of update listener</param>
            <param name="stmtAwareListeners">is a set of statement-aware update listener</param>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementListenerSet.Copy(com.espertech.esper.core.EPStatementListenerSet)">
            <summary>Copy the update listener set to from another.</summary>
            <param name="listenerSet">a collection of update listeners</param>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementListenerSet.AddListener(com.espertech.esper.client.UpdateListener)">
            <summary>Add a listener to the statement.</summary>
            <param name="listener">to add</param>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementListenerSet.RemoveListener(com.espertech.esper.client.UpdateListener)">
            <summary>Remove a listeners to a statement.</summary>
            <param name="listener">to remove</param>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementListenerSet.RemoveAllListeners">
            <summary>Remove all listeners to a statement.</summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementListenerSet.AddListener(com.espertech.esper.client.StatementAwareUpdateListener)">
            <summary>Add a listener to the statement.</summary>
            <param name="listener">to add</param>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementListenerSet.RemoveListener(com.espertech.esper.client.StatementAwareUpdateListener)">
            <summary>Remove a listeners to a statement.</summary>
            <param name="listener">to remove</param>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementListenerSet.Listeners">
            <summary>Returns the set of listeners to the statement.</summary>
            <returns>statement listeners</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementListenerSet.StmtAwareListeners">
            <summary>Returns the set of statement-aware listeners.</summary>
            <returns>statement-aware listeners</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementListenerSet.Subscriber">
            <summary>
            Gets or sets the subscriber instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.Directory.Lookup(System.String)">
            <summary>
            Lookup an object by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.Directory.Bind(System.String,System.Object)">
            <summary>
            Bind an object to a name.  Throws an exception if
            the name is already bound.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.espertech.esper.core.Directory.Rebind(System.String,System.Object)">
            <summary>
            Bind an object to a name.  If the object is already
            bound, rebind it.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.espertech.esper.core.Directory.Unbind(System.String)">
            <summary>
            Unbind the object at the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:com.espertech.esper.core.Directory.Rename(System.String,System.String)">
            <summary>
            Rename the object at oldName with newName.
            </summary>
            <param name="oldName"></param>
            <param name="newName"></param>
        </member>
        <member name="M:com.espertech.esper.core.Directory.List(System.String)">
            <summary>
            Enumerates the names bound in the named context.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.XMLConstants">
            <summary>
            Contains constants for XML processing.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.XML_NS_PREFIX">
            <summary>
            Reserved "xml" prefix
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.XML_NS_URI">
            <summary>
            The namespace for the reserved "xml" prefix.
            The prefix xml is by definition bound to the namespace name http://www.w3.org/XML/1998/namespace.
            It MAY, but need not, be declared, and MUST NOT be bound to any other namespace name. Other prefixes
            MUST NOT be bound to this namespace name, and it MUST NOT be declared as the default namespace.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.XMLNS_ATTRIBUTE">
            <summary>
            Reserved "xmlns" prefix
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.XMLNS_ATTRIBUTE_NS_URI">
            <summary>
            The prefix xmlns is used only to declare namespace bindings and is by definition bound to the namespace
            name http://www.w3.org/2000/xmlns/. It MUST NOT be declared . Other prefixes MUST NOT be bound to this
            namespace name, and it MUST NOT be declared as the default namespace. Element names MUST NOT have the
            prefix xmlns.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.DateTimeHelper">
            <summary>
            Assistant class to help with conversions between Java-style and
            granularity dates and CLR-style DateTime.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.DateTimeHelper.TICKS_PER_MILLI">
            <summary>
            Number of ticks per millisecond
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.DateTimeHelper.NANOS_PER_TICK">
            <summary>
            Number of nanoseconds per tick
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.TicksToMillis(System.Int64)">
            <summary>
            Converts ticks to milliseconds
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.TicksToNanos(System.Int64)">
            <summary>
            Converts ticks to nanoseconds
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.MillisToTicks(System.Int64)">
            <summary>
            Converts milliseconds to ticks
            </summary>
            <param name="millis"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.NanosToTicks(System.Int64)">
            <summary>
            Nanoses to ticks.
            </summary>
            <param name="nanos">The nanos.</param>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.MillisToDateTime(System.Int64)">
            <summary>
            Converts milliseconds to DateTime 
            </summary>
            <param name="millis">The millis.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.TimeInNanos(System.DateTime)">
            <summary>
            Gets the number of nanoseconds needed to represent
            the datetime.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.TimeInMillis(System.DateTime)">
            <summary>
            Gets the number of milliseconds needed to represent
            the datetime.  This is needed to convert from Java
            datetime granularity (milliseconds) to CLR datetimes.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.TimeFromMillis(System.Int64)">
            <summary>
            Gets the datetime that matches the number of milliseconds provided.
            As with TimeInMillis, this is needed to convert from Java datetime
            granularity to CLR granularity.
            </summary>
            <param name="millis"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.GetCurrentTimeMillis">
            <summary>
            Returns the current time in millis
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.MillisToJavaMillis(System.Int64)">
            <summary>
            Converts millis in CLR to millis in Java
            </summary>
            <param name="millis"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.JavaMillisToMillis(System.Int64)">
            <summary>
            Converts milliseconds in Java to milliseconds in CLR
            </summary>
            <param name="javaMillis"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.MoveToDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns a datetime for the week given on the specified day of the week.
            </summary>
            <param name="from">From.</param>
            <param name="dayOfWeek">The day of week.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.EndOfMonth(System.DateTime)">
            <summary>
            Returns a datetime for the end of the month.
            </summary>
            <param name="from">From.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.DateTimeHelper.CurrentTimeMillis">
            <summary>
            Returns the current time in millis
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.DateTimeHelper.CurrentTimeNanos">
            <summary>
            Gets the current time in nanoseconds.
            </summary>
            <value>The current time nanos.</value>
        </member>
        <member name="T:com.espertech.esper.collection.SortedRefCountedSet`1">
            <summary>
            Sorted, reference-counting set based on a SortedDictionary implementation that stores keys and a reference counter for
            each unique key value. Each time the same key is added, the reference counter increases.
            Each time a key is removed, the reference counter decreases.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SortedRefCountedSet`1.#ctor">
            <summary>
             Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SortedRefCountedSet`1.Add(`0)">
            <summary> Add a key to the set. Add with a reference count of one if the key didn't exist in the set.
            Increase the reference count by one if the key already exists.
            </summary>
            <param name="key">to add
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.SortedRefCountedSet`1.Add(`0,System.Int32)">
            <summary>
            Add a key to the set with the given number of references.
            </summary>
            <param name="key">The key.</param>
            <param name="numReferences">The num references.</param>
        </member>
        <member name="M:com.espertech.esper.collection.SortedRefCountedSet`1.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SortedRefCountedSet`1.Remove(`0)">
            <summary> Remove a key from the set. Removes the key if the reference count is one.
            Decreases the reference count by one if the reference count is more then one.
            </summary>
            <param name="key">to add
            </param>
            <throws>  IllegalStateException is a key is removed that wasn't added to the map </throws>
        </member>
        <member name="P:com.espertech.esper.collection.SortedRefCountedSet`1.MaxValue">
            <summary> Returns the largest key value, or null if the collection is empty.</summary>
            <returns> largest key value, null if none
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.SortedRefCountedSet`1.MinValue">
            <summary> Returns the smallest key value, or null if the collection is empty.</summary>
            <returns> smallest key value, default(K) if none
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.StreamSelector">
            <summary>
            Enumeration for representing selection of the remove stream or the insert stream, or both.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.StreamSelector.RSTREAM_ONLY">
            <summary>Indicates selection of the remove stream only.</summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.StreamSelector.ISTREAM_ONLY">
            <summary>Indicates selection of the insert stream only.</summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.StreamSelector.RSTREAM_ISTREAM_BOTH">
            <summary>Indicates selection of both the insert and the remove stream.</summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.BitwiseOpExpression">
            <summary>
            Bitwise (binary) operator for binary AND, binary OR and binary XOR.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.BitwiseOpExpression.#ctor(com.espertech.esper.type.BitWiseOpEnum)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
            <param name="binaryOp">the binary operator</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.BitwiseOpExpression.Add(System.String)">
            <summary>Add a property to the expression.</summary>
            <param name="property">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.BitwiseOpExpression.Add(System.Object)">
            <summary>Add a constant to the expression.</summary>
            <param name="object">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.BitwiseOpExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to the expression.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.BitwiseOpExpression.BinaryOp">
            <summary>Gets or sets the binary operator.</summary>
            <returns>operator</returns>
        </member>
        <member name="T:com.espertech.esper.type.DecimalValue">
            <summary>
            Placeholder for a decimal value in an event expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.type.PrimitiveValueBase">
            <summary>
            Abstract class for literal values supplied in an event expression string and prepared expression values supplied
            by set methods.
            </summary>
        </member>
        <member name="T:com.espertech.esper.type.PrimitiveValue">
            <summary>
            Classes implementing this interface are responsible for parsing, setting and getting
            the value of the different basic data types that occur in an event expression.
            <para>
            Placeholders represent all literal values in event expressions and set values in
            prepared event expressions.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.PrimitiveValue.Parse(System.String)">
            <summary> Parse the string literal value into the specific data type.</summary>
            <param name="value">is the textual value to parse
            </param>
        </member>
        <member name="M:com.espertech.esper.type.PrimitiveValue.Parse(System.String[])">
            <summary> Parse the string literal values supplied in the array into the specific data type.</summary>
            <param name="values">are the textual values to parse</param>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue.ValueObject">
            <summary> Returns a value object.</summary>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue.Type">
            <summary> Returns the type of primitive value this instance represents.</summary>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Boolean">
            <summary> Set a bool value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Byte">
            <summary> Set a byte value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Float">
            <summary> Set a float value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Int">
            <summary> Set an int value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Short">
            <summary> Set a short value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._String">
            <summary> Set a string value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Double">
            <summary> Set a double value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Long">
            <summary> Set a long value.</summary>
        </member>
        <member name="M:com.espertech.esper.type.PrimitiveValueBase.Parse(System.String[])">
            <summary>
            Parse the string literal values supplied in the array into the 
            specific data type.
            </summary>
            <param name="values">are the textual values to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.PrimitiveValueBase.Parse(System.String)">
            <summary>
            Parse the string literal value supplied into the specific
            the specific data type.
            </summary>
            <param name="param1"></param>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Boolean">
            <summary>
            Set a bool value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Byte">
            <summary>
            Set a byte value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Float">
            <summary>
            Set a float value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Int">
            <summary>
            Set an int value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Short">
            <summary>
            Set a short value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._String">
            <summary>
            Set a string value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Double">
            <summary>
            Set a double value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Long">
            <summary>
            Set a long value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.#ctor">
            <summary> Constructor.</summary>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.#ctor(System.Decimal)">
            <summary>
            Constructor setting the value.
            </summary>
            <param name="decimalValue">The decimal value.</param>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.ParseString(System.String)">
            <summary>
            Parse string value returning a decimal.
            </summary>
            <param name="value">value to parse</param>
            <returns>parsed value</returns>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.ParseString(System.String[])">
            <summary> Parse the string array returning a decimal array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.GetDecimal">
            <summary> Return the value as an unboxed.</summary>
            <returns> value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.DecimalValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.DecimalValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.ValueAddEventService">
            <summary>
            Service associating handling vaue-added event types, such a revision event types and
            variant stream event types.
            <para/>
            Associates named windows and revision event types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.Init(com.espertech.esper.compat.Map{System.String,com.espertech.esper.client.ConfigurationRevisionEventType},com.espertech.esper.compat.Map{System.String,com.espertech.esper.client.ConfigurationVariantStream},com.espertech.esper.events.EventAdapterService)">
            <summary>
            Called at initialization time, verifies configurations provided.
            </summary>
            <param name="revisionTypes">is the revision types to add</param>
            <param name="variantStreams">is the variant streams to add</param>
            <param name="eventAdapterService">for obtaining event type information for each alias</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.AddRevisionEventType(System.String,com.espertech.esper.client.ConfigurationRevisionEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Adds a new revision event types.
            </summary>
            <param name="alias">to add</param>
            <param name="config">the revision event type configuration</param>
            <param name="eventAdapterService">for obtaining event type information for each alias</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.AddVariantStream(System.String,com.espertech.esper.client.ConfigurationVariantStream,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Adds a new variant stream.
            </summary>
            <param name="variantEventTypeAlias">the alias of the type</param>
            <param name="variantStreamConfig">the configs</param>
            <param name="eventAdapterService">for handling nested events</param>
            <throws>ConfigurationException if the configuration is invalid</throws>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.GetValueAddUnderlyingType(System.String)">
            <summary>
            Upon named window creation, and during resolution of type specified as part of a
            named window create statement, returns looks up the revision event type alias provided and return the revision event type if found, or null if not found.
            </summary>
            <param name="alias">to look up</param>
            <returns>null if not found, of event type</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.CreateRevisionType(System.String,System.String,com.espertech.esper.view.StatementStopService,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Upon named window creation, create a unique revision event type that this window processes.
            </summary>
            <param name="namedWindowName">name of window</param>
            <param name="alias">alias to use</param>
            <param name="statementStopService">for handling stops</param>
            <param name="eventAdapterService">for event type info</param>
            <returns>revision event type</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.IsRevisionTypeAlias(System.String)">
            <summary>
            Upon named window creation, check if the alias used is a revision event type alias.
            </summary>
            <param name="alias">to check</param>
            <returns>
            true if revision event type, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.GetValueAddProcessor(System.String)">
            <summary>
            Gets a value-added event processor.
            </summary>
            <param name="alias">of the value-add events</param>
            <returns>processor</returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableServiceImpl">
            <summary>
            Variables service for reading and writing variables, and for setting a version number for the current thread to
            consider variables for.
            <para>
            Consider a statement as follows: select * from MyEvent as A where A.val &gt; var1 and A.val2 &gt; var1 and A.val3 &gt; var2
            </para>
            <para>
            Upon statement execution we need to guarantee that the same atomic value for all variables is applied for all
            variable reads (by expressions typically) within the statement.
            </para>
            <para>
            Designed to support:
            <ol>
            <li>lock-less read of the current and prior version, locked reads for older versions</li>
            <li>atomicity by keeping multiple versions for each variable and a threadlocal that receives the current version each call</li>
            <li>one write lock for all variables (required to coordinate with single global version number),
            however writes are very fast (entry to collection plus increment an int) and therefore blocking should not be an issue</li>
            </ol>
            </para>
            <para>
            As an alternative to a version-based design, a read-lock for the variable space could also be used, with the following
            disadvantages: The write lock may just not be granted unless fair locks are used which are more expensive; And
            a read-lock is more expensive to acquire for multiple CPUs; A thread-local is still need to deal with
            "set var1=3, var2=var1+1" assignments where the new uncommitted value must be visible in the local evaluation.
            </para>
            <para>
            Every new write to a variable creates a new version. Thus when reading variables, readers can ignore newer versions
            and a read lock is not required in most circumstances.
            </para>
            <para>
            This algorithm works as follows:
            </para>
            <para>
            A thread processing an event into the engine via SendEvent() calls the "setLocalVersion" method once
            before processing a statement that has variables.
            This places into a threadlocal variable the current version number, say version 570.
            </para>
            <para>
            A statement that reads a variable has an <see cref="T:com.espertech.esper.epl.expression.ExprVariableNode"/> that has a <see cref="T:com.espertech.esper.epl.variable.VariableReader"/> handle
            obtained during validation (example).
            </para>
            <para>
            The <see cref="T:com.espertech.esper.epl.variable.VariableReader"/> takes the version from the threadlocal (570) and compares the version number with the
            version numbers held for the variable.
            If the current version is same or lower (520, as old or older) then the threadlocal version,
            then use the current value.
            If the current version is higher (571, newer) then the threadlocal version, then go to the prior value.
            Use the prior value until a version is found that as old or older then the threadlocal version.
            </para>
            <para>
            If no version can be found that is old enough, output a warning and return the newest version.
            This should not happen, unless a thread is executing for very long within a single statement such that
            lifetime-old-version time speriod passed before the thread asks for variable values.
            </para>
            <para>
            As version numbers are counted up they may reach a boundary. Any write transaction after the boundary
            is reached performs a roll-over. In a roll-over, all variables version lists are
            newly created and any existing threads that read versions go against a (old) high-collection,
            while new threads reading the reset version go against a new low-collection.
            </para>
            <para>
            The class also allows an optional state handler to be plugged in to handle persistence for variable state.
            The state handler gets invoked when a variable changes value, and when a variable gets created
            to obtain the current value from persistence, if any.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableService">
            <summary>
            Variables service for reading and writing variables, and for setting a version number for the current thread to
            consider variables for.
            <para>
            See implementation class for further details.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.SetLocalVersion">
            <summary>Sets the variable version that subsequent reads consider.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.CreateNewVariable(System.String,System.Type,System.Object,com.espertech.esper.core.StatementExtensionSvcContext)">
            <summary>Creates a new variable.</summary>
            <param name="variableName">name of the variable</param>
            <param name="type">variable type</param>
            <param name="value">
            initialization value; String values are allowed and parsed according to type
            </param>
            <param name="extensionServicesContext">
            is extensions for implementing resilience attributes of variables
            </param>
            <throws>VariableExistsException if the variable name is already in use</throws>
            <throws>VariableTypeException if the variable type cannot be recognized</throws>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.GetReader(System.String)">
            <summary>
            Returns a reader that provides access to variable values. The reader considers the
            version currently set via setLocalVersion.
            </summary>
            <param name="variableName">the variable that the reader should read</param>
            <returns>reader</returns>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.RegisterCallback(System.Int32,com.espertech.esper.epl.variable.VariableChangeCallback)">
            <summary>
            Registers a callback invoked when the variable is written with a new value.
            </summary>
            <param name="variableNumber">the variable index number</param>
            <param name="variableChangeCallback">a callback</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.CheckAndWrite(System.Int32,System.Object)">
            <summary>
            Check type of the value supplied and writes the new variable value.
            <para/>
            Must be followed by either a commit or rollback.
            </summary>
            <param name="variableNumber">the index number of the variable to write (from VariableReader)</param>
            <param name="newValue">the new value</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.Write(System.Int32,System.Object)">
            <summary>
            Writes a new variable value.
            <para>
            Must be followed by either a commit or rollback.
            </para>
            </summary>
            <param name="variableNumber">
            the index number of the variable to write (from VariableReader)
            </param>
            <param name="newValue">the new value</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.Commit">
            <summary>Commits the variable outstanding changes.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.Rollback">
            <summary>Rolls back the variable outstanding changes.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableService.ReadWriteLock">
            <summary>Lock for use in atomic writes to the variable space.</summary>
            <returns>read write lock for external coordinated write</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableService.Variables">
            <summary>Returns a map of variable name and reader, for thread-safe iteration.</summary>
            <returns>variable names and readers</returns>
        </member>
        <member name="F:com.espertech.esper.epl.variable.VariableServiceImpl.ROLLOVER_READER_BOUNDARY">
            <summary>
            Sets the boundary above which a reader considers the high-version list of variable values.
            For use in roll-over when the current version number overflows the ROLLOVER_WRITER_BOUNDARY.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.variable.VariableServiceImpl.ROLLOVER_WRITER_BOUNDARY">
            <summary>
            Sets the boundary above which a write transaction rolls over all variable's
            version lists.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.variable.VariableServiceImpl.HIGH_WATERMARK_VERSIONS">
            <summary>
            Applicable for each variable if more then the number of versions accumulated, check
            timestamps to determine if a version can be expired.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableServiceImpl.#ctor(System.Int64,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableStateHandler)">
            <summary>
            Ctor.
            </summary>
            <param name="millisecondLifetimeOldVersions">number of milliseconds a version may hang around before expiry</param>
            <param name="timeProvider">provides the current time</param>
            <param name="optionalStateHandler">a optional plug-in that may store variable state and retrieve state upon creation</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableServiceImpl.#ctor(System.Int32,System.Int64,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableStateHandler)">
            <summary>
            Ctor.
            </summary>
            <param name="startVersion">the first version number to start from</param>
            <param name="millisecondLifetimeOldVersions">number of milliseconds a version may hang around before expiry</param>
            <param name="timeProvider">provides the current time</param>
            <param name="optionalStateHandler">a optional plug-in that may store variable state and retrieve state upon creation</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableServiceImpl.RollOver">
            <summary>Rollover includes creating a new</summary>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableChangeCallback">
            <summary>
            A callback interface for indicating a change in variable value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableChangeCallback.Update(System.Object,System.Object)">
            <summary>Indicate a change in variable value.</summary>
            <param name="newValue">new value</param>
            <param name="oldValue">old value</param>
        </member>
        <member name="T:com.espertech.esper.epl.variable.CreateVariableView">
            <summary>
            View for handling create-variable syntax.
            <para/>
            The view posts to listeners when a variable changes, if it has subviews.
            <para/>
            The view returns the current variable value for the iterator.
            <para/>
            The event type for such posted events is a single field Map with the variable value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.CreateVariableView.#ctor(com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.variable.VariableService,System.String,com.espertech.esper.core.StatementResultService)">
            <summary>Ctor.</summary>
            <param name="eventAdapterService">for creating events</param>
            <param name="variableService">for looking up variables</param>
            <param name="variableName">is the name of the variable to create</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
        </member>
        <member name="T:com.espertech.esper.epl.subquery.SubselectAggregatorView">
            <summary>
            View handling the insert and remove stream generated by a subselect
            for application to aggregation state.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.subquery.SubselectAggregatorView.#ctor(com.espertech.esper.epl.agg.AggregationService,com.espertech.esper.epl.expression.ExprNode)">
            <summary>Ctor.</summary>
            <param name="aggregationService">for aggregating</param>
            <param name="optionalFilterExpr">
            for filtering the view-posted events before aggregation
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OutputLimitRateType">
            <summary>
            Enum for the type of rate for output-rate limiting.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitRateType.EVENTS">
            <summary>Output by events.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitRateType.TIME_SEC">
            <summary>Output by seconds.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitRateType.TIME_MIN">
            <summary>Output by minutes.</summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.NamedWindowConsumerStreamSpec">
            <summary>Specification for use of an existing named window.</summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StreamSpecBase">
            <summary>
            Abstract base specification for a stream, consists simply of an optional stream name and a list of views
            on to of the stream.
            <para>
            Implementation classes for views and patterns add additional information defining the
            stream of events.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StreamSpecBase.#ctor(System.String,System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},System.Boolean)">
            <summary>Ctor.</summary>
            <param name="optionalStreamName">stream name, or null if none supplied</param>
            <param name="viewSpecs">specifies what view to use to derive data</param>
            <param name="isUnidirectional">true to indicate a unidirectional stream in a join, applicable for joins</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StreamSpecBase.#ctor">
            <summary>Default ctor.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpecBase.OptionalStreamName">
            <summary>Returns the name assigned.</summary>
            <returns>stream name or null if not assigned</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpecBase.ViewSpecs">
            <summary>
            Returns view definitions to use to construct views to derive data on stream.
            </summary>
            <returns>view defs</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpecBase.IsUnidirectional">
            <summary>Returns true to indicate a unidirectional stream in a join, applicable for joins.</summary>
            <returns>indicator whether the stream is unidirectional in a join</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StreamSpecCompiled">
            <summary>
            Validated stream specifications generally have expression nodes that are valid and event types exist.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StreamSpec">
            <summary>
            Specification for a stream, consists simply of an optional stream name and a list of views
            on to of the stream.
            <para>
            Implementation classes for views and patterns add additional information defining the
            stream of events.
            </para>
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpec.OptionalStreamName">
            <summary>Returns the stream name, or null if undefined.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpec.ViewSpecs">
            <summary> Returns views definitions onto the stream.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpec.IsUnidirectional">
            <summary>Returns true to indicate a unidirectional stream in a join, applicable for joins.</summary>
            <returns>indicator whether the stream is unidirectional in a join</returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.NamedWindowConsumerStreamSpec.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.spec.ViewSpec},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},System.Boolean)">
            <summary>Ctor.</summary>
            <param name="windowName">specifies the name of the named window</param>
            <param name="optionalAsName">an alias or null if none defined</param>
            <param name="viewSpecs">is the view specifications</param>
            <param name="filterExpressions">the named window filters</param>
            <param name="isUnidirectional">true to indicate a unidirectional stream in a join, applicable for joins</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.NamedWindowConsumerStreamSpec.WindowName">
            <summary>Returns the window name.</summary>
            <returns>window name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.NamedWindowConsumerStreamSpec.FilterExpressions">
            <summary>
            Returns list of filter expressions onto the named window, or no filter expressions if none defined.
            </summary>
            <returns>list of filter expressions</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.CreateVariableDesc">
            <summary>Descriptor for create-variable statements.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.CreateVariableDesc.#ctor(System.String,System.String,com.espertech.esper.epl.expression.ExprNode)">
            <summary>Ctor.</summary>
            <param name="variableType">type of the variable</param>
            <param name="variableName">name of the variable</param>
            <param name="assignment">
            expression assigning the initial value, or null if none
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateVariableDesc.VariableType">
            <summary>Returns the variable type.</summary>
            <returns>type of variable</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateVariableDesc.VariableName">
            <summary>Returns the variable name</summary>
            <returns>name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateVariableDesc.Assignment">
            <summary>Returns the assignment expression, or null if none</summary>
            <returns>expression or null</returns>
        </member>
        <member name="T:com.espertech.esper.epl.named.LookupStrategyIndexed">
            <summary>
            Uses an index to determine event to be deleted or selected from a named window.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.LookupStrategy">
            <summary>
            A deletion strategy is for use with named window in on-delete statements and encapsulates
            the strategy for resolving one or more events arriving in the on-clause of an on-delete statement
            to one or more events to be deleted from the named window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.LookupStrategy.Lookup(com.espertech.esper.events.EventBean[])">
            <summary>Determines the events to be deleted from a named window.</summary>
            <param name="newData">is the correlation events</param>
            <returns>the events to delete from the named window</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.LookupStrategyIndexed.#ctor(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.lookup.TableLookupStrategy)">
            <summary>Ctor.</summary>
            <param name="joinExpr">the validated where clause of the on-delete</param>
            <param name="tableLookupStrategy">
            the strategy for looking up in an index the matching events using correlation
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprEvalProcessorStreams">
            <summary>
            Processor for select-clause expressions that handles a list of selection items 
            represented by expression nodes. Computes results based on matching events. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprProcessor">
            <summary>
            Interface for processors of select-clause items, implementors are computing results based on matching events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprProcessor.Process(com.espertech.esper.events.EventBean[],System.Boolean,System.Boolean)">
            <summary>Computes the select-clause results and returns an event of the result event type that contains, in it'sproperties, the selected items.</summary>
            <param name="eventsPerStream">is per stream the event</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>event with properties containing selected items</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.SelectExprProcessor.ResultEventType">
            <summary> Returns the event type that represents the select-clause items.</summary>
            <returns> event type representing select-clause items
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprEvalProcessorStreams.#ctor(System.Collections.Generic.IList{com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec},System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec},com.espertech.esper.epl.spec.InsertIntoDesc,System.Boolean,com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="selectionList">list of select-clause items</param>
            <param name="insertIntoDesc">descriptor for insert-into clause contains column names overriding select clause names</param>
            <param name="isUsingWildcard">true if the wildcard (*) appears in the select clause</param>
            <param name="typeService">service for information about streams</param>
            <param name="eventAdapterService">service for generating events and handling event types</param>
            <param name="selectedStreams">list of stream selectors (e.g. select alias.* from Event as alias)</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException thrown if any of the expressions don't validate</throws>
        </member>
        <member name="T:com.espertech.esper.compat.ContextVar`1">
            <summary>
            Provides a stack-like object that can be used to maintain the state of a
            thread-local value.  Unlike a pure threadstatic variable a ContextVar can
            have multiple values that can be stacked.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.ContextVar`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ContextVar`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ContextVar`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.ContextVar`1.Current">
            <summary>
            Gets the current value associated with the context.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationCacheReferenceType">
            <summary>
            Enum indicating what kind of references are used to store the cache map's keys and values.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationCacheReferenceType.HARD">
            <summary>
            Constant indicating that hard references should be used.
            <para>
            Does not allow garbage collection to remove cache entries.
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationCacheReferenceType.SOFT">
            <summary>
            Constant indicating that soft references should be used.
            <para>
            Allows garbage collection to remove cache entries only after all weak references have been collected. 
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationCacheReferenceType.WEAK">
            <summary>
            Constant indicating that weak references should be used.
            <para>
            Allows garbage collection to remove cache entries. 
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationCacheReferenceTypeHelper.GetDefault">
            <summary>
            The default policy is set to WEAK to reduce the chance that out-of-memory errors occur
            as caches fill, and stay backwards compatible with prior Esper releases.
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeWindowViewFactory">
            <summary>Factory for <see cref="T:com.espertech.esper.view.window.TimeWindowView"/>.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeWindowViewFactory.millisecondsBeforeExpiry">
            <summary>Number of msec before expiry.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeWindowViewFactory.randomAccessGetterImpl">
            <summary>Access into the data window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeWindowViewFactory.isRemoveStreamHandling">
            <summary>Flag to indicate that the view must handle the removed events from a parent view.</summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeWindowViewFactory.MillisecondsBeforeExpiry">
            <summary>
            Returns the number of millisecond before window contents expire.
            </summary>
            <returns>num msec</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeWindowViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.RandomAccessByIndexGetter">
            <summary>Getter that provides an index at runtime.</summary>
        </member>
        <member name="T:com.espertech.esper.view.window.RandomAccessByIndexObserver">
            <summary>
            For indicating that the collection has been updated.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.RandomAccessByIndexObserver.Updated(com.espertech.esper.view.window.RandomAccessByIndex)">
            <summary>
            Callback to indicate an update
            </summary>
            <param name="randomAccessByIndex">is the collection</param>
        </member>
        <member name="M:com.espertech.esper.view.window.RandomAccessByIndexGetter.Updated(com.espertech.esper.view.window.RandomAccessByIndex)">
            <summary>
            Callback to indicate an update
            </summary>
            <param name="randomAccessByIndex">is the collection</param>
        </member>
        <member name="P:com.espertech.esper.view.window.RandomAccessByIndexGetter.Accessor">
            <summary>Returns the index for access.</summary>
            <returns>index</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.IStreamRandomAccess">
            <summary>
            For use with length and time window views that must provide random access into data window contents
            provided for the &quot;previous&quot; expression if used.
            </summary>
        </member>
        <member name="T:com.espertech.esper.collection.ViewUpdatedCollection">
            <summary>
            A general-purpose collection interface for collections updated by view data.
            <para>
            Views post delta-data in terms of new data (insert stream) events and old data (remove stream) event that
            leave a window.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.ViewUpdatedCollection.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Accepts view insert and remove stream.
            </summary>
            <param name="newData">is the insert stream events or null if no data</param>
            <param name="oldData">is the remove stream events or null if no data</param>
        </member>
        <member name="M:com.espertech.esper.collection.ViewUpdatedCollection.Destroy">
            <summary>
            De-allocate resources held by the collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRandomAccess.#ctor(com.espertech.esper.view.window.RandomAccessByIndexObserver)">
            <summary>Ctor.</summary>
            <param name="updateObserver">is invoked when updates are received</param>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRandomAccess.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Accepts view insert and remove stream.
            </summary>
            <param name="newData">is the insert stream events or null if no data</param>
            <param name="oldData">is the remove stream events or null if no data</param>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRandomAccess.GetNewData(System.Int32)">
            <summary>
            Returns an new data event given an index.
            </summary>
            <param name="index">to return new data for</param>
            <returns>new data event</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRandomAccess.GetOldData(System.Int32)">
            <summary>
            Returns an old data event given an index.
            </summary>
            <param name="index">to return old data for</param>
            <returns>old data event</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRandomAccess.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.std.UniqueByPropertyViewFactory">
            <summary>Factory for <see cref="T:com.espertech.esper.view.std.UniqueByPropertyView"/> instances.</summary>
        </member>
        <member name="F:com.espertech.esper.view.std.UniqueByPropertyViewFactory.propertyNames">
            <summary>Property name to evaluate unique values.</summary>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.std.UniqueByPropertyViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.view.std.MergeView">
            <summary>
            The merge view works together with a group view that splits the data in a stream to multiple subviews, based on
            a key index. Every group view requires a merge view to merge the many subviews back into a single view.
            Typically the last view in a chain containing a group view is a merge view.
            The merge view has no other responsibility then becoming the single last instance in the chain
            to which external listeners for updates can be attached to receive updates for the many subviews
            that have this merge view as common child views.
            The parent view of this view is generally the AddPropertyValueView that adds the grouped-by information
            back into the data.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.MergeView.#ctor(com.espertech.esper.core.StatementContext,System.String[],com.espertech.esper.events.EventType)">
            <summary>Constructor.</summary>
            <param name="groupFieldNames">
            is the fields from which to pull the value to group by
            </param>
            <param name="resultEventType">
            is passed by the factory as the factory adds the merged fields to an event type
            </param>
            <param name="statementContext">contains required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.std.MergeView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="M:com.espertech.esper.view.std.MergeView.AddParentView(com.espertech.esper.view.std.AddPropertyValueView)">
            <summary> Add a parent data merge view.</summary>
            <param name="parentView">is the parent data merge view to add
            </param>
        </member>
        <member name="M:com.espertech.esper.view.std.MergeView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.std.MergeView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.std.MergeView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.std.MergeView.GroupFieldNames">
            <summary>
            Gets or sets the field name that contains the values to group by.
            </summary>
            <value>The group field names.</value>
        </member>
        <member name="P:com.espertech.esper.view.std.MergeView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.IndentWriter">
            <summary>
            Writer that uses an underlying PrintWriter to indent output text for easy reading.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.IndentWriter.#ctor(System.IO.TextWriter,System.Int32,System.Int32)">
            <summary> Ctor.</summary>
            <param name="writer">to output to
            </param>
            <param name="startIndent">is the depth of indent to Start
            </param>
            <param name="deltaIndent">is the number of characters to indent for every incrIndent() call
            </param>
        </member>
        <member name="M:com.espertech.esper.util.IndentWriter.IncrIndent">
            <summary> Increase the indentation one level.</summary>
        </member>
        <member name="M:com.espertech.esper.util.IndentWriter.DecrIndent">
            <summary> Decrease the indentation one level.</summary>
        </member>
        <member name="M:com.espertech.esper.util.IndentWriter.WriteLine(System.String)">
            <summary> Print text to the underlying writer.</summary>
            <param name="text">to print
            </param>
        </member>
        <member name="T:com.espertech.esper.type.OuterJoinType">
            <summary> Enum for the type of outer join.</summary>
        </member>
        <member name="F:com.espertech.esper.type.OuterJoinType.LEFT">
            <summary> Left outer join.</summary>
        </member>
        <member name="F:com.espertech.esper.type.OuterJoinType.RIGHT">
            <summary> Right outer join.</summary>
        </member>
        <member name="F:com.espertech.esper.type.OuterJoinType.FULL">
            <summary> Full outer join.</summary>
        </member>
        <member name="T:com.espertech.esper.type.LongValue">
            <summary>
            Placeholder for a long-typed value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.LongValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.LongValue.ParseString(System.String)">
            <summary> Parse the string containing a long value.</summary>
            <param name="value">is the textual long value
            </param>
            <returns> long value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.LongValue.ParseString(System.String[])">
            <summary> Parse the string array returning a long array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.LongValue.GetLong">
            <summary> Returns the long value.</summary>
            <returns> long value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.LongValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.LongValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.LongValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.LongValue._Long">
            <summary>
            Set a long value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.GuardParameterException">
            <summary>Thrown to indicate a validation error in guard parameterization.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardParameterException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="message">validation error message</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalOrNode">
            <summary>
            This class represents an 'or' operator in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalNode">
            <summary> Superclass of all nodes in an evaluation tree representing an event pattern expression.
            Follows the Composite pattern. Child nodes do not carry references to parent nodes, the tree
            is unidirectional.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNode.NewState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary> Create the evaluation state node containing the truth value state for each operator in an
            event expression.
            </summary>
            <param name="parentNode">is the parent evaluator node that this node indicates a change in truth value to
            </param>
            <param name="beginState">is the container for events that makes up the Start state
            </param>
            <param name="context">is the handle to services required for evaluation
            </param>
            <param name="stateNodeId">is the new state object's identifier
            </param>
            <returns> state node containing the truth value state for the operator
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNode.#ctor">
            <summary> Constructor creates a list of child nodes.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNode.AddChildNode(com.espertech.esper.pattern.EvalNode)">
            <summary> Adds a child node.</summary>
            <param name="childNode">is the child evaluation tree node to add
            </param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNode.DumpDebug(System.String)">
            <summary> Recursively print out all nodes.</summary>
            <param name="prefix">is printed out for naming the printed info
            </param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNode.NodeNumber">
            <summary>
            Gets or sets the evaluation node's relative node number in
            the evaluation node tree.
            </summary>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNode.ChildNodes">
            <summary> Returns list of child nodes.</summary>
            <returns> list of child nodes
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalOrNode.NewState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>
            Create the evaluation state node containing the truth value state for each operator in an
            event expression.
            </summary>
            <param name="parentNode">is the parent evaluator node that this node indicates a change in truth value to</param>
            <param name="beginState">is the container for events that makes up the Start state</param>
            <param name="context">is the handle to services required for evaluation</param>
            <param name="stateNodeId">is the new state object's identifier</param>
            <returns>
            state node containing the truth value state for the operator
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalOrNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.IndexFactory">
            <summary>
            Factory for <see cref="T:com.espertech.esper.filter.FilterParamIndexBase"/> instances based on
            event property name and filter operator type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.IndexFactory.CreateIndex(com.espertech.esper.events.EventType,System.String,com.espertech.esper.filter.FilterOperator)">
            <summary>
            Factory for indexes that store filter parameter constants for a given event property and filter
            operator.
            <para>Does not perform any check of validity of property name.</para>
            </summary>
            <param name="eventType">is the event type to create an index for</param>
            <param name="propertyName">is the event property name</param>
            <param name="filterOperator">is the type of index to use</param>
            <returns>
            the proper index based on the filter operator type
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecCompiler">
            <summary>
            Helper to compile (validate and optimize) filter expressions as used in pattern and filter-based streams.
            </summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterSpecCompiler.PROPERTY_NAME_BOOLEAN_EXPRESSION">
            <summary>
            Assigned for filter parameters that are based on bool expression and not on
            any particular property name.
            <para>
            Keeping this artificial property name is a simplification as optimized filter parameters
            generally keep a property name.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiler.MakeFilterSpec(com.espertech.esper.events.EventType,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.compat.LinkedHashMap{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.events.EventType,System.String}},com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Factory method for compiling filter expressions into a filter specificationfor use with filter service.
            </summary>
            <param name="eventType">is the filtered-out event type</param>
            <param name="eventTypeAlias">is the alias name of the event type</param>
            <param name="filterExpessions">is a list of filter expressions</param>
            <param name="taggedEventTypes">is a map of stream names (tags) and event types available</param>
            <param name="streamTypeService">is used to set rules for resolving properties</param>
            <param name="methodResolutionService">resolved imports for static methods and such</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variables</param>
            <returns>compiled filter specification</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiler.ValidateDisallowSubquery(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>Validates expression nodes and returns a list of validated nodes.</summary>
            <param name="exprNodes">is the nodes to validate</param>
            <param name="streamTypeService">is provding type information for each stream</param>
            <param name="methodResolutionService">for resolving functions</param>
            <param name="timeProvider">for providing current time</param>
            <param name="variableService">provides access to variables</param>
            <returns>list of validated expression nodes</returns>
            <throws>ExprValidationException for validation errors</throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiler.MakeFilterParam(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            For a given expression determine if this is optimizable and create the filter parameter
            representing the expression, or null if not optimizable.
            </summary>
            <param name="constituent">is the expression to look at</param>
            <returns>filter parameter representing the expression, or null</returns>
            <throws>ExprValidationException if the expression is invalid</throws>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewPolicy">
            <summary>
            A view that prepares output events, batching incoming events and invoking the result set processor as necessary.
            <para/>
            Handles output rate limiting or stabilizing.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessView">
            <summary>
            Base output processing view that has the responsibility to serve up event type and statement
            iterator.
            <para/>
            Implementation classes may enforce an output rate stabilizing or limiting policy.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinSetIndicator">
            <summary> Marker interface for indicators to join set processors.</summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinSetProcessor">
            <summary>
            Processes a join result set constisting of sets of tuples of events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetProcessor.Process(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary> Process join result set.</summary>
            <param name="newEvents">set of event tuples representing new data
            </param>
            <param name="oldEvents">set of event tuples representing old data
            </param>
        </member>
        <member name="F:com.espertech.esper.epl.view.OutputProcessView.resultSetProcessor">
            <summary>Processes the parent views result set generating events for pushing out to child view. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.view.OutputProcessView.outputStrategy">
            <summary>Strategy to performs the output once it's decided we need to output. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.view.OutputProcessView.statementResultService">
            <summary>Manages listeners/subscribers to a statement, informing about current result generation needs. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.view.OutputProcessView.childView">
            <summary>The view to ultimately dispatch to. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.view.OutputProcessView.parentView">
            <summary>The parent view for iteration. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.view.OutputProcessView.isGenerateSynthetic">
            <summary>An indicator on whether we always need synthetic events such as for insert-into. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessView.#ctor(com.espertech.esper.epl.core.ResultSetProcessor,com.espertech.esper.epl.view.OutputStrategy,System.Boolean,com.espertech.esper.core.StatementResultService)">
            <summary>Ctor. </summary>
            <param name="resultSetProcessor">processes the results posted by parent view or joins</param>
            <param name="outputStrategy">the strategy to use for producing output</param>
            <param name="isInsertInto">true if this is an insert-into</param>
            <param name="statementResultService">for awareness of listeners and subscriber</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            <para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view
            </param>
            <param name="oldData">is the old data that has been removed from the parent view
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessView.Process(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary> Process join result set.</summary>
            <param name="newEvents">set of event tuples representing new data
            </param>
            <param name="oldEvents">set of event tuples representing old data
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessView.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.epl.view.OutputProcessView.JoinExecutionStrategy">
            <summary>
            For joins, supplies the join execution strategy that provides iteration over statement results.
            </summary>
            <value>The join execution strategy.</value>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewPolicy.#ctor(com.espertech.esper.epl.core.ResultSetProcessor,com.espertech.esper.epl.view.OutputStrategy,System.Boolean,System.Int32,com.espertech.esper.epl.spec.OutputLimitSpec,com.espertech.esper.core.StatementContext)">
            <summary>Ctor. </summary>
            <param name="resultSetProcessor">is processing the result set for publishing it out</param>
            <param name="streamCount">is the number of streams, indicates whether or not this view participates in a join</param>
            <param name="outputLimitSpec">is the specification for limiting output (the output condition and the result set processor)</param>
            <param name="statementContext">is the services the output condition may depend on</param>
            <param name="isInsertInto">is true if the statement is a insert-into</param>
            <param name="outputStrategy">is the method to use to produce output</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewPolicy.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>The update method is called if the view does not participate in a join. </summary>
            <param name="newData">new events</param>
            <param name="oldData">old events</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewPolicy.Process(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary>This process (update) method is for participation in a join. </summary>
            <param name="newEvents">new events</param>
            <param name="oldEvents">old events</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewPolicy.ContinueOutputProcessingView(System.Boolean,System.Boolean)">
            <summary>Called once the output condition has been met.Invokes the result set processor.Used for non-join event data.</summary>
            <param name="doOutput">true if the batched events should actually be output as well as processed, false if they should just be processed</param>
            <param name="forceUpdate">true if output should be made even when no updating events have arrived</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewPolicy.ContinueOutputProcessingJoin(System.Boolean,System.Boolean)">
            <summary>Called once the output condition has been met.Invokes the result set processor.Used for join event data.</summary>
            <param name="doOutput">true if the batched events should actually be output as well as processed, false if they should just be processed</param>
            <param name="forceUpdate">true if output should be made even when no updating events have arrived</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionNull">
            <summary>
            An empty output condition that is always satisfied.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputCondition">
            <summary> A condition that must be satisfied before output processing
            is allowed to continue. Once the condition is satisfied, it
            makes a callback to continue output processing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputCondition.UpdateOutputCondition(System.Int32,System.Int32)">
            <summary> Update the output condition.</summary>
            <param name="newEventsCount">number of new events incoming
            </param>
            <param name="oldEventsCount">number of old events incoming
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionNull.#ctor(com.espertech.esper.epl.view.OutputCallback)">
            <summary> Ctor.</summary>
            <param name="outputCallback">is the callback to make once the condition is satisfied
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionNull.UpdateOutputCondition(System.Int32,System.Int32)">
            <summary>
            Update the output condition.
            </summary>
            <param name="newEventsCount">number of new events incoming</param>
            <param name="oldEventsCount">number of old events incoming</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionCount">
            <summary>
            Output limit condition that is satisfied when either
            the total number of new events arrived or the total number
            of old events arrived is greater than a preset value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionCount.#ctor(System.Int32,com.espertech.esper.epl.variable.VariableReader,com.espertech.esper.epl.view.OutputCallback)">
            <summary>Constructor.</summary>
            <param name="eventRate">is the number of old or new events thatmust arrive in order for the condition to be satisfied</param>
            <param name="outputCallback">is the callback that is made when the conditoin is satisfied</param>
            <param name="variableReader">is for reading the variable value, if a variable was supplied, else null</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionCount.UpdateOutputCondition(System.Int32,System.Int32)">
            <summary>
            Updates the output condition.
            </summary>
            <param name="newDataCount">The new data count.</param>
            <param name="oldDataCount">The old data count.</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionCount.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.view.OutputConditionCount.NewEventsCount">
            <summary> Returns the number of new events.</summary>
            <returns> number of new events
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.view.OutputConditionCount.OldEventsCount">
            <summary> Returns the number of old events.</summary>
            <returns> number of old events
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.view.OutputConditionCount.EventRate">
            <summary> Returns the event rate.</summary>
            <returns> event rate
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputCallback">
            <summary> Invoked to perform output processing.</summary>
            <param name="doOutput">true if the batched events should actually be output as well as processed, false if they should just be processed
            </param>
            <param name="forceUpdate">true if output should be made even when no updating events have arrived
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.parse.WalkRuleSelector">
            <summary>
            For selection of the AST tree walk rule to use.
            Implementations can invoke a walk rule of their choice on the walker and AST passed in.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTConstantHelper">
            <summary>
            Parses constant strings and returns the constant Object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTConstantHelper.Parse(Antlr.Runtime.Tree.ITree)">
            <summary> Parse the AST constant node and return Object value.</summary>
            <param name="node">parse node for which to parse the string value
            </param>
            <returns> value matching AST node type
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DBOutputTypeDesc">
            <summary>
            Descriptor for SQL output columns.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DBOutputTypeDesc.#ctor(System.String,System.Type,com.espertech.esper.util.DatabaseTypeBinding)">
            <summary>
            Ctor.
            </summary>
            <param name="sqlType">the type of the column</param>
            <param name="dataType">the type reflecting column type</param>
            <param name="optionalBinding">the optional mapping from output column type to built-in</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DBOutputTypeDesc.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DBOutputTypeDesc.SqlType">
            <summary> Returns the SQL type of the output column.</summary>
            <returns> sql type
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DBOutputTypeDesc.DataType">
            <summary> Returns the type that getObject on the output column produces.</summary>
            <returns> type from statement metadata
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DBOutputTypeDesc.OptionalBinding">
            <summary>
            Gets the optional mapping from output column type to built-in.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.DataCacheNullImpl">
            <summary>
            Null implementation for a data cache that doesn't ever hit.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.DataCache">
            <summary>
            Implementations serve as caches for historical or reference data retrieved
            via lookup keys consisting or one or more rows represented by a list of events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCache.GetCached(System.Object[])">
            <summary>
            Ask the cache if the keyed value is cached, returning a list or rows if the key
            is in the cache,or returning null to indicate no such key cached. Zero rows may
            also be cached.
            </summary>
            <param name="lookupKeys">is the keys to look up in the cache</param>
            <returns>
            a list of rows that can be empty is the key was found in the cache, or null if 
            the key is not found in the cache
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCache.PutCached(System.Object[],com.espertech.esper.epl.join.table.EventTable)">
            <summary>
            Puts into the cache a key and a list of rows, or an empty list if zero rows.
            <para/>
            The put method is designed to be called when the cache does not contain a key as
            determined by the get method. Implementations typically simply overwrite any keys
             put into the cache that already existed in the cache.
            </summary>
            <param name="lookupKeys">is the keys to the cache entry</param>
            <param name="rows">is a number of rows</param>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCache.IsActive">
            <summary>
            Returns true if the cache is active and currently caching, or false if the
            cache is inactive and not currently caching
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
            <returns>true for caching enabled, false for no caching taking place</returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheNullImpl.GetCached(System.Object[])">
            <summary>
            Ask the cache if the keyed value is cached, returning a list or rows if the key is in the cache,or returning null to indicate no such key cached. Zero rows may also be cached.
            </summary>
            <param name="lookupKeys">is the keys to look up in the cache</param>
            <returns>
            a list of rows that can be empty is the key was found in the cache, or null ifthe key is not found in the cache
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheNullImpl.PutCached(System.Object[],com.espertech.esper.epl.join.table.EventTable)">
            <summary>
            Puts into the cache a key and a list of rows, or an empty list if zero rows.
            <para/>
            The put method is designed to be called when the cache does not contain a key as
            determined by the get method. Implementations typically simply overwrite any keys put
            into the cache that already existed in the cache.
            </summary>
            <param name="lookupKeys">is the keys to the cache entry</param>
            <param name="rows">is a number of rows</param>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCacheNullImpl.IsActive">
            <summary>
            Returns true if the cache is active and currently caching, or false if the cache is inactive and not currently caching
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
            <returns>true for caching enabled, false for no caching taking place</returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.ConnectionNoCacheImpl">
            <summary>
            Implementation of a connection cache that simply doesn't cache but gets
            a new connection and statement every request, and closes these every time
            a client indicates done.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.ConnectionCache">
            <summary>
            Base class for a Connection and DbCommand cache.
            <para>
            Implementations control the lifecycle via lifecycle methods, or
            may simple obtain new resources and close new resources every time.
            </para>
            <para>
            This is not a pool - a cache is associated with one client class and that
            class is expected to use cache methods in well-defined order of get, done-with and destroy.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.GetConnection">
            <summary> Returns a cached or new connection and statement pair.</summary>
            <returns> connection and statement pair
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.DoneWith(com.espertech.esper.collection.Pair{com.espertech.esper.epl.db.DbDriver,com.espertech.esper.epl.db.DbDriverCommand})">
            <summary> Indicate to return the connection and statement pair after use.</summary>
            <param name="pair">is the resources to return
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.Destroy">
            <summary> Destroys cache closing all resources cached, if any.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.#ctor(com.espertech.esper.epl.db.DatabaseConnectionFactory,System.String)">
            <summary> Ctor.</summary>
            <param name="databaseConnectionFactory">connection factory</param>
            <param name="sql">statement sql</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.Close(com.espertech.esper.collection.Pair{com.espertech.esper.epl.db.DbDriver,com.espertech.esper.epl.db.DbDriverCommand})">
            <summary> Close resources.</summary>
            <param name="pair">is the resources to close.
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.MakeNew">
            <summary> Make a new pair of resources.</summary>
            <returns> pair of resources
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.GetSqlFragments(System.String)">
            <summary>
            Gets the SQL fragments.
            </summary>
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionNoCacheImpl.#ctor(com.espertech.esper.epl.db.DatabaseConnectionFactory,System.String)">
            <summary> Ctor.</summary>
            <param name="databaseConnectionFactory">is the connection factory
            </param>
            <param name="sql">is the statement sql
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionNoCacheImpl.GetConnection">
            <summary>
            Returns a cached or new connection and statement pair.
            </summary>
            <returns>connection and statement pair</returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionNoCacheImpl.DoneWith(com.espertech.esper.collection.Pair{com.espertech.esper.epl.db.DbDriver,com.espertech.esper.epl.db.DbDriverCommand})">
            <summary>
            Indicate to return the connection and statement pair after use.
            </summary>
            <param name="pair">is the resources to return</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionNoCacheImpl.Destroy">
            <summary>
            Destroys cache closing all resources cached, if any.
            </summary>
        </member>
        <member name="T:com.espertech.esper.emit.EmitServiceProvider">
            <summary> Static factory for implementations of the EmitService interface.</summary>
        </member>
        <member name="M:com.espertech.esper.emit.EmitServiceProvider.NewService">
            <summary> Creates an implementation of the EmitService interface.</summary>
            <returns> implementation
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.UnsupportedOperationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.UnsupportedOperationException"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.UnsupportedOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.UnsupportedOperationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:com.espertech.esper.compat.Set`1">
            <summary>
            A collection of objects.  An object will only appear once in a set.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.Set`1.ToArray">
            <summary>
            Converts the set to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.Set`1.AddAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all of the items in the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:com.espertech.esper.compat.Set`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:com.espertech.esper.compat.Set`1.First">
            <summary>
            Returns the first item in the set
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.Set`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:com.espertech.esper.compat.SynchronizedSet`1.m_facade">
            <summary>
            Underlying set.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.#ctor(com.espertech.esper.compat.Set{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.SynchronizedSet`1"/> class.
            </summary>
            <param name="facade">The facade.</param>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.ToArray">
            <summary>
            Converts the set to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.AddAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all of the items in the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.compat.SynchronizedSet`1.First">
            <summary>
            Returns the first item in the set
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.SynchronizedSet`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.compat.SynchronizedSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:com.espertech.esper.compat.SynchronizedSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="M:com.espertech.esper.compat.NullEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.NullEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.NullEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.compat.NullEnumerator`1.System#Collections#Generic#IEnumerator{T}#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
            
        </member>
        <member name="P:com.espertech.esper.compat.NullEnumerator`1.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            
            <returns>
            The current element in the collection.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:com.espertech.esper.compat.C5CollectionWrapper`1">
            <summary>
            Provides a collection facade around a C5 collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.C5CollectionWrapper`1.#ctor(C5.ICollectionValue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.C5CollectionWrapper`1"/> class.
            </summary>
            <param name="subCollection">The sub collection.</param>
        </member>
        <member name="M:com.espertech.esper.compat.C5CollectionWrapper`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.C5CollectionWrapper`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.C5CollectionWrapper`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.C5CollectionWrapper`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.C5CollectionWrapper`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.C5CollectionWrapper`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.C5CollectionWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.C5CollectionWrapper`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.C5CollectionWrapper`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.collection.NullEnumerator`1">
            <summary>
            Enumerator that never returns an elements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.NullEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.NullEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.NullEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:com.espertech.esper.collection.NullEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:com.espertech.esper.collection.NullEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:com.espertech.esper.collection.MultiKeyUntyped">
            <summary> Functions as a key value for Maps where keys need to be composite values.
            The class allows a Map that uses MultiKeyUntyped entries for key values to use multiple objects as keys.
            It calculates the hashCode from the key objects on construction and caches the hashCode.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.#ctor(System.Object[])">
            <summary> Constructor for multiple keys supplied in an object array.</summary>
            <param name="keys">is an array of key objects
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.#ctor(System.Object)">
            <summary> Constructor for a single key object.</summary>
            <param name="key">is the single key object
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.#ctor(System.Object,System.Object)">
            <summary> Constructor for a pair of key objects.</summary>
            <param name="key1">is the first key object
            </param>
            <param name="key2">is the second key object
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.#ctor(System.Object,System.Object,System.Object)">
            <summary> Constructor for three key objects.</summary>
            <param name="key1">is the first key object
            </param>
            <param name="key2">is the second key object
            </param>
            <param name="key3">is the third key object
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.#ctor(System.Object,System.Object,System.Object,System.Object)">
            <summary> Constructor for four key objects.</summary>
            <param name="key1">is the first key object
            </param>
            <param name="key2">is the second key object
            </param>
            <param name="key3">is the third key object
            </param>
            <param name="key4">is the fourth key object
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="other">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKeyUntyped.Keys">
            <summary> Returns keys.</summary>
            <returns> keys object array
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKeyUntyped.Count">
            <summary> Returns the number of key objects.</summary>
            <returns> size of key object array
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKeyUntyped.Item(System.Int32)">
            <summary> Returns the key object at the specified position.</summary>
            <param name="index">is the array position
            </param>
            <returns> key object at position
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternEveryExpr">
            <summary>
            Pattern 'every' expression that controls the lifecycle of pattern sub-expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternEveryExpr.#ctor">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternEveryExpr.#ctor(com.espertech.esper.client.soda.PatternExpr)">
            <summary>Ctor.</summary>
            <param name="inner">is the pattern expression to control lifecycle on</param>
        </member>
        <member name="T:com.espertech.esper.client.time.TimerControlEvent">
            <summary>
            Event for controlling clocking, i.e. to enable and disable external clocking.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.time.TimerEvent">
            <summary> Abstract base class marker for events that control time keeping by an event stream processor instance.</summary>
        </member>
        <member name="M:com.espertech.esper.client.time.TimerControlEvent.#ctor(com.espertech.esper.client.time.TimerControlEvent.ClockTypeEnum)">
            <summary> Constructor takes a clocking type as parameter.</summary>
            <param name="clockType">for internal or external clocking
            </param>
        </member>
        <member name="P:com.espertech.esper.client.time.TimerControlEvent.ClockType">
            <summary> Returns clocking type.</summary>
            <returns> clocking type
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.time.TimerControlEvent.ClockTypeEnum">
            <summary>
            Enumeration that describes what type of clock we are using.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.time.TimerControlEvent.ClockTypeEnum.CLOCK_EXTERNAL">
            <summary> For external clocking.</summary>
        </member>
        <member name="F:com.espertech.esper.client.time.TimerControlEvent.ClockTypeEnum.CLOCK_INTERNAL">
            <summary> For internal clocking.</summary>
        </member>
        <member name="T:com.espertech.esper.plugin.PlugInEventTypeHandler">
            <summary>
            Provided once by an <see cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/> for any event type it creates.
            </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventTypeHandler.GetSender(com.espertech.esper.core.EPRuntimeEventSender)">
            <summary>Returns a facility responsible for converting or wrapping event objects. </summary>
            <param name="runtimeEventSender">for sending events into the engine</param>
            <returns>sender</returns>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventTypeHandler.EventType">
            <summary>Returns the event type. </summary>
            <returns>event type.</returns>
        </member>
        <member name="M:com.espertech.esper.plugin.SimplePlugInEventTypeHandler.#ctor(com.espertech.esper.plugin.GetSenderDelegate,com.espertech.esper.events.EventType)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.plugin.SimplePlugInEventTypeHandler"/> class.
            </summary>
            <param name="getSenderDelegate">The get sender delegate.</param>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="M:com.espertech.esper.plugin.SimplePlugInEventTypeHandler.GetSender(com.espertech.esper.core.EPRuntimeEventSender)">
            <summary>Returns a facility responsible for converting or wrapping event objects. </summary>
            <param name="runtimeEventSender">for sending events into the engine</param>
            <returns>sender</returns>
        </member>
        <member name="P:com.espertech.esper.plugin.SimplePlugInEventTypeHandler.EventType">
            <summary>
            Returns the event type.
            </summary>
            <value></value>
            <returns>event type.</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VAERevisionProcessorMerge">
            <summary>
            Provides a set of merge-strategies for merging individual properties 
            (rather then overlaying groups). 
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VAERevisionProcessorBase">
            <summary>Base revision processor. </summary>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.ValueAddEventProcessor">
            <summary>
            Interface for a processor of base and delta events in a revision event type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventProcessor.ValidateEventType(com.espertech.esper.events.EventType)">
            <summary>For use in checking insert-into statements, validates that the given type is eligible for revision event. </summary>
            <param name="eventType">the type of the event participating in revision event type (or not)</param>
            <throws>ExprValidationException if the validation fails</throws>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventProcessor.GetValueAddEventBean(com.espertech.esper.events.EventBean)">
            <summary>For use in executing an insert-into, wraps the given event applying the revision event type, but not yet computing a new revision. </summary>
            <param name="event">to wrap</param>
            <returns>revision event bean</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventProcessor.OnUpdate(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[],com.espertech.esper.epl.named.NamedWindowRootView,com.espertech.esper.epl.named.NamedWindowIndexRepository)">
            <summary>Upon new events arriving into a named window (new data), and upon events being deleted via on-delete (old data), update child views of the root view and apply to index repository as required (fast deletion). </summary>
            <param name="newData">new events</param>
            <param name="oldData">remove stream</param>
            <param name="namedWindowRootView">the root view</param>
            <param name="indexRepository">delete and select indexes</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventProcessor.GetSnapshot(com.espertech.esper.core.EPStatementHandle,com.espertech.esper.view.Viewable)">
            <summary>Handle iteration over revision event contents. </summary>
            <param name="createWindowStmtHandle">statement handle for safe iteration</param>
            <param name="parent">the provider of data</param>
            <returns>collection to iterate</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventProcessor.RemoveOldData(com.espertech.esper.events.EventBean[],com.espertech.esper.epl.named.NamedWindowIndexRepository)">
            <summary>Called each time a data window posts a remove stream event, to indicate that a data window remove an event as it expired according to a specified expiration policy. </summary>
            <param name="oldData">to remove</param>
            <param name="indexRepository">the indexes to update</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.ValueAddEventProcessor.ValueAddEventType">
            <summary>Returns the event type that this revision processor generates. </summary>
            <returns>event type</returns>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.revisionSpec">
            <summary>Revision type specification. </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.revisionEventTypeAlias">
            <summary>Alias of type. </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.revisionEventType">
            <summary>Revision event type. </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.eventAdapterService">
            <summary>For interogating nested properties. </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.typeDescriptors">
            <summary>Map of participating type to descriptor. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.#ctor(com.espertech.esper.events.vaevent.RevisionSpec,System.String,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="revisionSpec">specification</param>
            <param name="revisionEventTypeAlias">alias of event type</param>
            <param name="eventAdapterService">for nested property handling</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.GetValueAddEventBean(com.espertech.esper.events.EventBean)">
            <summary>For use in executing an insert-into, wraps the given event applying the revision event type, but not yet computing a new revision. </summary>
            <param name="event">to wrap</param>
            <returns>revision event bean</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.OnUpdate(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[],com.espertech.esper.epl.named.NamedWindowRootView,com.espertech.esper.epl.named.NamedWindowIndexRepository)">
            <summary>Upon new events arriving into a named window (new data), and upon events being deleted via on-delete (old data), update child views of the root view and apply to index repository as required (fast deletion). </summary>
            <param name="newData">new events</param>
            <param name="oldData">remove stream</param>
            <param name="namedWindowRootView">the root view</param>
            <param name="indexRepository">delete and select indexes</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.GetSnapshot(com.espertech.esper.core.EPStatementHandle,com.espertech.esper.view.Viewable)">
            <summary>Handle iteration over revision event contents. </summary>
            <param name="createWindowStmtHandle">statement handle for safe iteration</param>
            <param name="parent">the provider of data</param>
            <returns>collection to iterate</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.RemoveOldData(com.espertech.esper.events.EventBean[],com.espertech.esper.epl.named.NamedWindowIndexRepository)">
            <summary>Called each time a data window posts a remove stream event, to indicate that a data window remove an event as it expired according to a specified expiration policy. </summary>
            <param name="oldData">to remove</param>
            <param name="indexRepository">the indexes to update</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorMerge.#ctor(System.String,com.espertech.esper.events.vaevent.RevisionSpec,com.espertech.esper.view.StatementStopService,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="revisionEventTypeAlias">alias</param>
            <param name="spec">specification</param>
            <param name="statementStopService">for stop handling</param>
            <param name="eventAdapterService">for nested property handling</param>
        </member>
        <member name="T:com.espertech.esper.events.property.FastFieldPropertyDescriptor">
            <summary>
            Provides a property descriptor that is obtained through a
            field.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates whether the value of this property should be
            persisted.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Call the accessor method
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Can not override values with the simple accessor model
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value of the property
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.GetHashCode">
            <summary>
            Returns a hahscode for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.#ctor(System.String,CGLib.FastField)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.#ctor(CGLib.FastField)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastFieldPropertyDescriptor.IsReadOnly">
            <summary>
            Indicates whether or not the descriptor is readonly
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastFieldPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of component this property is bound to
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastFieldPropertyDescriptor.PropertyType">
            <summary>
            Gets the return type of the property
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableTypeException">
            <summary>
            Exception indicating a variable type error.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableTypeException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="msg">the exception message.</param>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableNotFoundException">
            <summary>
            Exception indicating a variable does not exists.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableNotFoundException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="msg">the exception message.</param>
        </member>
        <member name="T:com.espertech.esper.epl.parse.EPLTreeWalker">
            <summary>
            Called during the walks of a EPL expression AST tree as specified in the grammar file.
            Constructs filter and view specifications etc.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPLTreeWalker.#ctor(Antlr.Runtime.Tree.ITreeNodeStream,com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.variable.VariableService,System.Int64,com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum)">
            <summary>Ctor. </summary>
            <param name="engineImportService">is required to resolve lib-calls into static methods or configured aggregation functions</param>
            <param name="variableService">for variable access</param>
            <param name="input">is the tree nodes to walk</param>
            <param name="engineTime">is the current engine time</param>
            <param name="defaultStreamSelector">the configuration for which insert or remove streams (or both) to produce</param>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPLTreeWalker.PushStmtContext">
            <summary>Pushes a statement into the stack, creating a new empty statement to fill in. The leave node method for lookup statements pops from the stack. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPLTreeWalker.GetStatementSpec">
            <summary>Returns statement specification. </summary>
            <returns>statement spec.</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPLTreeWalker.SetIsPatternWalk(System.Boolean)">
            <summary>Set to indicate that we are walking a pattern. </summary>
            <param name="isPatternWalk">is true if walking a pattern</param>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPLTreeWalker.LeaveNode(Antlr.Runtime.Tree.ITree)">
            <summary>Leave AST node and process it's type and child nodes. </summary>
            <param name="node">is the node to complete</param>
            <throws>ASTWalkException if the node tree walk operation failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPLTreeWalker.EndPattern">
            <summary>End processing of the AST tree for stand-alone pattern expressions. </summary>
            <throws>ASTWalkException is the walk failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPLTreeWalker.End">
            <summary>End processing of the AST tree, check that expression nodes found their homes. </summary>
            <throws>ASTWalkException is the walk failed</throws>
        </member>
        <member name="P:com.espertech.esper.epl.parse.EPLTreeWalker.StatementSpec">
            <summary>
            Gets the statement specification.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.UnindexedEventTableList">
            <summary>
            Simple table of events without an index, based on a List implementation rather then a set
            since we know there cannot be duplicates (such as a poll returning individual rows).
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTableList.#ctor(System.Collections.Generic.IList{com.espertech.esper.events.EventBean})">
            <summary>Ctor.</summary>
            <param name="eventSet">is a list initializing the table</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTableList.Add(System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean})">
            <summary>
            Adds the specified add events.
            </summary>
            <param name="addEvents">The add events.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTableList.Remove(System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean})">
            <summary>
            Removes the specified remove events.
            </summary>
            <param name="removeEvents">The remove events.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTableList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTableList.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTableList.Clear">
            <summary>
            Clear out index.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.join.table.UnindexedEventTableList.IsEmpty">
            <summary>
            Returns true if the index is empty, or false if not
            </summary>
            <value></value>
            <returns>true for empty index</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinPreloadMethodImpl">
            <summary>
            Implements a method for pre-loading (initializing) join indexes from a filled buffer.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinPreloadMethod">
            <summary>
            Method for preloading events for a given stream onto the stream's indexes, from
            a buffer already associated with a stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinPreloadMethod.PreloadFromBuffer(System.Int32)">
            <summary>Initialize a stream from the stream buffers data.</summary>
            <param name="stream">to initialize and load indexes</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinPreloadMethod.PreloadAggregation(com.espertech.esper.epl.core.ResultSetProcessor)">
            <summary>Initialize the result set process for the purpose of grouping and aggregationfrom the join result set.</summary>
            <param name="resultSetProcessor">is the grouping and aggregation result processing</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinPreloadMethodImpl.#ctor(System.Int32,com.espertech.esper.epl.join.JoinSetComposer)">
            <summary>Ctor.</summary>
            <param name="numStreams">number of streams</param>
            <param name="joinSetComposer">the composer holding stream indexes</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinPreloadMethodImpl.SetBuffer(com.espertech.esper.view.internals.BufferView,System.Int32)">
            <summary>Sets the buffer for a stream to preload events from.</summary>
            <param name="view">buffer</param>
            <param name="stream">the stream number for the buffer</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.MethodPollingViewable">
            <summary>
            Polling-data provider that calls a static method on a class and passed parameters, and wraps the
            results as object events.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.HistoricalEventViewable">
            <summary>
            Interface for views that poll data based on information from other streams.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.ValidatedView">
            <summary>
            Interface for views that require validation against stream event types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ValidatedView.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate the view.
            </summary>
            <param name="streamTypeService">supplies the types of streams against which to validate</param>
            <param name="methodResolutionService">for resolving imports and classes and methods</param>
            <param name="timeProvider">for providing current time</param>
            <param name="variableService">for access to variables</param>
            <throws>ExprValidationException is thrown to indicate an exception in validating the view</throws>
        </member>
        <member name="T:com.espertech.esper.util.StopCallback">
            <summary>
             General pupose callback to Stop a resource and free it's underlying resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.StopCallback.Stop">
            <summary> Stops the underlying resources.</summary>
        </member>
        <member name="M:com.espertech.esper.view.HistoricalEventViewable.Poll(com.espertech.esper.events.EventBean[][],com.espertech.esper.epl.join.PollResultIndexingStrategy)">
            <summary>
            Poll for stored historical or reference data using events per stream andreturing for each event-per-stream row a separate list with eventsrepresenting the poll result.
            </summary>
            <param name="lookupEventsPerStream">is the events per stream where thefirst dimension is a number of rows (often 1 depending on windows used) andthe second dimension is the number of streams participating in a join.</param>
            <param name="indexingStrategy">the strategy to use for converting poll results into a indexed table for fast lookup</param>
            <returns>
            array of lists with one list for each event-per-stream row
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingViewable.#ctor(com.espertech.esper.epl.spec.MethodStreamSpec,System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.db.PollExecStrategy,com.espertech.esper.epl.db.DataCache,com.espertech.esper.events.EventType)">
            <summary>Ctor.</summary>
            <param name="methodStreamSpec">defines class and method names</param>
            <param name="myStreamNumber">is the stream number</param>
            <param name="inputParameters">the input parameter expressions</param>
            <param name="pollExecStrategy">the execution strategy</param>
            <param name="dataCache">the cache to use</param>
            <param name="eventType">the type of event returned</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingViewable.AddView(com.espertech.esper.view.View)">
            <summary> Add a view to the viewable object.</summary>
            <param name="view">to add
            </param>
            <returns> view to add
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingViewable.RemoveView(com.espertech.esper.view.View)">
            <summary> Remove a view.</summary>
            <param name="view">to remove
            </param>
            <returns> true to indicate that the view to be removed existed within this view, false if the view to
            remove could not be found
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingViewable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:com.espertech.esper.epl.core.MethodPollingViewable.Views">
            <summary> Returns all added views.</summary>
            <returns> list of added views
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.MethodPollingViewable.HasViews">
            <summary> Test is there are any views to the Viewable.</summary>
            <returns> true indicating there are child views, false indicating there are no child views
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.MethodPollingViewable.EventType">
            <summary> Provides metadata information about the type of object the event collection contains.</summary>
            <returns> metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.core.UpdateDispatchViewBlockingSpin">
            <summary>
            Convenience view for dispatching view updates received from a parent view to update listeners
            via the dispatch service.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.UpdateDispatchViewBase">
            <summary>
            Convenience view for dispatching view updates received from a parent view to update listeners
            via the dispatch service.
            </summary>
        </member>
        <member name="T:com.espertech.esper.dispatch.Dispatchable">
            <summary>
            Implementations are executed when the DispatchService receives a dispatch invocation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.dispatch.Dispatchable.Execute">
            <summary>
            Execute dispatch.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.UpdateDispatchView">
            <summary>
            Update dispatch view to indicate statement results to listeners.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchView.NewResult(com.espertech.esper.collection.UniformPair{com.espertech.esper.events.EventBean[]})">
            <summary>
            Convenience method that accepts a pair of new and old data as this is the most treated unit.
            </summary>
            <param name="result">is new data (insert stream) and old data (remove stream)</param>
        </member>
        <member name="F:com.espertech.esper.core.UpdateDispatchViewBase.statementResultServiceImpl">
            <summary>Handles result delivery</summary>
        </member>
        <member name="F:com.espertech.esper.core.UpdateDispatchViewBase.dispatchService">
            <summary>Dispatches events to listeners.</summary>
        </member>
        <member name="F:com.espertech.esper.core.UpdateDispatchViewBase.lastIterableEvent">
            <summary>For iteration with patterns.</summary>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchViewBase.CreateLocalData">
            <summary>
            Creates the local data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchViewBase.#ctor(com.espertech.esper.core.StatementResultService,com.espertech.esper.dispatch.DispatchService)">
            <summary>Ctor.</summary>
            <param name="dispatchService">for performing the dispatch</param>
            <param name="statementResultServiceImpl">handles result delivery</param>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchViewBase.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchViewBase.Execute">
            <summary>
            Execute dispatch.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchViewBase.Clear">
            <summary>
            Remove event reference to last event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchViewBase.NewResult(com.espertech.esper.collection.UniformPair{com.espertech.esper.events.EventBean[]})">
            <summary>
            Convenience method that accepts a pair of new and old data as this is the most treated unit.
            </summary>
            <param name="result">is new data (insert stream) and old data (remove stream)</param>
        </member>
        <member name="P:com.espertech.esper.core.UpdateDispatchViewBase.LocalData">
            <summary>
            Gets the local data.
            </summary>
            <value>The local data.</value>
        </member>
        <member name="P:com.espertech.esper.core.UpdateDispatchViewBase.IsDispatchWaiting">
            <summary>Flag to indicate we have registered a dispatch.</summary>
        </member>
        <member name="P:com.espertech.esper.core.UpdateDispatchViewBase.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.core.UpdateDispatchViewBase.ThreadLocalData">
            <summary>
            Thread local data
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchViewBlockingSpin.#ctor(com.espertech.esper.core.StatementResultService,com.espertech.esper.dispatch.DispatchService,System.Int64,com.espertech.esper.timer.TimeSourceService)">
            <summary>Ctor.</summary>
            <param name="dispatchService">for performing the dispatch</param>
            <param name="msecTimeout">timeout for preserving dispatch order through blocking</param>
            <param name="statementResultService">handles result delivery</param>
            <param name="timeSourceService">time source provider</param>
        </member>
        <member name="T:com.espertech.esper.core.ResultDeliveryStrategyObjectArr">
            <summary>
            A result delivery strategy that uses an "update" method that accepts
            a pair of object array array.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.ResultDeliveryStrategy">
            <summary>Strategy for use with <see cref="T:com.espertech.esper.core.StatementResultService"/> to dispatch to a statement's subscriber via method invocations. </summary>
        </member>
        <member name="M:com.espertech.esper.core.ResultDeliveryStrategy.Execute(com.espertech.esper.collection.UniformPair{com.espertech.esper.events.EventBean[]})">
            <summary>Execute the dispatch. </summary>
            <param name="result">is the insert and remove stream to indicate</param>
        </member>
        <member name="M:com.espertech.esper.core.ResultDeliveryStrategyObjectArr.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>Ctor. </summary>
            <param name="subscriber">is the subscriber to deliver to</param>
            <param name="method">the method to invoke</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnClause">
            <summary>
            A clause to delete from a named window based on a triggering event arriving and correlated to the named window events to be deleted.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnClause.CreateOnDelete(System.String,System.String)">
            <summary>Creates an on-delete clause for deleting from a named window.</summary>
            <param name="windowName">is the named window name</param>
            <param name="asNameAlias">is the alias name of the named window</param>
            <returns>on-delete clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnClause.CreateOnSelect(System.String,System.String)">
            <summary>Creates an on-select clause for selecting from a named window.</summary>
            <param name="windowName">is the named window name</param>
            <param name="asNameAlias">is the alias name of the named window</param>
            <returns>on-select clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnClause.CreateOnSet(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Creates an on-set clause for setting variable values.</summary>
            <param name="variableName">
            is the name of the first variable to set, additional ones can be added to the clause itself
            </param>
            <param name="expression">is the assignment expression</param>
            <returns>on-set clause</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.MethodInvocationStream">
            <summary>
            An stream that polls from a method.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.Stream">
            <summary>
            An abstract base class for a named or unnamed stream.
            <para/>
            Named streams provide an as-name for the stream, for example "select * from MyEvents(id=10) as StreamZero".
            Unnamed streams provide no as-name for the stream, for example "select * from MyEvents(id=10)".
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Stream.ToEPLStream(System.IO.StringWriter)">
            <summary>Renders the stream in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.Stream.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="streamName">
            is null for unnamed streams, or a stream name for named streams.
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.Stream.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.Stream.StreamName">
            <summary>Gets or sets the stream name.</summary>
            <returns>name of stream, or null if unnamed.</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MethodInvocationStream.Create(System.String,System.String)">
            <summary>Creates a new method-invocation-based stream without parameters.</summary>
            <param name="className">is the name of the class providing the method</param>
            <param name="methodName">is the name of the public static method</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MethodInvocationStream.Create(System.String,System.String,System.String)">
            <summary>Creates a new method-invocation-based stream without parameters.</summary>
            <param name="className">is the name of the class providing the method</param>
            <param name="methodName">is the name of the public static method</param>
            <param name="optStreamName">
            is the optional as-name of the stream, or null if unnamed
            </param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MethodInvocationStream.#ctor(System.String,System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="className">is the name of the class providing the method</param>
            <param name="methodName">is the name of the public static method</param>
            <param name="optStreamName">
            is the optional as-name of the stream, or null if unnamed
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MethodInvocationStream.AddParameter(com.espertech.esper.client.soda.Expression)">
            <summary>Adds a parameters to the method invocation.</summary>
            <param name="parameterExpression">is the expression to add</param>
            <returns>stream</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.MethodInvocationStream.ClassName">
            <summary>
            Gets or sets the name of the class providing the method.
            </summary>
            <value>The name of the class providing the method.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.MethodInvocationStream.MethodName">
            <summary>
            Gets or sets the name of the static method to invoke in the from-clause.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.MethodInvocationStream.ParameterExpressions">
            <summary>
            Gets or sets the list of expressions that are parameters to the method.
            </summary>
            <value>The list of expressions that are parameters to the method.</value>
        </member>
        <member name="T:com.espertech.esper.view.ViewServiceHelper">
            <summary>
            Utility methods to deal with chains of views, and for merge/group-by views.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceHelper.AddMergeViews(System.Collections.Generic.IList{com.espertech.esper.epl.spec.ViewSpec})">
            <summary> Add merge views for any views in the chain requiring a merge (group view).
            Appends to the list of view specifications passed in one ore more
            new view specifications that represent merge views.
            Merge views have the same parameter list as the (group) view they merge data for.
            </summary>
            <param name="specifications">is a list of view definitions defining the chain of views.
            </param>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceHelper.InstantiateChain(com.espertech.esper.view.Viewable,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory},com.espertech.esper.core.StatementContext)">
            <summary> Instantiate a chain of views.</summary>
            <param name="parentViewable">parent view to add the chain to
            </param>
            <param name="viewFactories">the view factories to use to make each view, or reuse and existing view
            </param>
            <param name="context">dependent services
            </param>
            <returns> chain of views instantiated
            </returns>
            <throws>  ViewProcessingException is throw to indicate an error instantiating the chain </throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceHelper.RemoveChainLeafView(com.espertech.esper.view.Viewable,com.espertech.esper.view.Viewable)">
            <summary> Removes a view from a parent view returning the orphaned parent views in a list.</summary>
            <param name="parentViewable">parent to remove view from
            </param>
            <param name="viewToRemove">view to remove
            </param>
            <returns> chain of orphaned views
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceHelper.MatchExistingViews(com.espertech.esper.view.Viewable,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary> Match the views under the stream to the list of view specications passed in.
            The method changes the view specifications list passed in and removes those
            specifications for which matcing views have been found.
            If none of the views under the stream matches the first view specification passed in,
            the method returns the stream itself and leaves the view specification list unchanged.
            If one view under the stream matches, the view's specification is removed from the list.
            The method will then attempt to determine if any child views of that view also match
            specifications.
            </summary>
            <param name="rootViewable">is the top rootViewable event stream to which all views are attached as child views
            </param>
            <param name="viewFactories">viewFactories is the view specifications for making views
            </param>
            <returns> a pair of (A) the stream if no views matched, or the last child view that matched (B) the full list
            of parent views
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceHelper.InstantiateFactories(System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.spec.ViewSpec},com.espertech.esper.core.StatementContext)">
            <summary>
            Given a list of view specifications obtained from by parsing this method instantiates a list of view factories.
            The view factories are not yet aware of each other after leaving this method (so not yet chained logically).
            They are simply instantiated and assigned view parameters.
            </summary>
            <param name="streamNum">the stream number</param>
            <param name="viewSpecList">the view definition</param>
            <param name="statementContext">statement service context and statement info</param>
            <returns>list of view factories</returns>
            <throws>
            ViewProcessingException if the factory cannot be creates such as for invalid view spec
            </throws>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.CubeImpl">
            <summary>
            Cube implementation derives the cells of the cube from
            a measures list and a <see cref="!:MultidimCube"/>
            containing <see cref="T:com.espertech.esper.view.stat.BaseStatisticsBean"/>.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.Cube">
            <summary> Interface for querying multidimensional data.
            <see cref="T:com.espertech.esper.view.stat.olap.Dimension"/> presents information about the dimensionality of the data.
            Cells are <see cref="T:com.espertech.esper.view.stat.olap.Cell"/> instances.
            The identification of cell in the cube occurs by member values for each dimension.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.Cube.GetOrdinal(System.Collections.Generic.IList{com.espertech.esper.view.stat.olap.DimensionMember})">
            <summary> Given the the members of each dimension that define the intersection, returns the ordinal of a measure.</summary>
            <param name="members">is an array of members within each dimension that intersect and thus define the cell
            position
            </param>
            <returns> ordinal Starts at zero and ends at Cell[].Length - 1. A -1 is returned if the intersection
            could not be determined, such as when a dimension member could not be located.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.Cube.GetMembers(System.Int32)">
            <summary> Returns the member value for each dimension that intersect to identify the cell of the given ordinal.</summary>
            <param name="ordinal">is the cell ordinal, Starting at zero and with a max value of Cell[].Length - 1.
            </param>
            <returns> member values matching the number of dimensions that intersect to identify the cell
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.Cube.Measures">
            <summary> Returns all measures.
            Individual measures can be retrieved directly by indexing into the array of measures.
            A formual for calculating an ordinal for a 3-dimensional cube is as follows:
            ordinal = dimension[0].index + dimension[1].index * dimension[0].size +
            dimension[2].index * dimension[0].size * dimension[1].size;
            </summary>
            <returns> array of measures
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.Cube.Dimensions">
            <summary> Returns dimensions. Implementations have at least 1 dimension and can be n-dimensional.</summary>
            <returns> dimension array
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.CubeImpl.#ctor(com.espertech.esper.view.stat.olap.MultidimCube{com.espertech.esper.view.stat.BaseStatisticsBean},System.String[])">
            <summary> Constructor. Takes a fact cube schema and a derivation strategy to be used when
            a measure cube needs to be derived.
            </summary>
            <param name="cube">contains the fact cube and related into
            </param>
            <param name="measuresToDerive">a list of well-named measures to derive
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.CubeImpl.GetMembers(System.Int32)">
            <summary>
            Returns the member value for each dimension that intersect to identify the cell of the given ordinal.
            </summary>
            <param name="ordinal">is the cell ordinal, Starting at zero and with a max value of Cell[].Length - 1.</param>
            <returns>
            member values matching the number of dimensions that intersect to identify the cell
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.CubeImpl.GetOrdinal(System.Collections.Generic.IList{com.espertech.esper.view.stat.olap.DimensionMember})">
            <summary>
            Given the the members of each dimension that define the intersection, returns the ordinal of a measure.
            </summary>
            <param name="members">is an array of members within each dimension that intersect and thus define the cell
            position</param>
            <returns>
            ordinal Starts at zero and ends at Cell[].Length - 1. A -1 is returned if the intersection
            could not be determined, such as when a dimension member could not be located.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.CubeImpl.Derive">
            <summary>
            Derive from the fact cube the measure cube using the given strategy.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.CubeImpl.determineIntersections">
            <summary> Compile a map of ordinal to member array for fast lookup of the dimension members defining
            an intersection based on the measure array ordinal.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.CubeImpl.findMember(com.espertech.esper.view.stat.olap.DimensionMember[],com.espertech.esper.view.stat.olap.DimensionMember)">
            <summary> Find a dimensionMemberionMember reference in the array of members returning the index of the dimensionMemberionMember in the dimension.</summary>
            <param name="members">are members in a dimension
            </param>
            <param name="dimensionMember">is the dimensionMember to find
            </param>
            <returns> index of dimensionMember in dimension or -1 if not found
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.CubeImpl.Dimensions">
            <summary>
            Returns dimensions. Implementations have at least 1 dimension and can be n-dimensional.
            </summary>
            <value></value>
            <returns> dimension array
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.CubeImpl.Measures">
            <summary>
            Returns all measures.
            Individual measures can be retrieved directly by indexing into the array of measures.
            A formual for calculating an ordinal for a 3-dimensional cube is as follows:
            ordinal = dimension[0].index + dimension[1].index * dimension[0].size +
            dimension[2].index * dimension[0].size * dimension[1].size;
            </summary>
            <value></value>
            <returns> array of measures
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.FrequencyParameter">
            <summary>
            Encapsulates a parameter specifying a frequency, i.e. '* / 5'.
            </summary>
        </member>
        <member name="T:com.espertech.esper.type.NumberSetParameter">
            <summary>
            Interface to generate a set of integers from parameters that include ranges, lists and frequencies.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.NumberSetParameter.IsWildcard(System.Int32,System.Int32)">
            <summary> Returns true if all values between and including min and max are supplied by the parameter.</summary>
            <param name="min">lower end of range
            </param>
            <param name="max">upper end of range
            </param>
            <returns> true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.NumberSetParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary> Return a set of int values representing the value of the parameter for the given range.</summary>
            <param name="min">lower end of range
            </param>
            <param name="max">upper end of range
            </param>
            <returns> set of integer
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.FrequencyParameter.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="frequency">divisor specifying frequency
            </param>
        </member>
        <member name="M:com.espertech.esper.type.FrequencyParameter.IsWildcard(System.Int32,System.Int32)">
            <summary>
            Returns true if all values between and including min and max are supplied by the parameter.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>
            true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.FrequencyParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary>
            Return a set of int values representing the value of the parameter for the given range.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>set of integer</returns>
        </member>
        <member name="P:com.espertech.esper.type.FrequencyParameter.Frequency">
            <summary> Returns frequency.</summary>
            <returns> frequency divisor
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.BitWiseOpEnum">
            <summary>
            Enum representing relational types of operation.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.BitWiseOpEnum.BAND">
            <summary>
            Bitwise and.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.BitWiseOpEnum.BOR">
            <summary>
            Bitwise or.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.BitWiseOpEnum.BXOR">
            <summary>
            Bitwise xor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.type.BitWiseOpEnum"/> class.
            </summary>
            <param name="expressionText">The expression text.</param>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.type.BitWiseOpEnum"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.GetComputer(System.Type)">
            <summary>Returns number or bool computation for the target coercion type.</summary>
            <param name="coercedType">target type</param>
            <returns>number cruncher</returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BAndByte(System.Object,System.Object)">
            <summary>
            Bit Wise And.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BOrByte(System.Object,System.Object)">
            <summary>
            Bit Wise Or.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BXorByte(System.Object,System.Object)">
            <summary>
            Bit Wise Xor.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BAndShort(System.Object,System.Object)">
            <summary>
            Bit Wise And.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BOrShort(System.Object,System.Object)">
            <summary>
            Bit Wise Or.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BXorShort(System.Object,System.Object)">
            <summary>
            Bit Wise Xor.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BAndInt(System.Object,System.Object)">
            <summary>
            Bit Wise And.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BOrInt(System.Object,System.Object)">
            <summary>
            Bit Wise Or.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BXorInt(System.Object,System.Object)">
            <summary>
            Bit Wise Xor.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BAndLong(System.Object,System.Object)">
            <summary>
            Bit Wise And.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BOrLong(System.Object,System.Object)">
            <summary>
            Bit Wise Or.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BXorLong(System.Object,System.Object)">
            <summary>
            Bit Wise Xor.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BAndBoolean(System.Object,System.Object)">
            <summary>
            Bit Wise And.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BOrBoolean(System.Object,System.Object)">
            <summary>
            Bit Wise Or.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnum.BXorBoolean(System.Object,System.Object)">
            <summary>
            Bit Wise Xor.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.type.BitWiseOpEnum.ExpressionText">
            <summary>
            Gets the operator as an expression text.
            </summary>
            <value>The expression text.</value>
        </member>
        <member name="P:com.espertech.esper.type.BitWiseOpEnum.ComputeDescription">
            <summary>Returns string rendering of enum.</summary>
            <returns>bitwise operator string</returns>
        </member>
        <member name="T:com.espertech.esper.type.BitWiseOpEnum.Computer">
            <summary>Computer for relational op.</summary>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleCalendar">
            <summary>
            Calendar class for use in scheduling, specifically for use in computing the next invocation time.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternObjectHelper">
            <summary>
            Helper producing a repository of built-in pattern objects.
            </summary>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternObjectHelper.BuiltinPatternObjects">
            <summary>Returns the built-in pattern objects.</summary>
            <returns>collection of built-in pattern objects.</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.MatchedEventMapImpl">
            <summary>
            Collection for internal use similar to the MatchedEventMap class in the client package
            that holds the one or more events that could match any defined event expressions.
            The optional tag value supplied when an event expression is created is used as a key for placing
            matching event objects into this collection.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.MatchedEventMap">
            <summary> Collection for internal use similar to the MatchedEventMap class in the client package
            that holds the one or more events that could match any defined event expressions.
            The optional tag value supplied when an event expression is created is used as a key for placing
            matching event objects into this collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMap.Add(System.String,com.espertech.esper.events.EventBean)">
            <summary>
            Add an event to the collection identified by the given tag.
            </summary>
            <param name="tag">is an identifier to retrieve the event from</param>
            <param name="eventBean">is the event object to be added</param>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMap.GetMatchingEvent(System.String)">
            <summary> Returns a single event instance given the tag identifier, or null if the tag could not be located.</summary>
            <param name="tag">is the identifier to look for
            </param>
            <returns> event instances for the tag
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMap.ShallowCopy">
            <summary> Make a shallow copy of this collection.</summary>
            <returns> shallow copy
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMap.Merge(com.espertech.esper.pattern.MatchedEventMap)">
            <summary> Merge the state of an other match event structure into this one by adding all entries
            within the MatchedEventMap to this match event.
            </summary>
            <param name="other">is the other instance to merge in.
            </param>
        </member>
        <member name="P:com.espertech.esper.pattern.MatchedEventMap.MatchingEvents">
            <summary> Returns a Hashtable containing the events where the key is the event tag string and the value is the event
            instance.
            </summary>
            <returns> Hashtable containing event instances
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMapImpl.#ctor">
            <summary>
            Constructor creates an empty collection of events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMapImpl.Add(System.String,com.espertech.esper.events.EventBean)">
            <summary>
            Add an event to the collection identified by the given tag.
            </summary>
            <param name="tag">is an identifier to retrieve the event from</param>
            <param name="_event">is the event object to be added</param>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMapImpl.GetMatchingEvent(System.String)">
            <summary>
            Returns a single event instance given the tag identifier, or null if the tag could not be located.
            </summary>
            <param name="tag">is the identifier to look for</param>
            <returns>event instances for the tag</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMapImpl.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMapImpl.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMapImpl.ShallowCopy">
            <summary>Make a shallow copy of this collection.</summary>
            <returns>shallow copy</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMapImpl.Merge(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Merge the state of an other match event structure into this one by adding all entries
            within the MatchedEventMap to this match event.
            </summary>
            <param name="other">is the other instance to merge in.</param>
        </member>
        <member name="P:com.espertech.esper.pattern.MatchedEventMapImpl.MatchingEvents">
            <summary>
            Returns a map containing the events where the key is the event tag string and the value is the event
            instance.
            </summary>
            <returns>Hashtable containing event instances</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalNotStateNode">
            <summary> This class contains the state of an 'not' operator in the evaluation state tree.
            The not operator inverts the truth of the subexpression under it. It defaults to being true rather than
            being false at Startup. True at Startup means it will generate an event on newState such that parent expressions
            may turn true. It turns permenantly false when it receives an event from a subexpression and the subexpression
            quitted. It indicates the false state via an evaluateFalse call on its parent evaluator.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.Evaluator">
            <summary> Interface for nodes in an expression evaluation state tree that are being informed by a child that the
            event expression fragments (subtrees) which the child represents has turned true (evaluateTrue method)
            or false (evaluateFalse).
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.Evaluator.EvaluateTrue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.EvalStateNode,System.Boolean)">
            <summary> Indicate a change in truth value to true.</summary>
            <param name="matchEvent">is the container for events that caused the change in truth value
            </param>
            <param name="fromNode">is the node that indicates the change
            </param>
            <param name="isQuitted">is an indication of whether the node continues listenening or Stops listening
            </param>
        </member>
        <member name="M:com.espertech.esper.pattern.Evaluator.EvaluateFalse(com.espertech.esper.pattern.EvalStateNode)">
            <summary> Indicate a change in truth value to false.</summary>
            <param name="fromNode">is the node that indicates the change
            </param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNotStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalNotNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext)">
            <summary> Constructor.</summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value
            </param>
            <param name="evalNotNode">the factory node associated to the state
            </param>
            <param name="beginState">contains the events that make up prior matches
            </param>
            <param name="context">contains handles to services required
            </param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNotStateNode.Start">
            <summary>
            Starts the event expression or an instance of it.
            Child classes are expected to initialize and Start any event listeners
            or schedule any time-based callbacks as needed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNotStateNode.EvaluateFalse(com.espertech.esper.pattern.EvalStateNode)">
            <summary>
            Indicate a change in truth value to false.
            </summary>
            <param name="fromNode">is the node that indicates the change</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNotStateNode.EvaluateTrue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.EvalStateNode,System.Boolean)">
            <summary>
            Indicate a change in truth value to true.
            </summary>
            <param name="matchEvent">is the container for events that caused the change in truth value</param>
            <param name="fromNode">is the node that indicates the change</param>
            <param name="isQuitted">is an indication of whether the node continues listenening or Stops listening</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNotStateNode.Quit">
            <summary>
            Stops the event expression or an instance of it. Child classes are expected to free resources
            and Stop any event listeners or remove any time-based callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNotStateNode.Accept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Accept a visitor. Child classes are expected to invoke the visit method on the visitor instance
            passed in.
            </summary>
            <param name="visitor">on which the visit method is invoked by each node</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNotStateNode.ChildrenAccept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Pass the visitor to all child nodes.
            </summary>
            <param name="visitor">is the instance to be passed to all child nodes</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNotStateNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalAndNode">
            <summary>
            This class represents an 'and' operator in the evaluation tree representing an event expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndNode.NewState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>
            Create the evaluation state node containing the truth value state for each operator in an
            event expression.
            </summary>
            <param name="parentNode">is the parent evaluator node that this node indicates a change in truth value to</param>
            <param name="beginState">is the container for events that makes up the Start state</param>
            <param name="context">is the handle to services required for evaluation</param>
            <param name="stateNodeId">is the new state object's identifier</param>
            <returns>
            state node containing the truth value state for the operator
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexNotEquals">
            <summary>
            Index for filter parameter constants to match using the equals (=) operator.
            The implementation is based on a regular HashMap.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexPropBase">
            <summary>
            Each implementation of this abstract class represents an index of filter parameter constants supplied in filter
            parameters in filter specifications that feature the same event property and operator.
            <para>
            For example, a filter with a parameter of "count EQUALS 10" would be represented as index
            for a property named "count" and for a filter operator typed "EQUALS". The index
            would store a value of "10" in its internal structure.
            </para>
            <para>
            Implementations make sure that the type of the Object constant in get and put calls matches the event property type.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexPropBase.#ctor(System.String,com.espertech.esper.filter.FilterOperator,com.espertech.esper.events.EventType)">
            <summary>Constructor.</summary>
            <param name="propertyName">
            is the name of the event property the index goes against
            </param>
            <param name="filterOperator">is the type of comparison performed.</param>
            <param name="eventType">is the event type the index will handle.</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexPropBase.ToString">
            <summary>
            Toes the string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexPropBase.PropertyName">
            <summary>
            Returns the name of the property to get the value for to match against the values
            contained in the index.
            </summary>
            <returns>event property name</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexPropBase.Getter">
            <summary>Returns getter for property.</summary>
            <returns>property value getter</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexPropBase.PropertyBoxedType">
            <summary>Returns boxed property type.</summary>
            <returns>boxed property type</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexNotEquals.#ctor(System.String,com.espertech.esper.events.EventType)">
            <summary> Constructs the index for exact matches.</summary>
            <param name="propertyName">is the name of the event property
            </param>
            <param name="eventType">describes the event type and is used to obtain a getter instance for the property
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexNotEquals.Remove(System.Object)">
            <summary>
            Remove the event evaluation instance for the given constant. Returns true if
            the constant was found, or false if not.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock method must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">is the value supplied in the filter paremeter</param>
            <returns>
            true if found and removed, false if not found
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexNotEquals.MatchEvent(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Matches the event.
            </summary>
            <param name="eventBean">The event bean.</param>
            <param name="matches">The matches.</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexNotEquals.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:com.espertech.esper.filter.EventEvaluator"/> with the specified filter constant.
            Returns null if no entry found for the constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock method must supply a lock for this purpose.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexNotEquals.Count">
            <summary>
            Return the number of distinct filter parameter constants stored.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock method must supply a lock for this purpose.
            </summary>
            <value></value>
            <returns> Number of entries in index
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexNotEquals.ReadWriteLock">
            <summary>
            Supplies the lock for protected access.
            </summary>
            <value></value>
            <returns> lock
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.SimpleXMLEventType">
            <summary>
            Optimistic try to resolve the property string into an appropiate xPath,
            and use it as getter.
            Mapped and Indexed properties supported.
            Because no type information is given, all property are resolved to String.
            No namespace support.
            Cannot access to xml attributes, only elements content.
            <para>
            If an xsd is present, then use <see cref="T:com.espertech.esper.events.xml.SchemaXMLEventType"/>
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.xml.BaseXMLEventType">
            <summary> Base class for XMLEventTypes.
            Using this class as EventType only allow preconfigured properties 
            (normally via <see cref="T:com.espertech.esper.events.xml.XPathPropertyGetter"/> ).
            
            For "on the fly" property resolvers, use either
            <see cref="T:com.espertech.esper.events.xml.SimpleXMLEventType"/> or
            <see cref="T:com.espertech.esper.events.xml.SchemaXMLEventType"/>
            
            </summary>
            <author>  pablo
            </author>
        </member>
        <member name="T:com.espertech.esper.events.BaseConfigurableEventType">
            <summary> EventType than can be supplied with a preconfigured list of properties getters (aka. explicit properties).</summary>
            <author>  pablo
            </author>
        </member>
        <member name="T:com.espertech.esper.events.EventType">
            <summary>
            This interface provides metadata on events.
            <para>
            The interface exposes events as organizations of named values.
            The contract is that any event in the system must have a name-based
            way of accessing sub-data within its event type. A simple example is
            an object: the names can be property names, and those properties can
            have still more properties beneath them. Another example is a Dictionary
            structure. Here string names can refer to data objects.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventType.GetPropertyType(System.String)">
            <summary>
            Get the type of an event property as returned by the "getter" method for that property. Returns
            unboxed (such as 'typeof(int)') as well as boxed (typeof(int?)) type.
            Returns null if the property name is not valid.
            </summary>
            <param name="property">is the property name</param>
            <returns>
            type of the property, the unboxed or the boxed type.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventType.GetGetter(System.String)">
            <summary>
            Get the getter for a specified event property. Returns null if the property name is not valid.
            </summary>
            <param name="property">is the property name</param>
            <returns>
            a getter that can be used to obtain property values for event instances of the same event type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventType.IsProperty(System.String)">
            <summary>
            Check that the given property name is valid for this event type, ie. that is exists in the event type.
            </summary>
            <param name="property">is the property to check</param>
            <returns>true if exists, false if not</returns>
        </member>
        <member name="P:com.espertech.esper.events.EventType.UnderlyingType">
            <summary>
            Get the class that represents the type of the event type.
            Returns a bean event class if the schema represents a bean event type.
            Returns Map if the schema represents a collection of values in a Map.
            </summary>
            <value>The type of the underlying.</value>
            <returns> type of the event object
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.EventType.PropertyNames">
            <summary>
            Get all valid property names for the event type.
            </summary>
            <value>The property names.</value>
            <returns> A string array containing the property names of this typed event data object.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.EventType.SuperTypes">
            <summary>
            Returns an array of event types that are super to this event type, from which this event type 
            inherited event properties.  For object instances underlying the event this method returns the
            event types for all superclasses extended by the object and all interfaces implemented by the
            object.
            </summary>
            <returns>an array of event types</returns>
        </member>
        <member name="P:com.espertech.esper.events.EventType.DeepSuperTypes">
            <summary>
            Returns enumerable over all super types to event type, going up the hierarchy and including
            all interfaces (and their extended interfaces) and superclasses as EventType instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.#ctor(System.Type)">
            <summary> Ctor.</summary>
            <param name="underlyngType">is the underlying type returned by the event type
            </param>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.SetExplicitProperties(com.espertech.esper.compat.Map{System.String,com.espertech.esper.events.TypedEventPropertyGetter})">
            <summary> Sets explicit properties using a map of event property name and getter instance for each property.</summary>
            <param name="explicitProperties">is the preconfigured properties not implicit in the event type
            </param>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.GetPropertyType(System.String)">
            <summary>
            Get the type of an event property as returned by the "getter" method for that property. Returns
            unboxed (such as 'typeof(int)') as well as boxed (int?) type.
            Returns null if the property name is not valid.
            </summary>
            <param name="property">is the property name</param>
            <returns>
            type of the property, the unboxed or the boxed type.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.GetGetter(System.String)">
            <summary>
            Get the getter for a specified event property. Returns null if the property name is not valid.
            </summary>
            <param name="property">is the property name</param>
            <returns>
            a getter that can be used to obtain property values for event instances of the same event type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.IsProperty(System.String)">
            <summary>
            Check that the given property name is valid for this event type, ie. that is exists in the event type.
            </summary>
            <param name="property">is the property to check</param>
            <returns>true if exists, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.DoListPropertyNames">
            <summary> Subclasses must implement this to supply a list of valid property names.</summary>
            <returns> list of properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.DoResolvePropertyGetter(System.String)">
            <summary> Subclasses must implement this and supply a getter to a given property.</summary>
            <param name="property">is the property name
            </param>
            <returns> getter for property
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.DoResolvePropertyType(System.String)">
            <summary> Subclasses must implement this and return a type for a property.</summary>
            <param name="property">is the property name
            </param>
            <returns> property type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.BaseConfigurableEventType.UnderlyingType">
            <summary>
            Get the class that represents the type of the event type.
            Returns a bean event class if the schema represents a bean event type.
            Returns Map if the schema represents a collection of values in a Map.
            </summary>
            <value>The type of the underlying.</value>
            <returns> type of the event object
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.BaseConfigurableEventType.PropertyNames">
            <summary>
            Get all valid property names for the event type.
            </summary>
            <value>The property names.</value>
            <returns> A string array containing the property names of this typed event data object.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.BaseConfigurableEventType.SuperTypes">
            <summary>
            Returns an array of event types that are super to this event type, from which this event type
            inherited event properties.  For bean instances underlying the event this method returns the
            event types for all superclasses extended by the bean and all interfaces implemented by the bean.
            </summary>
            <value></value>
            <returns>an array of event types</returns>
        </member>
        <member name="P:com.espertech.esper.events.BaseConfigurableEventType.DeepSuperTypes">
            <summary>
            Returns enumerable over all super types to event type, going up the hierarchy and including
            all interfaces (and their extended interfaces) and superclasses as EventType instances.
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.events.xml.BaseXMLEventType.#ctor(com.espertech.esper.client.ConfigurationEventTypeXMLDOM)">
            <summary> Ctor.</summary>
            <param name="configurationEventTypeXMLDOM">the XML DOM configuration such as root element and schema names
            </param>
        </member>
        <member name="M:com.espertech.esper.events.xml.BaseXMLEventType.SetExplicitProperties(System.Collections.Generic.ICollection{com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc})">
            <summary>
            Set the preconfigured event properties resolved by XPath expression.
            </summary>
            <param name="explicitProperties">are preconfigured event properties
            </param>
        </member>
        <member name="M:com.espertech.esper.events.xml.BaseXMLEventType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.BaseXMLEventType.RootElementName">
            <summary>
            Returns the name of the root element.
            </summary>
            <value>The name of the root element.</value>
            <returns> root element name
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.BaseXMLEventType.NamespaceManager">
            <summary>
            Sets the namespace context for use in XPath expression resolution.
            </summary>
            <value>The namespace manager.</value>
        </member>
        <member name="P:com.espertech.esper.events.xml.BaseXMLEventType.ConfigurationEventTypeXMLDOM">
            <summary>
            Gets the configuration XML for the XML type.
            </summary>
            <value>The configuration XML for the XML type.</value>
        </member>
        <member name="P:com.espertech.esper.events.xml.BaseXMLEventType.SuperTypes">
            <summary>
            Returns an array of event types that are super to this event type, from which this event type
            inherited event properties.  For bean instances underlying the event this method returns the
            event types for all superclasses extended by the bean and all interfaces implemented by the bean.
            </summary>
            <value></value>
            <returns>an array of event types</returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.BaseXMLEventType.DeepSuperTypes">
            <summary>
            Returns enumerable over all super types to event type, going up the hierarchy and including
            all interfaces (and their extended interfaces) and superclasses as EventType instances.
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.events.xml.SimpleXMLEventType.#ctor(com.espertech.esper.client.ConfigurationEventTypeXMLDOM)">
            <summary> Ctor.</summary>
            <param name="configurationEventTypeXMLDOM">configures the event type
            </param>
        </member>
        <member name="T:com.espertech.esper.events.xml.SchemaXMLEventType">
            <summary>
            EventType for xml events that have a Schema.
            Mapped and Indexed properties are supported.
            All property types resolved via the declared xsd types.
            Can access attributes.
            Validates the property string at construction time. 
            </summary>
            <author> pablo</author>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaXMLEventType.#ctor(com.espertech.esper.client.ConfigurationEventTypeXMLDOM)">
            <summary>
            Ctor.
            </summary>
            <param name="configurationEventTypeXMLDOM">configuration for type</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaXMLEventType.readSchema(System.String)">
            <summary>
            Reads an XML schema from the named resource.
            </summary>
            <param name="schemaResource">Name of a file containing the schema</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.SchemaUtil">
            <summary> Utility class for querying schema information.</summary>
            <author>  pablo
            </author>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaUtil.SimpleTypeToQName(System.Xml.Schema.XmlSchemaSimpleType)">
            <summary>
            Returns the XPathConstants type for a given Xerces type definition.
            </summary>
            <param name="definition">the schema element definition.</param>
            <returns>XPathConstants type</returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaUtil.FindRootElement(System.Xml.Schema.XmlSchema,System.String,System.String)">
            <summary>
            Returns the root element for a given schema given a root element name and namespace.
            </summary>
            <param name="schema">is the schema to interrogate</param>
            <param name="namespace_">The namespace_.</param>
            <param name="elementName">is the name of the root element</param>
            <returns>declaration of root element</returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaUtil.FindPropertyMapping(System.Xml.Schema.XmlSchemaComplexType,System.String)">
            <summary>
            Finds an apropiate definition for the given property, Starting at the
            given definition.  First look if the property is an attribute. If not,
            look at child element definitions.
            </summary>
            <param name="def">the definition to Start looking</param>
            <param name="property">the property to look for</param>
            <returns>
            XmlSchemaAttribute if the property is an attribute,
            XmlSchemaElement if is an element,
            or null if not found in schema
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewDirect">
            <summary>
            Output process view that does not enforce any output policies and may simply
            hand over events to child views.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewDirect.#ctor(com.espertech.esper.epl.core.ResultSetProcessor,com.espertech.esper.epl.view.OutputStrategy,System.Boolean,com.espertech.esper.core.StatementResultService)">
            <summary>Ctor. </summary>
            <param name="resultSetProcessor">is processing the result set for publishing it out</param>
            <param name="outputStrategy">is the execution of output to sub-views or natively</param>
            <param name="isInsertInto">is true if the statement is a insert-into</param>
            <param name="statementResultService">service for managing listener/subscribers and result generation needs</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewDirect.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>The update method is called if the view does not participate in a join. </summary>
            <param name="newData">new events</param>
            <param name="oldData">old events</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewDirect.Process(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary>This process (update) method is for participation in a join. </summary>
            <param name="newEvents">new events</param>
            <param name="oldEvents">old events</param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PatternStreamSpecRaw">
            <summary>
            Pattern specification in unvalidated, unoptimized form.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StreamSpecRaw">
            <summary>
            An uncompiled, unoptimize for of stream specification created by a parser.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StreamSpecRaw.Compile(com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.pattern.PatternObjectResolutionService,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.named.NamedWindowService,com.espertech.esper.events.vaevent.ValueAddEventService,com.espertech.esper.epl.variable.VariableService,System.String,System.Collections.Generic.IList{System.Uri})">
            <summary>Compiles a raw stream specification consisting event type information and filter expressionsto an validated, optimized form for use with filter service</summary>
            <param name="eventAdapterService">supplies type information</param>
            <param name="methodResolutionService">for resolving imports</param>
            <param name="patternObjectResolutionService">for resolving pattern objects</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="namedWindowService">is the service managing named windows</param>
            <param name="variableService">provides variable values</param>
            <param name="engineURI">the engine URI</param>
            <param name="optionalPlugInTypeResolutionURIS">is URIs for resolving the event name against plug-inn event representations, if any</param>
            <param name="valueAddEventService">service that handles update events</param>
            <returns>compiled stream</returns>
            <throws>ExprValidationException to indicate validation errors</throws>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PatternStreamSpecRaw.#ctor(com.espertech.esper.pattern.EvalNode,System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},System.String,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="evalNode">pattern evaluation node representing pattern statement</param>
            <param name="viewSpecs">specifies what view to use to derive data</param>
            <param name="optionalStreamName">stream name, or null if none supplied</param>
            <param name="isUnidirectional">true to indicate a unidirectional stream in a join, applicable for joins</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PatternStreamSpecRaw.Compile(com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.pattern.PatternObjectResolutionService,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.named.NamedWindowService,com.espertech.esper.events.vaevent.ValueAddEventService,com.espertech.esper.epl.variable.VariableService,System.String,System.Collections.Generic.IList{System.Uri})">
            <summary>
            Compiles a raw stream specification consisting event type information and filter expressionsto an validated, optimized form for use with filter service
            </summary>
            <param name="eventAdapterService">supplies type information</param>
            <param name="methodResolutionService">for resolving imports</param>
            <param name="patternObjectResolutionService">for resolving pattern objects</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="namedWindowService">is the service managing named windows</param>
            <param name="valueAddEventService">The value add event service.</param>
            <param name="variableService">provides variable values</param>
            <param name="engineURI">The engine URI.</param>
            <param name="plugInTypeResolutionURIs">The plugin type resolution Uri</param>
            <returns>compiled stream</returns>
            <throws>ExprValidationException to indicate validation errors</throws>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PatternStreamSpecRaw.EvalNode">
            <summary>
            Returns the pattern expression evaluation node for the top pattern operator.
            </summary>
            <returns>parent pattern expression node</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PatternStreamSpecCompiled">
            <summary>
            Specification for building an event stream out of a pattern statement and views staggered onto the
            pattern statement.
            <para>
            The pattern statement is represented by the top EvalNode evaluation node.
            A pattern statement contains tagged events (i.e. a=A -&gt; b=B).
            Thus the resulting event type is has properties "a" and "b" of the type of A and B.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PatternStreamSpecCompiled.#ctor(com.espertech.esper.pattern.EvalNode,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.events.EventType,System.String}},System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},System.String,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="evalNode">pattern evaluation node representing pattern statement</param>
            <param name="taggedEventTypes">event tags and their types as specified in the pattern, copied to allow original collection to change</param>
            <param name="viewSpecs">specifies what view to use to derive data</param>
            <param name="optionalStreamName">stream name, or null if none supplied</param>
            <param name="isUnidirectional">if set to <c>true</c> [is unidirectional].</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PatternStreamSpecCompiled.EvalNode">
            <summary>
            Returns the pattern expression evaluation node for the top pattern operator.
            </summary>
            <returns>parent pattern expression node</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PatternStreamSpecCompiled.TaggedEventTypes">
            <summary>Returns event types tagged in the pattern expression.</summary>
            <returns>map of tag and event type tagged in pattern expression</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PatternObserverSpec">
            <summary>
            Specification for a pattern observer object consists of a namespace, name and object parameters.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.ObjectSpec">
            <summary>
            Encapsulates the information required to specify an object identification and construction.
            <para>
            Abstract class for use with any object, such as views, pattern guards or pattern observers.
            </para>
            <para>
            A object construction specification can be equal to another specification. This information can be
            important to determine reuse of any object.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.ObjectSpec.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>Constructor.</summary>
            <param name="_namespace">if the namespace the object is in</param>
            <param name="objectName">is the name of the object</param>
            <param name="objectParameters">
            is a list of values representing the object parameters
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.ObjectSpec.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.ObjectSpec.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.ObjectSpec.ObjectNamespace">
            <summary>Returns namespace for view object.</summary>
            <returns>namespace</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.ObjectSpec.ObjectName">
            <summary>Returns the object name.</summary>
            <returns>object name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.ObjectSpec.ObjectParameters">
            <summary>Returns the list of object parameters.</summary>
            <returns>list of values representing object parameters</returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PatternObserverSpec.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>Constructor.</summary>
            <param name="_namespace">if the namespace the object is in</param>
            <param name="objectName">is the name of the object</param>
            <param name="objectParameters">
            is a list of values representing the object parameters
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinSetComposerImpl">
            <summary> Implements the function to determine a join result set using tables/indexes and query strategy
            instances for each stream.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinSetComposer">
            <summary> Interface for populating a join tuple result set from new data and old data for each stream.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetComposer.Init(com.espertech.esper.events.EventBean[][])">
            <summary>
            Provides initialization events per stream to composer to populate join indexes, if required
            </summary>
            <param name="eventsPerStream">is an array of events for each stream, with null elements to indicate no events for a stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetComposer.Join(com.espertech.esper.events.EventBean[][],com.espertech.esper.events.EventBean[][])">
            <summary> Return join tuple result set from new data and old data for each stream.</summary>
            <param name="newDataPerStream">for each stream the event array (can be null).
            </param>
            <param name="oldDataPerStream">for each stream the event array (can be null).
            </param>
            <returns> join tuples
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetComposer.StaticJoin">
            <summary>For use in iteration over join statements, this must build a join tuple result set fromall events in indexes, executing query strategies for each.</summary>
            <returns>static join result</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetComposer.Destroy">
            <summary>Destroy stateful index tables, if any.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetComposerImpl.#ctor(com.espertech.esper.epl.join.table.EventTable[][],com.espertech.esper.epl.join.QueryStrategy[],com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum)">
            <summary> Ctor.</summary>
            <param name="repositories">for each stream an array of (indexed/unindexed) tables for lookup.
            </param>
            <param name="queryStrategies">for each stream a strategy to execute the join
            </param>
            <param name="selectStreamSelectorEnum">indicator for rstream or istream-only, for optimization
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetComposerImpl.Init(com.espertech.esper.events.EventBean[][])">
            <summary>
            Provides initialization events per stream to composer to populate join indexes, if required
            </summary>
            <param name="eventsPerStream">is an array of events for each stream, with null elements to indicate no events for a stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetComposerImpl.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetComposerImpl.Join(com.espertech.esper.events.EventBean[][],com.espertech.esper.events.EventBean[][])">
            <summary>
            Return join tuple result set from new data and old data for each stream.
            </summary>
            <param name="newDataPerStream">for each stream the event array (can be null).</param>
            <param name="oldDataPerStream">for each stream the event array (can be null).</param>
            <returns>join tuples</returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.JoinSetComposerImpl.Tables">
            <summary> Returns tables.</summary>
            <returns> tables for stream.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.JoinSetComposerImpl.QueryStrategies">
            <summary> Returns query strategies.</summary>
            <returns> query strategies
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.BranchOptionalAssemblyNode">
            <summary>
            Assembly node for an event stream that is a branch with a single optional child node below it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchOptionalAssemblyNode.#ctor(System.Int32,System.Int32)">
            <summary> Ctor.</summary>
            <param name="streamNum">is the stream number
            </param>
            <param name="numStreams">is the number of streams
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchOptionalAssemblyNode.Init(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Provides results to assembly nodes for initialization.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchOptionalAssemblyNode.Process(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Process results.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchOptionalAssemblyNode.Result(com.espertech.esper.events.EventBean[],System.Int32,com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.rep.Node)">
            <summary>
            Publish a result row.
            </summary>
            <param name="row">is the result to publish</param>
            <param name="fromStreamNum">is the originitor that publishes the row</param>
            <param name="myEvent">is optional and is the event that led to the row result</param>
            <param name="myNode">is optional and is the result node of the event that led to the row result</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchOptionalAssemblyNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Output this node using writer, not outputting child nodes.
            </summary>
            <param name="indentWriter">to use for output</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchOptionalAssemblyNode.processEvent(com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.rep.Node)">
            <summary>
            Processes the event.
            </summary>
            <param name="_event">The _event.</param>
            <param name="currentNode">The current node.</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprRegexpNode">
            <summary>
            Represents the regexp-clause in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRegexpNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="not">is true if the it's a "not regexp" expression, of false for regular regexp
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRegexpNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">delegates for view resources to expression nodes</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRegexpNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData"></param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRegexpNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="node_">the node to compare against</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRegexpNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRegexpNode.IsConstantResult">
            <summary>
            </summary>
            <value></value>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            @return true for constant evaluation value, false for non-constant evaluation value
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRegexpNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprMathNode">
            <summary>
            Represents a simple Math (+/-/divide/*) in a filter expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMathNode.#ctor(com.espertech.esper.type.MathArithTypeEnum)">
            <summary> Ctor.</summary>
            <param name="mathArithTypeEnum">type of math
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMathNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMathNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMathNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMathNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMathNode.MathArithTypeEnum">
            <summary>
            Gets the math arithetic type enum.
            </summary>
            <value>The math arith type enum.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMathNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabaseDriverConnFactory">
            <summary>
            Database connection factory using DbProviderFactory to obtain connections.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabaseConnectionFactory">
            <summary>
             Factory for new database connections.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabaseConnectionFactory.Driver">
            <summary>
            Gets the database driver.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseDriverConnFactory.#ctor(com.espertech.esper.client.DbDriverFactoryConnection,com.espertech.esper.client.ConnectionSettings)">
            <summary>
            Ctor.
            </summary>
            <param name="dbConfig">is the database provider configuration</param>
            <param name="connectionSettings">are connection-level settings</param>
            <throws>  DatabaseConfigException thrown if the driver class cannot be loaded </throws>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabaseDriverConnFactory.Driver">
            <summary>
            Gets the database driver.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabaseConfigException">
            <summary>
            Exception to indicate that a stream name could not be resolved.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="msg">message
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigException.#ctor(System.String,System.Exception)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
            <param name="cause">cause is the inner exception
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.core.StreamNotFoundException">
            <summary> Exception to indicate that a stream name could not be resolved.</summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.StreamTypesException">
            <summary> Base class for stream and property name resolution errors.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypesException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="msg">message
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamNotFoundException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="msg">message
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineImportService">
            <summary>
            Service for engine-level resolution of static methods and aggregation methods.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.GetConfigurationMethodRef(System.String)">
            <summary>Returns the method invocation caches for the from-clause for a class.</summary>
            <param name="className">the class name providing the method</param>
            <returns>cache configs</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.AddImport(System.String)">
            <summary>
            Add an import, such as "com.mypackage" or "com.mypackage.MyClass".
            </summary>
            <param name="importName">is the import to add</param>
            <throws>EngineImportException if the information or format is invalid</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.AddAggregation(System.String,System.String)">
            <summary>Add an aggregation function.</summary>
            <param name="functionName">is the name of the function to make known.</param>
            <param name="aggregationClass">is the class that provides the aggregator</param>
            <throws>EngineImportException throw if format or information is invalid</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveAggregation(System.String)">
            <summary>
            Used at statement compile-time to try and resolve a given function name into an
            aggregation method. Matches function name case-neutral.
            </summary>
            <param name="functionName">is the function name</param>
            <returns>aggregation provider</returns>
            <throws>
            EngineImportUndefinedException if the function is not a configured aggregation function
            </throws>
            <throws>
            EngineImportException if the aggregation providing class could not be loaded or doesn't match
            </throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveMethod(System.String,System.String,System.Type[])">
            <summary>
            Resolves a given class, method and list of parameter types to a static method.
            </summary>
            <param name="typeNameAlias">is the class name to use</param>
            <param name="methodName">is the method name</param>
            <param name="paramTypes">is parameter types match expression sub-nodes</param>
            <returns>method this resolves to</returns>
            <throws>
            EngineImportException if the method cannot be resolved to a visible static method
            </throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveType(System.String)">
            <summary>Resolves a given class name, either fully qualified and simple and imported to a class.</summary>
            <param name="typeNameAlias">is the class name to use</param>
            <returns>class this resolves to</returns>
            <throws>EngineImportException if there was an error resolving the class</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveMethod(System.String,System.String)">
            <summary>Resolves a given class and method name to a static method, expecting the method to existexactly once and not be overloaded, with any parameters.</summary>
            <param name="typeNameAlias">is the class name to use</param>
            <param name="methodName">is the method name</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the method cannot be resolved to a visible static method, orif the method is overloaded</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveMethod(System.Type,System.String,System.Type[])">
            <summary>Resolves a given method name and list of parameter types to an instance or static method exposed by the given class.</summary>
            <param name="type">is the class to look for a fitting method</param>
            <param name="methodName">is the method name</param>
            <param name="paramTypes">is parameter types match expression sub-nodes</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the method cannot be resolved to a visible static or instance method</throws>
        </member>
        <member name="T:com.espertech.esper.epl.agg.StddevAggregator">
            <summary>
            Standard deviation always generates double-typed numbers.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.AggregationMethod">
            <summary>
            Maintains aggregation state applying values as entering and leaving the state.
            <para>
            Implementations must also act as a factory for further independent copies of aggregation
            states such that new aggregation state holders and be created from a prototype.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationMethod.Enter(System.Object)">
            <summary>
            Apply the value as entering aggregation (entering window).
            <para>
            The value can be null since 'null' values may be counted as unique separate values.
            </para>
            </summary>
            <param name="value">to add to aggregate</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationMethod.Leave(System.Object)">
            <summary>
            Apply the value as leaving aggregation (leaving window).
            <para>
            The value can be null since 'null' values may be counted as unique separate values.
            </para>
            </summary>
            <param name="value">to remove from aggregate</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationMethod.Clear">
            <summary>Clear out the collection.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationMethod.NewAggregator(com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>Make a new, initalized aggregation state.</summary>
            <param name="methodResolutionService">
            for use in creating new aggregation method instances as a factory
            </param>
            <returns>initialized copy of the aggregator</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.AggregationMethod.Value">
            <summary>Returns the current value held.</summary>
            <returns>current value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.AggregationMethod.ValueType">
            <summary>Returns the type of the current value.</summary>
            <returns>type of values held</returns>
        </member>
        <member name="M:com.espertech.esper.epl.agg.StddevAggregator.Enter(System.Object)">
            <summary>
            Enters the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.StddevAggregator.Leave(System.Object)">
            <summary>
            Leaves the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.StddevAggregator.NewAggregator(com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Make a new, initalized aggregation state.
            </summary>
            <param name="methodResolutionService">for use in creating new aggregation method instances as a factory</param>
            <returns>initialized copy of the aggregator</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.StddevAggregator.Value">
            <summary>
            Returns the current value held.
            </summary>
            <value></value>
            <returns>current value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.StddevAggregator.ValueType">
            <summary>
            Returns the type of the current value.
            </summary>
            <value></value>
            <returns>type of values held</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.LongSumAggregator">
            <summary>
            Sum for long values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.LongSumAggregator.Enter(System.Object)">
            <summary>
            Enters the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.LongSumAggregator.Leave(System.Object)">
            <summary>
            Leaves the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.LongSumAggregator.NewAggregator(com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Make a new, initalized aggregation state.
            </summary>
            <param name="methodResolutionService">for use in creating new aggregation method instances as a factory</param>
            <returns>initialized copy of the aggregator</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.LongSumAggregator.Value">
            <summary>
            Returns the current value held.
            </summary>
            <value></value>
            <returns>current value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.LongSumAggregator.ValueType">
            <summary>
            Returns the type of the current value.
            </summary>
            <value></value>
            <returns>type of values held</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.AvgAggregator">
            <summary>
            Average always generates double-types numbers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AvgAggregator.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AvgAggregator.Enter(System.Object)">
            <summary>
            Enters the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AvgAggregator.Leave(System.Object)">
            <summary>
            Leaves the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AvgAggregator.NewAggregator(com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Make a new, initalized aggregation state.
            </summary>
            <param name="methodResolutionService">for use in creating new aggregation method instances as a factory</param>
            <returns>initialized copy of the aggregator</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.AvgAggregator.Value">
            <summary>
            Returns the current value held.
            </summary>
            <value></value>
            <returns>current value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.AvgAggregator.ValueType">
            <summary>
            Returns the type of the current value.
            </summary>
            <value></value>
            <returns>type of values held</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.AggregationServiceGroupAllImpl">
            <summary>
            Implementation for handling aggregation without any grouping (no group-by).
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.AggregationServiceBase">
            <summary>
            All aggregation services require evaluation nodes which supply the value to be aggregated (summed, averaged, etc.)
            and aggregation state factories to make new aggregation states.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.AggregationService">
            <summary>
            Service for maintaing aggregation state. Processes events entering (a window, a join etc,) and
            events leaving. Answers questions about current aggrataion state for a given row.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.AggregationResultFuture">
            <summary>
            Interface for use by aggregate expression nodes representing aggregate functions such as 'sum' or 'avg' to use
            to obtain the current value for the function at time of expression evaluation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationResultFuture.GetValue(System.Int32)">
            <summary>
            Returns current aggregation state, for use by expression node representing an aggregation function.
            </summary>
            <param name="column">
            is assigned to the aggregation expression node and passed as an column (index) into a row
            </param>
            <returns>current aggragation state</returns>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationService.ApplyEnter(com.espertech.esper.events.EventBean[],com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>Apply events as entering a window (new events).</summary>
            <param name="eventsPerStream">events for each stream entering window</param>
            <param name="optionalGroupKeyPerRow">
            can be null if grouping without keys is desired, else the keys
            to use for grouping, each distinct key value results in a new row of aggregation state.
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationService.ApplyLeave(com.espertech.esper.events.EventBean[],com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>Apply events as leaving a window (old events).</summary>
            <param name="eventsPerStream">events for each stream entering window</param>
            <param name="optionalGroupKeyPerRow">
            can be null if grouping without keys is desired, else the keys
            to use for grouping, each distinct key value results in a new row of aggregation state.
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationService.SetCurrentRow(com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Set the current aggregation state row - for use when evaluation nodes are asked to evaluate.
            </summary>
            <param name="groupKey">key identify the row of aggregation states</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationService.ClearResults">
            <summary>Clear current aggregation state.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.agg.AggregationServiceBase.evaluators">
            <summary>Evaluation nodes under.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.agg.AggregationServiceBase.aggregators">
            <summary>Aggregation states and factories.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceBase.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.AggregationMethod[])">
            <summary>Ctor.</summary>
            <param name="evaluators">
            are the child node of each aggregation function used for computing the value to be aggregated
            </param>
            <param name="aggregators">aggregation states/factories</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceBase.ApplyEnter(com.espertech.esper.events.EventBean[],com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Apply events as entering a window (new events).
            </summary>
            <param name="eventsPerStream">events for each stream entering window</param>
            <param name="optionalGroupKeyPerRow">can be null if grouping without keys is desired, else the keys
            to use for grouping, each distinct key value results in a new row of aggregation state.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceBase.ApplyLeave(com.espertech.esper.events.EventBean[],com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Apply events as leaving a window (old events).
            </summary>
            <param name="eventsPerStream">events for each stream entering window</param>
            <param name="optionalGroupKeyPerRow">can be null if grouping without keys is desired, else the keys
            to use for grouping, each distinct key value results in a new row of aggregation state.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceBase.SetCurrentRow(com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Set the current aggregation state row - for use when evaluation nodes are asked to evaluate.
            </summary>
            <param name="groupKey">key identify the row of aggregation states</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceBase.GetValue(System.Int32)">
            <summary>
            Returns current aggregation state, for use by expression node representing an aggregation function.
            </summary>
            <param name="column">is assigned to the aggregation expression node and passed as an column (index) into a row</param>
            <returns>current aggragation state</returns>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceBase.ClearResults">
            <summary>
            Clear current aggregation state.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceGroupAllImpl.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.AggregationMethod[])">
            <summary>Ctor.</summary>
            <param name="evaluators">
            evaluate the sub-expression within the aggregate function (ie. Sum(4*myNum))
            </param>
            <param name="aggregators">
            collect the aggregation state that evaluators evaluate to
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceGroupAllImpl.ApplyEnter(com.espertech.esper.events.EventBean[],com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Apply events as entering a window (new events).
            </summary>
            <param name="eventsPerStream">events for each stream entering window</param>
            <param name="optionalGroupKeyPerRow">can be null if grouping without keys is desired, else the keys
            to use for grouping, each distinct key value results in a new row of aggregation state.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceGroupAllImpl.ApplyLeave(com.espertech.esper.events.EventBean[],com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Apply events as leaving a window (old events).
            </summary>
            <param name="eventsPerStream">events for each stream entering window</param>
            <param name="optionalGroupKeyPerRow">can be null if grouping without keys is desired, else the keys
            to use for grouping, each distinct key value results in a new row of aggregation state.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceGroupAllImpl.SetCurrentRow(com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Set the current aggregation state row - for use when evaluation nodes are asked to evaluate.
            </summary>
            <param name="groupKey">key identify the row of aggregation states</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceGroupAllImpl.GetValue(System.Int32)">
            <summary>
            Returns current aggregation state, for use by expression node representing an aggregation function.
            </summary>
            <param name="column">is assigned to the aggregation expression node and passed as an column (index) into a row</param>
            <returns>current aggragation state</returns>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceGroupAllImpl.ClearResults">
            <summary>
            Clear current aggregation state.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.ReadOnlyList`1">
            <summary>
            A wrapper that provide a list that is readonly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ReadOnlyList`1"/> class.
            </summary>
            <param name="parentList">The parent list.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.ReadOnlyList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.ReadOnlyList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.compat.ObjectFactory`1">
            <summary>
            Parses an object from an input.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.FlowTracer`1">
            <summary>
            Can be used to trace flow through a process.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.FlowTracer`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.FlowTracer`1"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:com.espertech.esper.compat.FlowTracer`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.CopyOnWriteArraySet`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.CopyOnWriteArraySet`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.ForEach(System.Action{`0})">
            <summary>
            Iterates over each item in the set executing the specified
            action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.ToArray">
            <summary>
            Converts the set to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.AddAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all of the items in the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.CopyOnWriteArraySet`1.First">
            <summary>
            Returns the first item in the set
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.CopyOnWriteArraySet`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.compat.CopyOnWriteArraySet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.CopyOnWriteArraySet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.collection.PermutationEnumeration">
            <summary> Provides a N! (n-faculty) number of permutations for N elements.
            Example: for 3 elements provides 6 permutations exactly as follows:
            {0, 1, 2}
            {0, 2, 1}
            {1, 0, 2}
            {1, 2, 0}
            {2, 0, 1}
            {2, 1, 0}
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.PermutationEnumeration.#ctor(System.Int32)">
            <summary>Ctor.</summary>
            <param name="numElements">number of elements in each permutation.</param>
        </member>
        <member name="M:com.espertech.esper.collection.PermutationEnumeration.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.PermutationEnumeration.GetPermutation(System.Int32,System.Int32,System.Int32[])">
            <summary>Returns permutation.</summary>
            <param name="numElements">number of elements in each permutation</param>
            <param name="permutation">number of permutation to compute, between 0 and numElements!</param>
            <param name="factors">factors for each index</param>
            <returns>permutation</returns>
        </member>
        <member name="M:com.espertech.esper.collection.PermutationEnumeration.GetFactors(System.Int32)">
            <summary>Returns factors for computing the permutation.</summary>
            <param name="numElements">number of factors to compute</param>
            <returns>factors list</returns>
        </member>
        <member name="M:com.espertech.esper.collection.PermutationEnumeration.Faculty(System.Int32)">
            <summary>Computes faculty of N.</summary>
            <param name="num">to compute faculty for</param>
            <returns>N!</returns>
        </member>
        <member name="M:com.espertech.esper.collection.PermutationEnumeration.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.PermutationEnumeration.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:com.espertech.esper.collection.PermutationEnumeration.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:com.espertech.esper.collection.PermutationEnumeration.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:com.espertech.esper.collection.IterablesListIterator">
            <summary>
            An iterator over a list of iterables.
            The IterablesListIterator iterator takes a list of Iterable instances as a parameter. The iterator will
            Start at the very first Iterable and obtain it's iterator. It then allows iteration over this first iterator
            until that iterator returns no next value. Then the IterablesListIterator iterator will obtain the next iterable and iterate
            over this next iterable's iterator until no more values can be obtained. This continues until the last Iterable
            in the order of the list of Iterables.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.IterablesListIterator.#ctor(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean}})">
            <summary>
            Constructor - takes a list of Iterable that supply the iterators to iterate over.
            </summary>
            <param name="iterables">is a list of Iterable instances for which iterators to iterator over</param>
        </member>
        <member name="M:com.espertech.esper.collection.IterablesListIterator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.IterablesListIterator.AdvanceChild">
            <summary>
            Advances the currentListIterator to the next item in the
            parent enumerator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.IterablesListIterator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.IterablesListIterator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:com.espertech.esper.collection.IterablesListIterator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:com.espertech.esper.collection.IterablesListIterator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:com.espertech.esper.collection.ArrayBackedCollection`1">
            <summary>
            A fast collection backed by an array with severe limitations. Allows direct access to the backing array
            - this must be used with care as old elements could be in the array and the array is only valid until
            the number of elements indicated by size.
            <p>
            Implements only the add, size and clear methods of the collection interface.
            </p>
            <p>
            When running out of space for the underlying array, allocates a new array of double the size of the
            current array.
            </p>
            <p>
            Not synchronized and not thread-safe.
            </p>
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.#ctor(System.Int32)">
            <summary>Ctor.</summary>
            <param name="currentSize">is the initial size of the backing array.</param>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="P:com.espertech.esper.collection.ArrayBackedCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.collection.ArrayBackedCollection`1.Array">
            <summary>
            Returns the backing object array, valid until the current size.
            <para/>
            Applications must ensure to not read past current size as old elements can be encountered.
            </summary>
            <returns>backing array</returns>
        </member>
        <member name="P:com.espertech.esper.collection.ArrayBackedCollection`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.collection.ArrayBackedCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:com.espertech.esper.collection.ArrayBackedCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            
            <returns>
            The element at the specified index.
            </returns>
            
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
        </member>
        <member name="T:com.espertech.esper.client.soda.OutputLimitSelector">
            <summary>
            Selector for use in output rate limiting.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitSelector.FIRST">
            <summary>
            Output first event of last interval.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitSelector.LAST">
            <summary>
            Output last event of last interval.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitSelector.ALL">
            <summary>
            Output all events of last interval.   For group-by statements, output all groups
            regardless whether the group changed between the last output.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitSelector.SNAPSHOT">
            <summary>
            Output all events as a snapshot considering the current state regardless of interval.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitSelector.DEFAULT">
            <summary>
            Output all events of last interval.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.InExpression">
            <summary>
            In-expresson checks that a value is in (or not in) a set of values, equivalent to the syntax "color in ('red', 'blue')".
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.InExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
            <param name="isNotIn">
            true for the not-in expression, false for the in-expression
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean,System.Object[])">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
            <param name="value">
            an expression that provides the value to search for in the set
            </param>
            <param name="isNotIn">
            true for the not-in expression, false for the in-expression
            </param>
            <param name="parameters">is a set of constants to match against</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InExpression.Add(System.Object)">
            <summary>Add a constant to include in the computation.</summary>
            <param name="object">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.InExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to include in the computation.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.InExpression.Add(System.String)">
            <summary>Add a property to include in the computation.</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.InExpression.IsNotIn">
            <summary>
            True for the not-in expression, or false for an in-expression.
            </summary>
            <returns>true for not-in</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.FilterStream">
            <summary>
            A stream upon which projections (views) can be added that selects events by name and filter expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.ProjectedStream">
            <summary>
            Abstract base class for streams that can be projected via views providing data window, uniqueness or other projections
            or deriving further information from streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.ToEPLProjectedStream(System.IO.StringWriter)">
            <summary>Represent as textual.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.soda.View},System.String)">
            <summary>Ctor.</summary>
            <param name="views">is a list of views upon the stream</param>
            <param name="optStreamName">is the stream as-name, or null if unnamed</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.AddView(System.String,System.String)">
            <summary>
            Adds an un-parameterized view to the stream.
            </summary>
            <param name="namespace">is the view namespace, for example "win" for most data windows</param>
            <param name="name">is the view name, for example "length" for a length window</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.AddView(System.String,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Adds a parameterized view to the stream.
            </summary>
            <param name="namespace">is the view namespace, for example "win" for most data windows</param>
            <param name="name">is the view name, for example "length" for a length window</param>
            <param name="parameters">is a list of view parameters</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.AddView(System.String,System.String,System.Object[])">
            <summary>
            Adds a parameterized view to the stream.
            </summary>
            <param name="namespace">is the view namespace, for example "win" for most data windows</param>
            <param name="name">is the view name, for example "length" for a length window</param>
            <param name="parameters">is a list of view parameters</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.AddView(com.espertech.esper.client.soda.View)">
            <summary>Add a view to the stream.</summary>
            <param name="view">to add</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.ToEPLStream(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.ToEPLViews(System.IO.StringWriter,System.Collections.Generic.IList{com.espertech.esper.client.soda.View})">
            <summary>Renders the views onto the projected stream.</summary>
            <param name="writer">to render to</param>
            <param name="views">to render</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ProjectedStream.Views">
            <summary>Gets or sets the list of views added to the stream.</summary>
            <returns>list of views</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.ProjectedStream.IsUnidirectional">
            <summary>Returns true if the stream as unidirectional, for use in unidirectional joins.</summary>
            <returns>true for unidirectional stream, applicable only for joins</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.Create(com.espertech.esper.client.soda.Filter)">
            <summary>
            Creates a stream using a filter that provides the event type name and filter expression to filter for.
            </summary>
            <param name="filter">defines what to look for</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.Create(System.String)">
            <summary>Creates a stream of events of the given name.</summary>
            <param name="eventTypeAlias">is the event type name or alias to filter for</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.Create(System.String,System.String)">
            <summary>
            Creates a stream of events of the given event type name and names that stream. Example: "select * from MyEventTypeAlias as StreamName".
            </summary>
            <param name="eventTypeAlias">is the event type name or alias to filter for</param>
            <param name="streamName">is an optional stream name</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.Create(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>
            Creates a stream using a filter that provides the event type name and filter expression to filter for.
            </summary>
            <param name="filter">defines what to look for</param>
            <param name="streamName">is an optional stream name</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.Create(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>
            Creates a stream of events of the given event type name and names that stream. Example: "select * from MyEventTypeAlias as StreamName".
            </summary>
            <param name="eventTypeAlias">is the event type name or alias to filter for</param>
            <param name="filter">is the filter expression removing events from the stream</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.Create(System.String,System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Creates a stream of events of the given event type name and names that stream. Example: "select * from MyEventTypeAlias as StreamName".</summary>
            <param name="eventTypeAlias">is the event type name or alias to filter for</param>
            <param name="filter">is the filter expression removing events from the stream</param>
            <param name="streamName">is an optional stream name</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.#ctor(com.espertech.esper.client.soda.Filter)">
            <summary>Ctor.</summary>
            <param name="filter">specifies what events to look for</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.#ctor(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>Ctor.</summary>
            <param name="filter">specifies what events to look for</param>
            <param name="name">is the as-name for the stream</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.#ctor(com.espertech.esper.client.soda.Filter,System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.View})">
            <summary>Ctor.</summary>
            <param name="filter">specifies what events to look for</param>
            <param name="name">is the as-name for the stream</param>
            <param name="views">is a list of projections onto the stream</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.FilterStream.Filter">
            <summary>Gets or sets the filter.</summary>
            <returns>filter</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.CaseWhenThenExpression">
            <summary>
            Case expression that act as a when-then-else.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseWhenThenExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para>
            Use add methods to add child expressions to acts upon.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseWhenThenExpression.Add(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Adds a when-then pair of expressions.</summary>
            <param name="when">providings conditions to evaluate</param>
            <param name="then">provides the result when a condition evaluates to true</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseWhenThenExpression.SetElse(com.espertech.esper.client.soda.Expression)">
            <summary>
            Sets the expression to provide a value when no when-condition matches.
            </summary>
            <param name="elseExpr">expression providing default result</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.EPStatementState">
            <summary>Enumerates all statement states.</summary>
        </member>
        <member name="F:com.espertech.esper.client.EPStatementState.STARTED">
            <summary>Started state.</summary>
        </member>
        <member name="F:com.espertech.esper.client.EPStatementState.STOPPED">
            <summary>Stopped state.</summary>
        </member>
        <member name="F:com.espertech.esper.client.EPStatementState.DESTROYED">
            <summary>Destroyed state.</summary>
        </member>
        <member name="T:com.espertech.esper.client.EPPreparedStatement">
            <summary>
            Precompiled statement that is prepared with substitution parameters and that
            can be created and started efficiently multiple times with different actual values for parameters.
            <para>
            When a precompiled statement is prepared via the prepare method on <see cref="T:com.espertech.esper.client.EPAdministrator"/>,
            it typically has one or more substitution parameters in the statement text,
            for which the placeholder character is the question mark. This class provides methods to set
            the actual value for the substitution parameter.
            </para>
            <para>
            A precompiled statement can only be created and started when actual values for all
            substitution parameters are set.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPPreparedStatement.SetObject(System.Int32,System.Object)">
            <summary>Sets the value of the designated parameter using the given object.</summary>
            <param name="parameterIndex">the first parameter is 1, the second is 2, ...</param>
            <param name="value">the object containing the input parameter value</param>
            <exception name="EPException">if the substitution parameter could not be located</exception>
        </member>
        <member name="T:com.espertech.esper.timer.EPLTimerTask">
            <summary>
            Timer task to simply invoke the callback when triggered.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantPropResolutionStrategyDefault">
            <summary>
            A property resolution strategy that allows only the preconfigured types, wherein
            all properties that are common (name and type) to all properties are considered.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropResolutionStrategyDefault.#ctor(com.espertech.esper.events.vaevent.VariantSpec)">
            <summary>Ctor. </summary>
            <param name="variantSpec">specified the preconfigured types</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.PropertyUtility">
            <summary>
            Utility for handling properties for the purpose of merging and versioning by revision
            event types. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.RemovePropNamePostfixes(System.Collections.Generic.IList{System.String})">
            <summary>Remove the postfixes for indexed and mapped properties that provide a clue that a property requires a index or map key parameter to return values, changing the array elements. </summary>
            <param name="propertyNames">to remove prefix for</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.GetKeys(com.espertech.esper.events.EventBean,com.espertech.esper.events.EventPropertyGetter[])">
            <summary>Returns a multi-key for an event and key property getters </summary>
            <param name="event">to get keys for</param>
            <param name="keyPropertyGetters">getters to use</param>
            <returns>key</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.GetPerType(com.espertech.esper.events.vaevent.PropertyGroupDesc[],System.String[],System.String[])">
            <summary>From a list of property groups that include contributing event types, build a map of contributing event types and their type descriptor. </summary>
            <param name="groups">property groups</param>
            <param name="changesetProperties">properties that change between groups</param>
            <param name="keyProperties">key properties</param>
            <returns>map of event type and type information</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.GetGroupsPerProperty(com.espertech.esper.events.vaevent.PropertyGroupDesc[])">
            <summary>From a list of property groups that include multiple group numbers for each property, make a map of group numbers per property. </summary>
            <param name="groups">property groups</param>
            <returns>map of property name and group number</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.AnalyzeGroups(System.String[],com.espertech.esper.events.EventType[],System.String[])">
            <summary>Analyze multiple event types and determine common property sets that form property groups. </summary>
            <param name="allProperties">property names to look at</param>
            <param name="deltaEventTypes">all types contributing</param>
            <param name="aliases">names of properies</param>
            <returns>groups</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.CopyAndSort(System.Collections.Generic.ICollection{System.String})">
            <summary>Copy an sort the input array. </summary>
            <param name="input">to sort</param>
            <returns>sorted copied array</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.GetGetters(com.espertech.esper.events.EventType,System.String[])">
            <summary>Return getters for property names. </summary>
            <param name="eventType">type to get getters from</param>
            <param name="propertyNames">names to get</param>
            <returns>getters</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.UniqueExclusiveSort(System.Collections.Generic.ICollection{System.String},System.String[])">
            <summary>Remove from values all removeValues and build a unique sorted result array. </summary>
            <param name="values">to consider</param>
            <param name="removeValues">values to remove from values</param>
            <returns>sorted unique</returns>
        </member>
        <member name="T:com.espertech.esper.events.MapEventBeanPropertyGetter">
            <summary>
            A getter for use with Map-based events simply returns the value for the key. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.MapEventBeanPropertyGetter.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="propertyName">property to get</param>
        </member>
        <member name="T:com.espertech.esper.epl.subquery.SubselectBufferObserver">
            <summary>
            Observer to a buffer that is filled by a subselect view when it posts events,
            to be added and removed from indexes.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.internals.BufferObserver">
            <summary>
            Observer interface to a stream publishing new and old events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.BufferObserver.NewData(System.Int32,com.espertech.esper.collection.FlushedEventBuffer,com.espertech.esper.collection.FlushedEventBuffer)">
            <summary>
            Receive new and old events from a stream.
            </summary>
            <param name="streamId">the stream number sending the events</param>
            <param name="newEventBuffer">buffer for new events</param>
            <param name="oldEventBuffer">buffer for old events</param>
        </member>
        <member name="M:com.espertech.esper.epl.subquery.SubselectBufferObserver.#ctor(com.espertech.esper.epl.join.table.EventTable)">
            <summary>Ctor.</summary>
            <param name="eventIndex">index to update</param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec">
            <summary>
            Mirror class to <see cref="T:com.espertech.esper.epl.spec.SelectClauseStreamRawSpec"/> but added the stream number for the alias.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseElementCompiled">
            <summary>Marker interface for elements in a select clause that is in the compiled form. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="streamAliasName">is the stream alias of the stream to select</param>
            <param name="optionalAliasName">is the column alias</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.StreamAliasName">
            <summary>Returns the stream alias (e.g. select streamAlias from MyEvent as streamAlias). </summary>
            <returns>alias</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.OptionalAliasName">
            <summary>Returns the column alias (e.g. select streamAlias as mycol from MyEvent as streamAlias). </summary>
            <returns>alias</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.StreamNumber">
            <summary>Gets or sets the stream number of the stream for the stream alias. </summary>
            <returns>stream number</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.IsTaggedEvent">
            <summary>Returns true to indicate that we are meaning to select a tagged event in a pattern, or false if selecting an event from a stream. </summary>
            <returns>true for tagged event in pattern, false for stream</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.IsProperty">
            <summary>True if selecting from a property, false if not</summary>
            <returns>indicator whether property or not</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.PropertyType">
            <summary>Gets or sets property type.</summary>
            <returns>property type</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseSpecRaw">
            <summary>Encapsulates the parsed select expressions in a select-clause in an EPL statement. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseSpecRaw.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseSpecRaw.Add(com.espertech.esper.epl.spec.SelectClauseElementRaw)">
            <summary>Adds an select expression within the select clause. </summary>
            <param name="element">is the expression to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseSpecRaw.SelectExprList">
            <summary>Returns the list of select expressions. </summary>
            <returns>list of expressions</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseSpecRaw.IsUsingWildcard">
            <summary>Returns true if the select clause contains at least one wildcard. </summary>
            <returns>true if clause contains wildcard, false if not</returns>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowConsumerView">
            <summary>
            Represents a consumer of a named window that selects from a named window via a from-clause.
            <para>
            The view simply dispatches directly to child views, and keeps the last new event for iteration.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.StatementStopCallback">
            <summary>
            Callback to indicate that a statement has stopped.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.StatementStopCallback.StatementStopped">
            <summary>Indicates statement stopped.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowConsumerView.#ctor(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.events.EventType,com.espertech.esper.view.StatementStopService,com.espertech.esper.epl.named.NamedWindowTailView)">
            <summary>
            Ctor.
            </summary>
            <param name="filterList">is a list of filter expressions</param>
            <param name="eventType">the event type of the named window</param>
            <param name="statementStopService">for registering a callback when the view stopped, to unregister the statement as a consumer</param>
            <param name="tailView">to indicate when the consumer stopped to remove the consumer</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorHandThrough">
            <summary>
            Result set processor for the hand-through case: no aggregation functions used in
            the select clause, and no group-by, no having and ordering.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple">
            <summary>
            Result set processor for the simplest case: no aggregation functions used in the select
            clause, and no group-by. <para/> The processor generates one row for each event entering
            (new event) and one row for each event leaving (old event).
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessor">
            <summary>
            Processor for result sets coming from 2 sources. First, out of a simple view (no join).
            And second, out of a join of event streams. The processor must apply the select-clause, grou-by-clause and having-clauses
            as supplied. It must state what the event type of the result rows is.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.ProcessViewResult(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            For use by views posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newData">new events posted by view</param>
            <param name="oldData">old events posted by view</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.ProcessJoinResult(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},System.Boolean)">
            <summary>
            For use by joins posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newEvents">new events posted by join</param>
            <param name="oldEvents">old events posted by join</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.GetEnumerator(com.espertech.esper.view.Viewable)">
            <summary>
            Returns the iterator implementing the group-by and aggregation and order-by logic
            specific to each case of use of these construct.
            </summary>
            <param name="parent">is the parent view iterator</param>
            <returns>event iterator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.GetEnumerator(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary>Returns the iterator for iterating over a join-result.</summary>
            <param name="joinSet">is the join result set</param>
            <returns>iterator over join results</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.Clear">
            <summary>Clear out current state.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.ProcessOutputLimitedJoin(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}}}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting.</summary>
            <param name="joinEventsSet">the join results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.ProcessOutputLimitedView(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.events.EventBean[]}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting.</summary>
            <param name="viewEventsList">the view results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessor.ResultEventType">
            <summary>
            Returns the event type of processed results.
            </summary>
            <value>The type of the result event.</value>
            <returns> event type of the resulting events posted by the processor.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.Clear">
            <summary>Clear out current state.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.ProcessViewResult(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            For use by views posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newData">new events posted by view</param>
            <param name="oldData">old events posted by view</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.ProcessJoinResult(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},System.Boolean)">
            <summary>
            For use by joins posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newEvents">new events posted by join</param>
            <param name="oldEvents">old events posted by join</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.GetEnumerator(com.espertech.esper.view.Viewable)">
            <summary>
            Returns the iterator implementing the group-by and aggregation and order-by logic
            specific to each case of use of these construct.
            </summary>
            <param name="parent">is the parent view iterator</param>
            <returns>event iterator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.GetEnumerator(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary>Returns the iterator for iterating over a join-result.</summary>
            <param name="joinSet">is the join result set</param>
            <returns>iterator over join results</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.ProcessOutputLimitedJoin(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}}}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting.</summary>
            <param name="joinEventsSet">the join results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.ProcessOutputLimitedView(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.events.EventBean[]}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting.</summary>
            <param name="viewEventsList">the view results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.ResultEventType">
            <summary>
            Returns the event type of processed results.
            </summary>
            <value>The type of the result event.</value>
            <returns> event type of the resulting events posted by the processor.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorHandThrough.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="selectExprProcessor">for processing the select expression and generting the readonly output rowsa row per group even if groups didn't change </param>
            <param name="isSelectRStream">true if remove stream events should be generated</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorHandThrough.ProcessJoinResult(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},System.Boolean)">
            <summary>
            For use by joins posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newEvents">new events posted by join</param>
            <param name="oldEvents">old events posted by join</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorHandThrough.ProcessViewResult(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            For use by views posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newData">new events posted by view</param>
            <param name="oldData">old events posted by view</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorHandThrough.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.events.EventBean[],System.Boolean,System.Boolean)">
            <summary>Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set. </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorHandThrough.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},System.Boolean,System.Boolean)">
            <summary>Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set. </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorHandThrough.Clear">
            <summary>Clear out current state.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorHandThrough.ResultEventType">
            <summary>
            Returns the event type of processed results.
            </summary>
            <value>The type of the result event.</value>
            <returns> event type of the resulting events posted by the processor.
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.BeanEvaluator">
            <summary>
            A delegate that takes in an eventBean and returns the eventBean
            that should be used.  If no eventBean is selected, this method
            should return true.  This is primarily used for chaining filters
            on an eventBean.
            </summary>
            <param name="eventBean"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.core.UpdateDispatchFutureSpin">
            <summary>
            UpdateDispatchFutureSpin can be added to a dispatch queue that is thread-local. It represents
            is a stand-in for a future dispatching of a statement result to statement listeners.
            <para>
            UpdateDispatchFutureSpin is aware of future and past dispatches:
            (newest) DF3   &lt;--&gt;   DF2  &lt;--&gt;  DF1  (oldest), and uses a spin lock to block if required
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchFutureSpin.#ctor(com.espertech.esper.core.UpdateDispatchViewBlockingSpin,com.espertech.esper.core.UpdateDispatchFutureSpin,System.Int64,com.espertech.esper.timer.TimeSourceService)">
            <summary>Ctor.</summary>
            <param name="view">is the blocking dispatch view through which to execute a dispatch</param>
            <param name="earlier">is the older future</param>
            <param name="msecTimeout">is the timeout period to wait for listeners to complete a prior dispatch</param>
            <param name="timeSourceService">time source provider</param>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchFutureSpin.#ctor(com.espertech.esper.timer.TimeSourceService)">
            <summary>
            Ctor - use for the first future to indicate completion.
            </summary>
            <param name="timeSourceService">time source provider</param>
        </member>
        <member name="P:com.espertech.esper.core.UpdateDispatchFutureSpin.IsCompleted">
            <summary>Returns true if the dispatch completed for this future.</summary>
            <returns>true for completed, false if not</returns>
        </member>
        <member name="T:com.espertech.esper.core.ResultDeliveryStrategyTypeArr">
            <summary>
            A result delivery strategy that uses an "update" method that accepts a underlying 
            array for use in wildcard selection. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.ResultDeliveryStrategyTypeArr.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>Ctor. </summary>
            <param name="subscriber">is the receiver to method invocations</param>
            <param name="method">is the method to deliver to</param>
        </member>
        <member name="T:com.espertech.esper.core.InsertIntoLatchSpin">
            <summary>
            A spin-locking implementation of a latch for use in guaranteeing delivery between
            a single event produced by a single statement and consumable by another statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.InsertIntoLatchSpin.#ctor(com.espertech.esper.core.InsertIntoLatchSpin,System.Int64,System.Object,com.espertech.esper.timer.TimeSourceService)">
            <summary>Ctor.</summary>
            <param name="earlier">the latch before this latch that this latch should be waiting for</param>
            <param name="msecTimeout">the timeout after which delivery occurs</param>
            <param name="payload">the payload is an event to deliver</param>
            <param name="timeSourceService">time source provider</param>
        </member>
        <member name="M:com.espertech.esper.core.InsertIntoLatchSpin.#ctor(com.espertech.esper.timer.TimeSourceService)">
            <summary>Ctor - use for the first and unused latch to indicate completion.</summary>
            <param name="timeSourceService">time source provider</param>
        </member>
        <member name="M:com.espertech.esper.core.InsertIntoLatchSpin.Await">
            <summary>Blocking call that returns only when the earlier latch completed.</summary>
            <returns>payload of the latch</returns>
        </member>
        <member name="M:com.espertech.esper.core.InsertIntoLatchSpin.Done">
            <summary>
            Called to indicate that the latch completed and a later latch can start.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.InsertIntoLatchSpin.IsCompleted">
            <summary>Returns true if the dispatch completed for this future.</summary>
            <returns>true for completed, false if not</returns>
        </member>
        <member name="T:com.espertech.esper.core.InsertIntoLatchFactory">
            <summary>
            Class to hold a current latch per statement that uses an insert-into stream (per statement and insert-into stream
            relationship).
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.InsertIntoLatchFactory.#ctor(System.String,System.Int64,com.espertech.esper.client.ConfigurationEngineDefaults.Locking,com.espertech.esper.timer.TimeSourceService)">
            <summary>Ctor.</summary>
            <param name="name">the factory name</param>
            <param name="msecWait">the number of milliseconds latches will await maximually</param>
            <param name="locking">the blocking strategy to employ</param>
            <param name="timeSourceService">time source provider</param>
        </member>
        <member name="M:com.espertech.esper.core.InsertIntoLatchFactory.NewLatch(System.Object)">
            <summary>
            Returns a new latch.
            <para>
            Need not be synchronized as there is one per statement and execution is during statement lock.
            </para>
            </summary>
            <param name="payload">is the object returned by the await.</param>
            <returns>latch</returns>
        </member>
        <member name="T:com.espertech.esper.core.EPPreparedQueryResult">
            <summary>
            The result of executing a prepared query.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPPreparedQueryResult.#ctor(com.espertech.esper.events.EventType,com.espertech.esper.events.EventBean[])">
            <summary>Ctor. </summary>
            <param name="eventType">is the type of event produced by the query</param>
            <param name="result">the result rows</param>
        </member>
        <member name="P:com.espertech.esper.core.EPPreparedQueryResult.EventType">
            <summary>Returs the event type representing the selected columns. </summary>
            <returns>metadata</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPPreparedQueryResult.Result">
            <summary>Returns the query result. </summary>
            <returns>result rows</returns>
        </member>
        <member name="T:com.espertech.esper.core.DeliveryConvertorObjectArr">
            <summary>Implementation of a convertor for column results that renders the result as an object array itself. </summary>
        </member>
        <member name="T:com.espertech.esper.core.DeliveryConvertor">
            <summary>Converts a row of column selection results into a result for dispatch to a method. </summary>
        </member>
        <member name="M:com.espertech.esper.core.DeliveryConvertor.ConvertRow(System.Object[])">
            <summary>Convert result row to dispatchable. </summary>
            <param name="row">to convert</param>
            <returns>converted row</returns>
        </member>
        <member name="T:com.espertech.esper.core.DeliveryConvertorMap">
            <summary>Converts column results into a Map of key-value pairs. </summary>
        </member>
        <member name="M:com.espertech.esper.core.DeliveryConvertorMap.#ctor(System.String[])">
            <summary>Ctor. </summary>
            <param name="columnNames">the names for columns</param>
        </member>
        <member name="M:com.espertech.esper.compat.Sequencer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.Sequencer"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.Sequencer.Allocate">
            <summary>
            Allocates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.Sequencer.Release(System.Int32)">
            <summary>
            Releases the specified sequence.
            </summary>
            <param name="sequence">The sequence.</param>
        </member>
        <member name="M:com.espertech.esper.compat.Sequencer._PrivateSequence.#ctor(com.espertech.esper.compat.Sequencer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.Sequencer._PrivateSequence"/> class.
            </summary>
            <param name="sequencer">The sequencer.</param>
            <param name="sequence">The sequence.</param>
        </member>
        <member name="P:com.espertech.esper.compat.Sequencer._PrivateSequence.Sequence">
            <summary>
            Gets the sequence.
            </summary>
            <value>The sequence.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationVariable">
            <summary>
            Provides variable configuration.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationVariable.VariableType">
            <summary>
            Gets or sets the variable type.
            <para>
            Variables are scalar values and primitive or boxed builtin types are accepted.
            </para>
            </summary>
            <returns>variable type</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationVariable.InitializationValue">
            <summary>
            Gets or sets the initialization value, or null if none was supplied.
            String-type initialization values for numeric or boolean types are allowed and are parsed.
            Variables are scalar values and primitive or boxed builtin types are accepted.
            </summary>
            <returns>default value</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeAccumViewFactory">
            <summary>Factory for <see cref="T:com.espertech.esper.view.window.TimeAccumView"/>.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeAccumViewFactory.millisecondsQuietTime">
            <summary>Number of msec of quiet time before results are flushed.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeAccumViewFactory.randomAccessGetterImpl">
            <summary>Access into the data window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeAccumViewFactory.isRemoveStreamHandling">
            <summary>
            Indicators that we need to handle the remove stream posted by parent views.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.RelativeAccessByEventNIndex">
            <summary>
            Provides access to prior events given an event from which to count back, and an index to look at.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.RelativeAccessByEventNIndex.GetRelativeToEvent(com.espertech.esper.events.EventBean,System.Int32)">
            <summary>
            Returns the prior event to the given event counting back the number of events as supplied by index.
            </summary>
            <param name="_event">is the event to count back from</param>
            <param name="index">is the number of events to go back</param>
            <returns>event</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.ExternallyTimedWindowViewFactory">
            <summary>Factory for <see cref="T:com.espertech.esper.view.window.ExternallyTimedWindowView"/>.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.ExternallyTimedWindowViewFactory.timestampFieldName">
            <summary>The timestamp property name.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.ExternallyTimedWindowViewFactory.millisecondsBeforeExpiry">
            <summary>The number of msec to expire.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.ExternallyTimedWindowViewFactory.randomAccessGetterImpl">
            <summary>The getter for direct access into the window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.ExternallyTimedWindowViewFactory.isRemoveStreamHandling">
            <summary>Flag to indicate that the view must handle the removed events from a parent view.</summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.DimensionMember">
            <summary> DimensionMember models instances of dimensional members. A member is a single or multiple object derived from the
            event property or properties of the dimension.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.DimensionMember.Values">
            <summary> Returns member values.</summary>
            <returns> array of member values
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.DimensionMember.Dimension">
            <summary> Returns the dimension the member belongs to.</summary>
            <returns> dimension that this member is a value of
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.internals.BufferView">
            <summary> A view that acts as an adapter between views and update listeners.
            The view can be added to a parent view. When the parent view publishes data, the view will forward the
            data to the UpdateListener implementation that has been supplied. If no UpdateListener has been supplied,
            then the view will cache the last data published by the parent view.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.BufferView.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="streamId">number of the stream for which the view buffers the generated events.
            </param>
        </member>
        <member name="M:com.espertech.esper.view.internals.BufferView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.internals.BufferView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="P:com.espertech.esper.view.internals.BufferView.Observer">
            <summary> Set the observer for indicating new and old data.</summary>
        </member>
        <member name="P:com.espertech.esper.view.internals.BufferView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.internals.BufferView.NewDataBuffer">
            <summary>Returns the buffer for new data.</summary>
            <returns>new data buffer</returns>
        </member>
        <member name="T:com.espertech.esper.util.CoercionException">
            <summary>
            Exception to represent a Mismatch in types in an expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.CoercionException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">supplies the detailed description
            </param>
        </member>
        <member name="T:com.espertech.esper.type.ByteValue">
            <summary>
            Placeholder for a byte value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.ByteValue.ParseString(System.String)">
            <summary>Parses a string value as a byte.</summary>
            <param name="value">to parse</param>
            <returns>byte value</returns>
        </member>
        <member name="M:com.espertech.esper.type.ByteValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.ByteValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.ByteValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.ByteValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.ByteValue._Byte">
            <summary>
            Set a byte value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.EventObserverSupport">
            <summary>
            Abstract class for applications to extend to implement a pattern observer.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.EventObserver">
            <summary> Observers observe and indicate other external events such as timing events.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.EventObserver.StartObserve">
            <summary> Start observing.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.EventObserver.StopObserve">
            <summary> Stop observing.</summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFollowedByNode">
            <summary>
            This class represents a followed-by operator in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFollowedByNode.NewState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>
            Create the evaluation state node containing the truth value state for each operator in an
            event expression.
            </summary>
            <param name="parentNode">is the parent evaluator node that this node indicates a change in truth value to</param>
            <param name="beginState">is the container for events that makes up the Start state</param>
            <param name="context">is the handle to services required for evaluation</param>
            <param name="stateNodeId">is the new state object's identifier</param>
            <returns>
            state node containing the truth value state for the operator
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFollowedByNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFilterNode">
            <summary>
            This class represents a filter of events in the evaluation tree representing
            any event expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFilterNode.NewState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>
            Create the evaluation state node containing the truth value state for each operator in an
            event expression.
            </summary>
            <param name="parentNode">is the parent evaluator node that this node indicates a change in truth value to</param>
            <param name="beginState">is the container for events that makes up the Start state</param>
            <param name="context">is the handle to services required for evaluation</param>
            <param name="stateNodeId">is the new state object's identifier</param>
            <returns>
            state node containing the truth value state for the operator
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFilterNode.#ctor(com.espertech.esper.epl.spec.FilterSpecRaw,System.String)">
            <summary> Constructor.</summary>
            <param name="filterSpecification">specifies the filter properties
            </param>
            <param name="eventAsName">is the name to use for adding matching events to the MatchedEventMap
            table used when indicating truth value of true.
            </param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFilterNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalFilterNode.RawFilterSpec">
            <summary>
            Returns the raw (unoptimized/validated) filter definition.
            </summary>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalFilterNode.FilterSpec">
            <summary> Returns filter specification.</summary>
            <returns> filter definition
            </returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalFilterNode.EventAsName">
            <summary> Returns the tag for any matching events to this filter, or null since tags are optional.</summary>
            <returns> tag string for event
            </returns>
        </member>
        <member name="T:com.espertech.esper.indicator.pretty.CubeTabularDataRenderer">
            <summary>
            Renders a Cube multidimensional table a TabularData from the JMX OpenMbean interface.
            Cubes can be 1-dimenstion to n-dimensional. This implementation can render cubes up to only 4 dimensions.
            4-dimensional cubes are created as multiple TabularData instances for each member in the page dimension.
            The cell dimension (assumed to be dimension 0) and the row dimension (assumed to be dimension 2) are both
            placed as rows in a table. The column dimension (dimension 1) is use for filling columns.
            </summary>
        </member>
        <member name="F:com.espertech.esper.indicator.pretty.CubeTabularDataRenderer.TABLE_NAME">
            <summary>Name of the table entry for cubes that are less then 4-dimensional.</summary>
        </member>
        <member name="M:com.espertech.esper.indicator.pretty.CubeTabularDataRenderer.RenderCube(com.espertech.esper.view.stat.olap.Cube)">
            <summary>
            Render the Cube as a collection of OpenMBean TabularData tables, each table carries
            a string key that contains the page dimension member, if present, else just the string
            TABLE_NAME.
            <returns>
            map of rendered page dimension member as key and TabularData containing table
            as value
            </returns>
            </summary>
        </member>
        <member name="M:com.espertech.esper.indicator.pretty.CubeTabularDataRenderer.CreateDataColumns(com.espertech.esper.view.stat.olap.Cube)">
            <summary>
            Creates dataColumns that match the names of columns as defined
            by the cube.
            </summary>
            <param name="cube"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.filter.RangeValueEventProp">
            <summary>
            An event property as a filter parameter representing a range.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueEventProp.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="resultEventAsName">the event tag</param>
            <param name="resultEventProperty">the event property name</param>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueEventProp.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Returns the filter value representing the endpoint.
            </summary>
            <param name="matchedEvents">is the prior results</param>
            <returns>filter value</returns>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueEventProp.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueEventProp.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueEventProp.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.RangeValueEventProp.ResultEventAsName">
            <summary>Returns the tag name or stream name to use for the event property.</summary>
            <returns>tag name</returns>
        </member>
        <member name="P:com.espertech.esper.filter.RangeValueEventProp.ResultEventProperty">
            <summary>Returns the name of the event property.</summary>
            <returns>event property name</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterValueSetParamImpl">
            <summary>
            Filter parameter value defining the event property to filter, the
            filter operator, and the filter value.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterValueSetParam">
            <summary>
            This interface represents one filter parameter in an <see cref="T:com.espertech.esper.filter.FilterValueSet"/> filter specification.
            <para>
            Each filtering parameter has an property name and operator type, and a value to filter for.
            </para>
            </summary>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetParam.PropertyName">
            <summary> Returns the property name for the filter parameter.</summary>
            <returns> property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetParam.FilterOperator">
            <summary> Returns the filter operator type.</summary>
            <returns> filter operator type
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetParam.FilterForValue">
            <summary> Return the filter parameter constant to filter for.</summary>
            <returns> filter parameter constant's value
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterValueSetParamImpl.#ctor(System.String,com.espertech.esper.filter.FilterOperator,System.Object)">
            <summary> Ctor.</summary>
            <param name="propertyName">property to interrogate
            </param>
            <param name="filterOperator">operator to apply
            </param>
            <param name="filterValue">value to look for
            </param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetParamImpl.PropertyName">
            <summary>
            Returns the property name for the filter parameter.
            </summary>
            <value></value>
            <returns> property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetParamImpl.FilterOperator">
            <summary>
            Returns the filter operator type.
            </summary>
            <value></value>
            <returns> filter operator type
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetParamImpl.FilterForValue">
            <summary>
            Return the filter parameter constant to filter for.
            </summary>
            <value></value>
            <returns> filter parameter constant's value
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.DoubleRange">
            <summary>
            Holds a range of double values with a minimum (Start) value and a maximum (end) value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.DoubleRange.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary> Constructor - takes range endpoints.</summary>
            <param name="min">is the low endpoint
            </param>
            <param name="max">is the high endpoint
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.DoubleRange.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="other">The other object.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.filter.DoubleRange.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.DoubleRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.DoubleRange.Min">
            <summary> Returns low endpoint.</summary>
            <returns> low endpoint
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.DoubleRange.Max">
            <summary> Returns high endpoint.</summary>
            <returns> high endpoint
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.XPathNamespaceContext">
            <summary>
            Provides the namespace context information for compiling XPath expressions.
            Not sure if this has any relevance for the .NET implementation -- Aaron
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathNamespaceContext.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.ViewSpec">
            <summary>
            Specification for a view object consists of a namespace, name and view object parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.ViewSpec.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>Constructor.</summary>
            <param name="_namespace">if the namespace the object is in</param>
            <param name="objectName">is the name of the object</param>
            <param name="objectParameters">
            is a list of values representing the object parameters
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.InsertIntoDesc">
            <summary> Descriptor generated by INSERT-INTO clauses specified in expressions to insert the
            results of statement as a stream to further statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.InsertIntoDesc.#ctor(System.Boolean,System.String)">
            <summary> Ctor.</summary>
            <param name="isIStream">is true if insert (new data) events are fed, or false for remove (old data) events are fed
            </param>
            <param name="eventTypeAlias">is the event type alias name
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.InsertIntoDesc.Add(System.String)">
            <summary> Add a column name to the insert-into clause.</summary>
            <param name="columnName">to add
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.InsertIntoDesc.IsIStream">
            <summary> Returns true if insert (new data) events are fed, or false for remove (old data) events are fed.</summary>
            <returns> true for insert stream, false for remove stream
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.InsertIntoDesc.EventTypeAlias">
            <summary> Returns name of event type to use for insert-into stream.</summary>
            <returns> event type alias name
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.InsertIntoDesc.ColumnNames">
            <summary> Returns a list of column names specified optionally in the insert-into clause, or empty if none specified.</summary>
            <returns> column names or empty list if none supplied
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.BranchRequiredAssemblyNode">
            <summary>
            Assembly node for an event stream that is a branch with a single required child node below it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchRequiredAssemblyNode.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BranchRequiredAssemblyNode"/> class.
            </summary>
            <param name="streamNum">stream number of the event stream that this node assembles results for.</param>
            <param name="numStreams">number of streams</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchRequiredAssemblyNode.Init(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Provides results to assembly nodes for initialization.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchRequiredAssemblyNode.Process(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Process results.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchRequiredAssemblyNode.Result(com.espertech.esper.events.EventBean[],System.Int32,com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.rep.Node)">
            <summary>
            Publish a result row.
            </summary>
            <param name="row">is the result to publish</param>
            <param name="fromStreamNum">is the originitor that publishes the row</param>
            <param name="myEvent">is optional and is the event that led to the row result</param>
            <param name="myNode">is optional and is the result node of the event that led to the row result</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchRequiredAssemblyNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Output this node using writer, not outputting child nodes.
            </summary>
            <param name="indentWriter">to use for output</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprConstantNode">
            <summary>
            Represents a constant in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprConstantNode.#ctor(System.Object)">
            <summary> Ctor.</summary>
            <param name="value">is the constant's value.
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprConstantNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprConstantNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprConstantNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprConstantNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprConstantNode.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprConstantNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprConcatNode">
            <summary>
            Represents a simple Math (+/-/divide/*) in a filter expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprConcatNode.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprConcatNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">delegates for view resources to expression nodes</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprConcatNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprConcatNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprConcatNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprConcatNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <value></value>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprConcatNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand">
            <summary>
            Companion to the BaseDbDriver that provides command support in
            accordance to ADO.NET and the DbDriverCommand.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.DbDriverCommand">
            <summary>
            Minor abstraction on top of the IDbCommand.  The DbDriverCommand
            provides callers (above the driver command) to obtain information
            about the command using a notation that is similar to JDBC (i.e. it
            uses ? for parameters); below it ensures that the underlying
            connection uses proper ADO.NET conventions for the driver.  It also
            handles certain other nuances that differ between ADO.NET driver
            implementations, encapsulating that behavior within the driver.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DbDriverCommand.Clone">
            <summary>
            Clones the driver command.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.Driver">
            <summary>
            Gets the driver associated with this command.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.Command">
            <summary>
            Gets the actual database command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.MetaData">
            <summary>
            Gets the meta data.
            </summary>
            <value>The meta data.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.MetaDataSettings">
            <summary>
            Gets the meta data settings associated with this command.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.ParameterDescription">
            <summary>
            Gets a list of parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.Fragments">
            <summary>
            Gets the fragments.  If the command was not created through
            supplied fragments, this method will throw an exception.
            </summary>
            <value>The fragments.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.CommandText">
            <summary>
            Gets the actual SQL that is sent to the driver.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.PseudoText">
            <summary>
            Gets the pseudo SQL that is provided to and from the client.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.driver">
            <summary>
            Underlying driver.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.fragments">
            <summary>
            Fragments that were used to build the command.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.inputParameters">
            <summary>
            List of input parameters
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.outputParameters">
            <summary>
            Output parameters; cached upon creation
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.dbCommandText">
            <summary>
            Command text that needs to be associated with the command.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.metadataSettings">
            <summary>
            Column settings
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.allocLock">
            <summary>
            Private lock for connection and command.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.theConnection">
            <summary>
            Connection allocated to this instance
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.theCommand">
            <summary>
            Command allocated to this instance
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.#ctor(com.espertech.esper.epl.db.drivers.BaseDbDriver,System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment},System.Collections.Generic.IEnumerable{System.String},System.String,com.espertech.esper.epl.db.ColumnSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand"/> class.
            </summary>
            <param name="driver">The driver.</param>
            <param name="fragments">The fragments.</param>
            <param name="inputParameters">The input parameters.</param>
            <param name="dbCommandText">The command text.</param>
            <param name="metadataSettings">The metadata settings.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand"/> class.
            Used for cloning.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.Clone">
            <summary>
            Clones the driver command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.AllocateCommand">
            <summary>
            Ensures that the command is allocated.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.GetParameters(System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment})">
            <summary>
            Gets the parameters.
            </summary>
            <param name="parseFragements">The parse fragements.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.CreateOutputParameters">
            <summary>
            Creates and sets the output parameters
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.GetColumnType(System.Data.DataRow)">
            <summary>
            Gets the type of the column associated with the row in the
            table schema.
            </summary>
            <param name="schemaDataRow">The schema data row.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.GetColumnSqlType(System.Data.DataRow)">
            <summary>
            Gets the SQL type of the column associated with the row in the
            table schema.
            </summary>
            <param name="schemaDataRow">The schema data row.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.CompileSchemaTable(System.Data.DataTable,com.espertech.esper.epl.db.ColumnSettings)">
            <summary>
            Compiles the schema table.
            </summary>
            <param name="schemaTable">The schema table.</param>
            <param name="columnSettings">The column settings.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.Command">
            <summary>
            Gets the actual database command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.Fragments">
            <summary>
            Gets the fragments.
            </summary>
            <value>The fragments.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.PseudoText">
            <summary>
            Gets the pseudo text.
            </summary>
            <value>The pseudo text.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.CommandText">
            <summary>
            Gets the command text.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.Driver">
            <summary>
            Gets the driver associated with this command.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.MetaData">
            <summary>
            Gets the meta data.
            </summary>
            <value>The meta data.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.MetaDataSettings">
            <summary>
            Gets the meta data settings associated with this command.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.ParameterDescription">
            <summary>
            Gets a list of parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.InputParameters">
            <summary>
            Gets the input parameters.
            </summary>
            <value>The input parameters.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.OutputParameters">
            <summary>
            Gets the output parameters.
            </summary>
            <value>The output parameters.</value>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.DbCommandFactory">
            <summary>
            Creates database command objects
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.MethodResolutionService">
            <summary>
            Service for resolving methods and aggregation functions, and for creating managing aggregation instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveMethod(System.Type,System.String,System.Type[])">
            <summary>Resolves a given method name and list of parameter types to an instance or static method exposed by the given class.</summary>
            <param name="type">is the type to look for a fitting method</param>
            <param name="methodName">is the method name</param>
            <param name="paramTypes">is parameter types match expression sub-nodes</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the method cannot be resolved to a visible static or instance method</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveMethod(System.String,System.String,System.Type[])">
            <summary>Resolves a given class, method and list of parameter types to a static method.</summary>
            <param name="typeNameAlias">is the class name to use</param>
            <param name="methodName">is the method name</param>
            <param name="paramTypes">is parameter types match expression sub-nodes</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the method cannot be resolved to a visible static method</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveMethod(System.String,System.String)">
            <summary>Resolves a given class and method name to a static method, not allowing overloaded methodsand expecting the method to be found exactly once with zero or more parameters.</summary>
            <param name="classNameAlias">is the class name to use</param>
            <param name="methodName">is the method name</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the method cannot be resolved to a visible static method, or if the method exists morethen once with different parameters</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveClass(System.String)">
            <summary>Resolves a given class name, either fully qualified and simple and imported to a class.</summary>
            <param name="classNameAlias">is the class name to use</param>
            <returns>class this resolves to</returns>
            <throws>EngineImportException if there was an error resolving the class</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveAggregation(System.String)">
            <summary>
            Returns a plug-in aggregation method for a given configured aggregation function name.
            </summary>
            <param name="functionName">is the aggregation function name</param>
            <returns>aggregation-providing class</returns>
            <throws>EngineImportUndefinedException is the function name cannot be found</throws>
            <throws>
            EngineImportException if there was an error resolving class information
            </throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakePlugInAggregator(System.String)">
            <summary>Makes a new plug-in aggregation instance by name.</summary>
            <param name="name">is the plug-in aggregation function name</param>
            <returns>new instance of plug-in aggregation method</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeCountAggregator(System.Boolean)">
            <summary>Makes a new count-aggregator.</summary>
            <param name="isIgnoreNull">is true to ignore nulls, or false to count nulls</param>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeSumAggregator(System.Type)">
            <summary>Makes a new sum-aggregator.</summary>
            <param name="type">is the type to be summed up, i.e. float, long etc.</param>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeDistinctAggregator(com.espertech.esper.epl.agg.AggregationMethod,System.Type)">
            <summary>
            Makes a new distinct-value-aggregator.
            </summary>
            <param name="aggregationMethod">is the inner aggregation method</param>
            <param name="childType">the return type of the inner expression to aggregate, if any</param>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeAvgAggregator">
            <summary>Makes a new avg-aggregator.</summary>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeAvedevAggregator">
            <summary>Makes a new avedev-aggregator.</summary>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeMedianAggregator">
            <summary>Makes a new median-aggregator.</summary>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeMinMaxAggregator(com.espertech.esper.type.MinMaxTypeEnum,System.Type)">
            <summary>Makes a new min-max-aggregator.</summary>
            <param name="minMaxType">dedicates whether to do min or max</param>
            <param name="targetType">is the type to max or min</param>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeStddevAggregator">
            <summary>Makes a new stddev-aggregator.</summary>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.NewAggregators(com.espertech.esper.epl.agg.AggregationMethod[],com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Returns a new set of aggregators given an existing prototype-set of aggregators for a given group key.
            </summary>
            <param name="prototypes">is the prototypes</param>
            <param name="groupKey">is the key to group-by for</param>
            <returns>new set of aggregators for this group</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.IntegerSumAggregator">
            <summary>Sum for integer values.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.IntegerSumAggregator.Enter(System.Object)">
            <summary>
            Enters the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.IntegerSumAggregator.Leave(System.Object)">
            <summary>
            Leaves the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.IntegerSumAggregator.NewAggregator(com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Make a new, initalized aggregation state.
            </summary>
            <param name="methodResolutionService">for use in creating new aggregation method instances as a factory</param>
            <returns>initialized copy of the aggregator</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.IntegerSumAggregator.Value">
            <summary>
            Returns the current value held.
            </summary>
            <value></value>
            <returns>current value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.IntegerSumAggregator.ValueType">
            <summary>
            Returns the type of the current value.
            </summary>
            <value></value>
            <returns>type of values held</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.AggregationSupport">
            <summary>
            Base class for use with plug-in aggregation functions.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.agg.AggregationSupport.functionName">
            <summary>
            Provides the aggregation function name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationSupport.Validate(System.Type)">
            <summary>
            Implemented by plug-in aggregation functions to allow such functions to validate the
            type of value passed to the function at statement compile time.
            </summary>
            <param name="childNodeType">
            is the class of result of the expression sub-node within the aggregation function, or
            null if a statement supplies no expression within the aggregation function
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationSupport.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationSupport.NewAggregator(com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Make a new, initalized aggregation state.
            </summary>
            <param name="methodResolutionService">for use in creating new aggregation method instances as a factory</param>
            <returns>initialized copy of the aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationSupport.Enter(System.Object)">
            <summary>
            Apply the value as entering aggregation (entering window).
            <para>
            The value can be null since 'null' values may be counted as unique separate values.
            </para>
            </summary>
            <param name="value">to add to aggregate</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationSupport.Leave(System.Object)">
            <summary>
            Apply the value as leaving aggregation (leaving window).
            <para>
            The value can be null since 'null' values may be counted as unique separate values.
            </para>
            </summary>
            <param name="value">to remove from aggregate</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationSupport.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.agg.AggregationSupport.FunctionName">
            <summary>
            Gets or sets the aggregation function name.
            </summary>
            <value>The name of the function.</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.AggregationSupport.Value">
            <summary>
            Returns the current value held.
            </summary>
            <value></value>
            <returns>current value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.AggregationSupport.ValueType">
            <summary>
            Returns the type of the current value.
            </summary>
            <value></value>
            <returns>type of values held</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.AggregationServiceGroupByImpl">
            <summary>
            Implementation for handling aggregation with grouping by group-keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceGroupByImpl.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.AggregationMethod[],com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>Ctor.</summary>
            <param name="evaluators">
            evaluate the sub-expression within the aggregate function (ie. Sum(4*myNum))
            </param>
            <param name="prototypes">
            collect the aggregation state that evaluators evaluate to, act as prototypes for new aggregations
            aggregation states for each group
            </param>
            <param name="methodResolutionService">
            factory for creating additional aggregation method instances per group key
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceGroupByImpl.ClearResults">
            <summary>
            Clear current aggregation state.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceGroupByImpl.ApplyEnter(com.espertech.esper.events.EventBean[],com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Applies the enter.
            </summary>
            <param name="eventsPerStream">The events per stream.</param>
            <param name="groupByKey">The group by key.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceGroupByImpl.ApplyLeave(com.espertech.esper.events.EventBean[],com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Applies the leave.
            </summary>
            <param name="eventsPerStream">The events per stream.</param>
            <param name="groupByKey">The group by key.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceGroupByImpl.SetCurrentRow(com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Sets the current row.
            </summary>
            <param name="groupByKey">The group by key.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceGroupByImpl.GetValue(System.Int32)">
            <summary>
            Returns current aggregation state, for use by expression node representing an aggregation function.
            </summary>
            <param name="column">is assigned to the aggregation expression node and passed as an column (index) into a row</param>
            <returns>current aggragation state</returns>
        </member>
        <member name="T:com.espertech.esper.core.EPStatementDesc">
            <summary>
            Statement information for use to perform statement lifecycle management.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementDesc.#ctor(com.espertech.esper.core.EPStatementSPI,com.espertech.esper.core.EPStatementStartMethod,com.espertech.esper.core.EPStatementStopMethod,System.String)">
            <summary>Ctor.</summary>
            <param name="epStatement">the statement</param>
            <param name="startMethod">the start method</param>
            <param name="stopMethod">the stop method</param>
            <param name="optInsertIntoStream">
            is the insert-into stream name, or null if not using insert-into
            </param>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementDesc.EpStatement">
            <summary>Returns the statement.</summary>
            <returns>statement.</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementDesc.StartMethod">
            <summary>Returns the start method.</summary>
            <returns>start method</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementDesc.StopMethod">
            <summary>Returns the stop method.</summary>
            <returns>stop method</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementDesc.OptInsertIntoStream">
            <summary>Return the insert-into stream name, or null if no insert-into</summary>
            <returns>stream name</returns>
        </member>
        <member name="T:com.espertech.esper.core.EPServicesContextFactoryDefault">
            <summary>Factory for services context.</summary>
        </member>
        <member name="T:com.espertech.esper.core.EPServicesContextFactory">
            <summary>
            Interface for a factory class to provide services in a services context for an engine instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPServicesContextFactory.CreateServicesContext(com.espertech.esper.client.EPServiceProvider,com.espertech.esper.client.ConfigurationInformation)">
            <summary>Factory method for a new set of engine services.</summary>
            <param name="epServiceProvider">is the engine instance</param>
            <param name="configurationSnapshot">
            is a snapshot of configs at the time of engine creation
            </param>
            <returns>services context</returns>
        </member>
        <member name="M:com.espertech.esper.core.EPServicesContextFactoryDefault.CreateServicesContext(com.espertech.esper.client.EPServiceProvider,com.espertech.esper.client.ConfigurationInformation)">
            <summary>
            Creates the services context.
            </summary>
            <param name="epServiceProvider">The ep service provider.</param>
            <param name="configSnapshot">The config snapshot.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.EPServicesContextFactoryDefault.CreateThreadLocalFactory(com.espertech.esper.client.ConfigurationEngineDefaults.ThreadLocal)">
            <summary>
            Creates the thread factory.
            </summary>
            <param name="threadLocalStyle">The thread local style.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.EPServicesContextFactoryDefault.MakeTimeSource(com.espertech.esper.client.ConfigurationInformation)">
            <summary>Makes the time source provider.</summary>
            <param name="configSnapshot">the configuration</param>
            <returns>time source provider</returns>
        </member>
        <member name="M:com.espertech.esper.core.EPServicesContextFactoryDefault.InitVariables(com.espertech.esper.epl.variable.VariableService,com.espertech.esper.compat.Map{System.String,com.espertech.esper.client.ConfigurationVariable})">
            <summary>
            Adds configured variables to the variable service.
            </summary>
            <param name="variableService">service to add to</param>
            <param name="variables">configured variables</param>
        </member>
        <member name="M:com.espertech.esper.core.EPServicesContextFactoryDefault.Init(com.espertech.esper.events.EventAdapterService,com.espertech.esper.client.ConfigurationInformation)">
            <summary>Initialize event adapter service for config snapshot.</summary>
            <param name="eventAdapterService">is events adapter</param>
            <param name="configSnapshot">is the config snapshot</param>
        </member>
        <member name="M:com.espertech.esper.core.EPServicesContextFactoryDefault.MakeEngineImportService(com.espertech.esper.client.ConfigurationInformation)">
            <summary>Constructs the auto import service.</summary>
            <param name="configSnapshot">config info</param>
            <returns>service</returns>
        </member>
        <member name="M:com.espertech.esper.core.EPServicesContextFactoryDefault.MakeDatabaseRefService(com.espertech.esper.client.ConfigurationInformation,com.espertech.esper.schedule.SchedulingService)">
            <summary>Creates the database config service.</summary>
            <param name="configSnapshot">is the config snapshot</param>
            <param name="schedulingService">is the timer stuff</param>
            <returns>database config svc</returns>
        </member>
        <member name="T:com.espertech.esper.compat.ReaderLock">
            <summary>
            Disposable object that acquires a read lock and disposes
            of the lock when it goes out of scope.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.BaseLock">
            <summary>
            Base class for disposable lock pattern.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.BaseLock.ACQUIRE_TEXT">
            <summary>Acquire text.</summary>
        </member>
        <member name="F:com.espertech.esper.compat.BaseLock.ACQUIRED_TEXT">
            <summary>Acquired text.</summary>
        </member>
        <member name="F:com.espertech.esper.compat.BaseLock.RELEASE_TEXT">
            <summary>Release text.</summary>
        </member>
        <member name="F:com.espertech.esper.compat.BaseLock.RELEASED_TEXT">
            <summary>Released text.</summary>
        </member>
        <member name="M:com.espertech.esper.compat.BaseLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.ReaderLock.m_uLockObj">
            <summary>
            Unmanaged lock object
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.ReaderLock.m_mLockObj">
            <summary>
            Managed lock object
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.ReaderLock.m_lockAcquired">
            <summary>
            Indicates if we acquired the lock
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ReaderLock.#ctor(com.espertech.esper.compat.FastReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ReaderLock"/> class.
            </summary>
            <param name="lockObj">The lock obj.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ReaderLock.#ctor(com.espertech.esper.util.ManagedReadWriteLock)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ReaderLock"/> class.
            </summary>
            <param name="lockObj">The lock obj.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ReaderLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.TreeMap`2">
            <summary>
            An extended dictionary that uses a tree-based backing store.
            As such, the dictionary is always sorted.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TreeMap`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.#ctor(C5.TreeDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TreeMap`2"/> class.
            </summary>
            <param name="subDictionary">The sub dictionary.</param>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TreeMap`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Head(`0)">
            <summary>
            Retrieves a dictionary that includes all elements less than
            or equal to the key.  This operation can be expensive, use with
            care.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.HeadFast(`0)">
            <summary>
            Retrieves the list of key-value pairs for all elements in the
            dictionary less than or equal to the key.  This operation is less
            expensive that the Head() method.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Tail(`0)">
            <summary>
            Retrieves a dictionary that includes all elements greater than
            or equal to the key.  This operation can be expensive, use with
            care.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.TailFast(`0)">
            <summary>
            Retrieves the list of key-value pairs for all elements in the
            dictionary greater than or equal to the key.  This operation is less
            expensive that the Tail() method.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Range(`0,`0)">
            <summary>
            Retrieves a dictionary that includes all elements greater than
            or equal to the lower key and less than or equal to the upper key.
            This operation can be expensive, use with care.
            </summary>
            <param name="lowerKey"></param>
            <param name="upperKey"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.RangeFast(`0,`0)">
            <summary>
            Retrieves a dictionary that includes all elements greater than
            or equal to the lower key and less than or equal to the upper key.
            This operation is less expensive than the Range operation.
            </summary>
            <param name="lowerKey"></param>
            <param name="upperKey"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Get(`0,`1)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then the defaultValue is
            returned.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Get(`0)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Put(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to thenew value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Push(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            If a value was previously mapped it is returned.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.PutAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Puts all values from the source dictionary into
            this dictionary.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Remove(`0,`1@)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  Returns the value that was found at that
            location and removed or the defaultValue.
            </summary>
            <param name="key">Search key into the dictionary</param>
            <param name="value">The value removed from the dictionary (if found).</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.RemoveAndReturn(`0)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  The item if found is returned; if not,
            default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeMap`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.TreeMap`2.FirstKey">
            <summary>
            Gets the first key.
            </summary>
            <value>The first key.</value>
        </member>
        <member name="P:com.espertech.esper.compat.TreeMap`2.LastKey">
            <summary>
            Gets the last key.
            </summary>
            <value>The last key.</value>
        </member>
        <member name="P:com.espertech.esper.compat.TreeMap`2.FirstValue">
            <summary>
            Returns the first value in the enumeration of values
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.TreeMap`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:V"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.TreeMap`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.TreeMap`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.TreeMap`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.TreeMap`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.compat.MonitorLock">
            <summary>
            MonitorLock is a class for assisting people with synchronized operations.
            Traditionally, code might have looked something like this:
            <code>
            lock( object ) { 
              ...
            }
            </code>
            However, this has a few issues.  It's prone to deadlock because the lock
            operator does not have a timeout.  It's also difficult to determine who
            owns a lock at a given time.  So eventually people changed to this form:
            <code>
            if (Monitor.TryEnter(object, timeout)) {
              try {
               ...
              } finally {
                Monitor.Exit(object);
              }
            }
            </code>
            It gets bulky and begins to become difficult to maintain over time.
            MonitorLock works much like the lock( object ) model except that it relies
            upon the IDisposable interface to help with scoping of the lock.  So to
            use MonitorLock, first instantiate one and then replace your lock(object)
            with this:
            <code>
            using(lockObj.Acquire()) {
              ...
            }
            </code>
            Your code will work as before except that the monitorLock will use a timed
            entry into critical sections and it can be used to diagnose issues that
            may be occuring in your thread locking.
            <para>
            MonitorLock allows users to specify events that can be consumed on lock
            acquisition or release.  Additionally, it can inform you when a lock
            is acquired within an existing lock.  And last, if you want to know where
            your locks are being acquired, it can maintain a StackTrace of points
            where allocations are occuring.
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorLock.s_uDefaultLockTimeout">
            <summary>
            Default timeout for lock acquisition.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorLock.m_uLockId">
            <summary>
            Uniquely identifies the lock.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorLock.m_uLockObj">
            <summary>
            Underlying object that is locked
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorLock.m_uLockTimeout">
            <summary>
            Number of milliseconds until the lock acquisition fails
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorLock.m_uLockOwner">
            <summary>
            Owner of the lock.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorLock.m_uLockDepth">
            <summary>
            Used to track recursive locks.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.MonitorLock.m_uLockDebug">
            <summary>
            Indication as to whether we are debugging or not
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.MonitorLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorLock.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.MonitorLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorLock.Acquire">
            <summary>
            Acquires a lock against this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorLock.InternalAcquire">
            <summary>
            Internally acquires the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorLock.InternalRelease">
            <summary>
            Internally releases the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorLock.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.MonitorLock.DefaultTimeout">
            <summary>
            Gets the default timeout.
            </summary>
            <value>The default timeout.</value>
        </member>
        <member name="P:com.espertech.esper.compat.MonitorLock.LockTimeout">
            <summary>
            Gets the number of milliseconds until the lock acquisition fails.
            </summary>
            <value>The lock timeout.</value>
        </member>
        <member name="P:com.espertech.esper.compat.MonitorLock.LockDepth">
            <summary>
            Gets the lock depth.
            </summary>
            <value>The lock depth.</value>
        </member>
        <member name="P:com.espertech.esper.compat.MonitorLock.IsHeldByCurrentThread">
            <summary>
            Gets a value indicating whether this instance is held by current thread.
            </summary>
            <value>
            	<c>true</c> if this instance is held by current thread; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:com.espertech.esper.compat.MonitorLock.DisposableLock">
            <summary>
            A disposable object that is allocated and acquires the
            lock and automatically releases the lock when it is
            disposed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorLock.DisposableLock.#ctor(com.espertech.esper.compat.MonitorLock)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.MonitorLock.DisposableLock"/> class.
            </summary>
            <param name="lockObj">The lock obj.</param>
        </member>
        <member name="M:com.espertech.esper.compat.MonitorLock.DisposableLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.collection.TransformEventMethod">
            <summary>Transform event returning the transformed event.</summary>
            <param name="_event">event to transform</param>
            <returns>transformed event</returns>
        </member>
        <member name="T:com.espertech.esper.collection.RefCountedSet`1">
            <summary> reference-counting set based on a HashMap implementation that stores keys and a reference counter for
            each unique key value. Each time the same key is added, the reference counter increases.
            Each time a key is removed, the reference counter decreases.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.AddNull">
            <summary>
            Adds a key to the set, but the key is null.  It behaves the same, but has its own
            variables that need to be incremented.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.Add(`0)">
            <summary> Add a key to the set. Add with a reference count of one if the key didn't exist in the set.
            Increase the reference count by one if the key already exists.
            Return true if this is the first time the key was encountered, or false if key is already in set.
            </summary>
            <param name="key">to add
            </param>
            <returns> true if the key is not in the set already, false if the key is already in the set
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.RemoveNull">
            <summary>
            Removes the null key
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.Add(`0,System.Int32)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="numReferences">The num references.</param>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.Remove(`0)">
            <summary> Removed a key to the set. Removes the key if the reference count is one.
            Decreases the reference count by one if the reference count is more then one.
            Return true if the reference count was one and the key thus removed, or false if key is stays in set.
            </summary>
            <param name="key">to add
            </param>
            <returns> true if the key is removed, false if it stays in the set
            </returns>
            <throws>  IllegalStateException is a key is removed that wasn't added to the map </throws>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.GetEnumerator">
            <summary> Returns an iterator over the entry set.</summary>
            <returns> entry set iterator
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="P:com.espertech.esper.collection.RefCountedSet`1.Count">
            <summary> Returns the number of values in the collection.</summary>
            <returns> size
            </returns>
        </member>
        <member name="T:com.espertech.esper.collection.MultiKey`1">
            <summary> Functions as a key value for Maps where keys need to be composite values.
            The class allows a Map that uses MultiKeyUntyped entries for key values to use multiple objects as keys.
            It calculates the hashCode from the key objects on construction and caches the hashCode.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKey`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.collection.MultiKey`1"/> class.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKey`1.#ctor(`0[])">
            <summary> Constructor for multiple keys supplied in an object array.</summary>
            <param name="keys">is an array of key objects
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKey`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="other">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKey`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKey`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKey`1.Array">
            <summary> Returns the key value array.</summary>
            <returns> key value array
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKey`1.Count">
            <summary> Returns the number of key objects.</summary>
            <returns> size of key object array
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKey`1.Item(System.Int32)">
            <summary> Returns the key object at the specified position.</summary>
            <param name="index">is the array position
            </param>
            <returns> key object at position
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.View">
            <summary>
            A view provides a projection upon a stream, such as a data window, grouping or unique.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.EPBaseNamedObject">
            <summary>
            Base class for named engine objects such as views, patterns guards and observers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPBaseNamedObject.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Ctor.
            </summary>
            <param name="namespace">is the namespace of the object, i.e. view namespace or pattern object namespace</param>
            <param name="name">is the name of the object, such as the view name</param>
            <param name="parameters">is the optional parameters to the view or pattern object, or empty list for no parameters</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPBaseNamedObject.ToEPL(System.IO.StringWriter)">
            <summary>
            Writes the object in EPL-syntax in the format "namespace:name(parameter, parameter, ..., parameter)"
            </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPBaseNamedObject.Namespace">
            <summary>Gets or sets the object namespace name.</summary>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPBaseNamedObject.Name">
            <summary>Gets or sets the object name.</summary>
            <returns>object name</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPBaseNamedObject.Parameters">
            <summary>Gets or sets the object parameters.</summary>
            <returns>parameters for object, empty list for no parameters</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.View.Create(System.String,System.String)">
            <summary>
            Creates a view.
            </summary>
            <param name="namespace">the view namespace, i.e. "win" for data windows</param>
            <param name="name">the view name, i.e. "length" for length window</param>
            <returns>view</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.View.Create(System.String,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Creates a view.
            </summary>
            <param name="namespace">the view namespace, i.e. "win" for data windows</param>
            <param name="name">the view name, i.e. "length" for length window</param>
            <param name="parameters">a list of view parameters, or empty if there are no parameters for the view</param>
            <returns>view</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.View.Create(System.String,System.String,System.Object[])">
            <summary>
            Creates a view.
            </summary>
            <param name="namespace">the view namespace, i.e. "win" for data windows</param>
            <param name="name">the view name, i.e. "length" for length window</param>
            <param name="parameters">a list of view parameters, or empty if there are no parameters for the view</param>
            <returns>view</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.View.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Creates a view.
            </summary>
            <param name="namespace">the view namespace, i.e. "win" for data windows</param>
            <param name="name">the view name, i.e. "length" for length window</param>
            <param name="parameters">a list of view parameters, or empty if there are no parameters for the view</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternStream">
            <summary>
            A stream of events that is generated by pattern matches.
            <para/>
            Patterns matches are events that match pattern expressions. Pattern expressions are built using
            <see cref="T:com.espertech.esper.client.soda.Patterns"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternStream.Create(com.espertech.esper.client.soda.PatternExpr)">
            <summary>Creates a pattern stream from a pattern expression.</summary>
            <param name="expression">pattern expression</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternStream.Create(com.espertech.esper.client.soda.PatternExpr,System.String)">
            <summary>Creates a named pattern stream from a pattern expression.</summary>
            <param name="expression">pattern expression</param>
            <param name="optStreamName">is the pattern stream name (as-name)</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternStream.#ctor(com.espertech.esper.client.soda.PatternExpr)">
            <summary>Ctor.</summary>
            <param name="expression">pattern expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternStream.#ctor(com.espertech.esper.client.soda.PatternExpr,System.String)">
            <summary>Ctor.</summary>
            <param name="expression">pattern expression</param>
            <param name="optStreamName">is the pattern stream name (as-name)</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternStream.Expression">
            <summary>Gets or sets the pattern expression providing events to the stream.</summary>
            <returns>pattern expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternFollowedByExpr">
            <summary>
            Followed-by for use in pattern expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternFollowedByExpr.#ctor">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternFollowedByExpr.#ctor(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr[])">
            <summary>Ctor.</summary>
            <param name="first">
            a first pattern expression in the followed-by relationship
            </param>
            <param name="second">
            a second pattern expression in the followed-by relationship
            </param>
            <param name="patternExprs">
            further optional pattern expressions in the followed-by relationship
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternFollowedByExpr.Add(com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Adds a pattern expression to the followed-by relationship between patterns.
            </summary>
            <param name="expr">to add</param>
            <returns>pattern expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.Filter">
            <summary>
            Filter defines the event type to be filtered for, and an optional expression that returns true if
            the filter should consider the event, or false to reject the event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Filter.Create(System.String)">
            <summary>Creates a filter to the given named event type.</summary>
            <param name="eventTypeAlias">is the event type name to filter for</param>
            <returns>filter</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Filter.Create(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>
            Creates a filter to the given named event type and filter expression.
            </summary>
            <param name="eventTypeAlias">is the event type name to filter for</param>
            <param name="filter">is the expression filtering out events</param>
            <returns>filter is the filter expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Filter.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="eventTypeAlias">is the event type name</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.Filter.#ctor(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="eventTypeAlias">is the event type name</param>
            <param name="filter">is the filter expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.Filter.ToEPL(System.IO.StringWriter)">
            <summary>Gets or sets the a textual representation of the filter.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.Filter.EventTypeAlias">
            <summary>Gets or sets the name of the event type to filter for.</summary>
            <returns>event type alias name</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.Filter.FilterExpression">
            <summary>
            Gets or sets the optional filter expression that tests the event, or null if no filter expression was defined.
            </summary>
            <returns>filter expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.CastExpression">
            <summary>
            Cast expression casts the return value of an expression to a specified type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CastExpression.#ctor(System.String)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="typeName">
            is the type to cast to: a fully-qualified class name or primitive type name or "string"
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CastExpression.#ctor(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Ctor.</summary>
            <param name="expressionToCheck">provides values to cast</param>
            <param name="typeName">
            is the type to cast to: a fully-qualified class names or primitive type names or "string"
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CastExpression.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CastExpression.TypeName">
            <summary>Gets or sets the name of the type to cast to.</summary>
            <returns>type name</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.ArrayExpression">
            <summary>
            Array expression forms array results, similar to the EPL syntax
            of "{element 1, element 2, ... element n}".
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArrayExpression.Add(System.String)">
            <summary>Add a property to the expression.</summary>
            <param name="property">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArrayExpression.Add(System.Object)">
            <summary>
            Add a constant to the expression.
            </summary>
            <param name="object">Constant object that is to be added.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArrayExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression representing an array element to the expression.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.EPStatementException">
            <summary>
            This exception is thrown to indicate a problem in statement creation, such as syntax error or type
            checking problem etc.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPStatementException.#ctor(System.String,System.String)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
            <param name="expression">expression text
            </param>
        </member>
        <member name="M:com.espertech.esper.client.EPStatementException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Ctor.
            </summary>
            <param name="message">error message</param>
            <param name="expression">expression text</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:com.espertech.esper.client.EPStatementException.Expression">
            <summary>
            Gets or sets the expression text for statement.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:com.espertech.esper.client.EPStatementException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="T:com.espertech.esper.client.EPServiceProviderManager">
            <summary>
            Factory for instances of <see cref="T:com.espertech.esper.client.EPServiceProvider"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.GetDefaultProvider">
            <summary> Returns the default EPServiceProvider.</summary>
            <returns> default instance of the service.
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.GetDefaultProvider(com.espertech.esper.client.Configuration)">
            <summary> Returns the default EPServiceProvider.</summary>
            <param name="configuration">is the configuration for the service
            </param>
            <returns> default instance of the service.
            </returns>
            <throws>  ConfigurationException to indicate a configuration problem </throws>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.GetProvider(System.String)">
            <summary>Returns an EPServiceProvider for a given provider URI.</summary>
            <param name="providerURI">the provider URI</param>
            <returns>EPServiceProvider for the given provider URI.</returns>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.GetProvider(System.String,com.espertech.esper.client.Configuration)">
            <summary>Returns an EPServiceProvider for a given provider URI.</summary>
            <param name="providerURI">the provider URI</param>
            <param name="configuration">is the configuration for the service</param>
            <returns>EPServiceProvider for the given provider URI.</returns>
            <throws>ConfigurationException to indicate a configuration problem</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.PurgeProvider(System.String)">
            <summary>
            Clears references to the provider.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.PurgeDefaultProvider">
            <summary>
            Clears references to the default provider.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.PurgeAllProviders">
            <summary>
            Purges all providers.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProviderManager.ProviderURIs">
            <summary>
            Returns a collection of known provider URIs.
            Returns a null-value for the default provider, or if no URI has been supplied
            when obtaining a service instance.
            <para/>
            Returns URIs for all engine instances including destroyed instances.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.UpdateStrategyBase">
            <summary>Base strategy implementation holds the specification object. </summary>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.UpdateStrategy">
            <summary>Strategy for merging updates or additional properties. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategy.HandleUpdate(System.Boolean,com.espertech.esper.events.vaevent.RevisionStateMerge,com.espertech.esper.events.vaevent.RevisionEventBeanMerge,com.espertech.esper.events.vaevent.RevisionTypeDesc)">
            <summary>Merge properties. </summary>
            <param name="isBaseEventType">true if the event is a base event type</param>
            <param name="revisionState">the current state, to be updated.</param>
            <param name="revisionEvent">the new event to merge</param>
            <param name="typesDesc">descriptor for event type of the new event to merge</param>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.UpdateStrategyBase.spec">
            <summary>The specification. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategyBase.#ctor(com.espertech.esper.events.vaevent.RevisionSpec)">
            <summary>Ctor. </summary>
            <param name="spec">is the specification</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategyBase.ArrayCopy``1(com.espertech.esper.util.NullableObject{``0}[])">
            <summary>Array copy. </summary>
            <param name="array">to copy</param>
            <returns>copied array</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategyBase.HandleUpdate(System.Boolean,com.espertech.esper.events.vaevent.RevisionStateMerge,com.espertech.esper.events.vaevent.RevisionEventBeanMerge,com.espertech.esper.events.vaevent.RevisionTypeDesc)">
            <summary>Merge properties. </summary>
            <param name="isBaseEventType">true if the event is a base event type</param>
            <param name="revisionState">the current state, to be updated.</param>
            <param name="revisionEvent">the new event to merge</param>
            <param name="typesDesc">descriptor for event type of the new event to merge</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionStateMerge">
            <summary>State for merge stratgies. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionStateMerge.#ctor(com.espertech.esper.events.EventBean,com.espertech.esper.util.NullableObject{System.Object}[],com.espertech.esper.events.vaevent.RevisionEventBeanMerge)">
            <summary>Ctor. </summary>
            <param name="baseEventUnderlying">base event</param>
            <param name="overlays">merged values</param>
            <param name="lastEvent">last event</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateMerge.BaseEventUnderlying">
            <summary>Gets or sets base event. </summary>
            <returns>base event</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateMerge.Overlays">
            <summary>Gets or sets the merged values. </summary>
            <returns>merged values</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateMerge.LastEvent">
            <summary>Gets or sets the last event. </summary>
            <returns>last event</returns>
        </member>
        <member name="T:com.espertech.esper.events.MapNestedEventPropertyGetter">
            <summary>A getter for querying Map-within-Map event properties. </summary>
        </member>
        <member name="M:com.espertech.esper.events.MapNestedEventPropertyGetter.#ctor(System.Collections.Generic.Stack{System.String})">
            <summary>Ctor. </summary>
            <param name="accessPath">is the properties to follow down into nested maps.</param>
        </member>
        <member name="M:com.espertech.esper.events.MapNestedEventPropertyGetter.#ctor(System.Collections.Generic.Stack{System.String},System.String)">
            <summary>Ctor. </summary>
            <param name="accessPath">is the properties to follow down into nested maps.</param>
            <param name="leaf">the last property we are looking for in the readonly map</param>
        </member>
        <member name="T:com.espertech.esper.events.EventSenderMap">
            <summary>
            Event sender for map-backed events.
            <para/>
            Allows sending only event objects of type map, does not check map contents.
            Any other event object generates an error.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventSenderMap.Create(com.espertech.esper.core.EPRuntimeEventSender,com.espertech.esper.events.MapEventType)">
            <summary>
            Creates the specified runtime event sender.
            </summary>
            <param name="runtimeEventSender">The runtime event sender.</param>
            <param name="mapEventType">Type of the map event.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.events.EventSenderBean">
            <summary>
            Event sender for object events.
            <para/>
            Allows sending only event objects of the underlying type matching the event type,
            or implementing the interface or extending the type. Any other event object generates
            an error.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventSenderBean.Create(com.espertech.esper.core.EPRuntimeEventSender,com.espertech.esper.events.BeanEventType)">
            <summary>
            Creates the specified runtime event sender.
            </summary>
            <param name="runtimeEventSender">The runtime event sender.</param>
            <param name="beanEventType">Type of the bean event.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewSnapshot">
            <summary>A view that handles the "output snapshot" keyword in output rate stabilizing. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewSnapshot.#ctor(com.espertech.esper.epl.core.ResultSetProcessor,com.espertech.esper.epl.view.OutputStrategy,System.Boolean,System.Int32,com.espertech.esper.epl.spec.OutputLimitSpec,com.espertech.esper.core.StatementContext)">
            <summary>Ctor. </summary>
            <param name="resultSetProcessor">is processing the result set for publishing it out</param>
            <param name="streamCount">is the number of streams, indicates whether or not this view participates in a join</param>
            <param name="outputLimitSpec">is the specification for limiting output (the output condition and the result set processor)</param>
            <param name="statementContext">is the services the output condition may depend on</param>
            <param name="isInsertInto">is true if the statement is a insert-into</param>
            <param name="outputStrategy">is the method to use to produce output</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewSnapshot.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>The update method is called if the view does not participate in a join. </summary>
            <param name="newData">new events</param>
            <param name="oldData">old events</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewSnapshot.Process(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary>This process (update) method is for participation in a join. </summary>
            <param name="newEvents">new events</param>
            <param name="oldEvents">old events</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewSnapshot.ContinueOutputProcessingView(System.Boolean,System.Boolean)">
            <summary>
            Called once the output condition has been met.  Invokes the result set processor.  Used for 
            non-join event data.
            </summary>
            <param name="doOutput">true if the batched events should actually be output as well as processed, false if they should just be processed</param>
            <param name="forceUpdate">true if output should be made even when no updating events have arrived</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewSnapshot.ContinueOutputProcessingJoin(System.Boolean,System.Boolean)">
            <summary>Called once the output condition has been met.Invokes the result set processor.Used for join event data.</summary>
            <param name="doOutput">true if the batched events should actually be output as well as processed, false if they should just be processed</param>
            <param name="forceUpdate">true if output should be made even when no updating events have arrived</param>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VersionedValueList`1">
            <summary>
            A self-cleaning list of versioned-values.
            <para/>
            The current and prior version are held for lock-less read access in a transient variable.
            <para/>
            The list relies on transient as well as a read-lock to guard against concurrent modification. However a read lock is only
            taken when a list of old versions must be updated.
            <para/>
            When a high watermark is reached, the list on write access removes old versions up to the
            number of milliseconds compared to current write timestamp.
            <para/>
            If an older version is requested then held by the list, the list can either throw an exception
            or return the current value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VersionedValueList`1.#ctor(System.String,System.Int32,`0,System.Int64,System.Int64,com.espertech.esper.compat.ILockable,System.Int32,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="name">variable name</param>
            <param name="initialVersion">first version number</param>
            <param name="initialValue">first value</param>
            <param name="timestamp">timestamp of first version</param>
            <param name="millisecondLifetimeOldVersions">
            number of milliseconds after which older versions get expired and removed
            </param>
            <param name="readLock">for coordinating update to old versions</param>
            <param name="highWatermark">
            when the number of old versions reached high watermark, the list inspects size on every write
            </param>
            <param name="errorWhenNotFound">
            true if an exception should be throw if the requested version cannot be found,
            or false if the engine should log a warning
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VersionedValueList`1.GetVersion(System.Int32)">
            <summary>
            Retrieve a value for the given version or older then then given version.
            <para/>
            The implementaton only locks the read lock if an older version the the prior version is requested.
            </summary>
            <param name="versionAndOlder">the version we are looking for</param>
            <returns>
            value for the version or the next older version, ignoring newer versions
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VersionedValueList`1.AddValue(System.Int32,`0,System.Int64)">
            <summary>
            Add a value and version to the list, returning the prior value of the variable.
            </summary>
            <param name="version">for the value to add</param>
            <param name="value">to add</param>
            <param name="timestamp">the time associated with the version</param>
            <returns>prior value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VersionedValueList`1.Name">
            <summary>Returns the name of the value stored.</summary>
            <returns>value name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VersionedValueList`1.CurrentAndPriorValue">
            <summary>Returns the current and prior version.</summary>
            <returns>value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VersionedValueList`1.OlderVersions">
            <summary>Returns the list of old versions, for testing purposes.</summary>
            <returns>list of versions older then current and prior version</returns>
        </member>
        <member name="T:com.espertech.esper.epl.subquery.SubqueryStopCallback">
            <summary>
            Implements a stop callback for use with subqueries to clear their indexes
            when a statement is stopped.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.subquery.SubqueryStopCallback.#ctor(com.espertech.esper.epl.join.table.EventTable)">
            <summary>Ctor.</summary>
            <param name="eventIndex">index to clear</param>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowRootView">
            <summary>
            The root window in a named window plays multiple roles: It holds the indexes for deleting rows,
            if any on-delete statement requires such indexes. Such indexes are updated when events arrive, or
            remove from when a data window or on-delete statement expires events. The view keeps track of
            on-delete statements their indexes used.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootView.#ctor(com.espertech.esper.events.vaevent.ValueAddEventProcessor)">
            <summary>
            Ctor.
            </summary>
            <param name="revisionProcessor">handle update events if supplied, or null if not handling revisions</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootView.RemoveOldData(com.espertech.esper.events.EventBean[])">
            <summary>Called by tail view to indicate that the data window view exired events that must be removed from index tables. </summary>
            <param name="oldData">removed stream of the data window</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootView.AddOnExpr(com.espertech.esper.epl.spec.OnTriggerDesc,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.events.EventType,com.espertech.esper.view.StatementStopService,com.espertech.esper.core.InternalEventRouter,com.espertech.esper.epl.core.ResultSetProcessor,com.espertech.esper.core.EPStatementHandle,com.espertech.esper.core.StatementResultService)">
            <summary>Add an on-trigger view that, using a lookup strategy, looks up from the named window and may select or delete rows. </summary>
            <param name="onTriggerDesc">the specification for the on-delete</param>
            <param name="filterEventType">the event type for the on-clause in the on-delete</param>
            <param name="statementStopService">for stopping the statement</param>
            <param name="internalEventRouter">for insert-into behavior</param>
            <param name="resultSetProcessor">@return view representing the on-delete view chain, posting delete events to it's listeners</param>
            <param name="statementHandle">is the handle to the statement, used for routing/insert-into</param>
            <param name="joinExpr">is the join expression or null if there is none</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
            <returns>base view for on-trigger expression</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootView.RemoveOnExpr(com.espertech.esper.epl.named.LookupStrategy)">
            <summary>Unregister an on-delete statement view, using the strategy as a key to remove a reference to the index table used by the strategy. </summary>
            <param name="strategy">to use for deleting events</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootView.Destroy">
            <summary>Destroy and clear resources. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowRootView.DataWindowContents">
            <summary>
            Gets or sets the enumerable to use to obtain current named window data window contents.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowRootView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.named.LookupStrategyAllRows">
            <summary>
            Deletes from a named window all events simply using the named window's data window iterator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.LookupStrategyAllRows.#ctor(System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean})">
            <summary>Ctor.</summary>
            <param name="source">iterator of the data window under the named window</param>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.TableLookupStrategy">
            <summary>
            Strategy for looking up, in some sort of table or index, or a set of events, potentially based on the
            events properties, and returning a set of matched events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.TableLookupStrategy.Lookup(com.espertech.esper.events.EventBean[])">
            <summary>
            Returns matched events for a set of events to look up for. Never returns an empty result set,
            always returns null to indicate no results.
            </summary>
            <param name="events">to look up</param>
            <returns>set of matching events, or null if none matching</returns>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.IndexedTableLookupStrategyCoercing">
            <summary>
            Index lookup strategy that coerces the key values before performing a lookup.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.IndexedTableLookupStrategy">
            <summary>Index lookup strategy for subqueries.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.IndexedTableLookupStrategy.streamNumbers">
            <summary>Stream numbers to get key values from.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.IndexedTableLookupStrategy.index">
            <summary>Index to look up in.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.IndexedTableLookupStrategy.propertyGetters">
            <summary>Getters to use to get key values.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.IndexedTableLookupStrategy.#ctor(com.espertech.esper.events.EventType[],System.Int32[],System.String[],com.espertech.esper.epl.join.table.PropertyIndexedEventTable)">
            <summary>Ctor.</summary>
            <param name="eventTypes">is the event types per stream</param>
            <param name="streamNumbers">is the stream number per property</param>
            <param name="properties">is the key properties</param>
            <param name="index">is the table carrying the data to lookup into</param>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.IndexedTableLookupStrategy.GetKeys(com.espertech.esper.events.EventBean[])">
            <summary>Get the index lookup keys.</summary>
            <param name="eventsPerStream">is the events for each stream</param>
            <returns>key object</returns>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.IndexedTableLookupStrategy.Properties">
            <summary>Returns properties to use from lookup event to look up in index.</summary>
            <returns>properties to use from lookup event</returns>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.IndexedTableLookupStrategy.Index">
            <summary>Returns index to look up in.</summary>
            <returns>index to use</returns>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.IndexedTableLookupStrategyCoercing.#ctor(com.espertech.esper.events.EventType[],System.Int32[],System.String[],com.espertech.esper.epl.join.table.PropertyIndexedEventTable,System.Type[])">
            <summary>Ctor.</summary>
            <param name="eventTypes">is the event type per stream</param>
            <param name="streamNumbers">is the stream numbers to get keys from</param>
            <param name="properties">is the property names</param>
            <param name="index">is the table to look into</param>
            <param name="coercionTypes">is the types to coerce to before lookup</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.HistoricalIndexLookupStrategy">
            <summary>
            Strategy for use in poll-based joins to reduce a cached result set (represented by <see cref="T:com.espertech.esper.epl.join.table.EventTable"/>), in
            which the cache result set may have been indexed, to fewer rows following the join-criteria in a where clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.HistoricalIndexLookupStrategy.Lookup(com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.table.EventTable)">
            <summary>
            Look up into the index, potentially using some of the properties in the lookup event,
            returning a partial or full result in respect to the index.
            </summary>
            <param name="lookupEvent">
            provides properties to use as key values for indexes
            </param>
            <param name="index">
            is the table providing the cache result set, potentially indexed by index fields
            </param>
            <returns>full set or partial index iterator</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeVariableVisitor">
            <summary>
            Visitor for expression node trees that determines if the expressions within contain a variable.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeVariableVisitor.HasVariables">
            <summary>Returns true if the visitor finds a variable value.</summary>
            <returns>true for variable present in expression</returns>
        </member>
        <member name="T:com.espertech.esper.core.EPQueryResultImpl">
            <summary>Query result. </summary>
        </member>
        <member name="T:com.espertech.esper.core.EPQueryResult">
            <summary>
            Results of a fire-and-forget, non-continuous query.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPQueryResult.GetArray">
            <summary>Returns an array representing query result rows. </summary>
            <returns>result array</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPQueryResult.EventType">
            <summary>Returns the event type of the result. </summary>
            <returns>type</returns>
        </member>
        <member name="M:com.espertech.esper.core.EPQueryResultImpl.#ctor(com.espertech.esper.core.EPPreparedQueryResult)">
            <summary>Ctor. </summary>
            <param name="queryResult">is the prepared query</param>
        </member>
        <member name="M:com.espertech.esper.core.EPQueryResultImpl.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.core.EPQueryResultImpl.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.core.EPQueryResultImpl.GetArray">
            <summary>
            Returns an array representing query result rows.
            </summary>
            <returns>result array</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPQueryResultImpl.EventType">
            <summary>
            Returns the event type of the result.
            </summary>
            <value></value>
            <returns>type</returns>
        </member>
        <member name="T:com.espertech.esper.core.EPPreparedQueryImpl">
            <summary>
            Provides prepared query functionality.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.EPPreparedQuery">
            <summary>
            Interface for a prepared query that can be executed multiple times.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPPreparedQuery.Execute">
            <summary>
            Execute the prepared query returning query results.
            </summary>
            <returns>query result</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPPreparedQuery.EventType">
            <summary>
            Returns the event type, representing the columns of the select-clause
            </summary>
            <value>The type of the event.</value>
            <returns>event type</returns>
        </member>
        <member name="M:com.espertech.esper.core.EPPreparedQueryImpl.#ctor(com.espertech.esper.core.EPPreparedExecuteMethod,System.String)">
            <summary>Ctor. </summary>
            <param name="executeMethod">used at execution time to obtain query results</param>
            <param name="epl">is the EPL to execute</param>
        </member>
        <member name="T:com.espertech.esper.compat.SystemThreadLocal`1">
            <summary>
            ThreadLocal implementation that uses the native support
            in the CLR (i.e. the LocalDataStoreSlot).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:com.espertech.esper.compat.ThreadLocal`1">
            <summary>
            ThreadLocal provides the engine with a way to store information that
            is local to the instance and a the thread.  While the CLR provides the
            ThreadStatic attribute, it can only be applied to static variables;
            some usage patterns in esper (such as statement-specific thread-specific
            processing data) require that data be associated by instance and thread.
            The CLR provides a solution to this known as LocalDataStoreSlot.  It
            has been documented that this method is slower than its ThreadStatic
            counterpart, but it allows for instance-based allocation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.ThreadLocal`1.GetOrCreate">
            <summary>
            Gets the data or creates it if not found.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.ThreadLocal`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="F:com.espertech.esper.compat.SystemThreadLocal`1.m_dataStoreSlot">
            <summary>
            Local data storage slot
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.SystemThreadLocal`1.m_dataFactory">
            <summary>
            Factory delegate for construction of data on miss.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SystemThreadLocal`1.GetOrCreate">
            <summary>
            Gets the data or creates it if not found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.SystemThreadLocal`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SystemThreadLocal`1.#ctor(com.espertech.esper.compat.FactoryDelegate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.SystemThreadLocal`1"/> class.
            </summary>
            <param name="factory">The factory used to create values when not found.</param>
        </member>
        <member name="P:com.espertech.esper.compat.SystemThreadLocal`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:com.espertech.esper.compat.SystemThreadLocalFactory">
            <summary>
            Creates system thread local objects.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.ThreadLocalFactory">
            <summary>
            Creator and manufacturer of thread local objects.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ThreadLocalFactory.CreateThreadLocal``1(com.espertech.esper.compat.FactoryDelegate{``0})">
            <summary>
            Create a thread local object of the specified type param.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.SystemThreadLocalFactory.CreateThreadLocal``1(com.espertech.esper.compat.FactoryDelegate{``0})">
            <summary>
            Create a thread local object of the specified type param.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.EventTypeException">
            <summary>
            Indicates that a problem occurred looking up, assigning or creating and event type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EventTypeException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">supplies exception details</param>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPluginLoader">
            <summary>
            Holds configuration for a plugin such as an input/output
            adapter loader.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationPluginLoader.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPluginLoader.TypeName">
            <summary>
            Gets or sets the loader class name.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPluginLoader.ConfigProperties">
            <summary>
            Gets or sets the config properties.
            </summary>
            <value>The config properties.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPluginLoader.LoaderName">
            <summary>
            Gets or sets the name of the loader.
            </summary>
            <value>The name of the loader.</value>
        </member>
        <member name="T:com.espertech.esper.view.ZeroDepthStream">
            <summary>
            Event stream implementation that does not keep any window by itself of the events
            coming into the stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ZeroDepthStream.#ctor(com.espertech.esper.events.EventType)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.view.ZeroDepthStream"/> class.
            </summary>
            <param name="eventType">type of event</param>
        </member>
        <member name="M:com.espertech.esper.view.ZeroDepthStream.Insert(com.espertech.esper.events.EventBean)">
            <summary>
            Inserts the specified event.
            </summary>
            <param name="ev">The ev.</param>
        </member>
        <member name="M:com.espertech.esper.view.ZeroDepthStream.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ZeroDepthStream.AddView(com.espertech.esper.view.View)">
            <summary>
            Add a view to the viewable object.
            </summary>
            <param name="view">to add</param>
            <returns>view to add</returns>
        </member>
        <member name="M:com.espertech.esper.view.ZeroDepthStream.RemoveView(com.espertech.esper.view.View)">
            <summary>
            Remove a view.
            </summary>
            <param name="view">to remove</param>
            <returns>
            true to indicate that the view to be removed existed within this view, false if the view to
            remove could not be found
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ZeroDepthStream.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ZeroDepthStream.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns> metadata for the objects in the collection
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ZeroDepthStream.Views">
            <summary>
            Returns all added views.
            </summary>
            <returns>list of added views</returns>
        </member>
        <member name="P:com.espertech.esper.view.ZeroDepthStream.HasViews">
            <summary>
            Test is there are any views to the Viewable.
            </summary>
            <value></value>
            <returns> true indicating there are child views, false indicating there are no child views
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewProcessingException">
            <summary>
            This exception is thrown to indicate a problem with a view expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewProcessingException.#ctor(System.String)">
            <summary> Constructor.</summary>
            <param name="message">is the error message
            </param>
        </member>
        <member name="M:com.espertech.esper.view.ViewProcessingException.#ctor(System.String,System.Exception)">
            <summary> Constructor for an inner exception and message.</summary>
            <param name="message">is the error message
            </param>
            <param name="cause">is the inner exception
            </param>
        </member>
        <member name="M:com.espertech.esper.view.ViewProcessingException.#ctor(System.Exception)">
            <summary> Constructor.</summary>
            <param name="cause">is the inner exception
            </param>
        </member>
        <member name="T:com.espertech.esper.view.ViewEnumHelper">
            <summary>Helper producing a repository of built-in views.</summary>
        </member>
        <member name="P:com.espertech.esper.view.ViewEnumHelper.BuiltinViews">
            <summary>Returns a collection of plug-in views.</summary>
            <returns>built-in view definitions</returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewCapPriorEventAccess">
            <summary>
            Describes that we need access to prior events (result events published by views),
            for use by the &quot;prior&quot; expression function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewCapPriorEventAccess.#ctor(System.Nullable{System.Int32})">
            <summary>Ctor.</summary>
            <param name="indexConstant">
            is the index of the prior event, with zero being the current event.
            </param>
        </member>
        <member name="M:com.espertech.esper.view.ViewCapPriorEventAccess.RequiresChildViews">
            <summary>
            Returns true to indicate that the capability requirs one or more child views, or can work without child views.
            </summary>
            <returns>
            true for child views required, false for not required
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewCapPriorEventAccess.IndexConstant">
            <summary>Index or the prior event we are asking for.</summary>
            <returns>prior event index constant</returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewAttachException">
            <summary>Thrown to indicate a validation error in staggered views.</summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewAttachException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="message">validation error message</param>
        </member>
        <member name="T:com.espertech.esper.view.StatementStopCallbackDelegate">
            <summary>
            Delegate that is used for wrapping the StatementStopCallback interface.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.ProxyStatementStopCallback">
            <summary>
            Proxy implementation for StatementStopCallback
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ProxyStatementStopCallback.#ctor(com.espertech.esper.view.StatementStopCallbackDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.view.ProxyStatementStopCallback"/> class.
            </summary>
            <param name="stopDelegate">The stop delegate.</param>
        </member>
        <member name="M:com.espertech.esper.view.ProxyStatementStopCallback.StatementStopped">
            <summary>
            Indicates statement stopped.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.WeightedAverageView">
            <summary>
            View for computing a weighted average. The view uses 2 fields within the parent view to compute
            the weighted average. The X field and weight field. In a price-volume example it calculates the
            volume-weighted average price as (sum(price * volume) / sum(volume)).
            <c>
                Example: weighted_avg("price", "volume")
            </c>
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageView.#ctor(com.espertech.esper.core.StatementContext,System.String,System.String)">
            <summary>
            Constructor requires the name of the field to use in the parent view to compute the weighted average on,
            as well as the name of the field in the parent view to get the weight from.
            </summary>
            <param name="fieldNameX">
            is the name of the field within the parent view to use to get numeric data points for this view to
            compute the average for.
            </param>
            <param name="fieldNameWeight">
            is the field name for the weight to apply to each data point
            </param>
            <param name="statementContext">contains required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageView.CreateEventType(com.espertech.esper.core.StatementContext)">
            <summary>Creates the event type for this view.</summary>
            <param name="statementContext">is the event adapter service</param>
            <returns>event type of view</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.WeightedAverageView.FieldNameX">
            <summary>
            Gets or sets the name of the field supplying the X values.
            </summary>
            <value>The field name X.</value>
            <returns> field name supplying X data points</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.WeightedAverageView.FieldNameWeight">
            <summary>
            Gets or sets the name of the field supplying the weight values.
            </summary>
            <value>The field name weight.</value>
            <returns> field name supplying weight
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.WeightedAverageView.Parent">
            <summary>
            Gets or sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.WeightedAverageView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.RegressionLinestViewFactory">
            <summary>Factory for <see cref="T:com.espertech.esper.view.stat.RegressionLinestView"/> instances.</summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.RegressionLinestViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.stat.RegressionLinestViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.stat.RegressionLinestViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.RegressionLinestViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.RegressionLinestViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.RegressionLinestViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.RegressionLinestViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.RegressionBean">
            <summary>
            Bean for calculating the regression slope and y intercept (same to Microsoft Excel LINEST function).
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.stat.RegressionBean.YIntercept">
            <summary> Returns the Y intercept.</summary>
            <returns> Y intercept
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.RegressionBean.Slope">
            <summary> Returns the slope.</summary>
            <returns> regression slope
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.RegressionBean.slope">
            <summary>
            Gets the slope.
            </summary>
            <value>The slope.</value>
        </member>
        <member name="T:com.espertech.esper.view.stat.CorrelationView">
            <summary>
            A view that calculates correlation on two fields. The view uses internally a <see cref="T:com.espertech.esper.view.stat.CorrelationBean"/>
            instance for the calculations, it also returns this bean as the result.
            This class accepts most of its behaviour from its parent, <see cref="T:com.espertech.esper.view.stat.BaseBivariateStatisticsView"/>. It adds
            the usage of the correlation bean and the appropriate schema.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.BaseBivariateStatisticsView">
            <summary> View for computing statistics that require 2 input variable arrays containing X and Y datapoints.
            Subclasses compute correlation or regression values, for instance.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.BaseBivariateStatisticsView.statisticsBean">
            <summary>
            This bean can be overridden by subclasses providing extra values such as correlation, regression.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.BaseBivariateStatisticsView.statementContext">
            <summary>
            Services required by implementing classes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseBivariateStatisticsView.#ctor(com.espertech.esper.core.StatementContext,com.espertech.esper.view.stat.BaseStatisticsBean,System.String,System.String)">
            <summary>
            Constructor requires the name of the two fields to use in the parent view to compute the statistics.
            </summary>
            <param name="statisticsBean">
            is the base class prodiving sum of X and Y and squares for use by subclasses
            </param>
            <param name="fieldNameX">
            is the name of the field within the parent view to get the X values from
            </param>
            <param name="fieldNameY">
            is the name of the field within the parent view to get the Y values from
            </param>
            <param name="statementContext">contains required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseBivariateStatisticsView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseBivariateStatisticsView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseBivariateStatisticsView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseBivariateStatisticsView.FieldNameX">
            <summary>
            Gets or sets the field name of the field supplying X data points.
            </summary>
            <value>The field name X.</value>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseBivariateStatisticsView.FieldNameY">
            <summary>
            Gets or sets the field name of the field supplying Y data points.
            </summary>
            <value>The field name Y.</value>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseBivariateStatisticsView.Parent">
            <summary>
            Gets or sets the view's parent viewable.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationView.#ctor(com.espertech.esper.core.StatementContext,System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="xFieldName">
            is the field name of the field providing X data points
            </param>
            <param name="yFieldName">
            is the field name of the field providing X data points
            </param>
            <param name="statementContext">contains required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Clones the view.
            </summary>
            <param name="statementContext">The statement context.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationView.CreateEventType(com.espertech.esper.core.StatementContext)">
            <summary>Creates the event type for this view.</summary>
            <param name="statementContext">is the event adapter service</param>
            <returns>event type of view</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.CorrelationView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.ext.SortWindowView">
             <summary> Window sorting by values in the specified field extending a specified number of elements
             from the lowest value up or the highest value down.
             The view accepts 3 parameters. The first parameter is the field name to get the values to sort for,
             the second parameter defines whether to sort ascending or descending, the third parameter
             is the number of elements to keep in the sorted list.
            
             The type of the field to be sorted in the event must implement the Comparable interface.
            
             The natural order in which events arrived is used as the second sorting criteria. Thus should events arrive
             with equal sort values the oldest event leaves the sort window first.
            
             Old values removed from a prior view are removed from the sort view.
             </summary>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowView.#ctor(com.espertech.esper.view.ext.SortWindowViewFactory,System.String[],System.Boolean[],System.Int32,com.espertech.esper.view.ext.IStreamSortedRandomAccess)">
            <summary>Ctor.</summary>
            <param name="sortFieldNames">is the event property names to sort</param>
            <param name="descendingValues">
            indicates whether to sort ascending or descending for each field
            </param>
            <param name="sortWindowSize">is the window size</param>
            <param name="optionalSortedRandomAccess">
            is the friend class handling the random access, if required by
            expressions
            </param>
            <param name="sortWindowViewFactory">for copying this view in a group-by</param>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Clones the view.
            </summary>
            <param name="statementContext">The statement context.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowView.SortFieldNames">
            <summary> Gets or sets the field names supplying the values to sort by.</summary>
            <returns> field names to sort by
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowView.IsDescendingValues">
            <summary> Gets or sets the flags indicating whether to sort in descending order on each property.</summary>
            <returns> the isDescending value for each sort property
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowView.IsEmpty">
            <summary>
            True to indicate the sort window is empty, or false if not empty.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowView.SortWindowSize">
            <summary> Gets or sets the number of elements kept by the sort window.</summary>
            <returns> size of window
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowView.OptionalSortedRandomAccess">
            <summary>
            Returns the friend handling the random access, cal be null if not required.
            </summary>
            <returns>random accessor to sort window contents</returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowView.Parent">
            <summary>
            Gets or sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.ListParameter">
            <summary>
            Represents a list of values in a set of numeric parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.ListParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.type.ListParameter"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.ListParameter.Add(com.espertech.esper.type.NumberSetParameter)">
            <summary> Add to the list a further parameter.</summary>
            <param name="numberSetParameter">is the parameter to add
            </param>
        </member>
        <member name="M:com.espertech.esper.type.ListParameter.IsWildcard(System.Int32,System.Int32)">
            <summary>
            Returns true if all values between and including min and max are supplied by the parameter.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>
            true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.ListParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary>
            Return a set of int values representing the value of the parameter for the given range.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>set of integer</returns>
        </member>
        <member name="P:com.espertech.esper.type.ListParameter.Parameters">
            <summary> Returns list of parameters.</summary>
            <returns> list of parameters
            </returns>
        </member>
        <member name="T:com.espertech.esper.schedule.TimeProvider">
            <summary>
            Provider of internal system time.
            <para>
            Internal system time is controlled either by a timer function or by external time events.
            </para>
            </summary>
        </member>
        <member name="P:com.espertech.esper.schedule.TimeProvider.Time">
            <summary>Returns the current engine time.</summary>
            <returns>time that has last been set</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternObjectException">
            <summary>
            This exception is thrown to indicate a problem with a view expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternObjectException.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="message">is the error message</param>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternObjectException.#ctor(System.String,System.Exception)">
            <summary>Constructor for an inner exception and message.</summary>
            <param name="message">is the error message</param>
            <param name="cause">is the inner exception</param>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternObjectException.#ctor(System.Exception)">
            <summary>Constructor.</summary>
            <param name="cause">is the inner exception</param>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.ObserverEventEvaluator">
            <summary>
            For use by <see cref="T:com.espertech.esper.pattern.observer.EventObserver"/> instances to place an
            event for processing/evaluation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverEventEvaluator.ObserverEvaluateTrue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary> Indicate an event for evaluation (sub-expression the observer represents has turned true).</summary>
            <param name="matchEvent">is the matched events so far
            </param>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverEventEvaluator.ObserverEvaluateFalse">
            <summary> Indicate that the observer turned permanently false.</summary>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.ObserverEnum">
            <summary>
            Enum for all build-in observers.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.ObserverEnum.TIMER_INTERVAL">
            <summary>
            Observer for letting pass/waiting an interval amount of time.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.ObserverEnum.TIMER_CRON">
            <summary>
            Observer for 'at' (crontab) observation of timer events.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.ObserverEnum.Values">
            <summary>
            All values available through this pseudo-enum
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverEnum.#ctor(System.String,System.String,System.Type)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverEnum.ForName(System.String,System.String)">
            <summary>
            Returns observer enum for namespace name and observer name.
            </summary>
            <param name="nspace">namespace name</param>
            <param name="name">observer name</param>
        </member>
        <member name="P:com.espertech.esper.pattern.observer.ObserverEnum.Namespace">
            <summary>
            Gets the observer namespace name.
            </summary>
            <value>The observer namespace name.</value>
        </member>
        <member name="P:com.espertech.esper.pattern.observer.ObserverEnum.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:com.espertech.esper.pattern.observer.ObserverEnum.Type">
            <summary>
            Gets the implementation clazz.
            </summary>
            <value>The implementation clazz.</value>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalRootStateNode">
            <summary> This class is always the root node in the evaluation state tree representing any activated event expression.
            It hold the handle to a further state node with subnodes making up a whole evaluation state tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalRootState">
            <summary>
            Interface for a root state node accepting a callback to use to indicate pattern results.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternStopCallback">
            <summary>
            Interface for executing a Stop on an active event expression.
            </summary>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalRootState.Callback">
            <summary>Accept callback to indicate pattern results.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootStateNode.#ctor(com.espertech.esper.pattern.EvalNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext)">
            <summary> Constructor.</summary>
            <param name="rootSingleChildNode">is the root nodes single child node
            </param>
            <param name="beginState">contains the events that make up prior matches
            </param>
            <param name="context">contains handles to services required
            </param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootStateNode.Start">
            <summary>
            Starts the event expression or an instance of it.
            Child classes are expected to initialize and Start any event listeners
            or schedule any time-based callbacks as needed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootStateNode.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootStateNode.Quit">
            <summary>
            Stops the event expression or an instance of it. Child classes are expected to free resources
            and Stop any event listeners or remove any time-based callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootStateNode.EvaluateTrue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.EvalStateNode,System.Boolean)">
            <summary>
            Indicate a change in truth value to true.
            </summary>
            <param name="matchEvent">is the container for events that caused the change in truth value</param>
            <param name="fromNode">is the node that indicates the change</param>
            <param name="isQuitted">is an indication of whether the node continues listenening or Stops listening</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootStateNode.EvaluateFalse(com.espertech.esper.pattern.EvalStateNode)">
            <summary>
            Indicate a change in truth value to false.
            </summary>
            <param name="fromNode">is the node that indicates the change</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootStateNode.Accept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Accept a visitor. Child classes are expected to invoke the visit method on the visitor instance
            passed in.
            </summary>
            <param name="visitor">on which the visit method is invoked by each node</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootStateNode.ChildrenAccept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Pass the visitor to all child nodes.
            </summary>
            <param name="visitor">is the instance to be passed to all child nodes</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootStateNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalRootStateNode.Callback">
            <summary>
            Gets or sets the callback to use to indicate matching events.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalObserverNode">
            <summary>
            This class represents an observer expression in the evaluation tree
            representing an pattern expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverNode.#ctor(com.espertech.esper.epl.spec.PatternObserverSpec)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.pattern.EvalObserverNode"/> class.
            </summary>
            <param name="patternObserverSpec">the factory to use to get an observer instance</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverNode.NewState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>
            Create the evaluation state node containing the truth value state for each operator in an
            event expression.
            </summary>
            <param name="parentNode">is the parent evaluator node that this node indicates a change in truth value to</param>
            <param name="beginState">is the container for events that makes up the Start state</param>
            <param name="context">is the handle to services required for evaluation</param>
            <param name="stateNodeId">is the new state object's identifier</param>
            <returns>
            state node containing the truth value state for the operator
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalObserverNode.ObserverFactory">
            <summary>
            Gets the factory to use to get an observer instance
            </summary>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalObserverNode.PatternObserverSpec">
            <summary>
            Returns the observer object specification to use for instantiating the observer factory and observer.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexEquals">
            <summary>
            Index for filter parameter constants to match using the equals (=) operator.
            The implementation is based on a regular HashMap.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexEquals.#ctor(System.String,com.espertech.esper.events.EventType)">
            <summary> Constructs the index for exact matches.</summary>
            <param name="propertyName">is the name of the event property
            </param>
            <param name="eventType">describes the event type and is used to obtain a getter instance for the property
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexEquals.Remove(System.Object)">
            <summary>
            Remove the event evaluation instance for the given constant. Returns true if
            the constant was found, or false if not.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock method must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">is the value supplied in the filter paremeter</param>
            <returns>
            true if found and removed, false if not found
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexEquals.MatchEvent(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Matches the event.
            </summary>
            <param name="eventBean">The event bean.</param>
            <param name="matches">The matches.</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexEquals.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:com.espertech.esper.filter.EventEvaluator"/> with the specified filter constant.
            Returns null if no entry found for the constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock method must supply a lock for this purpose.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexEquals.Count">
            <summary>
            Return the number of distinct filter parameter constants stored.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock method must supply a lock for this purpose.
            </summary>
            <value></value>
            <returns> Number of entries in index
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexEquals.ReadWriteLock">
            <summary>
            Supplies the lock for protected access.
            </summary>
            <value></value>
            <returns> lock
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterOperator">
            <summary>
            Defines the different operator types available for event filters.
            <para>
            Mathematical notation for defining ranges of floating point numbers is used as defined below:
            <list>
            <item>[a,b] a closed range from value a to value b with the end-points a and b included in the range</item>
            <item>(a,b) an open range from value a to value b with the end-points a and b not included in the range</item>
            <item>[a,b) a half-open range from value a to value b with the end-point a included and end-point b not included in the range</item>
            <item>(a,b] a half-open range from value a to value b with the end-point a not included and end-point b included in the range</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.EQUAL">
            <summary> Exact matches (=).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.NOT_EQUAL">
            <summary> Exact not matches (!=).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.LESS">
            <summary> Less (&lt;).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.LESS_OR_EQUAL">
            <summary> Less or equal (&lt;=).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.GREATER_OR_EQUAL">
            <summary> Greater or equal (&gt;=).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.GREATER">
            <summary> Greater (&gt;).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.RANGE_OPEN">
            <summary> Range contains neither endpoint, i.e. (a,b)</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.RANGE_CLOSED">
            <summary> Range contains low and high endpoint, i.e. [a,b]</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.RANGE_HALF_OPEN">
            <summary> Range includes low endpoint but not high endpoint, i.e. [a,b)</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.RANGE_HALF_CLOSED">
            <summary> Range includes high endpoint but not low endpoint, i.e. (a,b]</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.NOT_RANGE_OPEN">
            <summary> Inverted-Range contains neither endpoint, i.e. (a,b)</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.NOT_RANGE_CLOSED">
            <summary> Inverted-Range contains low and high endpoint, i.e. [a,b]</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.NOT_RANGE_HALF_OPEN">
            <summary> Inverted-Range includes low endpoint but not high endpoint, i.e. [a,b)</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.NOT_RANGE_HALF_CLOSED">
            <summary> Inverted-Range includes high endpoint but not low endpoint, i.e. (a,b]</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.IN_LIST_OF_VALUES">
            <summary> List of values using the 'in' operator</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.NOT_IN_LIST_OF_VALUES">
            <summary> Not-in list of values using the 'not in' operator</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.BOOLEAN_EXPRESSION">
            <summary> Boolean expression filter operator</summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterOperatorHelper">
            <summary>
            Contains static methods useful for help with FilterOperators.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterOperatorHelper.IsRangeOperator(com.espertech.esper.filter.FilterOperator)">
            <summary> Returns true for all range operators, false if not a range operator.</summary>
            <returns> true for ranges, false for anyting else
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterOperatorHelper.IsInvertedRangeOperator(com.espertech.esper.filter.FilterOperator)">
            <summary>
            Returns true for inverted range operators, false if not an inverted range operator.
            </summary>
            <returns>true for inverted ranges, false for anyting else</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterOperatorHelper.IsComparisonOperator(com.espertech.esper.filter.FilterOperator)">
            <summary> Returns true for relational comparison operators which excludes the = equals operator, else returns false.</summary>
            <returns> true for lesser or greater -type operators, false for anyting else
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterOperatorHelper.ParseComparisonOperator(System.String)">
            <summary> Parse the comparison operator returning null if not a valid operator.</summary>
            <param name="op">is the lesser then or other compare op
            </param>
            <returns> FilterOperator or null if not valid
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterOperatorHelper.ParseRangeOperator(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Parse the range operator from booleans describing whether the Start or end values are exclusive.
            </summary>
            <param name="isInclusiveFirst">true if low endpoint is inclusive, false if not</param>
            <param name="isInclusiveLast">true if high endpoint is inclusive, false if not</param>
            <param name="isNot">if set to <c>true</c> [is not].</param>
            <returns>
            FilterOperator for the combination inclusive or exclusive
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterHandleSetNode">
            <summary>
            This class holds a list of indizes storing filter constants in <see cref="T:com.espertech.esper.filter.FilterParamIndexBase"/> nodes
            and a set of <see cref="T:com.espertech.esper.filter.FilterHandle"/>.
            An instance of this class represents a leaf-node (no indizes stored, just filter callbacks)
            but can also be non-leaf (some indizes exist) in a filter evaluation tree.
            Events are evaluated by asking each of the indizes to evaluate the event and by
            adding any filter callbacks in this node to the "matches" list of callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.MatchEvent(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Evaluate an event by asking each index to match the event. Any filter callbacks at this node automatically
            match the event and do not need to be further evaluated, and are thus added to the "matches" list of callbacks.
            NOTE: This client should not use the lock before calling this method.
            </summary>
            <param name="eventBean">
            is the event wrapper supplying the event property values
            </param>
            <param name="matches">
            is the list of callbacks to add to for any matches found
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.Contains(com.espertech.esper.filter.FilterHandle)">
            <summary>
            Returns an indication whether the filter callback exists in this node.
            NOTE: the client to this method must use the read-write lock of this object to lock, if required by the client
            code.
            </summary>
            <param name="filterCallback">is the filter callback to check for</param>
            <returns>true if callback found, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.Add(com.espertech.esper.filter.FilterParamIndexBase)">
            <summary>
            Add an index. The same index can be added twice - there is no checking done.
            NOTE: the client to this method must use the read-write lock of this object to lock, if required by the client
            code.
            </summary>
            <param name="index">index to add</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.Remove(com.espertech.esper.filter.FilterParamIndexBase)">
            <summary>
            Remove an index, returning true if it was found and removed or false if not in collection.
            NOTE: the client to this method must use the read-write lock of this object to lock, if required by the client
            code.
            </summary>
            <param name="index">is the index to remove</param>
            <returns>true if found, false if not existing</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.Add(com.espertech.esper.filter.FilterHandle)">
            <summary>
            Add a filter callback. The filter callback set allows adding the same callback twice with no effect.
            If a client to the class needs to check that the callback already existed, the contains method does that.
            NOTE: the client to this method must use the read-write lock of this object to lock, if required by the client
            code.
            </summary>
            <param name="filterCallback">is the callback to add</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.Remove(com.espertech.esper.filter.FilterHandle)">
            <summary>
            Remove a filter callback, returning true if it was found and removed or false if not in collection.
            NOTE: the client to this method must use the read-write lock of this object to lock, if required by the client
            code.
            </summary>
            <param name="filterCallback">is the callback to remove</param>
            <returns>true if found, false if not existing</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterHandleSetNode.IsEmpty">
            <summary>
            Returns an indication of whether there are any callbacks or index nodes at all in this set.
            NOTE: the client to this method must use the read-write lock of this object to lock, if required by the client
            code.
            </summary>
            <returns>
            true if there are neither indizes nor filter callbacks stored, false if either exist.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterHandleSetNode.FilterCallbackCount">
            <summary>
            Returns the number of filter callbacks stored.
            NOTE: the client to this method must use the read-write lock of this object to lock, if required by the client
            code.
            </summary>
            <returns>number of filter callbacks stored</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterHandleSetNode.NodeRWLock">
            <summary>
            Returns to lock to use for making changes to the filter callback or inzides collections stored by this node.
            </summary>
            <returns>lock to use in multithreaded environment</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterHandleSetNode.Indizes">
            <summary>
            Returns list of indexes - not returning an iterator. Client classes should not change this collection.
            </summary>
            <returns>list of indizes</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicSimplePropertyGetter">
            <summary>
            Getter for a dynamic property (syntax field.inner?), using vanilla reflection.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicPropertyGetterBase">
            <summary>
            Base class for getters for a dynamic property (syntax field.inner?), caches methods
            to use for classes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicPropertyGetterBase.DetermineGetter(System.Type)">
            <summary>
            To be implemented to return the method required, or null to indicate an appropriate method could not be found.
            </summary>
            <param name="clazz">to search for a matching method</param>
            <returns>method if found, or null if no matching method exists</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicPropertyGetterBase.Call(com.espertech.esper.events.property.DynamicPropertyDescriptor,System.Object)">
            <summary>
            Call the getter to obtains the return result object, or null if no such method exists.
            </summary>
            <param name="descriptor">provides method information for the class</param>
            <param name="underlying">
            is the underlying object to ask for the property value
            </param>
            <returns>underlying</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicPropertyGetterBase.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicPropertyGetterBase.GetGetterMethodName(System.String)">
            <summary>
            Gets the correct name of a method that matches a property.  For
            example, if the caller supplied 'test' for the property, then the
            method would return the transformed name of 'GetTest'.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicPropertyGetterBase.GetPropertyName(System.String)">
            <summary>
            Gets the correct canonized form of a property name.    For
            example, if the caller supplied 'test' for the property, then the
            method would return the transformed name of 'Test'.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicSimplePropertyGetter.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="fieldName">the property name</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.rep.RepositoryImpl">
            <summary>
            Implements a repository for join events and lookup results.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.rep.Repository">
            <summary>
            An interface for a repository of events in a lookup/join scheme that
            supplies events for event stream table lookups and receives results
            of lookups.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.Repository.GetCursors(System.Int32)">
            <summary>
            Supply events for performing look ups for a given stream.
            </summary>
            <param name="lookupStream">is the stream to perform lookup for</param>
            <returns>
            an iterator over events with additional positioning information
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.Repository.AddResult(com.espertech.esper.epl.join.rep.Cursor,com.espertech.esper.compat.Set{com.espertech.esper.events.EventBean},System.Int32)">
            <summary>
            Add a lookup result.
            </summary>
            <param name="cursor">provides result position and parent event and node information</param>
            <param name="lookupResults">is the events found</param>
            <param name="resultStream">is the stream number of the stream providing the results</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.RepositoryImpl.#ctor(System.Int32,com.espertech.esper.events.EventBean,System.Int32)">
            <summary> Ctor.</summary>
            <param name="rootStream">is the stream supplying the root event
            </param>
            <param name="rootEvent">is the root event
            </param>
            <param name="numStreams">is the number of streams
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.RepositoryImpl.GetCursors(System.Int32)">
            <summary>
            Gets the cursors.
            </summary>
            <param name="lookupFromStream">The lookup from stream.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.RepositoryImpl.AddResult(com.espertech.esper.epl.join.rep.Cursor,com.espertech.esper.compat.Set{com.espertech.esper.events.EventBean},System.Int32)">
            <summary>
            Add a lookup result.
            </summary>
            <param name="cursor">provides result position and parent event and node information</param>
            <param name="lookupResults">is the events found</param>
            <param name="resultStream">is the stream number of the stream providing the results</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.RepositoryImpl.NodesPerStream">
            <summary>
            Returns a list of nodes that are the lookup results per stream.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.TableLookupPlan">
            <summary> Abstract specification on how to perform a table lookup.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableLookupPlan.MakeStrategy(com.espertech.esper.epl.join.table.EventTable[][],com.espertech.esper.events.EventType[])">
            <summary> Instantiates the lookup plan into a execution strategy for the lookup.</summary>
            <param name="indexesPerStream">tables for each stream
            </param>
            <param name="eventTypes">types of events in stream
            </param>
            <returns> lookup strategy instance
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableLookupPlan.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> Ctor.</summary>
            <param name="lookupStream">stream number of stream that supplies event to be used to look up
            </param>
            <param name="indexedStream">- stream number of stream that is being access via index/table
            </param>
            <param name="indexNum">index to use for lookup
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableLookupPlan.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.TableLookupPlan.LookupStream">
            <summary> Returns the lookup stream.</summary>
            <returns> lookup stream
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.TableLookupPlan.IndexedStream">
            <summary> Returns indexed stream.</summary>
            <returns> indexed stream
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.TableLookupPlan.IndexNum">
            <summary> Returns index number to use for looking up in.</summary>
            <returns> index number
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.CartesianUtil">
            <summary>
            Helper class to compute the cartesian product of the events from two streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianUtil.ComputeCartesian(System.Collections.Generic.IList{com.espertech.esper.events.EventBean[]},System.Int32[],System.Collections.Generic.IList{com.espertech.esper.events.EventBean[]},System.Int32[],System.Collections.Generic.IList{com.espertech.esper.events.EventBean[]})">
            <summary>
            Form the 2-ary cartesian product between zero or more events from 2 streams.
            </summary>
            <param name="streamOne">the events from stream one</param>
            <param name="subStreamNumsOne">the list of substream numbers to stream one to include in the product</param>
            <param name="streamTwo">the events from stream two</param>
            <param name="subStreamNumsTwo">the list of substream numbers to stream two to include in the product</param>
            <param name="resultList">where the result of the cartesian product is added to</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSubselectRowNode">
            <summary>
            Represents a subselect in an expression tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSubselectNode">
            <summary>
            Represents a subselect in an expression tree.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.expression.ExprSubselectNode.selectClause">
            <summary>The validated select clause.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.expression.ExprSubselectNode.filterExpr">
            <summary>The validate filter expression.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.expression.ExprSubselectNode.rawEventType">
            <summary>The event type generated for wildcard selects.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean,com.espertech.esper.compat.Set{com.espertech.esper.events.EventBean})">
            <summary>
            Evaluate the lookup expression returning an evaluation result object.
            </summary>
            <param name="eventsPerStream">is the events for each stream in a join</param>
            <param name="isNewData">is true for new data, or false for old data</param>
            <param name="matchingEvents">
            is filtered results from the table of stored lookup events
            </param>
            <returns>evaluation result</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectNode.#ctor(com.espertech.esper.epl.spec.StatementSpecRaw)">
            <summary>Ctor.</summary>
            <param name="statementSpec">
            is the lookup statement spec from the parser, unvalidated
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <value></value>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.StatementSpecCompiled">
            <summary>
            Gets or sets the compiled statement spec.
            </summary>
            <value>The statement spec compiled.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.SelectClause">
            <summary>
            Gets or sets the validate select clause
            </summary>
            <value>The select clause.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.StatementSpecRaw">
            <summary>
            Returns the uncompiled statement spec.
            </summary>
            <value>The statement spec raw.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.SelectAsName">
            <summary>
            Gets or sets the name of the select expression as-tag
            </summary>
            <value>The name of the select as.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.FilterExpr">
            <summary>
            Gets or sets the validated filter expression, or null
            if there is none.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.Strategy">
            <summary>
            Gets or sets the strategy for boiling down the table of lookup events into
            a subset against which to run the filter.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.RawEventType">
            <summary>
            Sets the event type generated for wildcard selects.
            </summary>
            <value>The type of the raw event.</value>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectRowNode.#ctor(com.espertech.esper.epl.spec.StatementSpecRaw)">
            <summary>Ctor.</summary>
            <param name="statementSpec">
            is the lookup statement spec from the parser, unvalidated
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectRowNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">delegates for view resources to expression nodes</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectRowNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean,com.espertech.esper.compat.Set{com.espertech.esper.events.EventBean})">
            <summary>
            Evaluate the subquery expression returning an evaluation result object.
            </summary>
            <param name="eventsPerStream">is the events for each stream in a join</param>
            <param name="isNewData">is true for new data, or false for old data</param>
            <param name="matchingEvents">is filtered results from the table of stored subquery events</param>
            <returns>evaluation result</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectRowNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPriorNode">
            <summary>
            Represents the 'prior' prior event function in an expression node tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.ViewResourceCallback">
            <summary>Callback for use by expression nodes to receive view resources.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.core.ViewResourceCallback.ViewResource">
            <summary>Supplies view resource.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPriorNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">delegates for view resources to expression nodes</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPriorNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData"></param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPriorNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprPriorNode.ConstantIndexNumber">
            <summary>Returns the index of the prior.</summary>
            <returns>index of prior function</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprPriorNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprPriorNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <value></value>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprPriorNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprPriorNode.ViewResource">
            <summary>
            Supplies view resource.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNotNode">
            <summary>
            Represents a NOT expression in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNotNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">delegates for view resources to expression nodes</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNotNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNotNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNotNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNotNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <value></value>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNotNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprMinMaxAggrNode">
            <summary>
            Represents the min/max(distinct? ...) aggregate function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMinMaxAggrNode.#ctor(System.Boolean,com.espertech.esper.type.MinMaxTypeEnum)">
            <summary>
            Ctor.
            </summary>
            <param name="distinct">indicator whether distinct values of all values min/max</param>
            <param name="minMaxTypeEnum">enum for whether to minimum or maximum compute</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMinMaxAggrNode.ValidateAggregationChild(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">used for resolving method and function names</param>
            <returns>aggregation function use</returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMinMaxAggrNode.EqualsNodeAggregate(com.espertech.esper.epl.expression.ExprAggregateNode)">
            <summary>
            Return true if a expression aggregate node semantically equals the current node, or false if not.
            For use by the EqualsNode implementation which compares the distinct flag.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMinMaxAggrNode.AggregationFunctionName">
            <summary>
            Returns the aggregation function name for representation in a generate expression string.
            </summary>
            <value></value>
            <returns> aggregation function name
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMinMaxAggrNode.MinMaxTypeEnum">
            <summary>Returns the indicator for minimum or maximum.</summary>
            <returns>min/max indicator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ProxyExprEvaluator.#ctor(com.espertech.esper.epl.expression.ExprEvaluatorDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.expression.ProxyExprEvaluator"/> class.
            </summary>
            <param name="m_dg">The M_DG.</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ProxyExprEvaluator.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.ConnectionCacheImpl">
            <summary>
            Caches the Connection and DbCommand instance for reuse.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCacheImpl.#ctor(com.espertech.esper.epl.db.DatabaseConnectionFactory,System.String)">
            <summary> Ctor.</summary>
            <param name="databaseConnectionFactory">connection factory
            </param>
            <param name="sql">statement sql
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCacheImpl.GetConnection">
            <summary>
            Returns a cached or new connection and statement pair.
            </summary>
            <returns>connection and statement pair</returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCacheImpl.DoneWith(com.espertech.esper.collection.Pair{com.espertech.esper.epl.db.DbDriver,com.espertech.esper.epl.db.DbDriverCommand})">
            <summary>
            Indicate to return the connection and statement pair after use.
            </summary>
            <param name="pair">is the resources to return</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCacheImpl.Destroy">
            <summary>
            Destroys cache closing all resources cached, if any.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.ViewResourceDelegateImpl">
            <summary>
            Coordinates between view factories and requested resource (by expressions) the
            availability of view resources to expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.ViewResourceDelegate">
            <summary>
            Service to expression nodes for indicating view resource requirements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ViewResourceDelegate.RequestCapability(System.Int32,com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>Request a view resource.</summary>
            <param name="streamNumber">is the stream number to provide the resource</param>
            <param name="requestedCabability">describes the view capability required</param>
            <param name="resourceCallback">for the delegate to supply the resource</param>
            <returns>true to indicate the resource can be granted</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ViewResourceDelegateImpl.#ctor(com.espertech.esper.view.ViewFactoryChain[],com.espertech.esper.core.StatementContext)">
            <summary>
            Ctor.
            </summary>
            <param name="viewFactories">array of view factory chains, one for each stream</param>
            <param name="statementContext">Statement-level services.</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ViewResourceDelegateImpl.RequestCapability(System.Int32,com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Request a view resource.
            </summary>
            <param name="streamNumber">is the stream number to provide the resource</param>
            <param name="requestedCabability">describes the view capability required</param>
            <param name="resourceCallback">for the delegate to supply the resource</param>
            <returns>
            true to indicate the resource can be granted
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.DistinctValueAggregator">
            <summary>
            AggregationMethod for use on top of another aggregator that handles unique value aggregation (versus all-value aggregation)
            for the underlying aggregator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.DistinctValueAggregator.#ctor(com.espertech.esper.epl.agg.AggregationMethod,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="inner">is the aggregator function computing aggregation values</param>
            <param name="childType">the return type of the inner expression to aggregate, if any</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.DistinctValueAggregator.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="T:com.espertech.esper.dispatch.DispatchService">
            <summary>
            Service for dispatching internally (for operators/views processing results of prior operators/views)
            and externally (dispatch events to UpdateListener implementations).
            <para>
            The service accepts Dispatchable implementations to its internal and external lists.
            When a client invokes dispatch the implementation first invokes all internal Dispatchable
            instances then all external Dispatchable instances. Dispatchables are invoked
            in the same order they are added. Any dispatchable added twice is dispatched once.
            </para>
            <para>
            Note: Each execution thread owns its own dispatch queue.
            </para>
            <para>
            Note: Dispatchs could result in further call to the dispatch service. This is because listener code
            that is invoked as a result of a dispatch may create patterns that fire as soon as they are Started
            resulting in further dispatches within the same thread. Thus the implementation class must be careful
            with the use of iterators to avoid ConcurrentModificationException errors.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.dispatch.DispatchService.AddExternal(com.espertech.esper.dispatch.Dispatchable)">
            <summary> Add a Dispatchable implementation.</summary>
            <param name="dispatchable">to execute later
            </param>
        </member>
        <member name="M:com.espertech.esper.dispatch.DispatchService.Dispatch">
            <summary> Execute all Dispatchable implementations added to the service since the last invocation of this method.</summary>
        </member>
        <member name="T:com.espertech.esper.core.StatementLockFactoryImpl">
            <summary>Provides statement-level locks.</summary>
        </member>
        <member name="T:com.espertech.esper.core.StatementLockFactory">
            <summary>
            Factory for the managed lock that provides statement resource protection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementLockFactory.GetStatementLock(System.String,System.String)">
            <summary>Create lock for statement</summary>
            <param name="statementName">is the statement name</param>
            <param name="expressionText">is the statement expression text</param>
            <returns>lock</returns>
        </member>
        <member name="M:com.espertech.esper.core.StatementLockFactoryImpl.GetStatementLock(System.String,System.String)">
            <summary>
            Create lock for statement
            </summary>
            <param name="statementName">is the statement name</param>
            <param name="expressionText">is the statement expression text</param>
            <returns>lock</returns>
        </member>
        <member name="T:com.espertech.esper.core.StatementLifecycleSvcImpl">
            <summary>Provides statement lifecycle services. </summary>
        </member>
        <member name="T:com.espertech.esper.core.StatementLifecycleSvc">
            <summary>
            Handles statement management.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.Init">
            <summary>
            Initialized the service before use.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.AddObserver(com.espertech.esper.core.StatementLifecycleObserver)">
            <summary>
            Add an observer to be called back when statement-state or listener/subscriber changes are registered.
            <para/>The observers list is backed by a Set.
            </summary>
            <param name="observer">to add</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.DispatchStatementLifecycleEvent(com.espertech.esper.core.StatementLifecycleEvent)">
            <summary>
            Dispatch event to observers.
            </summary>
            <param name="event">to dispatch</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.CreateAndStart(com.espertech.esper.epl.spec.StatementSpecRaw,System.String,System.Boolean,System.String)">
            <summary>
            Create and start the statement.
            </summary>
            <param name="statementSpec">is the statement definition in bean object form, raw unvalidated and unoptimized.</param>
            <param name="expression">is the expression text</param>
            <param name="isPattern">is an indicator on whether this is a pattern statement and thus the iterator must return the last result,
            versus for non-pattern statements the iterator returns view content.</param>
            <param name="optStatementName">is an optional statement name, null if none was supplied</param>
            <returns>started statement</returns>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.Start(System.String)">
            <summary>
            Start statement by statement id.
            </summary>
            <param name="statementId">of the statement to start.</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.Stop(System.String)">
            <summary>
            Stop statement by statement id.
            </summary>
            <param name="statementId">of the statement to stop.</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.Destroy(System.String)">
            <summary>
            Destroy statement by statement id.
            </summary>
            <param name="statementId">statementId of the statement to destroy</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.GetStatementByName(System.String)">
            <summary>
            Returns the statement by the given name, or null if no such statement exists.
            </summary>
            <param name="name">is the statement name</param>
            <returns>
            statement for the given name, or null if no such statement existed
            </returns>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.StartAllStatements">
            <summary>
            Starts all stopped statements. First statement to fail supplies the exception.
            </summary>
            <throws>EPException to indicate a start error.</throws>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.StopAllStatements">
            <summary>
            Stops all started statements. First statement to fail supplies the exception.
            </summary>
            <throws>EPException to indicate a start error.</throws>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.DestroyAllStatements">
            <summary>
            Destroys all started statements. First statement to fail supplies the exception.
            </summary>
            <throws>EPException to indicate a start error.</throws>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.UpdatedListeners(System.String,System.String,com.espertech.esper.core.EPStatementListenerSet)">
            <summary>
            Statements indicate that listeners have been added through this method.
            </summary>
            <param name="statementId">the statement id for which listeners were added</param>
            <param name="statementName">Name of the statement.</param>
            <param name="listeners">the set of listeners after adding the new listener</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvc.Destroy">
            <summary>
            Destroy the service.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.StatementLifecycleSvc.StatementNames">
            <summary>
            Returns an array of statement names. If no statement has been created, an empty array is returned.
            <para>
            Only returns started and stopped statements.
            </para>
            </summary>
            <value>The statement names.</value>
            <returns>statement names</returns>
        </member>
        <member name="F:com.espertech.esper.core.StatementLifecycleSvcImpl.objLock">
            <summary>
            Internal lock for object.
            </summary>
        </member>
        <member name="F:com.espertech.esper.core.StatementLifecycleSvcImpl.services">
            <summary>Services context for statement lifecycle management. </summary>
        </member>
        <member name="F:com.espertech.esper.core.StatementLifecycleSvcImpl.stmtIdToDescMap">
            <summary>Maps of statement id to descriptor. </summary>
        </member>
        <member name="F:com.espertech.esper.core.StatementLifecycleSvcImpl.stmtNameToStmtMap">
            <summary>Map of statement name to statement. </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.#ctor(com.espertech.esper.client.EPServiceProvider,com.espertech.esper.core.EPServicesContext)">
            <summary>Ctor. </summary>
            <param name="epServiceProvider">is the engine instance to hand to statement-aware listeners</param>
            <param name="services">is engine services</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.AddObserver(com.espertech.esper.core.StatementLifecycleObserver)">
            <summary>
            Add an observer to be called back when statement-state or listener/subscriber changes are registered.
            <para/>
            The observers list is backed by a Set.
            </summary>
            <param name="observer">to add</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.Destroy">
            <summary>
            Destroy the service.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.Init">
            <summary>
            Initialized the service before use.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.CreateAndStart(com.espertech.esper.epl.spec.StatementSpecRaw,System.String,System.Boolean,System.String)">
            <summary>
            Create and start the statement.
            </summary>
            <param name="statementSpec">is the statement definition in bean object form, raw unvalidated and unoptimized.</param>
            <param name="expression">is the expression text</param>
            <param name="isPattern">is an indicator on whether this is a pattern statement and thus the iterator must return the last result,
            versus for non-pattern statements the iterator returns view content.</param>
            <param name="optStatementName">is an optional statement name, null if none was supplied</param>
            <returns>started statement</returns>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.CreateAndStart(com.espertech.esper.epl.spec.StatementSpecRaw,System.String,System.Boolean,System.String,System.String,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>Creates and starts statement. </summary>
            <param name="statementSpec">defines the statement</param>
            <param name="expression">is the EPL</param>
            <param name="isPattern">is true for patterns</param>
            <param name="optStatementName">is the optional statement name</param>
            <param name="statementId">is the statement id</param>
            <param name="optAdditionalContext">additional context for use by the statement context</param>
            <returns>started statement</returns>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.CreateStarted(com.espertech.esper.epl.spec.StatementSpecRaw,System.String,System.Boolean,System.String,System.String,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>Creates a started statement. </summary>
            <param name="statementSpec">is the statement def</param>
            <param name="expression">is the expression text</param>
            <param name="isPattern">is true for patterns,</param>
            <param name="statementName">is the statement name</param>
            <param name="statementId">is the statement id</param>
            <param name="optAdditionalContext">additional context for use by the statement context</param>
            <returns>statement</returns>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.CreateStopped(com.espertech.esper.epl.spec.StatementSpecRaw,System.String,System.Boolean,System.String,System.String,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>Create stopped statement. </summary>
            <param name="statementSpec">statement definition</param>
            <param name="expression">is the expression text</param>
            <param name="isPattern">is true for patterns, false for non-patterns</param>
            <param name="statementName">is the statement name assigned or given</param>
            <param name="statementId">is the statement id</param>
            <param name="optAdditionalContext">additional context for use by the statement context</param>
            <returns>stopped statement</returns>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.Start(System.String)">
            <summary>
            Start statement by statement id.
            </summary>
            <param name="statementId">of the statement to start.</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.Start(System.String,com.espertech.esper.core.StatementLifecycleSvcImpl.EPStatementDesc,System.Boolean)">
            <summary>Start the given statement. </summary>
            <param name="statementId">is the statement id</param>
            <param name="desc">is the cached statement info</param>
            <param name="isNewStatement">indicator whether the statement is new or a stop-restart statement</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.GetStatementById(System.String)">
            <summary>Returns the statement given a statement id. </summary>
            <param name="id">is the statement id</param>
            <returns>statement</returns>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.StartAllStatements">
            <summary>
            Starts all stopped statements. First statement to fail supplies the exception.
            </summary>
            <throws>EPException to indicate a start error.</throws>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.StopAllStatements">
            <summary>
            Stops all started statements. First statement to fail supplies the exception.
            </summary>
            <throws>EPException to indicate a start error.</throws>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.DestroyAllStatements">
            <summary>
            Destroys all started statements. First statement to fail supplies the exception.
            </summary>
            <throws>EPException to indicate a start error.</throws>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.Compile(com.espertech.esper.epl.spec.StatementSpecRaw,System.String,com.espertech.esper.core.StatementContext)">
            <summary>Compiles a statement returning the compile (verified, non-serializable) form of a statement.</summary>
            <param name="spec">is the statement specification</param>
            <param name="eplStatement">the statement to compile</param>
            <param name="statementContext">the statement services</param>
            <returns>compiled statement</returns>
            <throws>EPStatementException if the statement cannot be compiled</throws>
        </member>
        <member name="P:com.espertech.esper.core.StatementLifecycleSvcImpl.StatementNames">
            <summary>
            Returns an array of statement names. If no statement has been created, an empty array is returned.
            <para>
            Only returns started and stopped statements.
            </para>
            </summary>
            <value>The statement names.</value>
            <returns>statement names</returns>
        </member>
        <member name="T:com.espertech.esper.core.StatementLifecycleSvcImpl.EPStatementDesc">
            <summary>Statement information. </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleSvcImpl.EPStatementDesc.#ctor(com.espertech.esper.core.EPStatementSPI,com.espertech.esper.core.EPStatementStartMethod,com.espertech.esper.core.EPStatementStopMethod,System.String,com.espertech.esper.core.EPStatementHandle)">
            <summary>Ctor. </summary>
            <param name="epStatement">the statement</param>
            <param name="startMethod">the start method</param>
            <param name="stopMethod">the stop method</param>
            <param name="optInsertIntoStream">is the insert-into stream name, or null if not using insert-into</param>
            <param name="statementHandle">is the locking handle for the statement</param>
        </member>
        <member name="P:com.espertech.esper.core.StatementLifecycleSvcImpl.EPStatementDesc.EpStatement">
            <summary>Returns the statement. </summary>
            <returns>statement.</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementLifecycleSvcImpl.EPStatementDesc.StartMethod">
            <summary>Returns the start method. </summary>
            <returns>start method</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementLifecycleSvcImpl.EPStatementDesc.StopMethod">
            <summary>Returns the stop method. </summary>
            <returns>stop method</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementLifecycleSvcImpl.EPStatementDesc.OptInsertIntoStream">
            <summary>Return the insert-into stream name, or null if no insert-into </summary>
            <returns>stream name</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementLifecycleSvcImpl.EPStatementDesc.StatementHandle">
            <summary>Returns the statements handle. </summary>
            <returns>statement handle</returns>
        </member>
        <member name="T:com.espertech.esper.core.InternalEventRouter">
            <summary>
            Interface for a service that routes events within the engine for further processing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.InternalEventRouter.Route(com.espertech.esper.events.EventBean,com.espertech.esper.core.EPStatementHandle)">
            <summary>Route the event such that the event is processed as required.</summary>
            <param name="event">event to route</param>
            <param name="statementHandle">provides statement resources</param>
        </member>
        <member name="T:com.espertech.esper.core.EPStatementImpl">
            <summary>
            Statement implementation for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.EPStatementSPI">
            <summary>
            Statement SPI for statements operations for state transitions and internal management.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPStatement">
            <summary>
            Statement interface that provides methods to start, stop and destroy a statement as well as
            get statement information such as statement name, expression text and current state.
            <para>
            Statements have 3 states: STARTED, STOPPED and DESTROYED.
            </para>
            <para>
            In started state, statements are actively evaluating event streams according to the statement expression. Started
            statements can be stopped and destroyed.
            </para>
            <para>
            In stopped state, statements are inactive. Stopped statements can either be started, in which case
            they begin to actively evaluate event streams, or destroyed.
            </para>
            <para>
            Destroyed statements have relinguished all statement resources and cannot be started or stopped.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPListenable">
            <summary>
            Interface to add and remove update listeners.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPListenable.AddListener(com.espertech.esper.client.UpdateListener)">
            <summary> Add an listener that observes events.</summary>
            <param name="listener">to add
            </param>
        </member>
        <member name="M:com.espertech.esper.client.EPListenable.RemoveListener(com.espertech.esper.client.UpdateListener)">
            <summary> Remove an listener that observes events.</summary>
            <param name="listener">to remove
            </param>
        </member>
        <member name="M:com.espertech.esper.client.EPListenable.RemoveAllListeners">
            <summary> Remove all listeners.</summary>
        </member>
        <member name="M:com.espertech.esper.client.EPListenable.AddListener(com.espertech.esper.client.StatementAwareUpdateListener)">
            <summary>
            Add a statement-aware listener that observes events.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:com.espertech.esper.client.EPListenable.RemoveListener(com.espertech.esper.client.StatementAwareUpdateListener)">
            <summary>
            Remove a statement-aware listener that observes events.
            </summary>
        </member>
        <member name="E:com.espertech.esper.client.EPListenable.Events">
            <summary>
            Occurs whenever new events are available or old events are removed.
            </summary>
        </member>
        <member name="E:com.espertech.esper.client.EPListenable.AwareEvents">
            <summary>
            Occurs whenever new events are available or old events are removed.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EPListenable.StatementAwareListeners">
            <summary>
            Returns an enumerable of statement-aware update listeners.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EPListenable.UpdateListeners">
            <summary>
            Gets the update listeners.
            </summary>
            <value>The update listeners.</value>
        </member>
        <member name="T:com.espertech.esper.client.EPIterable">
            <summary>
            Interface to iterate over events.
            <para>
            A concurrency-unsafe iterator over events representing statement results (pull API).
            </para>
            <para>
            The iterator is useful for applications that are single-threaded, or that coordinate the iterating thread
            with event processing threads that use the sendEvent method using application code locks or synchronization.
            </para>
            <para>
            The iterator returned by this method does not make any guarantees towards correctness of
            results and fail-behavior, if your application processes events into the engine instance
            using the sendEvent method by multiple threads.
            </para>
            <para>
            Use the safeIterator method for concurrency-safe iteration. Note the safe iterator requires
            applications to explicitly close the safe iterator when done iterating.
            </para>
            </summary>
            <returns>event iterator</returns>
        </member>
        <member name="M:com.espertech.esper.client.EPIterable.GetSafeEnumerator">
            <summary>
            Returns a concurrency-safe iterator that iterates over events representing statement results (pull API)
            in the face of concurrent event processing by further threads.
            <para>
            In comparison to the regular iterator, the safe iterator guarantees correct results even
            as events are being processed by other threads. The cost is that the iterator holds
            one or more locks that must be released. Any locks are acquired at the time this method
            is called.
            </para>
            <para>
            This method is a blocking method. It may block until statement processing locks are released
            such that the safe iterator can acquire any required locks.
            </para>
            <para>
            An application MUST explicitly close the safe iterator instance using the close method, to release locks held by the
            iterator. The call to the close method should be done in a finally block to make sure
            the iterator gets closed.
            </para>
            <para>
            Multiple safe iterators may be not be used at the same time by different application threads.
            A single application thread may hold and use multiple safe iterators however this is discouraged.
            </para>
            </summary>
            <returns>
            safe iterator;
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPIterable.EventType">
            <summary> Returns the type of events the iterable returns.</summary>
            <returns> event type of events the iterator returns
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.EPStatement.Start">
            <summary> Start the statement.</summary>
        </member>
        <member name="M:com.espertech.esper.client.EPStatement.Stop">
            <summary> Stop the statement.</summary>
        </member>
        <member name="M:com.espertech.esper.client.EPStatement.Destroy">
            <summary>Destroy the statement releasing all statement resources.
            <p>A destroyed statement cannot be started again.</p>
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.Name">
            <summary> Returns the statement name.</summary>
            <returns> statement name</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.Text">
            <summary> Returns the underlying expression text or XML.</summary>
            <returns> expression text</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.State">
            <summary>Gets the statement's current state</summary>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.IsStarted">
            <summary>Returns true if the statement state is started.</summary>
            <returns>
            true for started statements, false for stopped or destroyed statements.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.IsStopped">
            <summary>Returns true if the statement state is stopped.</summary>
            <returns>
            true for stopped statements, false for started or destroyed statements.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.IsDestroyed">
            <summary>Returns true if the statement state is destroyed.</summary>
            <returns>
            true for destroyed statements, false for started or stopped statements.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.TimeLastStateChange">
            <summary>
            Returns the system time in milliseconds of when the statement last change state.
            </summary>
            <returns>time in milliseconds of last statement state change</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.Subscriber">
            <summary>
            Gets or sets the current subscriber instance that receives statement results.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.IsPattern">
            <summary>Returns true if statement is a pattern</summary>
            <returns>true if statement is a pattern</returns>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementSPI.SetCurrentState(com.espertech.esper.client.EPStatementState,System.Int64)">
            <summary>Set statement state.</summary>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementSPI.StatementId">
            <summary>Returns the statement id.</summary>
            <returns>statement id</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementSPI.ListenerSet">
            <summary>
            Gets or sets the current set of listeners for read-only operations.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementSPI.ParentView">
            <summary>Sets the parent view.</summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementImpl.CheckInternalRouter">
            <summary>
            Gets the internal router.
            </summary>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.core.EPStatementImpl._internalEvents">
            <summary>
            Occurs whenever new events are available or old events are removed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementImpl.#ctor(System.String,System.String,System.String,System.Boolean,com.espertech.esper.dispatch.DispatchService,com.espertech.esper.core.StatementLifecycleSvc,System.Int64,System.Boolean,System.Boolean,System.Int64,com.espertech.esper.core.EPStatementHandle,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.core.StatementResultService,com.espertech.esper.timer.TimeSourceService)">
            <summary>
            Ctor.
            </summary>
            <param name="statementId">is a unique ID assigned by the engine for the statement</param>
            <param name="statementName">is the statement name assigned during creation, or the statement id if none was assigned</param>
            <param name="expressionText">is the EPL and/or pattern expression</param>
            <param name="isPattern">is true to indicate this is a pure pattern expression</param>
            <param name="dispatchService">for dispatching events to listeners to the statement</param>
            <param name="statementLifecycleSvc">handles lifecycle transitions for the statement</param>
            <param name="timeLastStateChange">the timestamp the statement was created and started</param>
            <param name="isBlockingDispatch">is true if the dispatch to listeners should block to preserve event generation order</param>
            <param name="isSpinBlockingDispatch">true to use spin locks blocking to deliver results, as locks are usually uncontended</param>
            <param name="msecBlockingTimeout">is the max number of milliseconds of block time</param>
            <param name="epStatementHandle">the handle and statement lock associated with the statement</param>
            <param name="variableService">provides access to variable values</param>
            <param name="statementResultService">handles statement result generation</param>
            <param name="timeSourceService">The time source service.</param>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementImpl.Start">
            <summary>
            Start the statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementImpl.Stop">
            <summary>
            Stop the statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementImpl.Destroy">
            <summary>
            Destroy the statement releasing all statement resources.
            <p>A destroyed statement cannot be started again.</p>
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementImpl.SetCurrentState(com.espertech.esper.client.EPStatementState,System.Int64)">
            <summary>
            Set statement state.
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementImpl.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementImpl.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementImpl.GetSafeEnumerator">
            <summary>
            Returns a concurrency-safe iterator that iterates over events representing statement results (pull API)
            in the face of concurrent event processing by further threads.
            <para>
            In comparison to the regular iterator, the safe iterator guarantees correct results even
            as events are being processed by other threads. The cost is that the iterator holds
            one or more locks that must be released. Any locks are acquired at the time this method
            is called.
            </para>
            	<para>
            This method is a blocking method. It may block until statement processing locks are released
            such that the safe iterator can acquire any required locks.
            </para>
            	<para>
            An application MUST explicitly close the safe iterator instance using the close method, to release locks held by the
            iterator. The call to the close method should be done in a finally block to make sure
            the iterator gets closed.
            </para>
            	<para>
            Multiple safe iterators may be not be used at the same time by different application threads.
            A single application thread may hold and use multiple safe iterators however this is discouraged.
            </para>
            </summary>
            <returns>safe iterator;</returns>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementImpl.AddListener(com.espertech.esper.client.UpdateListener)">
            <summary>Add a listener to the statement.</summary>
            <param name="listener">to add</param>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementImpl.RemoveListener(com.espertech.esper.client.UpdateListener)">
            <summary>Remove a listeners to a statement.</summary>
            <param name="listener">to remove</param>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementImpl.RemoveAllListeners">
            <summary>Remove all listeners to a statement.</summary>
        </member>
        <member name="E:com.espertech.esper.core.EPStatementImpl._internalAwareEvents">
            <summary>
            Occurs whenever new events are available or old events are removed.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementImpl.StatementId">
            <summary>
            Returns the statement id.
            </summary>
            <value></value>
            <returns>statement id</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementImpl.State">
            <summary>
            Gets the statement's current state
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementImpl.ParentView">
            <summary>
            Sets the parent view.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementImpl.Text">
            <summary>
            Returns the underlying expression text or XML.
            </summary>
            <value></value>
            <returns> expression text</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementImpl.Name">
            <summary>
            Returns the statement name.
            </summary>
            <value></value>
            <returns> statement name</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementImpl.EventType">
            <summary>
            Returns the type of events the iterable returns.
            </summary>
            <value></value>
            <returns> event type of events the iterator returns
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementImpl.ListenerSet">
            <summary>Returns the set of listeners to the statement.</summary>
            <returns>statement listeners</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementImpl.IsPattern">
            <summary>Returns true if statement is a pattern</summary>
            <returns>true if statement is a pattern</returns>
        </member>
        <member name="T:com.espertech.esper.core.EPStatementImpl.InternalRouter">
            <summary>
            An internal listener that operates on behalf of the statement and routes
            events out to their event handlers.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.UpdateListener">
            <summary>
            Defines an interface to notify of new and old events.
            <para>
            Also see <see cref="T:com.espertech.esper.client.StatementAwareUpdateListener"/> for update listeners that require
            the statement and service provider instance to be passed to the listener in addition
            to events.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.UpdateListener.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that new events are available or old events are removed.
            If the call to update contains new (inserted) events, then the first argument will be a non-empty list and
            the second will be empty. Similarly, if the call is a notification of deleted events, then the first argument
            will be empty and the second will be non-empty.
            <para>
            Either the newEvents or oldEvents will be non-null. This method won't be called with both arguments being null,
            but either one could be null. The same is true for zero-length arrays.
            </para>
            	<para>
            Either newEvents or oldEvents will be non-empty. If both are non-empty, then the update is a modification
            notification.
            </para>
            </summary>
            <param name="newEvents">is any new events. This will be null or empty if the update is for old events only.</param>
            <param name="oldEvents">is any old events. This will be null or empty if the update is for new events only.</param>
        </member>
        <member name="T:com.espertech.esper.client.StatementAwareUpdateListener">
            <summary>
            Defines an interface to notify of new and old events.
            Also see <see cref="T:com.espertech.esper.client.UpdateListener"/> for update listeners that only
            require event delivery.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.StatementAwareUpdateListener.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[],com.espertech.esper.client.EPStatement,com.espertech.esper.client.EPServiceProvider)">
            <summary>
            Notify that new events are available or old events are removed.
            <para>
            If the call to update contains new (inserted) events, then the first argument will be a non-empty list and
            the second will be empty. Similarly, if the call is a notification of deleted events, then the first argument
            will be empty and the second will be non-empty.
            </para>
            <para>
            Either the newEvents or oldEvents will be non-null. This method won't be called with both arguments being null,
            but either one could be null. The same is true for zero-length arrays.
            Either newEvents or oldEvents will be non-empty. If both are non-empty, then the update is a modification
            notification.
            </para>
            </summary>
            <param name="newEvents">
            is any new events. This will be null or empty if the update is for old events only.
            </param>
            <param name="oldEvents">
            is any old events. This will be null or empty if the update is for new events only.
            </param>
            <param name="statement">is the statement producing the result</param>
            <param name="epServiceProvider">
            is the engine instance that provided the administrative API that created the statement which produces the result
            </param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WeakReference`1"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakReference`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.WeakReference`1.IsDead">
            <summary>
            Gets a value indicating whether this instance is dead.
            </summary>
            <value><c>true</c> if this instance is dead; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.compat.WeakReference`1.Target">
            <summary>
            Gets or sets the object (the target) referenced by the current <see cref="T:System.WeakReference"></see> object.
            </summary>
            <value></value>
            <returns>null if the object referenced by the current <see cref="T:System.WeakReference"></see> object has been garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.WeakReference"></see> object.</returns>
            <exception cref="T:System.InvalidOperationException">The reference to the target object is invalid. This can occur if the current <see cref="T:System.WeakReference"></see> object has been finalized.</exception>
        </member>
        <member name="T:com.espertech.esper.compat.LinkedHashMap`2">
            <summary>
            Hashtable and linked list implementation designed to mimic Java's LinkedHashMap
            functionality.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="F:com.espertech.esper.compat.LinkedHashMap`2.m_hashList">
            <summary>
            A list of all key-value pairs added to the table.  The list
            preserves insertion order and is used to preserve enumeration
            ordering.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.LinkedHashMap`2.m_hashTable">
            <summary>
            Contains a reference to the key and is used for all lookups.  Refers
            to the node in the linked list node.  Provides for fast removal of
            the node upon removal.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.LinkedHashMap`2.m_shuffleOnAccess">
            <summary>
            Shuffles items on access
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.LinkedHashMap`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.LinkedHashMap`2"/> class.
            </summary>
            <param name="hashCapacity"></param>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.Get(`0,`1)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then the defaultValue is
            returned.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.Get(`0)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.Put(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to thenew value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.Push(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            If a value was previously mapped it is returned.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.PutAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Puts all values from the source dictionary into
            this dictionary.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.Remove(`0,`1@)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  Returns the value that was found at that
            location and removed or the defaultValue.
            </summary>
            <param name="key">Search key into the dictionary</param>
            <param name="value">The value removed from the dictionary (if found).</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.CheckEldest">
            <summary>
            Checks the eldest entry and see if we should remove it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.RemoveAndReturn(`0)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  The item if found is returned; if not,
            default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:Array"></see>, starting at a particular <see cref="T:Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashMap`2.ShuffleOnAccess">
            <summary>
            Returns a value indicating if items should be shuffled (pushed to the
            head of the list) on access requests.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashMap`2.FirstValue">
            <summary>
            Returns the first value in the enumeration of values
            </summary>
            <returns></returns>
        </member>
        <member name="E:com.espertech.esper.compat.LinkedHashMap`2.RemoveEldest">
            <summary>
            Occurs when a potentially destructive operations occurs on the dictionary
            and the dictionary is allowed to rebalance.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashMap`2.FastKeyEnumerator">
            <summary>
            Gets the key enumerator in a faster and more efficient manner.
            </summary>
            <value>The fast key enumerator.</value>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashMap`2.FastKeyArray">
            <summary>
            Gets the keys in a faster and more efficient manner.
            </summary>
            <value>The fast key array.</value>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashMap`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashMap`2.FastKeys">
            <summary>
            Gets a faster lighter enumeration of keys.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashMap`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashMap`2.Item(`0)">
            <summary>
            Gets or sets the value the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashMap`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashMap`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.compat.LinkedHashMap`2.EntryEventHandler">
            <summary>
            Delegate for handling events on dictionary entries.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.IllegalStateException">
            <summary>
            An exception that occurs when some illegal state occurs.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.IllegalStateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.IllegalStateException"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.IllegalStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.IllegalStateException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:com.espertech.esper.compat.IllegalStateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.IllegalStateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="e">The underlying exception.</param>
        </member>
        <member name="T:com.espertech.esper.compat.HighResolutionTimer">
            <summary>
            Windows timers are based on the system timer.  The system timer runs at a
            frequency of about 50-60 hz depending on your machine.  This presents a 
            problem for applications that require finer granularity.  The HighRes timer
            allows us to get better granularity, but currently it only works on Windows.
            
            Thanks to Luc Pattyn for clarifying some of the issues with high resolution
            timers with the post on CodeProject.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimer.TIME_CALLBACK_FUNCTION">
            <summary>
            Callback is a function
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimer.TIME_CALLBACK_EVENT_SET">
            <summary>
            Callback is an event -- use SetEvent
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimer.TIME_CALLBACK_EVENT_PULSE">
            <summary>
            Callback is an event -- use PulseEvent
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimer.TIME_KILL_SYNCHRONOUS">
            <summary>
            This flag prevents the event from occurring after the user calls timeKillEvent() to
            destroy it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.HighResolutionTimer"/> class.
            </summary>
            <param name="timerCallback">The timer callback.</param>
            <param name="state">The state.</param>
            <param name="dueTime">The due time.</param>
            <param name="period">The period.</param>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimer.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimer.OnTimerEvent(System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Called when timer event occurs.
            </summary>
            <param name="id">The id.</param>
            <param name="msg">The MSG.</param>
            <param name="userCtx">The user CTX.</param>
            <param name="rsv1">The RSV1.</param>
            <param name="rsv2">The RSV2.</param>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimer.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimer.m_appDomain">
            <summary>
            Reference to the appDomain for this instance
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimer.OnAppDomainUnload(System.Object,System.EventArgs)">
            <summary>
            Called when an AppDomain is unloaded.  Our goal here is to ensure that
            all timers created by this class under the banner of this AppDomain
            are cleaned up prior to the AppDomain unloading.  Failure to do so will
            cause applications to crash due to exceptions outside of the AppDomain.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:com.espertech.esper.compat.HighResolutionTimer.TimerEventHandler">
            <summary>
            Delegate that is called by the windows multimedia timer upon trigger
            of the timer.
            </summary>
            <param name="id"></param>
            <param name="msg"></param>
            <param name="userCtx"></param>
            <param name="rsv1"></param>
            <param name="rsv2"></param>
        </member>
        <member name="T:com.espertech.esper.compat.HashMap`2">
            <summary>
            An extended dictionary based upon a closed hashing
            algorithm.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="T:com.espertech.esper.compat.BaseMap`2">
            <summary>
            Base for dictionaries that contain extended functionality.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="F:com.espertech.esper.compat.BaseMap`2.m_nullEntry">
            <summary>
            Entry for handling null keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.#ctor">
            <summary>
            Allows subclasses to bind the subdictionary later in their
            initialization process.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructs a new dictionary
            </summary>
            <param name="subDictionary"></param>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.Get(`0,`1)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then the defaultValue is
            returned.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.Get(`0)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.Remove(`0,`1@)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  Returns the value that was found at that
            location and removed or the defaultValue.
            </summary>
            <param name="key">Search key into the dictionary</param>
            <param name="value">The value removed from the dictionary (if found).</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.RemoveAndReturn(`0)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  The item if found is returned; if not,
            default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.Put(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to thenew value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.Push(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            If a value was previously mapped it is returned.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.PutAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Puts all values from the source dictionary into
            this dictionary.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.BaseMap`2.AsEDictionary(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates an Map from the IDictionary.
            </summary>
            <param name="sourceDictionary"></param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.BaseMap`2.SubDictionary">
            <summary>
            Gets or sets the subdictionary.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.BaseMap`2.FirstValue">
            <summary>
            Returns the first value in the enumeration of values
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.BaseMap`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:V"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.BaseMap`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.BaseMap`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.BaseMap`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.BaseMap`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:com.espertech.esper.compat.HashMap`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.HashMap`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HashMap`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.HashMap`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HashMap`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.HashMap`2"/> class.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.CollectionPlus`1">
            <summary>
            Collection that wraps another collection + an item
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.#ctor(System.Collections.Generic.ICollection{`0},`0)">
            <summary>
            Constructs a new collection plus an item
            </summary>
            <param name="baseCollection"></param>
            <param name="item"></param>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.compat.CollectionPlus`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:com.espertech.esper.compat.CollectionPlus`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="T:com.espertech.esper.compat.CollectionHelper">
            <summary>
            Provides additional functions that are useful when operating on
            collections.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.GetEmptyList``1">
            <summary>
            Returns an empty IList for type T.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns true if the collection is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anyCollection"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.IsNotEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns true if the collection is not empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anyCollection"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.AreEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Compares two collections of objects.  The objects must share the same generic
            parameter, but can be of different collections.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseObj"></param>
            <param name="compObj"></param>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.AreEqual``1(System.Collections.Generic.IEnumerator{``0},System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Compares two collections of objects.  The objects must share the same generic
            parameter, but can be of different collections.
            </summary>
            <param name="baseEnum">The base enumerator.</param>
            <param name="compEnum">The comp enumerator.</param>
            <returns></returns>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.Reverse``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Primitive reversal of a collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.RandomAccessList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Tries to ensure that we are using a list that supports O(1)
            random access lookups.  In short, the requestor wants to
            ensure that they do not pay a penalty for requesting data
            anywhere in the list.  This can be a problem if the list is
            represented as a linkedlist or other such structure where
            lookup time can be proportional to length.
            </summary>
            <param name="baseList"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.Render(System.Collections.IEnumerable)">
            <summary>
            Renders an enumerable source
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts all of the items in source to an array.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.AddAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add all of one enumerable set into a collection.
            </summary>
            <param name="targetCollection"></param>
            <param name="sourceEnum"></param>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.ContainsAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if all items in the itemEnum are contained in referenceCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="referenceCollection"></param>
            <param name="itemEnum"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all items in itemEnum from the targetCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="targetCollection"></param>
            <param name="itemEnum"></param>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first item returned by the enumerator of the
            collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceCollection"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.Next``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Advances the enumerator and returns the next item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumObj"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Shuffles the list.  User supplies the randomizer.
            </summary>
            <param name="list"></param>
            <param name="random"></param>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionHelper.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32,System.Random)">
            <summary>
            Shuffles the list.  User supplies the randomizer.  Performs
            at least iteration swaps.
            </summary>
            <param name="list"></param>
            <param name="iterations"></param>
            <param name="random"></param>
        </member>
        <member name="T:com.espertech.esper.collection.UniformPair`1">
            <summary> General-purpose pair of values of any type. The pair only equals another pair if
            the objects that form the pair equal, ie. first pair first object equals (.equals) the second pair first object,
            and the first pair second object equals the second pair second object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.UniformPair`1.#ctor(`0,`0)">
            <summary>
            Construct pair of values.
            </summary>
            <param name="first">is the first value</param>
            <param name="second">is the second value</param>
        </member>
        <member name="M:com.espertech.esper.collection.UniformPair`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.UniformPair`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.UniformPair`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.UniformPair`1.First">
            <summary>
            Gets or sets the first value within pair.
            </summary>
            <value>The first.</value>
        </member>
        <member name="P:com.espertech.esper.collection.UniformPair`1.Second">
            <summary>
            Gets or sets the second value within pair.
            </summary>
            <value>The second.</value>
        </member>
        <member name="T:com.espertech.esper.collection.FlushedEventBuffer">
            <summary>
            Buffer for events - accumulates events until flushed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.FlushedEventBuffer.Add(com.espertech.esper.events.EventBean[])">
            <summary>Add an event array to buffer.</summary>
            <param name="events">to add</param>
        </member>
        <member name="M:com.espertech.esper.collection.FlushedEventBuffer.GetAndFlush">
            <summary>
            Get the events currently buffered. Returns null if the buffer is empty. Flushes the buffer.
            </summary>
            <returns>array of events in buffer or null if empty</returns>
        </member>
        <member name="M:com.espertech.esper.collection.FlushedEventBuffer.Flush">
            <summary>Empty buffer.</summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternOrExpr">
            <summary>
            Logical OR for use in pattern expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternOrExpr.#ctor">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternOrExpr.#ctor(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr[])">
            <summary>Ctor.</summary>
            <param name="first">a first pattern expression in the OR relationship</param>
            <param name="second">a second pattern expression in the OR relationship</param>
            <param name="patternExprs">
            further optional pattern expressions in the OR relationship
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternOrExpr.Add(com.espertech.esper.client.soda.PatternExpr)">
            <summary>Adds a pattern expression to the OR relationship between patterns.</summary>
            <param name="expr">to add</param>
            <returns>pattern expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternGuardExpr">
            <summary>
            Guard is the where timer-within pattern object for use in pattern expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternGuardExpr.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
            <param name="namespace">the namespace of the object, i.e. view namespace or pattern object namespace</param>
            <param name="name">the guard object name</param>
            <param name="parameters">the guard object parameters</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternGuardExpr.#ctor(System.String,System.String,System.Object[],com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
            <param name="namespace">the namespace of the object.</param>
            <param name="name">the guard object name</param>
            <param name="parameters">the guard object parameters</param>
            <param name="guarded">the guarded pattern expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternGuardExpr.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Object},com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
            <param name="namespace">The @namespace.</param>
            <param name="name">is the guard object name</param>
            <param name="parameters">is guard object parameters</param>
            <param name="guardedPattern">is the guarded pattern expression</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.CountStarProjectionExpression">
            <summary>
            Count of (distinct) rows, equivalent to "count(*)"
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CountStarProjectionExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without inner expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.BetweenExpression">
            <summary>
            Between checks that a given value is in a range between a low endpoint and a high endpoint.
            <para/>
            Closed and open ranges (endpoint included or excluded) are supported by this class, as is not-between.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.BetweenExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor, creates a between range check.</summary>
            <param name="datapoint">provides the datapoint</param>
            <param name="lower">provides lower boundary</param>
            <param name="higher">provides upper boundary</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.BetweenExpression.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
            <param name="lowEndpointIncluded">
            true if the low endpoint is included, false if not
            </param>
            <param name="highEndpointIncluded">
            true if the high endpoint is included, false if not
            </param>
            <param name="notBetween">true for not-between, false for between</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.BetweenExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="datapoint">provides the datapoint</param>
            <param name="lower">provides lower boundary</param>
            <param name="higher">provides upper boundary</param>
            <param name="lowEndpointIncluded">
            true if the low endpoint is included, false if not
            </param>
            <param name="highEndpointIncluded">
            true if the high endpoint is included, false if not
            </param>
            <param name="notBetween">true for not-between, false for between</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.BetweenExpression.IsLowEndpointIncluded">
            <summary>True if the low endpoint is included.</summary>
            <returns>true for inclusive range.</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.BetweenExpression.IsHighEndpointIncluded">
            <summary>True if the high endpoint is included.</summary>
            <returns>true for inclusive range.</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.BetweenExpression.IsNotBetween">
            <summary>True for not-between, or false for between range.</summary>
            <returns>
            false is the default range check, true checks if the value is outside of the range
            </returns>
        </member>
        <member name="T:com.espertech.esper.plugin.PlugInEventTypeHandlerContext">
            <summary>
            Context for use in <see cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/> to provide information to help
            decide whether an event representation can handle the requested event type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventTypeHandlerContext.#ctor(System.Uri,System.Object,System.String)">
            <summary>Ctor. </summary>
            <param name="eventTypeResolutionURI">the URI specified for resolving the event type, may be a child URIof the event representation URI and may carry additional parameters </param>
            <param name="typeInitializer">optional configuration for the type, or null if none supplied</param>
            <param name="eventTypeAlias">the name of the event</param>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventTypeHandlerContext.EventTypeResolutionURI">
            <summary>Returns the URI specified for resolving the event type, may be a child URI of the event representation URI and may carry additional parameters </summary>
            <returns>URI</returns>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventTypeHandlerContext.TypeInitializer">
            <summary>Returns optional configuration for the type, or null if none supplied. An String XML document if the configuration was read from an XML file. </summary>
            <returns>configuration, or null if none supplied</returns>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventTypeHandlerContext.EventTypeAlias">
            <summary>Returns the name assigned to the event type. </summary>
            <returns>alias</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.PropertyGroupDesc">
            <summary>
            For use with building groups of event properties to reduce overhead in maintaining versions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyGroupDesc.#ctor(System.Int32,com.espertech.esper.compat.Map{com.espertech.esper.events.EventType,System.String},System.String[])">
            <summary>Ctor. </summary>
            <param name="groupNum">the group number</param>
            <param name="aliasTypeSet">the event types and their aliases whose totality of properties fully falls within this group.</param>
            <param name="properties">is the properties in the group</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.PropertyGroupDesc.GroupNum">
            <summary>Returns the group number. </summary>
            <returns>group number</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.PropertyGroupDesc.Types">
            <summary>Returns the types. </summary>
            <returns>types</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.PropertyGroupDesc.Properties">
            <summary>Returns the properties. </summary>
            <returns>properties</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.CreateWindowDesc">
            <summary>Specification for creating a named window.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.CreateWindowDesc.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.epl.spec.ViewSpec})">
            <summary>Ctor.</summary>
            <param name="windowName">the window name</param>
            <param name="viewSpecs">the view definitions</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateWindowDesc.WindowName">
            <summary>Returns the window name.</summary>
            <returns>window name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateWindowDesc.ViewSpecs">
            <summary>Returns the view specifications.</summary>
            <returns>view specs</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprStreamUnderlyingNode">
            <summary>
            Represents an stream selector that returns the streams underlying event, or null if undefined.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprStreamUnderlyingNode.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="streamName">
            is the name of the stream for which to return the underlying event
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStreamUnderlyingNode.StreamName">
            <summary>Returns the stream name.</summary>
            <returns>stream name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStreamUnderlyingNode.StreamId">
            <summary>Returns stream id supplying the property value.</summary>
            <returns>stream number</returns>
        </member>
        <member name="T:com.espertech.esper.core.EPRuntimeEventSender">
            <summary>
            For use by <see cref="T:com.espertech.esper.client.EventSender"/> for direct feed of wrapped events for
            processing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeEventSender.ProcessWrappedEvent(com.espertech.esper.events.EventBean)">
            <summary>
            Equivalent to the sendEvent method of EPRuntime, for use to process an known event.
            </summary>
            <param name="eventBean">the event object wrapped by an event bean providing the event metadata</param>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeAccumViewRStream">
            <summary>
            A data window view that holds events in a stream and only removes events from a stream (rstream) if
            no more events arrive for a given time interval, also handling the remove stream
            by keeping set-like semantics. See <see cref="T:com.espertech.esper.view.window.TimeAccumView"/> for the same behavior without
            remove stream handling.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeAccumViewRStream.#ctor(com.espertech.esper.view.window.TimeAccumViewFactory,com.espertech.esper.core.StatementContext,System.Int64)">
            <summary>Constructor.</summary>
            <param name="msecIntervalSize">
            is the number of milliseconds to batch events for
            </param>
            <param name="timeBatchViewFactory">fr copying this view in a group-by</param>
            <param name="statementContext">is required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeAccumViewRStream.GetMsecIntervalSize">
            <summary>Returns the interval size in milliseconds.</summary>
            <returns>batch size</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeAccumViewRStream.SendRemoveStream">
            <summary>This method sends the remove stream for all accumulated events.</summary>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeAccumViewRStream.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty.</summary>
            <returns>true if empty</returns>
        </member>
        <member name="T:com.espertech.esper.view.std.SizeView">
            <summary>
            This view is a very simple view presenting the number of elements in a stream or view.
            The view computes a single long-typed count of the number of events passed through it similar
            to the base statistics COUNT column.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeView.#ctor(com.espertech.esper.core.StatementContext)">
            <summary>Ctor.</summary>
            <param name="statementContext">is services</param>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="_statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeView.CreateEventType(com.espertech.esper.core.StatementContext)">
            <summary>Creates the event type for this view</summary>
            <param name="statementContext">is the event adapter service</param>
            <returns>event type for view</returns>
        </member>
        <member name="P:com.espertech.esper.view.std.SizeView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.RegressionLinestView">
            <summary>
            A view that calculates regression on two fields. The view uses internally a <see cref="T:com.espertech.esper.view.stat.RegressionBean"/>
            instance for the calculations, it also returns this bean as the result.
            This class accepts most of its behaviour from its parent, <see cref="T:com.espertech.esper.view.stat.BaseBivariateStatisticsView"/>. It adds
            the usage of the regression bean and the appropriate schema.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.RegressionLinestView.#ctor(com.espertech.esper.core.StatementContext,System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="xFieldName">
            is the field name of the field providing X data points
            </param>
            <param name="yFieldName">
            is the field name of the field providing X data points
            </param>
            <param name="statementContext">contains required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.RegressionLinestView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Clones the view.
            </summary>
            <param name="statementContext">The statement context.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.RegressionLinestView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.RegressionLinestView.CreateEventType(com.espertech.esper.core.StatementContext)">
            <summary>Creates the event type for this view.</summary>
            <param name="statementContext">is the event adapter service</param>
            <returns>event type of view</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.RegressionLinestView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.DimensionMemberImpl">
            <summary>
            Serves up Cube dimension member information - the members dimension
            and its key values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.DimensionMemberImpl.#ctor(System.Object[])">
            <summary> Constructor.</summary>
            <param name="values">is a set of values identifying the member
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.DimensionMemberImpl.SetDimension(com.espertech.esper.view.stat.olap.Dimension)">
            <summary>
            Sets the dimension the member belongs to.
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.DimensionMemberImpl.Values">
            <summary>
            Returns member values.
            </summary>
            <value></value>
            <returns> array of member values
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.DimensionMemberImpl.Dimension">
            <summary>
            Gets the dimension the member belongs to.
            </summary>
            <returns>dimension that this member is a value of</returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.Dimension">
            <summary> Dimensions are a structural attribute of cubes. A dimension is an ordinate within a multidimensional
            cube, consisting of a list of values (members). Each member designates a unique position along its ordinate.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.Dimension.GetMembers">
            <summary> Returns the member values for the dimension.</summary>
            <returns> array of members
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.Dimension.PropertyNames">
            <summary> Returns the event property name or names providing the member values for the dimension.</summary>
            <returns> array of property names
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.StopCallbackDelegate">
            <summary>
            Delegate that is used for wrapping the StopCallback interface.
            </summary>
        </member>
        <member name="T:com.espertech.esper.util.ProxyStopCallback">
            <summary>
            Proxy implementation for StopCallback
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.ProxyStopCallback.#ctor(com.espertech.esper.util.StopCallbackDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.util.ProxyStopCallback"/> class.
            </summary>
            <param name="stopDelegate">The stop delegate.</param>
        </member>
        <member name="M:com.espertech.esper.util.ProxyStopCallback.Stop">
            <summary>
            Stops the underlying resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.util.SimpleTypeParserFactory">
            <summary>
            A factory for creating an instance of a parser that parses a String and returns a target type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.SimpleTypeParserFactory.GetParser(System.Type)">
            <summary>
            Returns a parsers for the String value using the given built-in class for parsing.
            </summary>
            <param name="type">is the type to parse the value to</param>
            <returns>value matching the type passed in</returns>
        </member>
        <member name="T:com.espertech.esper.type.WildcardParameter">
            <summary>
            Represents a wildcard as a parameter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.WildcardParameter.IsWildcard(System.Int32,System.Int32)">
            <summary>
            Returns true if all values between and including min and max are supplied by the parameter.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>
            true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.WildcardParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary>
            Return a set of int values representing the value of the parameter for the given range.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>set of integer</returns>
        </member>
        <member name="T:com.espertech.esper.type.StringValue">
            <summary>
            Placeholder for a String value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.StringValue.#ctor(System.String)">
            <summary> Constructor.</summary>
            <param name="stringValue">sets initial value
            </param>
        </member>
        <member name="M:com.espertech.esper.type.StringValue.#ctor">
            <summary> Constructor.</summary>
        </member>
        <member name="M:com.espertech.esper.type.StringValue.ParseString(System.String[])">
            <summary> Parse the string array returning a string array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.StringValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.StringValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.StringValue.ParseString(System.String)">
            <summary> Parse the string literal consisting of text between double-quotes or single-quotes.</summary>
            <param name="value">is the text wthin double or single quotes
            </param>
            <returns> parsed value
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.StringValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.StringValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.StringValue._String">
            <summary>
            Set a string value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.type.MathArithTypeEnum">
            <summary>
            Enumeration for the type of arithmatic to use.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.MathArithTypeEnum.ADD">
            <summary>
            Plus.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.MathArithTypeEnum.SUBTRACT">
            <summary>
            Minus
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.MathArithTypeEnum.DIVIDE">
            <summary>
            Divide
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.MathArithTypeEnum.MULTIPLY">
            <summary>
            Multiply.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.MathArithTypeEnum.MODULO">
            <summary>
            Modulo.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.MathArithTypeEnum.Values">
            <summary>
            Public enumeration of pseudo-enumerated type values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.GetComputer(System.Type)">
            <summary>
            Returns number cruncher for the target coercion type.
            </summary>
            <param name="coercedType">target type</param>
            <returns>number cruncher</returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.AddDecimal(System.Object,System.Object)">
            <summary>
            Adds decimals.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.AddDouble(System.Object,System.Object)">
            <summary>
            Adds doubles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.AddSingle(System.Object,System.Object)">
            <summary>
            Adds singles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.AddInt64(System.Object,System.Object)">
            <summary>
            Adds int64s.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.AddInt32(System.Object,System.Object)">
            <summary>
            Adds int32s.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.AddUInt64(System.Object,System.Object)">
            <summary>
            Adds unsigned int64s.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.AddUInt32(System.Object,System.Object)">
            <summary>
            Adds unsigned 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.SubtractDecimal(System.Object,System.Object)">
            <summary>
            Subtracts decimals.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.SubtractDouble(System.Object,System.Object)">
            <summary>
            Subtracts doubles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.SubtractSingle(System.Object,System.Object)">
            <summary>
            Subtracts singles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.SubtractInt64(System.Object,System.Object)">
            <summary>
            Subtracts 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.SubtractInt32(System.Object,System.Object)">
            <summary>
            Subtracts 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.SubtractUInt64(System.Object,System.Object)">
            <summary>
            Subtracts unsigned 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.SubtractUInt32(System.Object,System.Object)">
            <summary>
            Subtracts unsigned 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.DivideDecimal(System.Object,System.Object)">
            <summary>
            Divides decimals.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.DivideDouble(System.Object,System.Object)">
            <summary>
            Divides doubles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.DivideSingle(System.Object,System.Object)">
            <summary>
            Divides singles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.DivideInt64(System.Object,System.Object)">
            <summary>
            Divides 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.DivideInt32(System.Object,System.Object)">
            <summary>
            Divides 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.DivideUInt64(System.Object,System.Object)">
            <summary>
            Divides unsigned 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.DivideUInt32(System.Object,System.Object)">
            <summary>
            Divides unsigned 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.MultiplyDecimal(System.Object,System.Object)">
            <summary>
            Multiplies decimals.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.MultiplyDouble(System.Object,System.Object)">
            <summary>
            Multiplies doubles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.MultiplySingle(System.Object,System.Object)">
            <summary>
            Multiplies singles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.MultiplyInt64(System.Object,System.Object)">
            <summary>
            Multiplies 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.MultiplyInt32(System.Object,System.Object)">
            <summary>
            Multiplies 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.MultiplyUInt64(System.Object,System.Object)">
            <summary>
            Multiplies unsigned 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.MultiplyUInt32(System.Object,System.Object)">
            <summary>
            Multiplies unsigned 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.ModuloDecimal(System.Object,System.Object)">
            <summary>
            Moduloes decimals.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.ModuloDouble(System.Object,System.Object)">
            <summary>
            Moduloes doubles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.ModuloSingle(System.Object,System.Object)">
            <summary>
            Moduloes singles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.ModuloInt64(System.Object,System.Object)">
            <summary>
            Moduloes 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.ModuloInt32(System.Object,System.Object)">
            <summary>
            Moduloes 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.ModuloUInt64(System.Object,System.Object)">
            <summary>
            Moduloes unsigned 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.ModuloUInt32(System.Object,System.Object)">
            <summary>
            Moduloes unsigned 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnum.ParseOperator(System.String)">
            <summary>
            Returns the math operator for the string.
            </summary>
            <param name="operator">operator to parse</param>
            <returns>math enum</returns>
        </member>
        <member name="P:com.espertech.esper.type.MathArithTypeEnum.ExpressionText">
            <summary>Returns string representation of enum.</summary>
            <returns>text for enum</returns>
        </member>
        <member name="T:com.espertech.esper.type.MathArithTypeEnum.Computer">
            <summary>
            Interface for number cruncher.
            </summary>
        </member>
        <member name="T:com.espertech.esper.type.FloatValue">
            <summary>
            Placeholder for a float value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.FloatValue.ParseString(System.String)">
            <summary> Parse string value returning a float.</summary>
            <param name="value">to parse
            </param>
            <returns> parsed value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.FloatValue.ParseString(System.String[])">
            <summary> Parse the string array returning a float array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.FloatValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.FloatValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.FloatValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.FloatValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.FloatValue._Float">
            <summary>
            Set a float value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleHandle">
            <summary>
            Marker interface for use with <see cref="T:com.espertech.esper.schedule.SchedulingService"/>. Implementations serve as a schedule trigger values when
            the schedule is reached to trigger or return the handle.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalStateNodePrinterVisitor">
            <summary>
            Visitor class for printing out an evaluation state tree where each node is printed indented according
            to its depth in the tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalStateNodeVisitor">
            <summary> Interface for visiting each element in the evaluation node tree for an event expression (see Visitor pattern).</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNodeVisitor.Visit(com.espertech.esper.pattern.EvalStateNode,System.Object)">
            <summary> Invoked by each child node as part of accepting this visitor.</summary>
            <param name="node">is the node in the composite tree accepting the visitor
            </param>
            <param name="data">is any additional useful to implementations
            </param>
            <returns> any additional data useful to implementations or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNodePrinterVisitor.Visit(com.espertech.esper.pattern.EvalStateNode,System.Object)">
            <summary>
            Invoked by each child node as part of accepting this visitor.
            </summary>
            <param name="node">is the node in the composite tree accepting the visitor</param>
            <param name="data">is any additional useful to implementations</param>
            <returns>
            any additional data useful to implementations or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNodePrinterVisitor.indent(System.Int32)">
            <summary>
            Indents the specified level.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.indicator.pretty.DimensionMemberRenderHelper">
            <summary>
            Utility methods for rendering dimension members as a string.
            </summary>
        </member>
        <member name="M:com.espertech.esper.indicator.pretty.DimensionMemberRenderHelper.RenderMember(com.espertech.esper.view.stat.olap.DimensionMember)">
            <summary> Renders dimension members as a String.</summary>
            <param name="dimensionMember">is the dimension dimensionMember to render
            </param>
            <returns> rendered dimensionMember
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.ExprNodeAdapter">
            <summary>
            Adapter for use by <see cref="T:com.espertech.esper.filter.FilterParamIndexBooleanExpr"/> to evaluate bool expressions, providing
            events per stream to expression nodes. Generated by @{link FilterSpecParamExprNode} for
            bool expression filter parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.ExprNodeAdapter.CreateLocalData">
            <summary>
            Creates a local data object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.filter.ExprNodeAdapter.#ctor(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.events.EventBean[],com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Ctor.
            </summary>
            <param name="exprNode">is the boolean expression</param>
            <param name="prototype">is the row of events the we are matching on</param>
            <param name="variableService">for setting variable version for evaluating variables, if required</param>
        </member>
        <member name="M:com.espertech.esper.filter.ExprNodeAdapter.Evaluate(com.espertech.esper.events.EventBean)">
            <summary>
            Evaluate the bool expression given the event as a stream zero event.
            </summary>
            <param name="_event">is the stream zero event (current event)</param>
            <returns>bool result of the expression</returns>
        </member>
        <member name="P:com.espertech.esper.filter.ExprNodeAdapter.Prototype">
            <summary>
            Provides the prototype events-per-stream where stream zero is the current stream
            and is filled when the expression is evaluated.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.xml.SchemaXMLPropertyParser">
            <summary>
            Parses event property names and transforms to XPath expressions using the schema
            information supplied. Supports the nested, indexed and mapped event properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaXMLPropertyParser.GetTypeForName(System.Xml.XmlQualifiedName)">
            <summary>
            Gets the CLR type for the qualified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaXMLPropertyParser.Parse(System.String,System.String,System.String,System.Xml.Schema.XmlSchema)">
            <summary>
            Return the xPath corresponding to the given property.
            The propertyName String may be simple, nested, indexed or mapped.
            </summary>
            <param name="propertyName">is the event property name</param>
            <param name="rootElementName">is the name of the root element</param>
            <param name="namespace_">The namespace.</param>
            <param name="xsModel">is the schema model</param>
            <returns>xpath expression</returns>
            <throws>  XPathExpressionException </throws>
        </member>
        <member name="T:com.espertech.esper.events.property.PropertyParser">
            <summary>Parser for property names that can be simple, nested, mapped or a combination of these. Uses ANTLR parser to parse. </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyParser.Parse(System.String,com.espertech.esper.events.BeanEventTypeFactory,System.Boolean)">
            <summary>Parse the given property name returning a Property instance for the property. </summary>
            <param name="propertyName">is the property name to parse</param>
            <param name="beanEventTypeFactory">is the chache and factory for event bean types and event wrappers</param>
            <param name="isRootedDynamic">is true to indicate that the property is already rooted in a dynamicproperty and therefore all child properties should be dynamic properties as well </param>
            <returns>Property instance for property</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.PropertyHelper">
            <summary>
            This class offers utililty methods around introspection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.GetGetter(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Return getter for the given member
            </summary>
            <param name="propertyDesc">The property descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.GetProperties(System.Type)">
            <summary>
            Introspects the given class and returns event property descriptors for each property found
            in the class itself, it's superclasses and all interfaces this class and the superclasses implements.
            </summary>
            <param name="type">the Class to introspect</param>
            <returns>list of properties</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.GetImplementedInterfaceParents(System.Type,com.espertech.esper.compat.Set{System.Type})">
            <summary>
            Gets the implemented interface parents.
            </summary>
            <param name="type">The type.</param>
            <param name="typesResult">The classes result.</param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.GetPropertiesForClasses(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets the properties for classes.
            </summary>
            <param name="propertyClasses">The property classes.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.RemoveClrProperties(System.Collections.Generic.IList{com.espertech.esper.events.EventPropertyDescriptor})">
            <summary>
            Remove CLR specific properties from the given list of property descriptors.
            </summary>
            <param name="properties">is the list of property descriptors</param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.RemoveDuplicateProperties(System.Collections.Generic.IList{com.espertech.esper.events.EventPropertyDescriptor})">
            <summary>
            Removes duplicate properties using the property name to find unique properties.
            </summary>
            <param name="properties">is a list of property descriptors</param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.AddSimpleProperties(System.Type,System.Collections.Generic.IList{com.espertech.esper.events.EventPropertyDescriptor})">
            <summary>
            Adds to the given list of property descriptors the properties of the
            given class using the introspected properties. This also finds array
            and indexed properties.
            </summary>
            <param name="type">to introspect</param>
            <param name="result">is the list to add to</param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.AddIndexedProperties(System.Type,System.Collections.Generic.IList{com.espertech.esper.events.EventPropertyDescriptor})">
            <summary>
            Adds to the given list of property descriptors the indexed properties, i.e.
            properties have a getter method taking a single Int value as a parameter.
            </summary>
            <param name="type"></param>
            <param name="result"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.AddMappedProperties(System.Type,System.Collections.Generic.IList{com.espertech.esper.events.EventPropertyDescriptor})">
            <summary>
            Adds to the given list of property descriptors the mapped properties, ie.
            properties that have a getter method taking a single String value as a parameter.
            </summary>
            <param name="type">type to introspect</param>
            <param name="result">the list to add to</param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.GetAccessorPropertyName(System.Reflection.MethodInfo)">
            <summary>
            Gets the name that should be assigned to the property bound to the accessorMethod
            </summary>
            <param name="accessorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.GetSimpleFields(System.Type)">
            <summary>
            Returns all simple fields
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.GetSimpleAccessors(System.Type)">
            <summary>
            Returns an enumerable that provides all accessors that have the
            no parameters.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.GetIndexedAccessors(System.Type)">
            <summary>
            Returns an enumerable that provides all accessors that take one
            parameter of type int.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.GetMappedAccessors(System.Type)">
            <summary>
            Returns an enumerable that provides all accessors that take one
            parameter of type string.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyHelper.GetAccessors(System.Type)">
            <summary>
            Enumerates all accessor methods for a type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum">
            <summary>
            Enumeration for representing select-clause selection of the remove stream or the insert stream, or both.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum.RSTREAM_ONLY">
            <summary> Indicates selection of the remove stream only.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum.ISTREAM_ONLY">
            <summary> Indicates selection of the insert stream only.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum.RSTREAM_ISTREAM_BOTH">
            <summary> Indicates selection of both the insert and the remove stream.  </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseStreamSelectorHelper.MapFromSODA(com.espertech.esper.client.soda.StreamSelector)">
            <summary>Maps the SODA-selector to the internal representation</summary>
            <param name="selector">is the SODA-selector to map</param>
            <returns>internal stream selector</returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseStreamSelectorHelper.MapFromSODA(com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum)">
            <summary>Maps the internal stream selector to the SODA-representation</summary>
            <param name="selector">is the internal selector to map</param>
            <returns>SODA stream selector</returns>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTFilterSpecValidationException">
            <summary>
            This exception is thrown to indicate a problem in a filter specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTFilterSpecValidationException.#ctor(System.String,System.Exception)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
            <param name="t">inner throwable
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTFilterSpecValidationException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyIndTableCoerceAll">
            <summary>
            Index that organizes events by the event property values into hash buckets. Based on a HashMap
            with <see cref="T:com.espertech.esper.collection.MultiKeyUntyped"/> keys that store the property values.
            <p>
            Performs coercion of the index keys before storing the keys, and coercion of the lookup keys before lookup.
            </p>
            <p>
            Takes a list of property names as parameter. Doesn't care which event type the events have as long as the properties
            exist. If the same event is added twice, the class throws an exception on add.
            </p>
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyIndTableCoerceAdd">
            <summary>
            Index that organizes events by the event property values into hash buckets. Based on a
            HashMap with <see cref="T:com.espertech.esper.collection.MultiKeyUntyped"/> keys that store the property values.
            <para>
            Performs coercion of the index keys before storing the keys.
            </para>
            <para>
            Takes a list of property names as parameter. Doesn't care which event type the events have as
            long as the properties exist. If the same event is added twice, the class throws an exception on
            add.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyIndexedEventTable">
             <summary> Index that organizes events by the event property values into hash buckets. Based on a HashMap
             with <see cref="T:com.espertech.esper.collection.MultiKeyUntyped"/> keys that store the property values.
            
             Takes a list of property names as parameter. Doesn't care which event type the events have as long as the properties
             exist. If the same event is added twice, the class throws an exception on add.
             </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.table.PropertyIndexedEventTable.propertyGetters">
            <summary>
            Getters for properties.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.table.PropertyIndexedEventTable.propertyIndex">
            <summary>
            Index table.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTable.#ctor(System.Int32,com.espertech.esper.events.EventType,System.String[])">
            <summary> Ctor.</summary>
            <param name="streamNum">the stream number that is indexed
            </param>
            <param name="eventType">types of events indexed
            </param>
            <param name="propertyNames">property names to use for indexing
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTable.GetMultiKey(com.espertech.esper.events.EventBean)">
            <summary>
            Determine multikey for index access.
            </summary>
            <param name="_event">to get properties from for key</param>
            <returns>multi key</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTable.Add(System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean})">
            <summary>
            Add an array of events. Same event instance is not added twice. Event properties should be immutable.
            Allow null passed instead of an empty array.
            </summary>
            <param name="events">to add</param>
            <throws>  ArgumentException if the event was already existed in the index </throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTable.Remove(System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean})">
            <summary> Remove events.</summary>
            <param name="events">to be removed, can be null instead of an empty array.
            </param>
            <throws>  ArgumentException when the event could not be removed as its not in the index </throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTable.Lookup(System.Object[])">
            <summary> Returns the set of events that have the same property value as the given event.</summary>
            <param name="keys">to compare against
            </param>
            <returns> set of events with property value, or null if none found (never returns zero-sized set)
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTable.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndTableCoerceAdd.#ctor(System.Int32,com.espertech.esper.events.EventType,System.String[],System.Type[])">
            <summary>Ctor.</summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyNames">are the property names to get property values</param>
            <param name="coercionType">are the classes to coerce indexed values to</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndTableCoerceAll.#ctor(System.Int32,com.espertech.esper.events.EventType,System.String[],System.Type[])">
            <summary>Ctor.</summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyNames">are the property names to get property values</param>
            <param name="coercionTypes">are the classes to coerce indexed values to</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndTableCoerceAll.Lookup(System.Object[])">
            <summary>
            Returns the set of events that have the same property value as the given event.
            </summary>
            <param name="keys">to compare against</param>
            <returns>
            set of events with property value, or null if none found (never returns zero-sized set)
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryGraph">
            <summary> Model of relationships between streams based on properties in both streams that are
            specified as equal in a filter expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="numStreams">number of streams
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.Add(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Add properties for 2 streams that are equal.
            </summary>
            <param name="streamLeft">left hand stream</param>
            <param name="propertyLeft">left hand stream property</param>
            <param name="streamRight">right hand stream</param>
            <param name="propertyRight">right hand stream property</param>
            <returns>
            true if added and did not exist, false if already known
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.IsNavigable(System.Int32,System.Int32)">
            <summary> Returns true if there is a relationship between streams via equal properties.</summary>
            <param name="streamFrom">from stream number
            </param>
            <param name="streamTo">to stream number
            </param>
            <returns> true if relationship exists, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.GetNavigableStreams(System.Int32)">
            <summary> Returns set of streams that the given stream is navigable to.</summary>
            <param name="streamFrom">from stream number
            </param>
            <returns> set of streams related to this stream, or empty set if none
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.GetIndexProperties(System.Int32,System.Int32)">
            <summary> Returns index properties.</summary>
            <param name="streamLookup">stream to serve as source for looking up events
            </param>
            <param name="streamIndexed">stream to look up in
            </param>
            <returns> index property names
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.GetKeyProperties(System.Int32,System.Int32)">
            <summary> Returns key properties.</summary>
            <param name="streamLookup">stream to serve as source for looking up events
            </param>
            <param name="streamIndexed">stream to look up in
            </param>
            <returns> key property names
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.FillEquivalentNav(com.espertech.esper.epl.join.plan.QueryGraph)">
            <summary> Fill in equivalent key properties (navigation entries) on all streams.
            For example, if  a=b and b=c  then add a=c. The method adds new equalivalent key properties
            until no additional entries to be added are found, ie. several passes can be made.
            </summary>
            <param name="queryGraph">navigablity info between streamss
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.FillEquivalentNav(com.espertech.esper.epl.join.plan.QueryGraph,System.Int32,System.Int32)">
            <summary>
            Looks at the key and index (aka. left and right) properties of the 2 streams and checks
            for each property if any equivalent index properties exist for other streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.FillEquivalentNav(com.espertech.esper.epl.join.plan.QueryGraph,System.Int32,System.String,System.Int32,System.String)">
             <summary>
             Looks at the key and index (aka. left and right) properties of the 2 streams and checks
             for each property if any equivalent index properties exist for other streams.
            
             Example:  s0.p0 = s1.p1  and  s1.p1 = s2.p2  ==> therefore s0.p0 = s2.p2
             ==> look stream s0, property p0; indexed stream s1, property p1
             Is there any other lookup stream that has stream 1 and property p1 as index property? ==> this is stream s2, p2
             Add navigation entry between stream s0 and property p0 to stream s2, property p2
             </summary>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryGraph.NumStreams">
            <summary> Returns the number of streams.</summary>
            <returns> number of streams
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryGraph.GraphValue">
            <summary> Property lists stored as a value for each stream-to-stream relationship.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.GraphValue.#ctor">
            <summary> Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.GraphValue.Add(System.String,System.String)">
            <summary> Add key and index property.</summary>
            <param name="keyProperty">key property
            </param>
            <param name="indexProperty">index property
            </param>
            <returns> true if added and either property did not exist, false if either already existed
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.GraphValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryGraph.GraphValue.PropertiesLeft">
            <summary> Returns property names for left stream.</summary>
            <returns> property names
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryGraph.GraphValue.PropertiesRight">
            <summary> Returns property names for right stream.</summary>
            <returns> property names
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeIdentifierVisitor">
            <summary> Visitor that collects event property identifier information under expression nodes.
            The visitor can be configued to not visit aggregation nodes thus ignoring
            properties under aggregation nodes such as sum, avg, min/max etc.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeIdentifierVisitor.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="visitAggregateNodes">true to indicate that the visitor should visit aggregate nodes, or false
            if the visitor ignores aggregate nodes
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeIdentifierVisitor.IsVisit(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Allows visitor to indicate whether to visit a given node.
            Implicitly if a visitor doesn't visit a node it would also not visit any descendent child nodes of that node.
            </summary>
            <param name="exprNode">is the node in questions</param>
            <returns>
            true if the visitor wants to visit the child node (next call is visit), or false to skip child
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeIdentifierVisitor.Visit(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Visit the given expression node.
            </summary>
            <param name="exprNode">is the expression node to visit</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeIdentifierVisitor.ExprProperties">
            <summary> Returns list of event property stream numbers and names that uniquely identify which
            property is from whcih stream, and the name of each.
            </summary>
            <returns> list of event property statement-unique info
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.PollExecStrategyDBQuery">
            <summary>
            Viewable providing historical data from a database.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.PollExecStrategy">
            <summary>
            Interface for polling data from a data source such as a relational database.
            Lifecycle methods are for managing connection resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategy.Start">
            <summary> Start the poll, called before any poll operation.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategy.Poll(System.Object[])">
            <summary> Poll events using the keys provided.</summary>
            <param name="lookupValues">is keys for exeuting a query or such
            </param>
            <returns> a list of events for the keys
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategy.Done">
            <summary> Indicate we are done polling and can release resources.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategy.Destroy">
            <summary> Indicate we are no going to use this object again.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategyDBQuery.#ctor(com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.EventType,com.espertech.esper.epl.db.ConnectionCache,System.String,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.epl.db.DBOutputTypeDesc})">
            <summary> Ctor.</summary>
            <param name="eventAdapterService">for generating event beans</param>
            <param name="eventType">is the event type that this poll generates</param>
            <param name="connectionCache">caches Connection and DbCommand</param>
            <param name="preparedStatementText">is the SQL to use for polling</param>
            <param name="outputTypes">describe columns selected by the SQL</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategyDBQuery.Start">
            <summary>
            Start the poll, called before any poll operation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategyDBQuery.Done">
            <summary>
            Indicate we are done polling and can release resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategyDBQuery.Destroy">
            <summary>
            Indicate we are no going to use this object again.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategyDBQuery.Poll(System.Object[])">
            <summary>
            Poll events using the keys provided.
            </summary>
            <param name="lookupValues">is keys for exeuting a query or such</param>
            <returns>a list of events for the keys</returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabaseConfigService">
            <summary> Service providing database connection factory and configuration information
            for use with historical data polling.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigService.GetConnectionFactory(System.String)">
            <summary> Returns a connection factory for a configured database.</summary>
            <param name="databaseName">is the name of the database
            </param>
            <returns> is a connection factory to use to get connections to the database
            </returns>
            <throws>  DatabaseConfigException is thrown to indicate database configuration errors </throws>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigService.GetQuerySetting(System.String)">
            <summary>
            Returns the column metadata settings for the database.
            </summary>
            <param name="databaseName">the database name</param>
            <returns>indicators for change case, metadata retrieval strategy and others</returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigService.GetConnectionCache(System.String,System.String)">
            <summary> Returns true to indicate a setting to retain connections between lookups.</summary>
            <param name="databaseName">is the name of the database
            </param>
            <param name="preparedStatementText">is the sql text
            </param>
            <returns> a cache implementation to cache connection and prepared statements
            </returns>
            <throws>  DatabaseConfigException is thrown to indicate database configuration errors </throws>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigService.GetDataCache(System.String,com.espertech.esper.core.EPStatementHandle)">
            <summary> Returns a new cache implementation for this database.</summary>
            <param name="databaseName">the name of the database to return a new cache implementation for for</param>
            <param name="epStatementHandle">the statements-own handle for use in registering callbacks with services</param>
            <returns> cache implementation
            </returns>
            <throws>  DatabaseConfigException is thrown to indicate database configuration errors </throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorFactory">
            <summary>
            Factory for output processors. Output processors process the result set of a join or of a view
            and apply aggregation/grouping, having and some output limiting logic.
            <para/>
            The instance produced by the factory depends on the presence of aggregation functions in the select list,
            the presence and nature of the group-by clause.
            <para/>
            In case (1) and (2) there are no aggregation functions in the select clause.
            <para/>
            Case (3) is without group-by and with aggregation functions and without non-aggregated properties
            in the select list: <pre>select Sum(volume) </pre>.
            Always produces one row for new and old data, aggregates without grouping.
            <para/>
            Case (4) is without group-by and with aggregation functions but with non-aggregated properties
            in the select list: <pre>select price, Sum(volume) </pre>.
            Produces a row for each event, aggregates without grouping.
            <para/>
            Case (5) is with group-by and with aggregation functions and all selected properties are grouped-by.
            in the select list: <pre>select customerId, Sum(volume) group by customerId</pre>.
            Produces a old and new data row for each group changed, aggregates with grouping, see
            <see cref="T:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroup"/>
            <para/>
            Case (6) is with group-by and with aggregation functions and only some selected properties are grouped-by.
            in the select list: <pre>select customerId, supplierId, Sum(volume) group by customerId</pre>.
            Produces row for each event, aggregates with grouping.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorFactory.GetProcessor(com.espertech.esper.epl.spec.StatementSpecCompiled,com.espertech.esper.core.StatementContext,com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.ViewResourceDelegate)">
            <summary>
            Returns the result set process for the given select expression, group-by clause and
            having clause given a set of types describing each stream in the from-clause.
            </summary>
            <param name="statementSpecCompiled">the statement specification</param>
            <param name="stmtContext">engine and statement level services</param>
            <param name="typeService">for information about the streams in the from clause</param>
            <param name="viewResourceDelegate">delegates views resource factory to expression resources requirements</param>
            <returns>result set processor instance</returns>
            <throws>ExprValidationException when any of the expressions is invalid</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll">
            <summary>
            Result set processor for the case: aggregation functions used in the select clause,
            and no group-by, and not all of the properties in the select clause are under an
            aggregation function.
            <para/>
            This processor does not perform grouping, every event entering and leaving is in the
            same group. The processor generates one row for each event entering (new event) and
            one row for each event leaving (old event). Aggregation state is simply one row
            holding all the state.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.epl.agg.AggregationService,com.espertech.esper.epl.expression.ExprNode,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="selectExprProcessor">for processing the select expression and generting the readonly output rows</param>
            <param name="orderByProcessor">for sorting the outgoing events according to the order-by clause</param>
            <param name="aggregationService">handles aggregation</param>
            <param name="optionalHavingNode">having clause expression node</param>
            <param name="isSelectRStream">true if remove stream events should be generated</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.ProcessJoinResult(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},System.Boolean)">
            <summary>
            For use by joins posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newEvents">new events posted by join</param>
            <param name="oldEvents">old events posted by join</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.ProcessViewResult(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            For use by views posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newData">new events posted by view</param>
            <param name="oldData">old events posted by view</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.GetEnumerator(com.espertech.esper.view.Viewable)">
            <summary>
            Returns the iterator implementing the group-by and aggregation and order-by logic
            specific to each case of use of these construct.
            </summary>
            <param name="parent">is the parent view iterator</param>
            <returns>event iterator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.GetEnumerator(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary>Returns the iterator for iterating over a join-result.</summary>
            <param name="joinSet">is the join result set</param>
            <returns>iterator over join results</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.Clear">
            <summary>Clear out current state.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.ProcessOutputLimitedJoin(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}}}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting.</summary>
            <param name="joinEventsSet">the join results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.ProcessOutputLimitedView(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.events.EventBean[]}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting.</summary>
            <param name="viewEventsList">the view results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.ResultEventType">
            <summary>
            Returns the event type of processed results.
            </summary>
            <value>The type of the result event.</value>
            <returns> event type of the resulting events posted by the processor.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.SelectExprProcessor">
            <summary>Returns the select expression processor </summary>
            <returns>select processor.</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.OptionalHavingNode">
            <summary>Returns the optional having expression. </summary>
            <returns>having expression node</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.MinMaxAggregator">
            <summary>Min/max aggregator for all values.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.MinMaxAggregator.#ctor(com.espertech.esper.type.MinMaxTypeEnum,System.Type)">
            <summary>Ctor.</summary>
            <param name="minMaxTypeEnum">
            enum indicating to return minimum or maximum values
            </param>
            <param name="returnType">is the value type returned by aggregator</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.MinMaxAggregator.Enter(System.Object)">
            <summary>
            Enters the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.MinMaxAggregator.Leave(System.Object)">
            <summary>
            Leaves the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.MinMaxAggregator.NewAggregator(com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Make a new, initalized aggregation state.
            </summary>
            <param name="methodResolutionService">for use in creating new aggregation method instances as a factory</param>
            <returns>initialized copy of the aggregator</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.MinMaxAggregator.Value">
            <summary>
            Returns the current value held.
            </summary>
            <value></value>
            <returns>current value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.MinMaxAggregator.ValueType">
            <summary>
            Returns the type of the current value.
            </summary>
            <value></value>
            <returns>type of values held</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.FloatSumAggregator">
            <summary>Sum for float values.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.FloatSumAggregator.Enter(System.Object)">
            <summary>
            Enters the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.FloatSumAggregator.Leave(System.Object)">
            <summary>
            Leaves the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.FloatSumAggregator.NewAggregator(com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Make a new, initalized aggregation state.
            </summary>
            <param name="methodResolutionService">for use in creating new aggregation method instances as a factory</param>
            <returns>initialized copy of the aggregator</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.FloatSumAggregator.Value">
            <summary>
            Returns the current value held.
            </summary>
            <value></value>
            <returns>current value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.FloatSumAggregator.ValueType">
            <summary>
            Returns the type of the current value.
            </summary>
            <value></value>
            <returns>type of values held</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.AggregationServiceFactory">
            <summary>
            Factory for aggregation service instances.
            <para>
            Consolidates aggregation nodes such that result futures point to a single instance and
            no re-evaluation of the same result occurs.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceFactory.GetService(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprAggregateNode},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprAggregateNode},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprAggregateNode},System.Boolean,com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Returns an instance to handle the aggregation required by the aggregation expression nodes, depending on
            whether there are any group-by nodes.
            </summary>
            <param name="selectAggregateExprNodes">aggregation nodes extracted out of the select expression</param>
            <param name="havingAggregateExprNodes">aggregation nodes extracted out of the select expression</param>
            <param name="orderByAggregateExprNodes">aggregation nodes extracted out of the select expression</param>
            <param name="hasGroupByClause">indicator on whethere there is group-by required, or group-all</param>
            <param name="methodResolutionService">is required to resolve aggregation methods</param>
            <returns>instance for aggregation handling</returns>
        </member>
        <member name="T:com.espertech.esper.dispatch.DispatchServiceProvider">
            <summary> Provider of implementations for the dispatch service.</summary>
        </member>
        <member name="M:com.espertech.esper.dispatch.DispatchServiceProvider.NewService">
            <summary> Returns new service.</summary>
            <returns> new dispatch service implementation.
            </returns>
        </member>
        <member name="T:com.espertech.esper.compat.TimerFactory">
            <summary>
            Creates timers.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.TimerFactory.DefaultTimerFactory">
            <summary>
            Gets the default timer factory
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.TimerException">
            <summary>
            A general purpose exception for timer events
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.TimerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TimerException"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.TimerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TimerException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:com.espertech.esper.compat.TimeTracer`1">
            <summary>
            Times flow and execution time for a scope.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.TimeTracer`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TimeTracer`1"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:com.espertech.esper.compat.TimeTracer`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.FastReaderWriterLock">
            <summary>
            A reader-writer lock implementation that is intended to be simple, yet very
            efficient.  In particular only 1 interlocked operation is taken for any lock 
            operation (we use spin locks to achieve this).  The spin lock is never held
            for more than a few instructions (in particular, we never call event APIs
            or in fact any non-trivial API while holding the spin lock).   
            
            This class was derived from the ReaderWriterLock presented by Vance Morrison
            in his weblog.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastReaderWriterLock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastReaderWriterLock.AcquireReaderLock(System.Int32)">
            <summary>
            Acquires the reader lock.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.FastReaderWriterLock.AcquireWriterLock(System.Int32)">
            <summary>
            Acquires the writer lock.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.FastReaderWriterLock.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastReaderWriterLock.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastReaderWriterLock.LazyCreateEvent(System.Threading.EventWaitHandle@,System.Boolean)">
            <summary>
            A routine for lazily creating a event outside the lock (so if errors
            happen they are outside the lock and that we don't do much work
            while holding a spin lock).  If all goes well, reenter the lock and
            set 'waitEvent' 
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastReaderWriterLock.WaitOnEvent(System.Threading.EventWaitHandle,System.UInt32@,System.Int32)">
            <summary>
            Waits on 'waitEvent' with a timeout of 'millisceondsTimeout.  
            Before the wait 'numWaiters' is incremented and is restored before leaving this routine.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastReaderWriterLock.ExitAndWakeUpAppropriateWaiters">
            <summary>
            Determines the appropriate events to set, leaves the locks, and sets the events. 
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.FastReaderWriterLock.ReadLock">
            <summary>
            Gets the read-side lockable
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.FastReaderWriterLock.WriteLock">
            <summary>
            Gets the write-side lockable
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.FastReaderWriterLock.ReadLockable">
            <summary>
            Lockable object that controls the read-side of the FastReaderWriterLock
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.FastReaderWriterLock.WriteLockable">
            <summary>
            Lockable object that controls the write-side of the FastReaderWriterLock
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.ArrayHelper">
            <summary>
            Helper class that assists with operations on arrays.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ArrayHelper.Render(System.Array)">
            <summary>
            Renders the array as a string
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ArrayHelper.AreEqual(System.Array,System.Array)">
            <summary>
            Compares two arrays for equality
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.collection.ThreadWorkQueue">
            <summary>
            Simple queue implementation based on a Linked List per thread.
            Objects can be added to the queue tail or queue head.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.ThreadWorkQueue.Add(System.Object)">
            <summary>Adds event to the end of the event queue.</summary>
            <param name="ev">event to add</param>
        </member>
        <member name="M:com.espertech.esper.collection.ThreadWorkQueue.AddFront(System.Object)">
            <summary>Adds event to the front of the queue.</summary>
            <param name="ev">event to add</param>
        </member>
        <member name="M:com.espertech.esper.collection.ThreadWorkQueue.Next">
            <summary>
            Returns the next event to GetSelectListEvents, or null
            if there are no more events.
            </summary>
            <returns>next event to GetSelectListEvents</returns>
        </member>
        <member name="P:com.espertech.esper.collection.ThreadWorkQueue.IsEmpty">
            <summary>Returns an indicator whether the queue is empty.</summary>
            <returns>true for empty, false for not empty</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.SubqueryExistsExpression">
            <summary>
            Exists-expression for a set of values returned by a lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SubqueryExistsExpression.#ctor(com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="model">is the lookup statement object model</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SubqueryExistsExpression.Model">
            <summary>Gets or sets the lookup statement object model.</summary>
            <returns>lookup model</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.EPStatementObjectModel">
            <summary>
            Object model of an EPL statement.
            <para>
            Applications can create an object model by instantiating this class and then setting the various clauses.
            When done, use <see cref="T:com.espertech.esper.client.EPAdministrator"/> to create a statement from the model.
            </para>
            <para>
            Alternativly, a given textual EPL can be compiled into an object model representation via the compile method on
            <see cref="T:com.espertech.esper.client.EPAdministrator"/>.
            </para>
            <para>
            Use the ToEPL method to generate a textual EPL from an object model.
            </para>
            <para>
            Minimally, and EPL statement consists of the select-clause and the where-clause. These are represented by <see cref="P:com.espertech.esper.client.soda.EPStatementObjectModel.SelectClause"/>
            and <see cref="P:com.espertech.esper.client.soda.EPStatementObjectModel.FromClause"/> respectively.
            </para>
            <para>
            Here is a short example that create a simple EPL statement such as "select page, responseTime from PageLoad" :
            <pre>
            EPStatementObjectModel model = new EPStatementObjectModel();
            model.SetSelectClause(SelectClause.Create("page", "responseTime"));
            model.SetFromClause(FromClause.Create(FilterStream.Create("PageLoad")));
            </pre>
            </para>
            <para>
            The select-clause and from-clause must be set for the statement object model to be useable by the
            administrative API. All other clauses a optional.
            </para>
            <para>
            Please see the documentation set for further examples.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.ToEPL">
            <summary>
            Renders the object model in it's EPL syntax textual representation.
            </summary>
            <returns>EPL representing the statement object model</returns>
            <throws>IllegalStateException if required clauses do not exist</throws>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.InsertInto">
            <summary>
            Gets or sets the insert into.
            </summary>
            <value>The insert into.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.SelectClause">
            <summary>
            Gets or sets the select clause.
            </summary>
            <value>The select clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.FromClause">
            <summary>
            Gets or sets from clause.
            </summary>
            <value>From clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.WhereClause">
            <summary>
            Gets or sets the where clause.
            </summary>
            <value>The where clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.GroupByClause">
            <summary>
            Gets or sets the group by clause.
            </summary>
            <value>The group by clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.HavingClause">
            <summary>
            Gets or sets the having clause.
            </summary>
            <value>The having clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.OutputLimitClause">
            <summary>
            Gets or sets the output limit clause.
            </summary>
            <value>The output limit clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.OrderByClause">
            <summary>
            Gets or sets the order by clause.
            </summary>
            <value>The order by clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.Substitutions">
            <summary>
            Gets or sets the substitutions.
            </summary>
            <value>The substitutions.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.CreateVariable">
            <summary>
            Gets or sets the create-variable clause if this is a statement creating a variable, or null if not.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.CreateWindow">
            <summary>
            Gets or sets the create-window clause for creating named windows, or null if this statement does not
            create a named window.
            </summary>
            <value>The create window.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.OnExpr">
            <summary>
            Gets or sets the on-delete or on-select clause for selecting or deleting from named windows, or null if this statement
            does not on-select or on-delete from a named window
            </summary>
            <value>The on expr.</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CaseSwitchExpression">
            <summary>
            Case-expression that acts as a switch testing a value against other values.
            <para>
            The first child expression provides the value to switch on.
            The following pairs of child expressions provide the "when expression then expression" results.
            The last child expression provides the "else" result.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseSwitchExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without inner expression
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseSwitchExpression.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="switchValue">is the expression providing the value to switch on</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseSwitchExpression.Add(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>
            Adds a pair of expressions representing a "when" and a "then" in the switch.
            </summary>
            <param name="when">expression to match on</param>
            <param name="then">
            expression to return a conditional result when the when-expression matches
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseSwitchExpression.SetElse(com.espertech.esper.client.soda.Expression)">
            <summary>
            Sets the else-part of the case-switch. This result of this expression is returned
            when no when-expression matched.
            </summary>
            <param name="elseExpr">is the expression returning the no-match value</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.ArithmaticExpression">
            <summary>
            Arithmatic expression for addition, subtraction, multiplication, division and modulo.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArithmaticExpression.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="operator">can be any of '-', '+', '*', '/' or '%' (modulo).</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArithmaticExpression.#ctor(com.espertech.esper.client.soda.Expression,System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="left">the left hand side</param>
            <param name="operator">can be any of '-', '+', '*', '/' or '%' (modulo).</param>
            <param name="right">the right hand side</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArithmaticExpression.Add(System.Object)">
            <summary>Add a constant to include in the computation.</summary>
            <param name="obj">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArithmaticExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to include in the computation.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArithmaticExpression.Add(System.String)">
            <summary>Add a property to include in the computation.</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.ArithmaticExpression.Operator">
            <summary>Gets the arithmatic operator.</summary>
            <returns>operator</returns>
        </member>
        <member name="T:com.espertech.esper.client.EPPreparedStatementImpl">
            <summary>
            Prepared statement implementation that stores the statement object model and
            a list of substitution parameters, to be mapped into an internal representation upon
            creation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPPreparedStatementImpl.#ctor(com.espertech.esper.client.soda.EPStatementObjectModel,com.espertech.esper.compat.Map{System.Int32,com.espertech.esper.epl.spec.SubstitutionParameterExpression})">
            <summary>Ctor.</summary>
            <param name="model">is the statement object model</param>
            <param name="subParams">is the substitution parameter list</param>
        </member>
        <member name="P:com.espertech.esper.client.EPPreparedStatementImpl.Model">
            <summary>Returns the statement object model for the prepared statement</summary>
            <returns>object model</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPPreparedStatementImpl.SubParams">
            <summary>Returns the indexed substitution parameters.</summary>
            <returns>map of index and parameter</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantPropertyDesc">
            <summary>Descriptor for a variant stream property. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropertyDesc.#ctor(System.Type,com.espertech.esper.events.EventPropertyGetter,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="propertyType">type or null if not exists</param>
            <param name="getter">the getter or null if not exists</param>
            <param name="property">the bool indicating whether it exists or not</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantPropertyDesc.IsProperty">
            <summary>True if the property exists, false if not. </summary>
            <returns>indicator whether property exists</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantPropertyDesc.PropertyType">
            <summary>Returns the property type. </summary>
            <returns>property type</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantPropertyDesc.Getter">
            <summary>Returns the getter for the property. </summary>
            <returns>property getter</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VAEVariantProcessor">
            <summary>
            Represents a variant event stream, allowing events of disparate event types to be
            treated polymophically.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAEVariantProcessor.#ctor(com.espertech.esper.events.vaevent.VariantSpec)">
            <summary>Ctor. </summary>
            <param name="variantSpec">specifies how to handle the disparate events</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionNestedPropertyGetter">
            <summary>
            A getter that works on object events residing within a Map as an event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionNestedPropertyGetter.#ctor(com.espertech.esper.events.EventPropertyGetter,com.espertech.esper.events.EventPropertyGetter,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="revisionGetter">getter for revision value</param>
            <param name="nestedGetter">getter to apply to revision value</param>
            <param name="eventAdapterService">for handling object types</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionNestedPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary> Return the value for the property in the event object specified when the instance was obtained.
            Useful for fast access to event properties. Throws a PropertyAccessException if the getter instance
            doesn't match the EventType it was obtained from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from
            </param>
            <returns> value of property in event
            </returns>
            <throws>  PropertyAccessException to indicate that property access failed </throws>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableExistsException">
            <summary>
            Exception indicating a a variable already exists.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableExistsException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="msg">the exception message.</param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseElementRaw">
            <summary>Marker interface for elements in a select clause that is in the raw (storable) form. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OutputLimitLimitType">
            <summary>Enum for describing the type of output limit within an interval.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitLimitType.FIRST">
            <summary>
            Output first event, relative to the output batch.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitLimitType.LAST">
            <summary>
            Output last event, relative to the output batch.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitLimitType.ALL">
            <summary>
            The ALL keyword has been explicitly specified: Output all events,
            relative to the output batch.
            <para/>
            In the fully-grouped and aggregated case, the explicit ALL outputs one row for each group.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitLimitType.DEFAULT">
            <summary>
            The ALL keyword has not been explicitly specified: Output all events, relative
            to the output batch.
            <para/>
            In the fully-grouped and aggregated case, the
            default ALL outputs all events of the batch row-by-row, multiple per group.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitLimitType.SNAPSHOT">
            <summary>
            Output a snapshot of the current state, relative to the full historical state of a statement.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerSetAssignment">
            <summary>Descriptor for an on-set assignment.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerSetAssignment.#ctor(System.String,com.espertech.esper.epl.expression.ExprNode)">
            <summary>Ctor.</summary>
            <param name="variableName">variable name</param>
            <param name="expression">expression providing new variable value</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerSetAssignment.VariableName">
            <summary>Returns the variable name</summary>
            <returns>variable name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerSetAssignment.Expression">
            <summary>
            Gets or sets the expression providing the new variable value, or null if none
            </summary>
            <returns>assignment expression</returns>
        </member>
        <member name="T:com.espertech.esper.epl.named.NotADataWindowViewCapability">
            <summary>
            Expresses the requirement that all views are derived-value views and now data window views, with the exception of
            group-by and merge views.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowDeltaData">
            <summary>
            A holder for events posted by a named window as an insert and remove stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowDeltaData.#ctor(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>Ctor.</summary>
            <param name="newData">is the insert stream events, or null if none</param>
            <param name="oldData">is the remove stream events, or null if none</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowDeltaData.#ctor(com.espertech.esper.epl.named.NamedWindowDeltaData,com.espertech.esper.epl.named.NamedWindowDeltaData)">
            <summary>Ctor aggregates two deltas into a single delta.</summary>
            <param name="deltaOne">
            is the insert and remove stream events of a first result
            </param>
            <param name="deltaTwo">
            is the insert and remove stream events of a second result
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowDeltaData.NewData">
            <summary>Returns the insert stream events.</summary>
            <returns>insert stream</returns>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowDeltaData.OldData">
            <summary>Returns the remove stream events.</summary>
            <returns>remove stream</returns>
        </member>
        <member name="T:com.espertech.esper.core.DeliveryConvertorNull">
            <summary>Implementation that does not convert columns. </summary>
        </member>
        <member name="T:com.espertech.esper.compat.CastConverter">
            <summary>
            Converts one object to another through use of a cast.
            </summary>
            <param name="sourceObj"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.CastHelper">
            <summary>
            Provides efficient cast methods for converting from object to
            primitive types.  The cast method provided here-in is consistent
            with the cast mechanics of C#.  These cast mechanics are not
            the same as those provided by the IConvertible interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.GetCastConverter(System.Type)">
            <summary>
            Gets the cast converter for the specified type.  If none is
            found, this method returns null.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastInt32(System.Object)">
            <summary>
            Casts the source object to a Int32.
            </summary>
            <param name="sourceObj">The source object.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastInt64(System.Object)">
            <summary>
            Casts the source object to a Int64.
            </summary>
            <param name="sourceObj">The source object.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastInt16(System.Object)">
            <summary>
            Casts the source object to a Int16.
            </summary>
            <param name="sourceObj">The source object.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastSByte(System.Object)">
            <summary>
            Casts the source object to a SByte.
            </summary>
            <param name="sourceObj">The source object.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastSingle(System.Object)">
            <summary>
            Casts the source object to a Single.
            </summary>
            <param name="sourceObj">The source object.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastDouble(System.Object)">
            <summary>
            Casts the source object to a Double.
            </summary>
            <param name="sourceObj">The source object.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastDecimal(System.Object)">
            <summary>
            Casts the source object to a Decimal.
            </summary>
            <param name="sourceObj">The source object.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastUInt32(System.Object)">
            <summary>
            Casts the source object to a UInt32.
            </summary>
            <param name="sourceObj">The source object.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastUInt64(System.Object)">
            <summary>
            Casts the source object to a UInt64.
            </summary>
            <param name="sourceObj">The source object.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastUInt16(System.Object)">
            <summary>
            Casts the source object to a UInt16.
            </summary>
            <param name="sourceObj">The source object.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastByte(System.Object)">
            <summary>
            Casts the source object to a Byte.
            </summary>
            <param name="sourceObj">The source object.</param>
        </member>
        <member name="T:com.espertech.esper.client.UnmatchedListener">
            <summary>
            Interface to receive notification from an engine that an event that has been sent into the engine or that
            has been generated via insert-into has not been matched to any statement, considering all started statement's
            event stream filter criteria (not considering where-clause and having-clauses).
            </summary>
            <see cref="T:com.espertech.esper.client.EPRuntime"/>
        </member>
        <member name="M:com.espertech.esper.client.UnmatchedListener.Update(com.espertech.esper.events.EventBean)">
            <summary>
            Called upon the engine encountering an event not matched to any of the event stream filters
            of any active statement.
            </summary>
            <param name="_event">unmatched event</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.SelectClauseWildcard">
            <summary>
            Represents a wildcard in the select-clause.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.SelectClauseElement">
            <summary>
            Item in a select-clause to describe individual select-clause expressions or Wildcard(s).
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseElement.ToEPLElement(System.IO.StringWriter)">
            <summary>Output the string rendering of the select clause element. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseWildcard.ToEPLElement(System.IO.StringWriter)">
            <summary>Renders the element in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnDeleteClause">
            <summary>
            A clause to delete from a named window based on a triggering event arriving and correlated to the named window events to be deleted.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnDeleteClause.Create(System.String,System.String)">
            <summary>Creates an on-delete clause.</summary>
            <param name="windowName">is the named window name</param>
            <param name="optionalAsName">is the optional alias</param>
            <returns>on-delete clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnDeleteClause.#ctor(System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="windowName">is the named window name</param>
            <param name="optionalAsName">is the alias name of the named window</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnDeleteClause.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnDeleteClause.WindowName">
            <summary>
            Gets or sets the name of the named window to delete from.
            </summary>
            <value>The name of the window.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnDeleteClause.OptionalAsName">
            <summary>
            Gets or sets the as-alias for the named window.
            </summary>
            <value>The name of the optional as.</value>
        </member>
        <member name="T:com.espertech.esper.client.EPAliasResolver">
            <summary>
            Resolves an alias to a type.  The purpose of the delegate
            is to allow the application to provide resolution to a
            type or alias at runtime.
            </summary>
            <param name="eventTypeOrAlias"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeXMLDOM">
             <summary>
             Configuration object for enabling the engine to process events represented as XML DOM document nodes.
            
             Use this class to configure the engine for processing of XML DOM objects that represent events
             and contain all the data for event properties used by statements.
            
             Minimally required is the root element name which allows the engine to map the document
             to the event type that has been named in an EPL or pattern statement.
            
             Event properties that are results of XPath expressions can be made known to the engine via this class.
             For XPath expressions that must refer to namespace prefixes those prefixes and their
             namespace name must be supplied to the engine. A default namespace can be supplied as well.
            
             By supplying a schema resource the engine can interrogate the schema, allowing the engine to
             verify event properties and return event properties in the type defined by the schema.
             When a schema resource is supplied, the optional root element namespace defines the namespace in case the
             root element name occurs in multiple namespaces.
             </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.AddXPathProperty(System.String,System.String,System.Xml.XPath.XPathResultType)">
            <summary>
            Adds an event property for which the engine uses the supplied XPath expression against
            a DOM document node to resolve a property value.
            </summary>
            <param name="name">name of the event property</param>
            <param name="xpath">is an arbitrary xpath expression</param>
            <param name="type">is the return type of the expression</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.AddXPathProperty(System.String,System.String,System.Xml.XPath.XPathResultType,System.String)">
            <summary>
            Adds an event property for which the engine uses the supplied XPath expression againsta DOM document node to resolve a property value.
            </summary>
            <param name="name">the event property</param>
            <param name="xpath">an arbitrary xpath expression</param>
            <param name="type">a constant obtained from System.Xml.XPath.XPathResultType.</param>
            <param name="castToType">is the type name of the type that the return value of the xpath expression is casted to</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.AddNamespacePrefix(System.String,System.String)">
            <summary> Add a prefix and namespace name for use in XPath expressions refering to that prefix.</summary>
            <param name="prefix">is the prefix of the namespace
            </param>
            <param name="namespace_">is the namespace name</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.RootElementName">
            <summary> Gets or sets the root element name.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.RootElementNamespace">
            <summary> Gets or sets the root element namespace.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.DefaultNamespace">
            <summary> Gets or sets the default namespace.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.SchemaResource">
            <summary>
            Gets or sets  the schema resource.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.IsResolvePropertiesAbsolute">
            <summary>
            Gets or sets a flag indicating whether properties are compiled into absolute
            or deep XPath expressions.
            <para>
            When set to true (the default), indicates that when properties are compiled to XPath expressions that the
            compilation should generate an absolute XPath expression such as "/getQuote/request" for the
            simple request property, or "/getQuote/request/symbol" for a "request.symbol" nested property,
            wherein the root element node is "getQuote".
            </para>
            <para>
            When set to false, indicates that when properties are compiled to XPath expressions that the
            compilation should generate a deep XPath expression such as "//symbol" for the
            simple symbol property, or "//request/symbol" for a "request.symbol" nested property.
            </para>
            </summary>
            <returns>true for absolute properties, false for deep properties</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathProperties">
            <summary> Returns a map of property name and descriptor for XPath-expression properties.</summary>
            <returns> XPath property information
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.NamespacePrefixes">
            <summary> Returns the namespace prefixes in a map of prefix as key and namespace name as value.</summary>
            <returns> namespace prefixes
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathFunctionResolver">
            <summary>Gets or sets the type name of the XPath function resolver to be assigned to the XPath factory instanceupon type initialization.</summary>
            <returns>class name of xpath function resolver, or null if none set</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathVariableResolver">
            <summary>Gets or sets the class name of the XPath variable resolver to be assigned to the XPath factory instanceupon type initialization.</summary>
            <returns>class name of xpath function resolver, or null if none set</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc">
            <summary>
            Descriptor class for event properties that are resolved via XPath-expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.#ctor(System.String,System.String,System.Xml.XPath.XPathResultType)">
            <summary> Ctor.</summary>
            <param name="name">the event property name</param>
            <param name="xpath">an arbitrary XPath expression</param>
            <param name="type">an XPathConstants constant</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.#ctor(System.String,System.String,System.Xml.XPath.XPathResultType,System.Type)">
            <summary>Ctor.</summary>
            <param name="name">the event property name</param>
            <param name="xpath">an arbitrary XPath expression</param>
            <param name="type">a System.Xml.XPath.XPathResultType constant</param>
            <param name="optionalCastToType">if non-null then the return value of the xpath expression is cast to this value</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.Name">
            <summary> Returns the event property name.</summary>
            <returns> event property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.XPath">
            <summary> Returns the XPath expression.</summary>
            <returns> XPath expression
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.ResultType">
            <summary> Returns the representing the event property type.</summary>
            <returns> type infomation
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.ResultDataType">
            <summary>
            Returns the native data type representing the event property.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.OptionalCastToType">
            <summary>
            Gets the optional cast to type.
            </summary>
            <value>The type of the optional cast to.</value>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeWindowView">
             <summary> This view is a moving timeWindow extending the specified amount of milliseconds into the past.
             The view bases the timeWindow on the time obtained from the scheduling service.
             All incoming events receive a timestamp and are placed in a sorted map by timestamp.
             The view does not care about old data published by the parent view to this view.
            
             Events leave or expire from the time timeWindow by means of a scheduled callback registered with the
             scheduling service. Thus child views receive updates containing old data only asynchronously
             as the system-time-based timeWindow moves on. However child views receive updates containing new data
             as soon as the new data arrives.
             </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowView.#ctor(com.espertech.esper.core.StatementContext,com.espertech.esper.view.window.TimeWindowViewFactory,System.Int64,com.espertech.esper.collection.ViewUpdatedCollection,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="millisecondsBeforeExpiry">is the number of milliseconds before events gets pushedout of the timeWindow as oldData in the update method.</param>
            <param name="viewUpdatedCollection">is a collection the view must update when receiving events</param>
            <param name="statementContext">is required view services</param>
            <param name="timeWindowViewFactory">for copying the view in a group-by</param>
            <param name="isRemoveStreamHandling">flag to indicate that the view must handle the removed events from a parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowView.Expire">
            <summary>
            This method removes (expires) objects from the window and schedules a new callback for the
            time when the next oldest message would expire from the window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowView.ScheduleCallback(System.Int64)">
            <summary>
            Schedules the callback.
            </summary>
            <param name="msecAfterCurrentTime">The msec after current time.</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeWindowView.MillisecondsBeforeExpiry">
            <summary> Gets or sets the size of the time window in millisecond.</summary>
            <returns> size of window
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeWindowView.ViewUpdatedCollection">
            <summary>
            Returns the (optional) collection handling random access to window contents for prior or previous events.
            </summary>
            <returns>buffer for events</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeWindowView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeWindowView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty.</summary>
            <returns>true if empty</returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewResolutionService">
            <summary>
            Factory service for resolving view names and for creating view instances based on a view specification including view name and namespace.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewResolutionService.Create(System.String,System.String)">
            <summary>
            Instantiates a <see cref="T:com.espertech.esper.view.ViewFactory"/> based on the view namespace and name stored in the view spec.
            <para>
            Does not actually use the view factory object created.
            </para>
            </summary>
            <param name="_namespace">is the view namespace</param>
            <param name="name">is the view name</param>
            <throws>ViewProcessingException if the view namespace or name cannot resolve</throws>
        </member>
        <member name="T:com.espertech.esper.view.ViewFactoryContext">
            <summary>
            Context calss for specific views within a statement. Each view in a statement gets it's own context
            containing the statement context.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactoryContext.#ctor(com.espertech.esper.core.StatementContext,System.Int32,System.Int32,System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="statementContext">is the statement-level services</param>
            <param name="streamNum">is the stream number from zero to N</param>
            <param name="viewNum">is the view number from zero to N</param>
            <param name="namespaceName">is the view namespace</param>
            <param name="viewName">is the view name</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactoryContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.SchedulingService">
            <summary>Returns service to use for schedule evaluation.</summary>
            <returns>schedule evaluation service implemetation</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.EventAdapterService">
            <summary>Returns service for generating events and handling event types.</summary>
            <returns>event adapter service</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.ScheduleBucket">
            <summary>
            Returns the schedule bucket for ordering schedule callbacks within this pattern.
            </summary>
            <returns>schedule bucket</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.EpStatementHandle">
            <summary>Returns the statement's resource locks.</summary>
            <returns>statement resource lock/handle</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.ExtensionServicesContext">
            <summary>Returns extension svc.</summary>
            <returns>svc</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.StatementStopService">
            <summary>Returns statement stop svc.</summary>
            <returns>snc</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.StatementId">
            <summary>Returns the statement id.</summary>
            <returns>statement id</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.StreamNum">
            <summary>Returns the stream number.</summary>
            <returns>stream number</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.ViewNum">
            <summary>Returns the view number</summary>
            <returns>view number</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.NamespaceName">
            <summary>Returns the view namespace name.</summary>
            <returns>namespace name</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.ViewName">
            <summary>Returns the view name.</summary>
            <returns>view name</returns>
        </member>
        <member name="T:com.espertech.esper.view.std.LastElementViewFactory">
            <summary>
            Factory for <see cref="T:com.espertech.esper.view.std.LastElementView"/> instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.LastElementViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.std.LastElementViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.std.LastElementViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.std.LastElementViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.std.LastElementViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.std.LastElementViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.MultiDimStatsViewFactory">
            <summary>
            Factory for <see cref="T:com.espertech.esper.view.stat.MultiDimStatsView"/> instances.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.PropertyCheckHelper">
            <summary>
            Utility class for checking in a schema if fields exist and/or have an
            expected type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.PropertyCheckHelper.Exists(com.espertech.esper.events.EventType,System.String)">
            <summary> Check if the field identified by the field name exists according to the schema.</summary>
            <param name="type">contains metadata about fields</param>
            <param name="fieldName">is the field's field name to test</param>
            <returns> a String error message if the field doesn't exist, or null to indicate success</returns>
        </member>
        <member name="M:com.espertech.esper.view.PropertyCheckHelper.Exists(com.espertech.esper.events.EventType,System.String,System.String)">
            <summary> Check if the fields identified by the field names both exists according to the schema.</summary>
            <param name="type">contains metadata about fields</param>
            <param name="fieldNameOne">is the first field's field name to test</param>
            <param name="fieldNameTwo">is the first field's field name to test</param>
            <returns> a String error message if either of the fields doesn't exist, or null to indicate success
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.PropertyCheckHelper.CheckNumeric(com.espertech.esper.events.EventType,System.String)">
            <summary> Check if the field identified by the field name is a valid numeric field according to the schema.</summary>
            <param name="type">contains metadata about fields</param>
            <param name="numericFieldName">is the field's field name to test</param>
            <returns> a String error message if the field doesn't exist or is not numeric, or null to indicate success</returns>
        </member>
        <member name="M:com.espertech.esper.view.PropertyCheckHelper.CheckNumeric(com.espertech.esper.events.EventType,System.String,System.String)">
            <summary> Check if the fields identified by their field names are valid numeric field according to the schema.</summary>
            <param name="type">contains metadata about fields</param>
            <param name="numericFieldNameX">is the first field's field name to test</param>
            <param name="numericFieldNameY">is the second field's field name to test</param>
            <returns> a String error message if the field doesn't exist or is not numeric, or null to indicate success
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.PropertyCheckHelper.CheckLong(com.espertech.esper.events.EventType,System.String)">
            <summary> Check if the field identified by the field name is of type long according to the schema.</summary>
            <param name="type">contains metadata about fields</param>
            <param name="longFieldName">is the field's field name to test</param>
            <returns> a String error message if the field doesn't exist or is not a long, or null to indicate success</returns>
        </member>
        <member name="M:com.espertech.esper.view.PropertyCheckHelper.GetClass(com.espertech.esper.events.EventType,System.String)">
            <summary> Returns the class for the field as defined in the schema.</summary>
            <param name="type">contains metadata about fields
            </param>
            <param name="fieldName">is the field's name to return the type for
            </param>
            <returns> type of field.
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.internals.PriorEventView">
            <summary>
            View that provides access to prior events posted by the parent view for use by 'prior' expression nodes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventView.#ctor(com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>Ctor.</summary>
            <param name="buffer">
            is handling the actual storage of events for use in the 'prior' expression
            </param>
        </member>
        <member name="P:com.espertech.esper.view.internals.PriorEventView.Parent">
            <summary>
            Gets or sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.internals.PriorEventView.Buffer">
            <summary>Returns the underlying buffer used for access to prior events.</summary>
            <returns>buffer</returns>
        </member>
        <member name="T:com.espertech.esper.util.SimpleTypeParser">
            <summary>Parser of a String input to an object. </summary>
        </member>
        <member name="T:com.espertech.esper.util.MultiKeyComparator">
            <summary> A comparator on multikeys. The multikeys must contain the same
            number of values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.MultiKeyComparator.#ctor(System.Boolean[])">
            <summary> Ctor.</summary>
            <param name="isDescendingValues">each value is true if the corresponding (same index)
            entry in the multi-keys is to be sorted in descending order. The multikeys
            to be compared must have the same number of values as this array.
            </param>
        </member>
        <member name="M:com.espertech.esper.util.MultiKeyComparator.Compare(com.espertech.esper.collection.MultiKeyUntyped,com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Compares the specified first values.
            </summary>
            <param name="firstValues">The first values.</param>
            <param name="secondValues">The second values.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.util.Indent">
            <summary>
            Utility class around indenting and formatting text.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.Indent.CreateIndent(System.Int32)">
            <summary> Utility method to indent a text for a number of characters.</summary>
            <param name="numChars">is the number of character to indent with spaces
            </param>
            <returns> the formatted string
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.TimePeriodParameter">
            <summary>
            Parameter for views that accept time period information such as "5 sec 100 msec".
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.TimePeriodParameter.#ctor(System.Double)">
            <summary> Ctor.</summary>
            <param name="numSeconds">is the number of seconds represented by time period string
            </param>
        </member>
        <member name="M:com.espertech.esper.type.TimePeriodParameter.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="_object">Object to compare against.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.TimePeriodParameter.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.TimePeriodParameter.NumSeconds">
            <summary> Returns the number of seconds.</summary>
            <returns> the number of seconds specified by time period string
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.RangeParameter">
            <summary>
            Represents a range of numbers as a parameter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.RangeParameter.#ctor(System.Int32,System.Int32)">
            <summary> Ctor.</summary>
            <param name="low">Start of range
            </param>
            <param name="high">end of range
            </param>
        </member>
        <member name="M:com.espertech.esper.type.RangeParameter.IsWildcard(System.Int32,System.Int32)">
            <summary>
            Returns true if all values between and including min and max are supplied by the parameter.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>
            true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.RangeParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary>
            Return a set of int values representing the value of the parameter for the given range.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>set of integer</returns>
        </member>
        <member name="P:com.espertech.esper.type.RangeParameter.Low">
            <summary> Returns Start of range.</summary>
            <returns> Start of range
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.RangeParameter.High">
            <summary> Returns end of range.</summary>
            <returns> end of range
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.PrimitiveValueFactory">
            <summary>
            Factory class for PrimitiveValue for all fundamental types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.PrimitiveValueFactory.Create(System.Type)">
            <summary>
            Create a placeholder instance for the primitive type passed in.
            Returns null if the type passed in is not a primitive type.
            </summary>
            <param name="type">a fundamental type</param>
            <returns>
            instance of placeholder representing the type, or null if not a primitive type
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.CronParameter">
            <summary>
            Hold parameters for timer:at.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.#ctor(System.Int32,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.type.CronParameter"/> class.
            </summary>
            <param name="cronOperator">The cron operator.</param>
            <param name="day">The day.</param>
            <param name="engineTime">The engine time.</param>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.ToEPL(System.IO.StringWriter)">
            <summary>
            Writes the EQL to the StringWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.IsWildcard(System.Int32,System.Int32)">
            <summary>
            Returns true if all values between and including min and max are supplied by the parameter.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>
            true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary>
            Return a set of int values representing the value of the parameter for the given range.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>set of integer</returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.DetermineLastDayOfMonth">
            <summary>
            Determines the last day of month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.DetermineLastDayOfWeekInMonth">
            <summary>
            Determines the last day of week in the month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.DetermineLastDayOfWeek">
            <summary>
            Determines the last day of week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.GetDayOfWeek">
            <summary>
            Gets the day of week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.DetermineLastWeekDayOfMonth">
            <summary>
            Determines the last week day of the month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.AssignOperator(System.Int32)">
            <summary>
            Assigns the operator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.SetTime">
            <summary>
            Sets the time.
            </summary>
        </member>
        <member name="P:com.espertech.esper.type.CronParameter.Month">
            <summary>
            Sets the month.
            </summary>
            <value>The month.</value>
        </member>
        <member name="T:com.espertech.esper.type.CronParameter.CronOperator">
            <summary>
            Enumeration for special keywords in crontab timer.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.CronParameter.CronOperator.last">
            <summary>
            Last day of week or month.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.CronParameter.CronOperator.w">
            <summary>
            Weekday (nearest to a date)
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.CronParameter.CronOperator.lw">
            <summary>
            Last weekday in a month
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalOrStateNode">
            <summary>
            This class represents the state of a "or" operator in the evaluation state tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalOrStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalOrNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext)">
            <summary> Constructor.</summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalOrNode">the factory node associated to the state</param>
            <param name="beginState">contains the events that make up prior matches</param>
            <param name="context">contains handles to services required</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalOrStateNode.Start">
            <summary>
            Starts the event expression or an instance of it.
            Child classes are expected to initialize and Start any event listeners
            or schedule any time-based callbacks as needed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalOrStateNode.EvaluateTrue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.EvalStateNode,System.Boolean)">
            <summary>
            Indicate a change in truth value to true.
            </summary>
            <param name="matchEvent">is the container for events that caused the change in truth value</param>
            <param name="fromNode">is the node that indicates the change</param>
            <param name="isQuitted">is an indication of whether the node continues listenening or Stops listening</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalOrStateNode.EvaluateFalse(com.espertech.esper.pattern.EvalStateNode)">
            <summary>
            Indicate a change in truth value to false.
            </summary>
            <param name="fromNode">is the node that indicates the change</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalOrStateNode.Quit">
            <summary>
            Stops the event expression or an instance of it. Child classes are expected to free resources
            and Stop any event listeners or remove any time-based callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalOrStateNode.Accept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Accept a visitor. Child classes are expected to invoke the visit method on the visitor instance
            passed in.
            </summary>
            <param name="visitor">on which the visit method is invoked by each node</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalOrStateNode.ChildrenAccept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Pass the visitor to all child nodes.
            </summary>
            <param name="visitor">is the instance to be passed to all child nodes</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalOrStateNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalAndStateNode">
            <summary>
            This class represents the state of an "and" operator in the evaluation state tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalAndNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.pattern.EvalAndStateNode"/> class.
            </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalAndNode">is the factory node associated to the state</param>
            <param name="beginState">contains the events that make up prior matches</param>
            <param name="context">contains handles to services required</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.Start">
            <summary>
            Starts the event expression or an instance of it.
            Child classes are expected to initialize and Start any event listeners
            or schedule any time-based callbacks as needed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.EvaluateTrue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.EvalStateNode,System.Boolean)">
            <summary>
            Indicate a change in truth value to true.
            </summary>
            <param name="matchEvent">is the container for events that caused the change in truth value</param>
            <param name="fromNode">is the node that indicates the change</param>
            <param name="isQuitted">is an indication of whether the node continues listenening or Stops listening</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.EvaluateFalse(com.espertech.esper.pattern.EvalStateNode)">
            <summary>
            Indicate a change in truth value to false.
            </summary>
            <param name="fromNode">is the node that indicates the change</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.GenerateMatchEvents(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.EvalStateNode,com.espertech.esper.compat.Map{com.espertech.esper.pattern.EvalStateNode,System.Collections.Generic.IList{com.espertech.esper.pattern.MatchedEventMap}})">
            <summary>Generate a list of matching event combinations constisting of the events per child that are passed in.</summary>
            <param name="matchEvent">can be populated with prior events that must be passed on</param>
            <param name="fromNode">is the EvalStateNode that will not take part in the combinations produced.</param>
            <param name="eventsPerChild">is the list of events for each child node to the "And" node.</param>
            <returns>list of events populated with all possible combinations</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.GenerateMatchEvents(System.Collections.Generic.IList{System.Collections.Generic.IList{com.espertech.esper.pattern.MatchedEventMap}},System.Int32,System.Collections.Generic.IList{com.espertech.esper.pattern.MatchedEventMap},com.espertech.esper.pattern.MatchedEventMap)">
            <summary>For each combination of MatchedEventMap instance in all collections, add an entry to the list.Recursive method.</summary>
            <param name="eventList">is an array of lists containing MatchedEventMap instances to combine</param>
            <param name="index">is the current index into the array</param>
            <param name="result">is the resulting list of MatchedEventMap</param>
            <param name="matchEvent">is the Start MatchedEventMap to generate from</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.Quit">
            <summary>
            Stops the event expression or an instance of it. Child classes are expected to free resources
            and Stop any event listeners or remove any time-based callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.Accept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Accept a visitor. Child classes are expected to invoke the visit method on the visitor instance
            passed in.
            </summary>
            <param name="visitor">on which the visit method is invoked by each node</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.ChildrenAccept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Pass the visitor to all child nodes.
            </summary>
            <param name="visitor">is the instance to be passed to all child nodes</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.indicator.pretty.CubeCellStringRenderer">
            <summary> Utility class that takes a cube and renders it as a flattened table of string and double.
            The double value
            </summary>
        </member>
        <member name="M:com.espertech.esper.indicator.pretty.CubeCellStringRenderer.RenderCube(com.espertech.esper.view.stat.olap.Cube)">
            <summary>
            Render a multidimensional table (see Cube) as flatted out structure.
            Renders each cell's intersecting members of each dimension into a single String. 
            </summary>
            <param name="cube">the cube to render</param>
            <returns>map containing rendered cell/column/row/page dimension members as key and cell values as values</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamIn">
            <summary>
            This class represents a 'in' filter parameter in an <see cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> filter specification.
            <para>
            The 'in' checks for a list of values.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamIn.#ctor(System.String,com.espertech.esper.filter.FilterOperator,System.Collections.Generic.IList{com.espertech.esper.filter.FilterSpecParamInValue})">
            <summary>Ctor.</summary>
            <param name="propertyName">is the event property name</param>
            <param name="filterOperator">is expected to be the IN-list operator</param>
            <param name="listofValues">is a list of constants and event property names</param>
            <throws>ArgumentException for illegal args</throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamIn.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Return the filter parameter constant to filter for.
            </summary>
            <param name="matchedEvents">is the prior results that can be used to determine filter parameters</param>
            <returns>filter parameter constant's value</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamIn.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamIn.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamIn.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamIn.ListOfValues">
            <summary>
            Returns the list of values we are asking to match.
            </summary>
            <returns>list of filter values</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamExprNode">
            <summary>
            This class represents an arbitrary expression node returning a bool value as a filter parameter in an <see cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> filter specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamExprNode.#ctor(System.String,com.espertech.esper.filter.FilterOperator,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.compat.Map{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.events.EventType,System.String}},com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">is the event property name</param>
            <param name="filterOperator">is expected to be the BOOLEAN_EXPR operator</param>
            <param name="exprNode">represents the boolean expression</param>
            <param name="taggedEventTypes">is null if the expression doesn't need other streams, or is filled with a ordered list of stream names and types</param>
            <param name="variableService">provides access to variables</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamExprNode.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Return the filter parameter constant to filter for.
            </summary>
            <param name="matchedEvents">is the prior results that can be used to determine filter parameters</param>
            <returns>filter parameter constant's value</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamExprNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamExprNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamExprNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamExprNode.ExprNode">
            <summary>
            Returns the expression node of the bool expression this filter parameter represents.
            </summary>
            <returns>expression node</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamExprNode.TaggedEventTypes">
            <summary>
            Returns the map of tag/stream names to event types that the filter expressions map use (for patterns)
            </summary>
            <returns>IDictionary</returns>
        </member>
        <member name="T:com.espertech.esper.filter.DoubleRangeComparator">
            <summary>
            Comparator for DoubleRange values.
            <para>
            Sorts double ranges as this:     sort by min asc, max asc.
            I.e. same minimum value sorts maximum value ascending.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.DoubleRangeComparator.Compare(com.espertech.esper.filter.DoubleRange,com.espertech.esper.filter.DoubleRange)">
            <summary>
            Compares the specified double ranges.
            </summary>
            <param name="r1">The r1.</param>
            <param name="r2">The r2.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.SimpleXMLPropertyParser">
            <summary> Parses event property names and transforms to XPath expressions. Supports
            nested, indexed and mapped event properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.SimpleXMLPropertyParser.Parse(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Return the xPath corresponding to the given property.
            The propertyName String may be simple, nested, indexed or mapped.
            </summary>
            <param name="propertyName">is the property name to parse</param>
            <param name="rootElementName">is the name of the root element for generating the XPath expression</param>
            <param name="defaultNamespacePrefix">The default namespace prefix.</param>
            <param name="isResolvePropertiesAbsolute">if set to <c>true</c> [is resolve properties absolute].</param>
            <returns>xpath expression</returns>
            <throws>  XPathExpressionException </throws>
        </member>
        <member name="M:com.espertech.esper.events.xml.SimpleXMLPropertyParser.Parse(System.String)">
            <summary> Parses a given property name returning an AST.</summary>
            <param name="propertyName">to parse
            </param>
            <returns> AST syntax tree
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.ArrayFastPropertyGetter">
            <summary>
            Getter for an array property identified by a given index, using the CGLIB fast method.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.ArrayFastPropertyGetter.#ctor(CGLib.FastMethod,System.Int32)">
            <summary>Constructor.</summary>
            <param name="fastMethod">
            is the method to use to retrieve a value from the object
            </param>
            <param name="index">is tge index within the array to get the property from</param>
        </member>
        <member name="T:com.espertech.esper.events.EventPropertyType">
            <summary> Enumeration of property types.</summary>
        </member>
        <member name="F:com.espertech.esper.events.EventPropertyType.SIMPLE">
            <summary> Simple property.</summary>
        </member>
        <member name="F:com.espertech.esper.events.EventPropertyType.INDEXED">
            <summary> Indexed property.</summary>
        </member>
        <member name="F:com.espertech.esper.events.EventPropertyType.MAPPED">
            <summary> Mapped property.</summary>
        </member>
        <member name="T:com.espertech.esper.events.DecoratingEventBean">
            <summary>
            Interface for event types that provide decorating event properties as a name-value map.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.DecoratingEventBean.DecoratingProperties">
            <summary>Returns decorating properties.</summary>
            <returns>property name and values</returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionFirst">
            <summary> An output condition that is satisfied at the first event
            of either a time-based or count-based batch.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionFirst.#ctor(com.espertech.esper.epl.spec.OutputLimitSpec,com.espertech.esper.core.StatementContext,com.espertech.esper.epl.view.OutputCallback)">
            <summary>
            Ctor.
            </summary>
            <param name="outputLimitSpec">specifies what kind of condition to create</param>
            <param name="statementContext">supplies the services required such as for scheduling callbacks</param>
            <param name="outputCallback">is the method to invoke for output</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionFirst.UpdateOutputCondition(System.Int32,System.Int32)">
            <summary>
            Update the output condition.
            </summary>
            <param name="newEventsCount">number of new events incoming</param>
            <param name="oldEventsCount">number of old events incoming</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionFactoryDefault">
            <summary>
            Factory for output condition instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionFactoryDefault.CreateCondition(com.espertech.esper.epl.spec.OutputLimitSpec,com.espertech.esper.core.StatementContext,com.espertech.esper.epl.view.OutputCallback)">
            <summary>Creates an output condition instance.</summary>
            <param name="outputLimitSpec">specifies what kind of condition to create</param>
            <param name="statementContext">
            supplies the services required such as for scheduling callbacks
            </param>
            <param name="outputCallback">is the method to invoke for output</param>
            <returns>instance for performing output</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PatternGuardSpec">
            <summary>
            Specification for a pattern guard object consists of a namespace, name and guard object parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PatternGuardSpec.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>Constructor.</summary>
            <param name="_namespace">if the namespace the object is in</param>
            <param name="objectName">is the name of the object</param>
            <param name="objectParameters">
            is a list of values representing the object parameters
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.join.rep.NodeCursorEnumerator">
            <summary>
            Iterator over a set of nodes supplying node and event-within-node position information in a <see cref="T:com.espertech.esper.epl.join.rep.Cursor"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.NodeCursorEnumerator.#ctor(System.Int32,System.Collections.Generic.IEnumerator{com.espertech.esper.epl.join.rep.Node})">
            <summary> Ctor.</summary>
            <param name="stream">is the stream that the events in the Node belong to
            </param>
            <param name="nodeEnumerator">is the iterator over all nodes to position over
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.NodeCursorEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.NodeCursorEnumerator.AdvanceChild">
            <summary>
            Advances this currentEnumerator to the next node in
            the node enumerator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.NodeCursorEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.NodeCursorEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.NodeCursorEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.NodeCursorEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.rep.Node">
            <summary> Node is the structure to hold results of event lookups in joined streams. A node holds a set of event which
            are the result of a lookup in a stream's table. A Node can be linked to its parent node and the event within the
            parent node, which was the event that was used to perform a lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.Node.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="stream">this node stores results for
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Node.Stream">
            <summary> Returns the stream number of the stream that supplied the event results.</summary>
            <returns> stream number for results
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Node.Parent">
            <summary>
            Gets or sets the parent node, or null if this is a root node.
            </summary>
            <value>The parent.</value>
            <returns> parent node or null for root node
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Node.ParentEvent">
            <summary>
            Gets or sets lookup event.
            </summary>
            <value>The parent event.</value>
            <returns> parent node's event that was used to lookup
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Node.Events">
            <summary>
            Gets or sets the events.
            </summary>
            <value>The events.</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinSetFilter">
            <summary>
            Processes join tuple set by filtering out tuples.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetFilter.#ctor(com.espertech.esper.epl.expression.ExprNode)">
            <summary> Ctor.</summary>
            <param name="filterExprNode">filter tree
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetFilter.Process(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary>
            Process join result set.
            </summary>
            <param name="newEvents">set of event tuples representing new data</param>
            <param name="oldEvents">set of event tuples representing old data</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetFilter.Filter(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},System.Boolean)">
            <summary> Filter event by applying the filter nodes evaluation method.</summary>
            <param name="filterExprNode">top node of the filter expression tree.</param>
            <param name="events">set of tuples of events</param>
            <param name="isNewData">true to indicate filter new data (istream) and not old data (rstream)</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinSetComposerFactory">
            <summary>
            Factory for building a <see cref="T:com.espertech.esper.epl.join.JoinSetComposer"/> implementations from analyzing filter nodes, for
            fast join tuple result set composition.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetComposerFactory.MakeComposer(System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc},com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.events.EventType[],System.String[],com.espertech.esper.view.Viewable[],com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum,System.Boolean[],System.Boolean[],System.Boolean[])">
            <summary>
            Builds join tuple composer.
            </summary>
            <param name="outerJoinDescList">list of descriptors for outer join criteria</param>
            <param name="optionalFilterNode">filter tree for analysis to build indexes for fast access</param>
            <param name="streamTypes">types of streams</param>
            <param name="streamNames">names of streams</param>
            <param name="streamViews">leaf view per stream</param>
            <param name="selectStreamSelectorEnum">indicator for rstream or istream-only, for optimization</param>
            <param name="isUnidirectional">an array of indicators for each stream set to true for a unidirectional stream in a join</param>
            <param name="hasChildViews">indicates if child views are declared for a stream</param>
            <param name="isNamedWindow">indicates whether the join is against named windows</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.ExecNodeQueryStrategy">
            <summary>
            Query strategy for building a join tuple set by using an execution node tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.QueryStrategy">
            <summary>
            Encapsulates the strategy use to resolve the events for a stream into a tuples of events in a join.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.QueryStrategy.Lookup(com.espertech.esper.events.EventBean[],com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary> Look up events returning tuples of joined events.</summary>
            <param name="lookupEvents">events to use to perform the join
            </param>
            <param name="joinSet">result join tuples of events 
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.ExecNodeQueryStrategy.#ctor(System.Int32,System.Int32,com.espertech.esper.epl.join.exec.ExecNode)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.join.ExecNodeQueryStrategy"/> class.
            </summary>
            <param name="forStream">stream the strategy is for.</param>
            <param name="numStreams">number of streams in total.</param>
            <param name="execNode">execution node for building join tuple set.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.ExecNodeQueryStrategy.Lookup(com.espertech.esper.events.EventBean[],com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary>
            Look up events returning tuples of joined events.
            </summary>
            <param name="lookupEvents">events to use to perform the join</param>
            <param name="joinSet">result join tuples of events</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.ExecNodeQueryStrategy.ForStream">
            <summary>Return stream number this strategy is for.</summary>
            <returns>stream num</returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.ExecNodeQueryStrategy.NumStreams">
            <summary>Returns the total number of streams.</summary>
            <returns>number of streams</returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.ExecNodeQueryStrategy.ExecNode">
            <summary>Returns execution node.</summary>
            <returns>execution node</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSubselectInNode">
            <summary>
            Represents a subselect in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectInNode.#ctor(com.espertech.esper.epl.spec.StatementSpecRaw)">
            <summary>Ctor.</summary>
            <param name="statementSpec">
            is the lookup statement spec from the parser, unvalidated
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectInNode.SetNotIn(System.Boolean)">
            <summary>Indicate that this is a not-in lookup.</summary>
            <param name="notIn">is true for not-in, or false for regular 'in'</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectInNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validates the specified stream type service.
            </summary>
            <param name="streamTypeService">The stream type service.</param>
            <param name="methodResolutionService">The method resolution service.</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">The time provider.</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectInNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectInNode.IsNotIn">
            <summary>
            Gets or sets a value indicating whether this instance is not in.
            </summary>
            <value><c>true</c> if this instance is not in; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPlugInAggFunctionNode">
            <summary>Represents a custom aggregation function in an expresson tree.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPlugInAggFunctionNode.#ctor(System.Boolean,com.espertech.esper.epl.agg.AggregationSupport,System.String)">
            <summary>Ctor.</summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
            <param name="aggregationSupport">
            is the base class for plug-in aggregation functions
            </param>
            <param name="functionName">is the aggregation function name</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprInNode">
            <summary>
            Represents the in-clause (set check) function in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="isNotIn">is true for "not in" and false for "in"
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInNode.GetInElementDelegate(System.Type,System.Type)">
            <summary>
            Gets a contains delegate for the type
            </summary>
            <param name="type">The type.</param>
            <param name="sourceType">Type of the source.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInNode.GetNonCollectionDelegate(System.Type,System.Type)">
            <summary>
            Gets a delegate for non-collection types.
            </summary>
            <param name="targetType">The type.</param>
            <param name="sourceType">Type of the source.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInNode.GetArrayDelegate(System.Type)">
            <summary>
            Gets a delegate for an array type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInNode.GetCollectionDelegate(System.Type)">
            <summary>
            Gets a delegate for container types.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if [is collection type] [the specified t]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInNode.GetDictionaryDelegate(System.Type)">
            <summary>
            Gets a delegate for container types.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if [is collection type] [the specified t]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInNode.GetTypeIdent(System.Type)">
            <summary>
            Gets the type ident.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">is the data new</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="node">The node to compare against.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprInNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprInNode.IsNotIn">
            <summary>Returns true for not-in, false for regular in</summary>
            <returns>
            false for &quot;val in (a,b,c)&quot; or true for &quot;val not in (a,b,c)&quot;
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprInNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprInNode.InElementDelegate">
            <summary>
            Returns true if the test collection is wholy contained in the "reference" collection.
            </summary>
            <param name="referenceCollection"></param>
            <param name="testCollection"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprAvgNode">
            <summary>
            Represents the avg(...) aggregate function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAvgNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAvgNode.ValidateAggregationChild(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Gives the aggregation node a chance to validate the sub-expression types.
            </summary>
            <param name="streamTypeService">is the types per stream</param>
            <param name="methodResolutionService">used for resolving method and function names</param>
            <returns>aggregation function use</returns>
            <throws>ExprValidationException when expression validation failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAvgNode.EqualsNodeAggregate(com.espertech.esper.epl.expression.ExprAggregateNode)">
            <summary>
            Return true if a expression aggregate node semantically equals the current node, or false if not.
            For use by the EqualsNode implementation which compares the distinct flag.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAvgNode.AggregationFunctionName">
            <summary>
            Returns the aggregation function name for representation in a generate expression string.
            </summary>
            <value></value>
            <returns> aggregation function name
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.SQLParameterDesc">
            <summary>
            Hold a raw SQL-statements parameter information that were specified in the form ${name}.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.SQLParameterDesc.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>Ctor.</summary>
            <param name="parameters">is the name of parameters</param>
            <param name="builtinIdentifiers">is the names of built-in predefined values</param>
        </member>
        <member name="P:com.espertech.esper.epl.db.SQLParameterDesc.Parameters">
            <summary>Returns parameter names.</summary>
            <returns>parameter names</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.SQLParameterDesc.BuiltinIdentifiers">
            <summary>Returns built-in identifiers.</summary>
            <returns>built-in identifiers</returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroup">
            <summary>
            Result set processor for the fully-grouped case: there is a group-by and all non-aggregation
            event properties in the select clause are listed in the group by, and there are aggregation
            functions.
            <para/>
            Produces one row for each group that changed (and not one row per event). Computes MultiKey
            group-by keys for each event and uses a set of the group-by keys to generate the result rows,
            using the first (old or new, anyone) event for each distinct group-by key.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroup.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.epl.agg.AggregationService,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.expression.ExprNode,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="selectExprProcessor">for processing the select expression and generting the readonly output rows</param>
            <param name="orderByProcessor">for sorting outgoing events according to the order-by clause</param>
            <param name="aggregationService">handles aggregation</param>
            <param name="groupKeyNodes">list of group-by expression nodes needed for building the group-by keys</param>
            <param name="optionalHavingNode">expression node representing validated HAVING clause, or null if none given.Aggregation functions in the having node must have been pointed to the AggregationService for evaluation. </param>
            <param name="isSelectRStream">true if remove stream events should be generated</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroup.GenerateGroupKey(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>Generates the group-by key for the row </summary>
            <param name="eventsPerStream">is the row of events</param>
            <param name="isNewData">is true for new data</param>
            <returns>grouping keys</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroup.GetOptionalHavingNode">
            <summary>Returns the optional having expression. </summary>
            <returns>having expression node</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroup.GetSelectExprProcessor">
            <summary>Returns the select expression processor </summary>
            <returns>select processor.</returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorRowForAll">
            <summary>
            Result set processor for the case: aggregation functions used in the select clause,
            and no group-by, and all properties in the select clause are under an aggregation function.
            <para/>
            This processor does not perform grouping, every event entering and leaving is in the same
            group. Produces one old event and one new event row every time either at least one old or
            new event is received. Aggregation state is simply one row holding all the state.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowForAll.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.agg.AggregationService,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.epl.expression.ExprNode,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="selectExprProcessor">for processing the select expression and generting the readonly output rows</param>
            <param name="aggregationService">handles aggregation</param>
            <param name="optionalHavingNode">having clause expression node</param>
            <param name="isSelectRStream">true if remove stream events should be generated</param>
            <param name="orderByProcessor">for ordering output events</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowForAll.ProcessJoinResult(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},System.Boolean)">
            <summary>
            For use by joins posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newEvents">new events posted by join</param>
            <param name="oldEvents">old events posted by join</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowForAll.ProcessViewResult(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            For use by views posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newData">new events posted by view</param>
            <param name="oldData">old events posted by view</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowForAll.GetEnumerator(com.espertech.esper.view.Viewable)">
            <summary>
            Returns the iterator implementing the group-by and aggregation and order-by logic
            specific to each case of use of these construct.
            </summary>
            <param name="parent">is the parent view iterator</param>
            <returns>event iterator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowForAll.GetEnumerator(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary>Returns the iterator for iterating over a join-result.</summary>
            <param name="joinSet">is the join result set</param>
            <returns>iterator over join results</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowForAll.Clear">
            <summary>Clear out current state.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowForAll.ProcessOutputLimitedJoin(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}}}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting.</summary>
            <param name="joinEventsSet">the join results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowForAll.ProcessOutputLimitedView(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.events.EventBean[]}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting.</summary>
            <param name="viewEventsList">the view results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorRowForAll.ResultEventType">
            <summary>
            Returns the event type of processed results.
            </summary>
            <value>The type of the result event.</value>
            <returns> event type of the resulting events posted by the processor.
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.PropertyNotFoundException">
            <summary> Exception to indicate that a property name used in a filter doesn't resolve.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.PropertyNotFoundException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="msg">message
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.DoubleSumAggregator">
            <summary>Sum for double values.</summary>
        </member>
        <member name="T:com.espertech.esper.emit.EmitServiceImpl">
            <summary>
            Implementation of the event emit service.
            </summary>
        </member>
        <member name="T:com.espertech.esper.emit.EmitService">
            <summary> The emit service is a simple publish-subscribe mechanism for sending events out of the runtime to
            emitted event listeners that registered interest in the same or default channel that an event was
            emitted to.
            </summary>
        </member>
        <member name="M:com.espertech.esper.emit.EmitService.EmitEvent(System.Object,System.String)">
            <summary>
            Emit an event to the specified channel. All listeners listening to the exact same channel and
            all listeners listening to the default channel are handed the event emitted.
            </summary>
            <param name="_object">is the event to emit</param>
            <param name="channel">is the channel to emit to</param>
        </member>
        <member name="M:com.espertech.esper.emit.EmitService.AddListener(com.espertech.esper.client.EmittedListener,System.String)">
            <summary>
            Add emitted event listener for the specified channel, or the default channel if the channel value is null.
            The listener will be invoked when an event is emitted on the subscribed channel. Listeners subscribed to the
            default channel are invoked for all emitted events regardless of what channel the event is emitted onto.
            </summary>
            <param name="listener">is the callback to receive when events are emitted</param>
            <param name="channel">is the channel to listen to, with null values allowed to indicate the default channel</param>
        </member>
        <member name="M:com.espertech.esper.emit.EmitService.ClearListeners">
            <summary>
            Removes all listeners for emitted events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.emit.EmitService.ResetStats">
            <summary>
            Resets the number of events emitted
            </summary>
        </member>
        <member name="P:com.espertech.esper.emit.EmitService.NumEventsEmitted">
            <summary>
            Number of events emitted.
            </summary>
            <value>The num events emitted.</value>
            <returns> total of events emitted
            </returns>
        </member>
        <member name="F:com.espertech.esper.emit.EmitServiceImpl.DEFAULT_CHANNEL">
            <summary>
            The default channel
            </summary>
        </member>
        <member name="M:com.espertech.esper.emit.EmitServiceImpl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.emit.EmitServiceImpl.AddListener(com.espertech.esper.client.EmittedListener,System.String)">
            <summary>
            Add emitted event listener for the specified channel, or the default channel if the channel value is null.
            The listener will be invoked when an event is emitted on the subscribed channel. Listeners subscribed to the
            default channel are invoked for all emitted events regardless of what channel the event is emitted onto.
            </summary>
            <param name="listener">is the callback to receive when events are emitted</param>
            <param name="channel">is the channel to listen to, with null values allowed to indicate the default channel</param>
        </member>
        <member name="M:com.espertech.esper.emit.EmitServiceImpl.ClearListeners">
            <summary>
            Removes all listeners for emitted events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.emit.EmitServiceImpl.EmitEvent(System.Object,System.String)">
            <summary>
            Emit an event to the specified channel. All listeners listening to the exact same channel and
            all listeners listening to the default channel are handed the event emitted.
            </summary>
            <param name="_object">is the event to emit</param>
            <param name="channel">is the channel to emit to</param>
        </member>
        <member name="P:com.espertech.esper.emit.EmitServiceImpl.NumEventsEmitted">
            <summary>
            Number of events emitted.
            </summary>
            <value></value>
            <returns> total of events emitted
            </returns>
        </member>
        <member name="T:com.espertech.esper.compat.IdentityMap`2">
            <summary>
            An extended dictionary based upon a closed hashing
            algorithm.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.IdentityMap`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.IdentityMap`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.IdentityMap`2.EqualityComparer.Equals(`0,`0)">
            <summary>
            Returns true if the two objects are equal.  In the case of the
            identity dictionary, equality is true only if the objects are
            the same reference.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.IdentityMap`2.EqualityComparer.GetHashCode(`0)">
            <summary>
            Returns a hashcode for the object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.EnumerationHelper`1">
            <summary>
            Collection of utilities specifically to help with enumeration.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.EnumerationHelper`1.CreateEmptyEnumerator">
            <summary>
            Creates the empty enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.EnumerationHelper`1.CreateSingletonEnumerator(`0)">
            <summary>
            Creates the singleton enumerator.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.EnumerationHelper`1.AdvanceEnumerable(System.Collections.Generic.IEnumerator{`0},System.Int32)">
            <summary>
            Creates an enumerator that skips a number of items in the
            subEnumerator.
            </summary>
            <param name="subEnumerator">The child enumerator.</param>
            <param name="numToAdvance">The num to advance.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.collection.SortedDoubleVector">
            <summary>
            Sorted, reference-counting set based on a SortedDictionary implementation that stores keys and a
            reference counter for each unique key value. Each time the same key is added, the reference
            counter increases. Each time a key is removed, the reference counter decreases.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SortedDoubleVector.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SortedDoubleVector.Add(System.Double)">
            <summary> Add a value to the collection.</summary>
            <param name="val">is the double-type value to add
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.SortedDoubleVector.Remove(System.Double)">
            <summary> Remove a value from the collection.</summary>
            <param name="val">to remove
            </param>
            <throws>  IllegalStateException if the value has not been added </throws>
        </member>
        <member name="M:com.espertech.esper.collection.SortedDoubleVector.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SortedDoubleVector.FindInsertIndex(System.Double)">
            <summary> Returns the index into which to insert to.
            Proptected access level for convenient testing.
            </summary>
            <param name="val">to find insert index
            </param>
            <returns> position to insert the value to, or -1 to indicate to add to the end.
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.SortedDoubleVector.Count">
            <summary> Returns the number of items in the collection.</summary>
            <returns> size
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.SortedDoubleVector.Item(System.Int32)">
            <summary> Returns the value at a given index.</summary>
            <param name="index">for which to return value for
            </param>
            <returns> value at index
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.SortedDoubleVector.Values">
            <summary>
            Returns underlying vector, for testing purposes only.
            </summary>
            <returns>vector with double values</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.SQLStream">
            <summary>An SQL stream that polls via SQL for events via join.</summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SQLStream.Create(System.String,System.String)">
            <summary>Creates a new SQL-based stream.</summary>
            <param name="databaseName">is the database name to poll</param>
            <param name="sqlWithSubsParams">is the SQL to use</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SQLStream.Create(System.String,System.String,System.String)">
            <summary>Creates a new SQL-based stream.</summary>
            <param name="databaseName">is the database name to poll</param>
            <param name="sqlWithSubsParams">is the SQL to use</param>
            <param name="optStreamName">is the as-name of the stream</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SQLStream.Create(System.String,System.String,System.String,System.String)">
            <summary>Creates a new SQL-based stream.</summary>
            <param name="databaseName">is the database name to poll</param>
            <param name="sqlWithSubsParams">is the SQL to use</param>
            <param name="optStreamName">is the as-name of the stream</param>
            <param name="optionalMetadataSQL">
            optional SQL delivering metadata of statement
            </param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SQLStream.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="databaseName">is the database name to poll</param>
            <param name="sqlWithSubsParams">is the SQL to use</param>
            <param name="optStreamName">
            is the optional as-name of the stream, or null if unnamed
            </param>
            <param name="optionalMetadataSQL">
            optional SQL delivering metadata of statement
            </param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SQLStream.DatabaseName">
            <summary>Gets or sets the database name.</summary>
            <returns>database name</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.SQLStream.SqlWithSubsParams">
            <summary>Gets or sets the SQL with optional substitution parameters in the SQL.</summary>
            <returns>SQL</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.SQLStream.OptionalMetadataSQL">
            <summary>Gets or sets the metadata SQL if any.</summary>
            <returns>metadata SQL</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PriorExpression">
            <summary>
            Expression representing the prior function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PriorExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PriorExpression.#ctor(System.Int32,System.String)">
            <summary>Ctor.</summary>
            <param name="index">is the index of the prior event</param>
            <param name="propertyName">is the property to return</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.PlugInProjectionExpression">
            <summary>
            Represents a plug-in aggregation function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PlugInProjectionExpression.#ctor(System.String,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="functionName">the name of the function</param>
            <param name="isDistinct">true for distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PlugInProjectionExpression.#ctor(System.String,System.Boolean,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="functionName">the name of the function</param>
            <param name="isDistinct">true for distinct</param>
            <param name="expression">provides aggregated values</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PlugInProjectionExpression.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PlugInProjectionExpression.FunctionName">
            <summary>Gets or sets the function name.</summary>
            <returns>name of function</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.PlugInProjectionExpression.IsDistinct">
            <summary>Gets or sets the true for distinct.</summary>
            <returns>bool indicating distinct or not</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.GroupByClause">
            <summary>
            The group-by clause consists of a list of expressions that provide the grouped-by values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.Create">
            <summary>Creates an empty group-by clause, to add to via add methods.</summary>
            <returns>group-by clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.Create(System.String[])">
            <summary>Creates a group-by clause from property names.</summary>
            <param name="properties">a list of one or more property names</param>
            <returns>group-by clause consisting of the properties</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.Create(com.espertech.esper.client.soda.Expression[])">
            <summary>Creates a group-by clause from expressions.</summary>
            <param name="expressions">a list of one or more expressions</param>
            <returns>group-by clause consisting of the expressions</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.#ctor(System.String[])">
            <summary>Ctor.</summary>
            <param name="properties">is a list of property names</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.#ctor(com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="expressions">list of expressions</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.GroupByClause.GroupByExpressions">
            <summary>Gets or sets the expressions providing the grouped-by values.</summary>
            <returns>expressions</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.Disjunction">
            <summary>
            Disjunction represents a logical OR allowing multiple sub-expressions to be connected by OR.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Disjunction.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para>
            Use add methods to add child expressions to acts upon.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Disjunction.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="first">an expression to add to the OR-test</param>
            <param name="second">an expression to add to the OR-test</param>
            <param name="expressions">is the expression to put in the OR-relationship.</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionTypeDesc">
            <summary>Per-event-type descriptor for fast access to getters for key values and changes properties. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionTypeDesc.#ctor(com.espertech.esper.events.EventPropertyGetter[],com.espertech.esper.events.EventPropertyGetter[],com.espertech.esper.events.vaevent.PropertyGroupDesc)">
            <summary>Ctor. </summary>
            <param name="keyPropertyGetters">key getters</param>
            <param name="changesetPropertyGetters">property getters</param>
            <param name="group">group this belongs to</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionTypeDesc.#ctor(com.espertech.esper.events.EventPropertyGetter[],com.espertech.esper.events.EventPropertyGetter[],System.Int32[])">
            <summary>Ctor. </summary>
            <param name="keyPropertyGetters">key getters</param>
            <param name="changesetPropertyGetters">property getters</param>
            <param name="changesetPropertyIndex">indexes of properties contributed</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionTypeDesc.KeyPropertyGetters">
            <summary>Returns key getters. </summary>
            <returns>getters</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionTypeDesc.ChangesetPropertyGetters">
            <summary>Returns property getters. </summary>
            <returns>getters</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionTypeDesc.Group">
            <summary>Returns group, or null if not using property groups. </summary>
            <returns>group</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionTypeDesc.ChangesetPropertyIndex">
            <summary>Returns indexes of properties contributed, or null if not using indexes. </summary>
            <returns>indexes</returns>
        </member>
        <member name="T:com.espertech.esper.events.MapObjectEntryPropertyGetter">
            <summary>
            A getter that works on ordinary events residing within a Map as an event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.MapObjectEntryPropertyGetter.#ctor(System.String,com.espertech.esper.events.EventPropertyGetter,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="propertyMap">the property to look at</param>
            <param name="mapEntryGetter">the getter for the map entry</param>
            <param name="eventAdapterService">for producing wrappers to objects</param>
        </member>
        <member name="M:com.espertech.esper.events.MapObjectEntryPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary> Return the value for the property in the event object specified when the instance was obtained.
            Useful for fast access to event properties. Throws a PropertyAccessException if the getter instance
            doesn't match the EventType it was obtained from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from
            </param>
            <returns> value of property in event
            </returns>
            <throws>  PropertyAccessException to indicate that property access failed </throws>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputStrategyPostProcess">
            <summary>An output strategy that handles routing (insert-into) and stream selection. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputStrategyPostProcess.#ctor(System.Boolean,System.Boolean,com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum,com.espertech.esper.core.InternalEventRouter,com.espertech.esper.core.EPStatementHandle)">
            <summary>Ctor. </summary>
            <param name="route">true if this is insert-into</param>
            <param name="routeRStream">true if routing the remove stream events, false if routing insert stream events</param>
            <param name="selectStreamDirEnum">enumerator selecting what Stream(s) are selected</param>
            <param name="internalEventRouter">for performing the route operation</param>
            <param name="epStatementHandle">for use in routing to determine which statement routed</param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec">
            <summary>
            Represents a single item in a SELECT-clause, with a name assigned either by the engine
            or by the user specifying an "as" tag name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec.#ctor(com.espertech.esper.epl.expression.ExprNode,System.String)">
            <summary>Ctor. </summary>
            <param name="selectExpression">the expression node to evaluate for matching events</param>
            <param name="assignedName">cannot be null as a name is always assigned orsystem-determined </param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec.SelectExpression">
            <summary>Gets or sets the expression node representing the item in the select clause. </summary>
            <returns>expression node for item</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec.AssignedName">
            <summary>Gets or sets the name of the item in the select clause. </summary>
            <returns>name of item</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerSetDesc">
            <summary>Specification for the on-set statement.</summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerDesc">
            <summary>Specification for on-trigger statements.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerDesc.#ctor(com.espertech.esper.epl.spec.OnTriggerType)">
            <summary>Ctor.</summary>
            <param name="onTriggerType">the type of on-trigger</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerDesc.OnTriggerType">
            <summary>Returns the type of the on-trigger statement.</summary>
            <returns>trigger type</returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerSetDesc.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerSetDesc.AddAssignment(com.espertech.esper.epl.spec.OnTriggerSetAssignment)">
            <summary>Adds a variable assignment.</summary>
            <param name="assignment">to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerSetDesc.Assignments">
            <summary>Returns a list of all variables assignment by the on-set</summary>
            <returns>list of assignments</returns>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnSelectView">
            <summary>View for the on-select statement that handles selecting events from a named window. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnExprBaseView">
            <summary>
            View for the on-delete statement that handles removing events from a named window.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.named.NamedWindowOnExprBaseView.namedWindowEventType">
            <summary>The event type of the events hosted in the named window.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.named.NamedWindowOnExprBaseView.rootView">
            <summary>The root view accepting removals (old data).</summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowOnExprBaseView.#ctor(com.espertech.esper.view.StatementStopService,com.espertech.esper.epl.named.LookupStrategy,com.espertech.esper.epl.named.NamedWindowRootView)">
            <summary>Ctor.</summary>
            <param name="statementStopService">
            for indicating a statement was stopped or destroyed for cleanup
            </param>
            <param name="lookupStrategy">
            for handling trigger events to determine deleted events
            </param>
            <param name="rootView">to indicate which events to delete</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowOnExprBaseView.HandleMatching(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Implemented by on-trigger views to action on the combination of trigger and matching events in the named window.
            </summary>
            <param name="triggerEvents">is the trigger events (usually 1)</param>
            <param name="matchingEvents">
            is the matching events retrieved via lookup strategy
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowOnSelectView.#ctor(com.espertech.esper.view.StatementStopService,com.espertech.esper.epl.named.LookupStrategy,com.espertech.esper.epl.named.NamedWindowRootView,com.espertech.esper.core.InternalEventRouter,com.espertech.esper.epl.core.ResultSetProcessor,com.espertech.esper.core.EPStatementHandle,com.espertech.esper.core.StatementResultService)">
            <summary>Ctor. </summary>
            <param name="statementStopService">for indicating a statement was stopped or destroyed for cleanup</param>
            <param name="lookupStrategy">for handling trigger events to determine deleted events</param>
            <param name="rootView">the named window root view</param>
            <param name="internalEventRouter">for insert-into behavior</param>
            <param name="resultSetProcessor">for processing aggregation, having and ordering</param>
            <param name="statementHandle">required for routing events</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.JoinedPropDesc">
            <summary>
            Holds property information for joined properties in a lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.JoinedPropDesc.#ctor(System.String,System.Type,System.String,System.Nullable{System.Int32})">
            <summary>Ctor.</summary>
            <param name="indexPropName">is the property name of the indexed field</param>
            <param name="coercionType">is the type to coerce to</param>
            <param name="keyPropName">is the property name of the key field</param>
            <param name="keyStreamId">is the stream number of the key field</param>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.JoinedPropDesc.GetIndexPropName">
            <summary>Returns the property name of the indexed field.</summary>
            <returns>property name of indexed field</returns>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.JoinedPropDesc.GetKeyStreamNums(System.Collections.Generic.ICollection{com.espertech.esper.epl.lookup.JoinedPropDesc})">
            <summary>Returns the key stream numbers.</summary>
            <param name="descList">a list of descriptors</param>
            <returns>key stream numbers</returns>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.JoinedPropDesc.GetKeyProperties(System.Collections.Generic.ICollection{com.espertech.esper.epl.lookup.JoinedPropDesc})">
            <summary>Returns the key property names.</summary>
            <param name="descList">a list of descriptors</param>
            <returns>key property names</returns>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.JoinedPropDesc.GetKeyProperties(com.espertech.esper.epl.lookup.JoinedPropDesc[])">
            <summary>Returns the key property names.</summary>
            <param name="descList">a list of descriptors</param>
            <returns>key property names</returns>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.JoinedPropDesc.GetIndexProperties(com.espertech.esper.epl.lookup.JoinedPropDesc[])">
            <summary>Returns the index property names given an array of descriptors.</summary>
            <param name="descList">descriptors of joined properties</param>
            <returns>array of index property names</returns>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.JoinedPropDesc.GetCoercionTypes(System.Collections.Generic.ICollection{com.espertech.esper.epl.lookup.JoinedPropDesc})">
            <summary>Returns the key coercion types.</summary>
            <param name="descList">a list of descriptors</param>
            <returns>key coercion types</returns>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.JoinedPropDesc.GetCoercionTypes(com.espertech.esper.epl.lookup.JoinedPropDesc[])">
            <summary>Returns the key coercion types.</summary>
            <param name="descList">a list of descriptors</param>
            <returns>key coercion types</returns>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.JoinedPropDesc.CoercionType">
            <summary>Returns the coercion type of key to index field.</summary>
            <returns>type to coerce to</returns>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.JoinedPropDesc.KeyPropName">
            <summary>Returns the property name of the key field.</summary>
            <returns>property name of key field</returns>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.JoinedPropDesc.KeyStreamId">
            <summary>Returns the stream id of the key field.</summary>
            <returns>stream id</returns>
        </member>
        <member name="T:com.espertech.esper.compat.FastThreadLocal`1">
            <summary>
            ThreadLocal provides the engine with a way to store information that
            is local to the instance and a the thread.  While the CLR provides the
            ThreadStatic attribute, it can only be applied to static variables;
            some usage patterns in esper (such as statement-specific thread-specific
            processing data) require that data be associated by instance and thread.
            The CLR provides a solution to this known as LocalDataStoreSlot.  It
            has been documented that this method is slower than its ThreadStatic
            counterpart, but it allows for instance-based allocation.
            <para/>
            During recent testing it was determined that the LocalDataStoreSlot was
            using an amount of time that seemed a bit excessive.  We took some
            snapshots of performance under the profiler.  Using that information we
            retooled the class to provide tight and fast access to thread-local
            instance-specific data.  The class is pretty tightly wound and takes a
            few liberties in understanding how esper uses it.  A ThreadStatic
            variable is initialized for the ThreadLocal.  This item is 'thread-local'
            and contains an array of 'instance-specific' data.  Indexing is done
            when the ThreadLocal item is created.  Under esper this results in roughly
            one 'index' per statement.  Changes to this model resulted in good cost
            savings in the retrieval and acquisition of local data.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:com.espertech.esper.compat.FastThreadLocal`1._threadDataList">
            <summary>
            List of weak reference data.  This list is allocated when the
            class is instantiated and keeps track of data that is allocated
            regardless of thread.  Minimal locks should be used to ensure
            that normal ThreadLocal activity is not placed in the crossfire
            of this structure.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.FastThreadLocal`1._threadDataListLock">
            <summary>
            Lock for the _threadDataList
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastThreadLocal`1.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.compat.FastThreadLocal`1"/> class.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.FastThreadLocal`1.m_dataFactory">
            <summary>
            Factory delegate for construction of data on miss.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastThreadLocal`1.GetOrCreate">
            <summary>
            Gets the data or creates it if not found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.FastThreadLocal`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastThreadLocal`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:com.espertech.esper.compat.FastThreadLocal`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastThreadLocal`1.AllocateIndex">
            <summary>
            Allocates a usable index.  This method looks in the indexReclaim
            first to determine if there is a slot that has been released.  If so,
            it is reclaimed.  If no space is available, a new index is allocated.
            This can lead to growth of the static data table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.FastThreadLocal`1.#ctor(com.espertech.esper.compat.FactoryDelegate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.FastThreadLocal`1"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="P:com.espertech.esper.compat.FastThreadLocal`1.InstanceId">
            <summary>
            Gets the instance id ... if you really must know.
            </summary>
            <value>The instance id.</value>
        </member>
        <member name="P:com.espertech.esper.compat.FastThreadLocal`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:com.espertech.esper.compat.FastThreadLocalFactory">
            <summary>
            Creates fast thread local objects.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastThreadLocalFactory.CreateThreadLocal``1(com.espertech.esper.compat.FactoryDelegate{``0})">
            <summary>
            Create a thread local object of the specified type param.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.collection.OneEventCollection">
            <summary>
            Simple collection that exposes a limited add-and-get interface and
            that is optimized towards holding a single event, but can hold multiple
            events. If more then one event is added, the class allocates a linked
            list for additional events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.OneEventCollection.Add(com.espertech.esper.events.EventBean)">
            <summary>Add an event to the collection. </summary>
            <param name="event">is the event to add</param>
        </member>
        <member name="M:com.espertech.esper.collection.OneEventCollection.ToArray">
            <summary>Returns an array holding the collected events. </summary>
            <returns>event array</returns>
        </member>
        <member name="P:com.espertech.esper.collection.OneEventCollection.IsEmpty">
            <summary>Returns true if the collection is empty. </summary>
            <returns>true if empty, false if not</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.CreateVariableClause">
            <summary>
            Represents a create-variable syntax for creating a new variable.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateVariableClause.Create(System.String,System.String)">
            <summary>Creates a create-variable syntax for declaring a variable.</summary>
            <param name="variableType">is the variable type name</param>
            <param name="variableName">is the name of the variable</param>
            <returns>create-variable clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateVariableClause.Create(System.String,System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Creates a create-variable syntax for declaring a variable.</summary>
            <param name="variableType">is the variable type name</param>
            <param name="variableName">is the name of the variable</param>
            <param name="expression">
            is the assignment expression supplying the initial value
            </param>
            <returns>create-variable clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateVariableClause.#ctor(System.String,System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="variableType">is the variable type name</param>
            <param name="variableName">is the name of the variable</param>
            <param name="optionalAssignment">
            is the optional assignment expression supplying the initial value, or null if the
            initial value is null
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateVariableClause.ToEPL(System.IO.StringWriter)">
            <summary>Render as EPL.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateVariableClause.OptionalAssignment">
            <summary>
            Gets or sets the the optional assignment expression, or null to 
            initialize to a null value
            </summary>
            <value>The optional assignment.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateVariableClause.VariableName">
            <summary>
            Gets or sets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateVariableClause.VariableType">
            <summary>
            Gets or sets the variable type name.
            </summary>
            <value>The variable type name.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationOperations">
            <summary>
            Provides configuration operations for configuration-time and runtime parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventTypeAutoAlias(System.String)">
            <summary>
            Adds a namespace where event types reside in.
            <para/>
            This setting allows an application to place all it's events into one or more namespaces
            and then declare these packages via this method. The engine attempts to resolve an event
            type alias to a class residing in each declared package.
            <para/>
            For example, in the statement "select * from MyEvent" the engine attempts to load
            class "namespace.MyEvent" and if successful, uses that class as the event type.
            </summary>
            <param name="namespace">the namespace</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddPlugInAggregationFunction(System.String,System.String)">
            <summary>
            Adds a plug-in aggregation function given a function name and an aggregation class name.
            <para/>
            The aggregation class must : the base class <see cref="T:com.espertech.esper.epl.agg.AggregationSupport"/>.
            <para/>
            The same function name cannot be added twice.
            </summary>
            <param name="functionName">is the new aggregation function name</param>
            <param name="aggregationClassName">
            is the fully-qualified class name of the class implementing the aggregation function
            </param>
            <throws>
            ConfigurationException is thrown to indicate a problem adding aggregation function
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddImport(System.String)">
            <summary>
            Adds a package or class to the list of automatically-imported classes and packages.
            <para/>
            To import a single class offering a static method, simply supply the fully-qualified name of the class
            and use the syntax <code>classname.Methodname(...)</code>
            <para/>
            To import a whole package and use the <code>classname.Methodname(...)</code> syntax, specifiy a package
            with wildcard, such as <code>com.mycompany.staticlib.*</code>.
            </summary>
            <param name="importName">is a fully-qualified class name or a package name with wildcard</param>
            <throws>
            ConfigurationException if incorrect package or class names are encountered
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.IsEventTypeAliasExists(System.String)">
            <summary>Checks if an eventTypeAlias has already been registered for that alias name.</summary>
            <param name="eventTypeAlias">the alias name</param>
            <returns>true if already registered</returns>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventTypeAlias(System.String,System.String)">
            <summary>
            Add an alias for an event type represented by object events.
            <para/>
            Allows a second alias to be added for the same type.
            Does not allow the same alias to be used for different types.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="typeEventName">fully-qualified class name of the event type</param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventTypeAlias(System.String,System.Type)">
            <summary>
            Add an alias for an event type represented by plain-old object events.
            <para/>
            Allows a second alias to be added for the same type.
            Does not allow the same alias to be used for different types.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="eventType">
            is the event type for which to create the alias
            </param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventTypeAliasSimpleName(System.Type)">
            <summary>
            Add an alias for an event type represented by plain-old object events,
            using the simple name of the type as the alias.
            <para/>
            For example, if your class is "com.mycompany.MyEvent", then this method
            adds the alias "MyEvent" for the class.
            <para/>
            Allows a second alias to be added for the same type.
            Does not allow the same alias to be used for different types.
            </summary>
            <param name="eventType">the event type for which to create the alias from the class simple name</param>
            <throws>ConfigurationException if the alias is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventTypeAlias(System.String,com.espertech.esper.compat.Properties)">
            <summary>
            Add an alias for an event type that represents DataMap events.
            <para/>
            Allows a second alias to be added for the same type.
            Does not allow the same alias to be used for different types.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="typeMap">
            maps the name of each property in the Map event to the type
            (fully qualified classname) of its value in Map event instances.
            </param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventTypeAlias(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Add an alias for an event type that represents DataDictionary events, taking a Map of
            event property and class name as a parameter.
            <para/>
            This method is provided for convenience and is same in function to method
            taking a Properties object that contain fully qualified class name as values.
            <para/>
            Allows a second alias to be added for the same type.
            Does not allow the same alias to be used for different types.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="typeMap">
            maps the name of each property in the Map event to the type of its value in the Map object
            </param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventTypeAliasNestable(System.String,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Add an alias for an event type that represents DataMap events, and for which each property may
            itself be a Map of further properties,with unlimited nesting levels.
            <para/>
            Each entry in the type mapping must contain the String property nameand either a Class or
            further DataMap value.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the type(fully qualified classname) of its value in Map event instances.</param>
            <throws>ConfigurationException if the alias is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddNestableEventTypeAlias(System.String,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Add an alias for an event type that represents nestable strong-typed Map events,
            taking a Map of event property and class name as a parameter.
            <para/>
            This method takes a Map of String property names and Object property type. Each
            Object property type can either be a Type to denote a built-in type or application object,
            or can itself also be a DataMap to describe a property that itself is a
            map of further properties.
            <para/>
            This method is provided for convenience and is same in function to method taking a Properties
            object that contain fully qualified class name as values.
            <para/>
            Allows a second alias to be added for the same type.Does not allow the same alias to be used
            for different types.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the type of its value in the Map object</param>
            <throws>ConfigurationException if the alias is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventTypeAlias(System.String,com.espertech.esper.client.ConfigurationEventTypeXMLDOM)">
            <summary>
            Add an alias for an event type that represents System.Xml.XmlNode events.
            <para/>
            Allows a second alias to be added for the same type.
            Does not allow the same alias to be used for different types.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="xmlDOMEventTypeDesc">descriptor containing property and mapping information for XML-DOM events</param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddVariable(System.String,System.Type,System.Object)">
            <summary>
            Add a variable.
            </summary>
            <param name="variableName">name of the variable to add</param>
            <param name="type">the type of the variable must be a primitive or boxed builtin scalar type.</param>
            <param name="initializationValue">is the first assigned value</param>
            <exception>
            ConfigurationException if the type and initialization value don't match or the variable name
            is already in use
            </exception>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddPlugInEventType(System.String,System.Collections.Generic.IList{System.Uri},System.Object)">
            <summary>
            Adds an alias for an event type that one of the plug-in event representations resolves
            to an event type.
            <para/>
            The order of the URIs matters as event representations are asked in turn, to accept the
            event type.
            <para/>
            URIs can be child URIs of plug-in event representations and can add additional parameters
            or fragments for use by the event representation.
            </summary>
            <param name="eventTypeAlias">is the alias name of the event type</param>
            <param name="resolutionURIs">is URIs that are matched to registered event representations</param>
            <param name="initializer">is an optional value for parameterizing or configuring the event type</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddRevisionEventType(System.String,com.espertech.esper.client.ConfigurationRevisionEventType)">
            <summary>
            Adds an revision event type. The alias name of the event type may be used with named windows
            to indicate that updates or new versions of events are processed.
            </summary>
            <param name="revisionEventTypeAlias">the alias name of the revision event type</param>
            <param name="revisionEventTypeConfig">the configuration</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddVariantStream(System.String,com.espertech.esper.client.ConfigurationVariantStream)">
            <summary>
            Adds a new variant stream. Variant streams allow events of disparate types to be treated the same.
            </summary>
            <param name="variantStreamName">is the name of the variant stream</param>
            <param name="variantStreamConfig">the configuration such as variant type aliases and any-type setting</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationOperations.PlugInEventTypeAliasResolutionURIs">
            <summary>
            Sets the URIs that point to plug-in event representations that are given a chance to
            dynamically resolve an eventtype alias to an event type, when a new (unseen) event type
            alias occurs in a new EPL statement.
            <para/>
            The order of the URIs matters as event representations are asked in turn, to accept the alias.
            <para/>
            URIs can be child URIs of plug-in event representations and can add additional parameters or
            fragments for use by the event representation.
            </summary>
            <value>The plug in event type alias resolution UR is.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationLRUCache">
            <summary>LRU cache settings. </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationDataCache">
            <summary>Marker interface for different cache settings. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationLRUCache.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="size">is the maximum cache size</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationLRUCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationLRUCache.Size">
            <summary>
            Gets the maximum cache size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="T:com.espertech.esper.view.window.KeepAllView">
            <summary>
            This view is a keep-all data window that simply keeps all events added.
            It in addition allows to remove events efficiently for the remove-stream events received by the view.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.KeepAllView.#ctor(com.espertech.esper.view.window.KeepAllViewFactory,com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>Ctor.</summary>
            <param name="keepAllViewFactory">for copying this view in a group-by</param>
            <param name="viewUpdatedCollection">
            for satisfying queries that select previous events in window order
            </param>
        </member>
        <member name="P:com.espertech.esper.view.window.KeepAllView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty.</summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.KeepAllView.ViewUpdatedCollection">
            <summary>
            Returns the (optional) collection handling random access to window contents for prior or previous events.
            </summary>
            <returns>buffer for events</returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.MultidimCubeImpl`1">
            <summary> Implementation for a multidimensional cube that can be configured with the type of cell to store.
            
            This cube implementation grows in each dimension as new dimension members are made known to the cube.
            If cells are added for dimension members that have not been encountered before,
            then the new dimension members are added to the known dimension members and the cube is redimensioned, ie. grows.
            
            In design of this class, performance is important in the following areas:
            - Access to cells should be very fast in the normal case.
            Normal case is that the cell for all dimension members (the particular coordinate) already exists.
            This class uses a map of dimension member set (coordinates) to fact array ordinal which gets great performance.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.MultidimCube`1">
            <summary> Interface for storage and access to multi-dimensional data.
            Implementations store cells for each of multiple dimensions.
            Implementations have a configurable number of dimensions, and the number of dimensions doesn't change.
            Cell objects are supplied via the template.
            
            The identification of a cell in the cube occurs by
            member values for each dimension. The MultiKeyUntyped class is used to supply these member values for all dimensions,
            also referred to as coordinates. Each Object in the MultiKeyUntyped is the (new or existng) member of a single dimension.
            
            Implementations typically supports 1 to an unlimited number of dimensions.
            Implementations can typically grows the members in each dimension as new dimension members become known.
            The members of each dimension can be supplied via a setter method.
            This is an example of a 2-dimensional cube.
            The numbers in [] brackets are indizes per dimension, ie. [n,m] where n=dimension zero index and m=dimension one index.
            The number in each cell is the ordinal between 0 and 11.
            
            a           b           c           d
            ===         ===         ===         ===
            x       [0,0] 0     [1,0] 1     [2,0] 2     [3,0] 3
            y             4           5           6     [3,1] 7
            z             8           9          10     [3,2] 11
            
            Example: looking for (d,y) yields [3,1] with ordinal 7.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCube`1.SetMembers(System.Int32,System.Type)">
            <summary> Set dimension members from the enumeration Class.</summary>
            <param name="dimension">Starts at 0 and has a max of number of dimensions minus 1
            </param>
            <param name="enumType">is the class for which the enum constants are obtained, and used as members
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCube`1.SetMembers(System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary> Set dimension members from the list of value objects.</summary>
            <param name="dimension">Starts at 0 and has a max of number of dimensions minus 1
            </param>
            <param name="members">is a list of objects making up the dimension member values
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCube`1.GetMembers(System.Int32)">
            <summary> Get the members making up a dimension.</summary>
            <param name="dimension">for which to return the members
            </param>
            <returns> list of member object of the dimension
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCube`1.GetCell(com.espertech.esper.collection.MultiKeyUntyped)">
            <summary> Get a cell, returns null if the cell does not yet exist.</summary>
            <param name="coordinates">contains member values for each dimension of the cube
            </param>
            <returns> the cell
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCube`1.GetCellAddMembers(com.espertech.esper.collection.MultiKeyUntyped)">
            <summary> Get a cell adding the coordinate members if the cell does not yet exist.</summary>
            <param name="coordinates">contains member values for each dimension of the cube
            </param>
            <returns> the cell
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.MultidimCube`1.NumDimensions">
            <summary> Get the number of dimensions of the cube. The minimum number of dimensions is 1.</summary>
            <returns> number of dimensions
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.MultidimCube`1.DimensionNames">
            <summary> Returns array containing name of each dimension including the name of the cell.
            The array size is getNumDimensions() + 1, with the first element as the cell name.
            </summary>
            <returns> dimension names array
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.MultidimCube`1.Cells">
            <summary> Returns all cells.</summary>
            <returns> cell array
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCubeImpl`1.#ctor(System.String[],com.espertech.esper.view.stat.olap.MultidimCubeCellFactory{`0})">
            <summary> Constructor.</summary>
            <param name="dimensionNames">is the name of each dimension - and dictates the number of dimensions
            </param>
            <param name="multidimCubeCellFactory">is the factory for cube cells
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCubeImpl`1.SetMembers(System.Int32,System.Type)">
            <summary>
            Set dimension members from the enumeration Class.
            </summary>
            <param name="dimension">Starts at 0 and has a max of number of dimensions minus 1</param>
            <param name="enumType">is the class for which the enum constants are obtained, and used as members</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCubeImpl`1.SetMembers(System.Int32,System.Array)">
            <summary>
            Sets the members.
            </summary>
            <param name="dimension">The dimension.</param>
            <param name="members">The members.</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCubeImpl`1.SetMembers(System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Set dimension members from the list of value objects.
            </summary>
            <param name="dimension">Starts at 0 and has a max of number of dimensions minus 1</param>
            <param name="members">is a list of objects making up the dimension member values</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCubeImpl`1.GetMembers(System.Int32)">
            <summary>
            Get the members making up a dimension.
            </summary>
            <param name="dimension">for which to return the members</param>
            <returns>list of member object of the dimension</returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCubeImpl`1.GetCell(com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Get a cell, returns null if the cell does not yet exist.
            </summary>
            <param name="coordinates">contains member values for each dimension of the cube</param>
            <returns>the cell</returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCubeImpl`1.GetCellAddMembers(com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Get a cell adding the coordinate members if the cell does not yet exist.
            </summary>
            <param name="coordinates">contains member values for each dimension of the cube</param>
            <returns>the cell</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.MultidimCubeImpl`1.DimensionNames">
            <summary>
            Returns array containing name of each dimension including the name of the cell.
            The array size is getNumDimensions() + 1, with the first element as the cell name.
            </summary>
            <value></value>
            <returns> dimension names array
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.MultidimCubeImpl`1.NumDimensions">
            <summary>
            Get the number of dimensions of the cube. The minimum number of dimensions is 1.
            </summary>
            <value></value>
            <returns> number of dimensions
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.MultidimCubeImpl`1.Cells">
            <summary>
            Returns all cells.
            </summary>
            <value></value>
            <returns> cell array
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.MultidimCubeImpl`1.DimensionSizes">
            <summary>
            Gets the dimension sizes.
            </summary>
            <value>The dimension sizes.</value>
        </member>
        <member name="T:com.espertech.esper.view.stat.CorrelationViewFactory">
            <summary>Factory for <see cref="T:com.espertech.esper.view.stat.CorrelationView"/> instances.</summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.CorrelationViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.view.internals.PriorEventBufferUnbound">
            <summary>
            Buffer class for insert stream events only for use with unbound streams that inserts data only,
            to serve up one or more prior events in the insert stream based on an index.
            <para/>
            Does not expect or care about the remove stream and simple keeps a rolling buffer of new data events
            up to the maximum prior event we are asking for.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventBufferUnbound.#ctor(System.Int32)">
            <summary>Ctor.</summary>
            <param name="maxPriorIndex">
            is the highest prior-event index required by any expression
            </param>
        </member>
        <member name="T:com.espertech.esper.view.internals.PriorEventBufferSingle">
            <summary>
            Buffers view-posted insert stream (new data) and remove stream (old data) events for
            use with serving prior results in these streams, for a single prior event.
            <para>
            Buffers only exactly those events in new data and old data that are being asked for via the
            2 or more 'prior' functions that specify different indexes. For example &quot;select Prior(2, price), Prior(1, price)&quot;
            results in on buffer instance handling both the need to the immediatly prior (1) and the 2-events-ago
            event (2).
            </para>
            <para>
            As all views are required to post new data and post old data that removes the new data to subsequent views,
            this buffer can be attached to all views and should not result in a memory leak.
            </para>
            <para>
            When the buffer receives old data (rstream) events it removes the prior events to the rstream events
            from the buffer the next time it receives a post (not immediatly) to allow queries to the buffer.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventBufferSingle.#ctor(System.Int32)">
            <summary>Ctor.</summary>
            <param name="priorEventIndex">
            is the number-of-events prior to the current event we are interested in
            </param>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventBufferSingle.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Accepts view insert and remove stream.
            </summary>
            <param name="newData">is the insert stream events or null if no data</param>
            <param name="oldData">is the remove stream events or null if no data</param>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventBufferSingle.GetRelativeToEvent(com.espertech.esper.events.EventBean,System.Int32)">
            <summary>
            Gets the relative to event.
            </summary>
            <param name="_event">The _event.</param>
            <param name="priorToIndex">Index of the prior to.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.util.EsperSectionHandler">
            <summary>
            Handles custom configuration sections for Esper.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.EsperSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates the section from the node information.
            </summary>
            <param name="parent"></param>
            <param name="configContext">Configuration context object.</param>
            <param name="section"></param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:com.espertech.esper.type.IntParameter">
            <summary>
            Parameter supplying a single int value is a set of numbers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.IntParameter.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="intValue">single in value
            </param>
        </member>
        <member name="M:com.espertech.esper.type.IntParameter.IsWildcard(System.Int32,System.Int32)">
            <summary>
            Returns true if all values between and including min and max are supplied by the parameter.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>
            true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.IntParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary>
            Return a set of int values representing the value of the parameter for the given range.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>set of integer</returns>
        </member>
        <member name="P:com.espertech.esper.type.IntParameter.IntValue">
            <summary> Returns int value.</summary>
            <returns> int value
            </returns>
        </member>
        <member name="T:com.espertech.esper.plugin.PluginLoader">
            <summary>
            Interface for loaders of input/output adapters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PluginLoader.Init(System.String,com.espertech.esper.compat.Properties,com.espertech.esper.core.EPServiceProviderSPI)">
            <summary>Initializes the adapter loader.</summary>
            <param name="name">is the loader name</param>
            <param name="properties">is a set of properties from the configuration</param>
            <param name="epService">is the SPI of the engine itself for sending events to</param>
        </member>
        <member name="M:com.espertech.esper.plugin.PluginLoader.Destroy">
            <summary>Destroys adapter loader and adapters loaded.</summary>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternStateFactoryImpl">
            <summary>Default pattern state factory.</summary>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternStateFactory">
            <summary>Factory for pattern state object implementations.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactory.SetContext(com.espertech.esper.pattern.PatternContext)">
            <summary>Sets the services for pattern state objects.</summary>
            <param name="patternContext">is a pattern-level services</param>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactory.MakeParentStateNode(com.espertech.esper.pattern.EvalNode,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>Makes a parent state node for the child state node.</summary>
            <param name="evalNode">is the factory for the parent node</param>
            <param name="matchEvents">is the current match state</param>
            <param name="stateObjectId">is the parent state object id</param>
            <returns>parent state object</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactory.MakeRootNode(com.espertech.esper.pattern.EvalNode,com.espertech.esper.pattern.MatchedEventMap)">
            <summary>Makes a root state node.</summary>
            <param name="evalChildNode">is the first child node of the root node</param>
            <param name="beginState">is the state node's begin state</param>
            <returns>root state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactory.MakeFollowedByState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalFollowedByNode,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>Makes a followed-by state node.</summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalFollowedByNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="stateObjectId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactory.MakeFilterStateNode(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalFilterNode,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>Makes a followed-by state node.</summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalFilterNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="stateNodeId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactory.MakeStateNode(com.espertech.esper.pattern.EvalNodeNumber,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>Makes any new state node.</summary>
            <param name="evalNodeNumber">is the factory node number</param>
            <param name="beginState">is the begin state</param>
            <param name="stateObjectId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactory.MakeObserverNode(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalObserverNode,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>Makes a followed-by state node.</summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalObserverNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="stateNodeId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactory.MakeAndStateNode(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalAndNode,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>Makes a followed-by state node.</summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalAndNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="stateNodeId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactory.MakeNotNode(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalNotNode,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>Makes a followed-by state node.</summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalNotNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="stateNodeId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactory.MakeEveryStateNode(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalEveryNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>Makes a every-state node.</summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalEveryNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="stateNodeId">is the state node's object id</param>
            <param name="context">is the pattern context</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactory.MakeOrState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalOrNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>Makes an or-state node.</summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalOrNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="stateNodeId">is the state node's object id</param>
            <param name="context">is the pattern context</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactory.MakeGuardState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalGuardNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>Makes a guard state node.</summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalGuardNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="stateNodeId">is the state node's object id</param>
            <param name="context">is the pattern context</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactoryImpl.SetContext(com.espertech.esper.pattern.PatternContext)">
            <summary>
            Sets the context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactoryImpl.MakeGuardState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalGuardNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>
            Makes a guard state node.
            </summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalGuardNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="context">is the pattern context</param>
            <param name="stateNodeId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactoryImpl.MakeOrState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalOrNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>
            Makes an or-state node.
            </summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalOrNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="context">is the pattern context</param>
            <param name="stateNodeId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactoryImpl.MakeEveryStateNode(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalEveryNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>
            Makes a every-state node.
            </summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalEveryNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="context">is the pattern context</param>
            <param name="stateNodeId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactoryImpl.MakeNotNode(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalNotNode,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>
            Makes a followed-by state node.
            </summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalNotNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="stateNodeId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactoryImpl.MakeAndStateNode(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalAndNode,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>
            Makes a followed-by state node.
            </summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalAndNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="stateNodeId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactoryImpl.MakeRootNode(com.espertech.esper.pattern.EvalNode,com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Makes a root state node.
            </summary>
            <param name="evalChildNode">is the first child node of the root node</param>
            <param name="beginState">is the state node's begin state</param>
            <returns>root state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactoryImpl.MakeObserverNode(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalObserverNode,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>
            Makes a followed-by state node.
            </summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalObserverNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="stateNodeId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactoryImpl.MakeFollowedByState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalFollowedByNode,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>
            Makes the state of the followed by.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="evalFollowedByNode">The eval followed by node.</param>
            <param name="beginState">State of the begin.</param>
            <param name="stateNodeId">The state node id.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactoryImpl.MakeFilterStateNode(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalFilterNode,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>
            Makes a followed-by state node.
            </summary>
            <param name="parentNode">is the parent evaluator</param>
            <param name="evalFilterNode">is the factory node</param>
            <param name="beginState">is the begin state</param>
            <param name="stateNodeId">is the state node's object id</param>
            <returns>state node</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactoryImpl.MakeStateNode(com.espertech.esper.pattern.EvalNodeNumber,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>
            Makes the state node.
            </summary>
            <param name="evalNodeNumber">The eval node number.</param>
            <param name="matchEvents">The match events.</param>
            <param name="stateObjectId">The state object id.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStateFactoryImpl.MakeParentStateNode(com.espertech.esper.pattern.EvalNode,com.espertech.esper.pattern.MatchedEventMap,System.Object)">
            <summary>
            Makes a parent state node for the child state node.
            </summary>
            <param name="evalNode">is the factory for the parent node</param>
            <param name="matchEvents">is the current match state</param>
            <param name="stateObjectId">is the parent state object id</param>
            <returns>parent state object</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternContextFactoryDefault">
            <summary>Default pattern context factory.</summary>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternContextFactory">
            <summary>
            Factory for pattern context instances, creating context objects for each distinct pattern based on the
            patterns root node and stream id.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternContextFactory.CreateContext(com.espertech.esper.core.StatementContext,System.Int32,com.espertech.esper.pattern.EvalRootNode)">
            <summary>Create a pattern context.</summary>
            <param name="statementContext">is the statement information and services</param>
            <param name="streamId">is the stream id</param>
            <param name="rootNode">is the pattern root node</param>
            <returns>pattern context</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.TimerIntervalObserver">
            <summary>
            Observer that will wait a certain interval before indicating
            true (raising an event).
            </summary>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleHandleCallback">
            <summary>
            Interface for scheduled callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleHandleCallback.ScheduledTrigger(com.espertech.esper.core.ExtensionServicesContext)">
            <summary>
            Callback that is invoked as indicated by a schedule added to the scheduling service.
            </summary>
            <param name="extensionServicesContext">
            is a marker interface for providing custom extension services
            passed to the triggered class
            </param>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerIntervalObserver.#ctor(System.Int64,com.espertech.esper.pattern.PatternContext,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.observer.ObserverEventEvaluator)">
            <summary> Ctor.</summary>
            <param name="msec">number of milliseconds
            </param>
            <param name="context">timer service
            </param>
            <param name="beginState">Start state
            </param>
            <param name="observerEventEvaluator">receiver for events
            </param>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerIntervalObserver.ScheduledTrigger(com.espertech.esper.core.ExtensionServicesContext)">
            <summary>
            Called when a scheduled callback occurs.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerIntervalObserver.StartObserve">
            <summary>
            Start observing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerIntervalObserver.StopObserve">
            <summary>
            Stop observing.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.TimerAtObserver">
            <summary>
            Observer implementation for indicating that a certain time arrived, similar to "crontab".
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerAtObserver.#ctor(com.espertech.esper.schedule.ScheduleSpec,com.espertech.esper.pattern.PatternContext,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.observer.ObserverEventEvaluator)">
            <summary> Ctor.</summary>
            <param name="scheduleSpec">specification containing the crontab schedule
            </param>
            <param name="context">timer serive to use
            </param>
            <param name="beginState">Start state
            </param>
            <param name="observerEventEvaluator">receiver for events
            </param>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerAtObserver.ScheduledTrigger(com.espertech.esper.core.ExtensionServicesContext)">
            <summary>
            Called when a scheduled callback occurs.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerAtObserver.StartObserve">
            <summary>
            Start observing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerAtObserver.StopObserve">
            <summary>
            Stop observing.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalNotNode">
            <summary>
            This class represents an 'not' operator in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNotNode.NewState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>
            Create the evaluation state node containing the truth value state for each operator in an
            event expression.
            </summary>
            <param name="parentNode">is the parent evaluator node that this node indicates a change in truth value to</param>
            <param name="beginState">is the container for events that makes up the Start state</param>
            <param name="context">is the handle to services required for evaluation</param>
            <param name="stateNodeId">is the new state object's identifier</param>
            <returns>
            state node containing the truth value state for the operator
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNotNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.IndexTreeBuilder">
            <summary>
            Builder manipulates a tree structure consisting of <see cref="T:com.espertech.esper.filter.FilterHandleSetNode"/> and <see cref="T:com.espertech.esper.filter.FilterParamIndexBase"/>
            instances. Filters can be added to a top node (an instance of FilterHandleSetNode) via the add method. This
            method returns an instance of <see cref="T:com.espertech.esper.filter.IndexTreePath"/> which represents the tree path (list of indizes) that the
            filter callback was added to. To remove filters the same IndexTreePath instance must be passed in.
            <para>
            The implementation is designed to be multithread-safe in conjunction with the node classes manipulated by this
            class.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.filter.IndexTreeBuilder"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.Add(com.espertech.esper.filter.FilterValueSet,com.espertech.esper.filter.FilterHandle,com.espertech.esper.filter.FilterHandleSetNode)">
            <summary>Add a filter callback according to the filter specification to the top node returninginformation to be used to remove the filter callback.</summary>
            <param name="filterValueSet">is the filter definition</param>
            <param name="filterHandle">is the callback to be added</param>
            <param name="topNode">node to be added to any subnode beneath it</param>
            <returns>an encapsulation of information need to allow for safe removal of the filter tree.</returns>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.Remove(com.espertech.esper.filter.FilterHandle,com.espertech.esper.filter.IndexTreePath,com.espertech.esper.filter.FilterHandleSetNode)">
            <summary>Remove an filterHandle from the given top node. The IndexTreePath instance passed in must be thesame as obtained when the same filterHandle was added.</summary>
            <param name="filterHandle">filter callback  to be removed</param>
            <param name="treePathInfo">encapsulates information need to allow for safe removal of the filterHandle</param>
            <param name="topNode">The top tree node beneath which the filterHandle was added</param>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.AddToNode(com.espertech.esper.filter.FilterHandleSetNode,com.espertech.esper.filter.IndexTreePath)">
            <summary>Add to the current node building up the tree path information.</summary>
            <param name="currentNode">is the node to add to</param>
            <param name="treePathInfo">is filled with information about which indizes were chosen to add the filter to</param>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.RemoveFromNode(com.espertech.esper.filter.FilterHandleSetNode,com.espertech.esper.filter.IndexTreePath)">
            <summary>
            Remove an filterHandle from the current node, return true if the node is the node is empty now
            </summary>
            <param name="currentNode"></param>
            <param name="treePathInfo"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.RemoveFromIndex(com.espertech.esper.filter.FilterParamIndexBase,com.espertech.esper.filter.IndexTreePath,System.Object)">
            <summary>
            Remove filterHandle from index, returning true if index empty after removal
            </summary>
            <param name="index"></param>
            <param name="treePathInfo"></param>
            <param name="filterForValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.AddToIndex(com.espertech.esper.filter.FilterParamIndexBase,System.Object,com.espertech.esper.filter.IndexTreePath)">
            <summary>Add to an index the value to filter for.</summary>
            <param name="index">is the index to add to</param>
            <param name="filterForValue">is the filter parameter value to add</param>
            <param name="treePathInfo">is the specification to fill on where is was added</param>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.AddToEvaluator(com.espertech.esper.filter.EventEvaluator,com.espertech.esper.filter.IndexTreePath)">
            <summary>Add filter callback to an event evaluator, which could be either an index node or a set node.</summary>
            <param name="eventEvaluator">to add the filterHandle to.</param>
            <param name="treePathInfo">is for holding the information on where the add occured</param>
            <returns>bool indicating if the eventEvaluator was successfully added</returns>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.CopySortParameters(System.Collections.Generic.IList{com.espertech.esper.filter.FilterValueSetParam})">
            <summary>Copy the parameter list - this also sorts the parameter list.</summary>
            <param name="parameters">is a list of filter parameters</param>
            <returns>sorted set of filter parameters</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamRange">
            <summary>
            This class represents a range filter parameter in an <see cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> filter specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamRange.#ctor(System.String,com.espertech.esper.filter.FilterOperator,com.espertech.esper.filter.FilterSpecParamRangeValue,com.espertech.esper.filter.FilterSpecParamRangeValue)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyName">is the event property name</param>
            <param name="filterOperator">is the type of range operator</param>
            <param name="min">is the begin point of the range</param>
            <param name="max">is the end point of the range</param>
            <throws>  ArgumentException if an operator was supplied that does not take a double range value </throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamRange.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Return the filter parameter constant to filter for.
            </summary>
            <param name="matchedEvents">is the prior results that can be used to determine filter parameters</param>
            <returns>filter parameter constant's value</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamRange.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamRange.Min">
            <summary>Returns the lower endpoint.</summary>
            <returns>lower endpoint</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamRange.Max">
            <summary>Returns the upper endpoint.</summary>
            <returns>upper endpoint</returns>
        </member>
        <member name="T:com.espertech.esper.filter.EventTypeIndexBuilder">
            <summary> This class is responsible for changes to <see cref="T:com.espertech.esper.filter.EventTypeIndex"/> for addition and removal of filters.
            It delegates the work to make modifications to the filter parameter tree to an <see cref="T:com.espertech.esper.filter.IndexTreeBuilder"/>.
            It enforces a policy that a filter callback can only be added once.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndexBuilder.#ctor(com.espertech.esper.filter.EventTypeIndex)">
            <summary> Constructor - takes the event type index to manipulate as its parameter.</summary>
            <param name="eventTypeIndex">index to manipulate
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndexBuilder.Destroy">
            <summary>
            Destroy the service.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndexBuilder.Add(com.espertech.esper.filter.FilterValueSet,com.espertech.esper.filter.FilterHandle)">
            <summary> Add a filter to the event type index structure, and to the filter subtree.
            Throws an IllegalStateException exception if the callback is already registered.
            </summary>
            <param name="filterValueSet">is the filter information
            </param>
            <param name="filterCallback">is the callback
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndexBuilder.Remove(com.espertech.esper.filter.FilterHandle)">
            <summary> Remove a filter callback from the given index node.</summary>
            <param name="filterCallback">is the callback to remove
            </param>
        </member>
        <member name="T:com.espertech.esper.events.property.KeyedMethodPropertyGetter">
            <summary>
            Getter for a key property identified by a given key value, using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.KeyedMethodPropertyGetter.#ctor(System.Reflection.MethodInfo,System.Object)">
            <summary>Constructor.</summary>
            <param name="method">
            is the method to use to retrieve a value from the object.
            </param>
            <param name="key">
            is the key to supply as parameter to the mapped property getter
            </param>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicPropertyDescriptor">
            <summary>
            Provides method information for dynamic (unchecked) properties of each class
            for use in obtaining property values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicPropertyDescriptor.#ctor(System.Type,com.espertech.esper.events.property.ValueGetter)">
            <summary>
            Ctor.
            </summary>
            <param name="clazz">the class to match when looking for a method</param>
            <param name="getter">Gets values out of the underlying object.</param>
        </member>
        <member name="P:com.espertech.esper.events.property.DynamicPropertyDescriptor.Clazz">
            <summary>Returns the class for the method.</summary>
            <returns>class to match on</returns>
        </member>
        <member name="P:com.espertech.esper.events.property.DynamicPropertyDescriptor.Getter">
            <summary>
            Returns a delegate that can get the value out of the underlying object.
            </summary>
            <value>The getter.</value>
        </member>
        <member name="T:com.espertech.esper.events.property.ArrayPropertyGetter">
            <summary>
            Getter for an array property, identified by a given index,
            using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.ArrayPropertyGetter.#ctor(System.ComponentModel.PropertyDescriptor,System.Int32)">
            <summary> Constructor.</summary>
            <param name="prop">the property to use to retrieve a value from the object</param>
            <param name="index">the index within the array to get the property from</param>
        </member>
        <member name="M:com.espertech.esper.events.property.ArrayPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.ArrayPropertyGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a property.
            <para>
            Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
            Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
            If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
            does not exists and the method returns false.
            </para>
            <para>
            For non-dynamic properties, this method always returns true since a getter would not be available
            unless
            </para>
            </summary>
            <param name="eventBean">the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default) properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.ArrayPropertyGetter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.ArrayFieldPropertyGetter">
            <summary>
            Getter for an array property backed by a field, identified by a given index,
            using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.ArrayFieldPropertyGetter.#ctor(System.Reflection.FieldInfo,System.Int32)">
            <summary> Constructor.</summary>
            <param name="field">is the field to use to retrieve a value from the object
            </param>
            <param name="index">is tge index within the array to get the property from
            </param>
        </member>
        <member name="T:com.espertech.esper.events.EventPropertyGetterDelegate">
            <summary>
            A delegate wrapper for the event property getter
            </summary>
            <param name="eventBean"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.events.EventPropertyTesterDelegate">
            <summary>
            A delegate wrapper for the event property tester
            </summary>
            <param name="eventBean"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.events.ProxyEventPropertyGetter">
            <summary>
            An interface that wraps the the event property getter with a delegate
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.ProxyEventPropertyGetter.#ctor(com.espertech.esper.events.EventPropertyGetterDelegate,com.espertech.esper.events.EventPropertyTesterDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.ProxyEventPropertyGetter"/> class.
            </summary>
            <param name="getterDelegate">The getter delegate.</param>
            <param name="testerDelegate">The tester delegate.</param>
        </member>
        <member name="M:com.espertech.esper.events.ProxyEventPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Return the value for the property in the event object specified when the instance was obtained.
            Useful for fast access to event properties. Throws a PropertyAccessException if the getter instance
            doesn't match the EventType it was obtained from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from</param>
            <returns>value of property in event</returns>
            <throws>  PropertyAccessException to indicate that property access failed </throws>
        </member>
        <member name="M:com.espertech.esper.events.ProxyEventPropertyGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
             <summary>
             Returns true if the property exists, or false if the type does not have such a property.
             <para>
             Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
             Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
             If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
             does not exists and the method returns false.
             </para>
             <para>
             For non-dynamic properties, this method always returns true since a getter would not be available
             unless
             </para>
             </summary>
             <param name="eventBean">the event to check if the dynamic property exists</param>
             <returns>
             indictor whether the property exists, always true for non-dynamic (default) properties
             </returns>
            
        </member>
        <member name="T:com.espertech.esper.events.EventBeanUtility">
            <summary>
            Method to GetSelectListEvents events in collections to other collections or other event types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.FlattenList``1(System.Collections.Generic.ICollection{com.espertech.esper.collection.UniformPair{``0[]}})">
            <summary>
            Flatten the vector of arrays to an array. Return null if an empty vector was passed, else
            return an array containing all the events.
            </summary>
            <param name="eventVector">vector</param>
            <returns>array with all events</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.Flatten``1(System.Collections.Generic.IList{``0[]})">
            <summary>Flatten the vector of arrays to an array. Return null if an empty vector was passed, elsereturn an array containing all the events.</summary>
            <param name="eventVector">vector</param>
            <returns>array with all events</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.FlattenBatchStream``1(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{``0[]}})">
            <summary>
            Flatten the vector of arrays to an array. Return null if an empty vector was passed, else
            return an array containing all the events.
            </summary>
            <param name="updateVector">is a list of updates of old and new events</param>
            <returns>array with all events</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.Append``1(``0[],``0[])">
            <summary>Append arrays.</summary>
            <param name="source">list of source events</param>
            <param name="append">list of events to append</param>
            <returns>appended array</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.ToArray``1(System.Collections.Generic.IList{``0})">
            <summary>Convert list of events to array, returning null for empty or null lists.</summary>
            <param name="eventList">a list of events to convert</param>
            <returns>array of events</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.GetPropertyArray(com.espertech.esper.events.EventBean,com.espertech.esper.events.EventPropertyGetter[])">
            <summary>
            Returns object array containing property values of given properties, retrieved via EventPropertyGetterinstances.
            </summary>
            <param name="ev">event to get property values from</param>
            <param name="propertyGetters">getters to use for getting property values</param>
            <returns>object array with property values</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.GetMultiKey(com.espertech.esper.events.EventBean,com.espertech.esper.events.EventPropertyGetter[])">
            <summary>
            Returns Multikey instance for given event and getters.
            </summary>
            <param name="ev">event to get property values from</param>
            <param name="propertyGetters">getters for access to properties</param>
            <returns>MultiKey with property values</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.PrintEvent(com.espertech.esper.events.EventBean)">
            <summary>
            Format the event and return a string representation.
            </summary>
            <param name="ev">is the event to format.</param>
            <returns>string representation of event</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.PrintEvent(System.IO.TextWriter,com.espertech.esper.events.EventBean)">
            <summary>
            Prints the event.
            </summary>
            <param name="writer">The writer.</param>
            <param name="ev">The ev.</param>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.FlattenBatchJoin(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}}}})">
            <summary>
            Flattens a list of pairs of join result sets.
            </summary>
            <param name="joinPostings">is the list</param>
            <returns>is the consolidate sets</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.FilterSpecRaw">
            <summary>
            Filter definition in an un-validated and un-resolved form.
            <para>
            Event type and expression nodes in this filter specification are not yet validated, optimized for resolved
            against actual streams.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.FilterSpecRaw.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode})">
            <summary>Ctor.</summary>
            <param name="eventTypeAlias">is the name of the event type</param>
            <param name="filterExpressions">
            is a list of expression nodes representing individual filter expressions
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.FilterSpecRaw.#ctor">
            <summary>Default ctor.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.FilterSpecRaw.EventTypeAlias">
            <summary>Returns the event type alias of the events we are looking for.</summary>
            <returns>event name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.FilterSpecRaw.FilterExpressions">
            <summary>Returns the list of filter expressions.</summary>
            <returns>filter expression list</returns>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ParseRuleSelector">
            <summary>
            Implementations can invoke a parse rule of their choice on the parser.
            </summary>
            <param name="parser">parser to invoke parse rule on</param>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ParseHelper">
            <summary>Helper class for parsing an expression and walking a parse tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ParseHelper.Walk(Antlr.Runtime.Tree.ITree,com.espertech.esper.epl.parse.EPLTreeWalker,com.espertech.esper.epl.parse.WalkRuleSelector,System.String)">
            <summary>Walk parse tree starting at the rule the walkRuleSelector supplies. </summary>
            <param name="ast">ast to walk</param>
            <param name="walker">walker instance</param>
            <param name="walkRuleSelector">walk rule</param>
            <param name="expression">the expression we are walking in string form</param>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ParseHelper.Parse(System.String,com.espertech.esper.epl.parse.ParseRuleSelector)">
            <summary>Parse expression using the rule the ParseRuleSelector instance supplies. </summary>
            <param name="expression">text to parse</param>
            <param name="parseRuleSelector">parse rule to select</param>
            <returns>AST - syntax tree</returns>
            <throws>EPException when the AST could not be parsed</throws>
        </member>
        <member name="T:com.espertech.esper.epl.parse.EPStatementSyntaxException">
            <summary>This exception is thrown to indicate a problem in statement creation. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPStatementSyntaxException.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
            <param name="expression">expression text</param>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPStatementSyntaxException.Convert(Antlr.Runtime.RecognitionException,System.String,com.espertech.esper.epl.generated.EsperEPL2GrammarParser)">
            <summary>Converts from a syntax error to a nice statement exception. </summary>
            <param name="e">is the syntax error</param>
            <param name="expression">is the expression text</param>
            <param name="parser">the parser that parsed the expression</param>
            <returns>syntax exception</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPStatementSyntaxException.Convert(Antlr.Runtime.RecognitionException,System.String,EsperEPL2Ast)">
            <summary>Converts from a syntax error to a nice statement exception. </summary>
            <param name="e">is the syntax error</param>
            <param name="expression">is the expression text</param>
            <param name="treeWalker">the tree walker that walked the tree</param>
            <returns>syntax exception</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPStatementSyntaxException.GetPositionInfo(Antlr.Runtime.IToken)">
            <summary>Returns the position information string for a parser exception. </summary>
            <param name="t">the token to return the information for</param>
            <returns>is a string with line and column information</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryPlanBuilder">
            <summary>
            Build a query plan based on filtering information.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanBuilder.GetPlan(com.espertech.esper.events.EventType[],System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc},com.espertech.esper.epl.expression.ExprNode,System.String[])">
            <summary>
            Build query plan using the filter.
            </summary>
            <param name="typesPerStream">The types per stream.</param>
            <param name="outerJoinDescList">list of outer join criteria, or null if there are no outer joins</param>
            <param name="optionalFilterNode">filter tree</param>
            <param name="streamNames">names of streams</param>
            <returns>query plan</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryPlan">
            <summary> Contains the query plan for all streams.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlan.#ctor(com.espertech.esper.epl.join.plan.QueryPlanIndex[],com.espertech.esper.epl.join.plan.QueryPlanNode[])">
            <summary> Ctor.</summary>
            <param name="indexSpecs">specs for indexes to create
            </param>
            <param name="execNodeSpecs">specs for execution nodes to create
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlan.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryPlan.IndexSpecs">
            <summary> Return index specs.</summary>
            <returns> index specs
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryPlan.ExecNodeSpecs">
            <summary> Return execution node specs.</summary>
            <returns> execution node specs
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryGraphKey">
            <summary>
            Key consisting of 2 integer stream numbers, for use by <see cref="T:com.espertech.esper.epl.join.plan.QueryGraph"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraphKey.#ctor(System.Int32,System.Int32)">
            <summary>Ctor.</summary>
            <param name="streamOne">from stream</param>
            <param name="streamTwo">to stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraphKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraphKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraphKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder">
             <summary>
             2 Stream query strategy/execution tree
             (stream 0)         Lookup in stream 1
             (stream 1)         Lookup in stream 0
             ------ Example 1   a 3 table join
            
             " where streamA.id = streamB.id " +
             "   and streamB.id = streamC.id";
             => Index propery names for each stream
             for stream 0 to 4 = "id"
             => join order, ie.
             for stream 0 = {1, 2}
             for stream 1 = {factor [0,2]}
             for stream 2 = {1, 0}
             => IndexKeyGen optionalIndexKeyGen, created by nested query plan nodes
             3 Stream query strategy
             (stream 0)          Nested iteration
             Lookup in stream 1        Lookup in stream 2
             (stream 1)         Factor
             Lookup in stream 0        Lookup in stream 2
             (stream 2)         Nested iteration
             Lookup in stream 1        Lookup in stream 0
             ------ Example 2  a 4 table join
            
             " where streamA.id = streamB.id " +
             "   and streamB.id = streamC.id";
             "   and streamC.id = streamD.id";
             => join order, ie.
             for stream 0 = {1, 2, 3}
             for stream 1 = {factor [0,2], use 2 for 3}
             for stream 2 = {factor [1,3], use 1 for 0}
             for stream 3 = {2, 1, 0}
             concepts... nested iteration, inner loop
             select * from s1, s2, s3, s4 where s1.id=s2.id and s2.id=s3.id and s3.id=s4.id
             (stream 0)              Nested iteration
             Lookup in stream 1        Lookup in stream 2        Lookup in stream 3
             (stream 1)              Factor
             lookup in stream 0                 Nested iteration
             Lookup in stream 2        Lookup in stream 3
             (stream 2)              Factor
             lookup in stream 3                 Nested iteration
             Lookup in stream 1        Lookup in stream 0
             (stream 3)              Nested iteration
             Lookup in stream 2        Lookup in stream 1        Lookup in stream 0
             ------ Example 4  a 4 table join, orphan table
            
             " where streamA.id = streamB.id " +
             "   and streamB.id = streamC.id"; (no table D join criteria)
             ------ Example 5  a 3 table join with 2 indexes for stream B
            
             " where streamA.A1 = streamB.B1 " +
             "   and streamB.B2 = streamC.C1"; (no table D join criteria)
             <para>
             Builds a query plan for 3 or more streams in a join.
             </para>
             </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.Build(com.espertech.esper.epl.join.plan.QueryGraph,com.espertech.esper.events.EventType[])">
            <summary>
            Build a query plan based on the stream property relationships indicated in queryGraph.
            </summary>
            <param name="queryGraph">navigation info between streams</param>
            <param name="typesPerStream">The types per stream.</param>
            <returns>query plan</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.CreateStreamPlan(System.Int32,System.Int32[],com.espertech.esper.epl.join.plan.QueryGraph,com.espertech.esper.epl.join.plan.QueryPlanIndex[],com.espertech.esper.events.EventType[])">
            <summary>
            Walks the chain of lookups and constructs lookup strategy and plan specification based
            on the index specifications.
            </summary>
            <param name="lookupStream">the stream to construct the query plan for</param>
            <param name="bestChain">
            the chain that the lookup follows to make best use of indexes
            </param>
            <param name="queryGraph">the repository for key properties to indexes</param>
            <param name="indexSpecsPerStream">specifications of indexes</param>
            <param name="typesPerStream">event types for each stream</param>
            <returns>NestedIterationNode with lookups attached underneath</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.CreateLookupPlan(com.espertech.esper.epl.join.plan.QueryGraph,System.Int32,System.Int32,com.espertech.esper.epl.join.plan.QueryPlanIndex,com.espertech.esper.events.EventType[])">
            <summary>
            Create the table lookup plan for a from-stream to look up in an indexed stream
            using the columns supplied in the query graph and looking at the actual indexes available
            and their index number.
            </summary>
            <param name="queryGraph">contains properties joining the 2 streams</param>
            <param name="currentLookupStream">stream to use key values from</param>
            <param name="indexedStream">stream to look up in</param>
            <param name="indexSpecs">
            index specification defining indexes to be created for stream
            </param>
            <param name="typesPerStream">event types for each stream</param>
            <returns>
            plan for performing a lookup in a given table using one of the indexes supplied
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.ComputeBestPath(System.Int32,com.espertech.esper.epl.join.plan.QueryGraph)">
            <summary>
            Compute a best chain or path for lookups to take for the lookup stream passed in and the query
            property relationships.
            The method runs through all possible permutations of lookup path <see cref="T:com.espertech.esper.collection.NumberSetPermutationEnumeration"/>
            until a path is found in which all streams can be accessed via an index.
            If not such path is found, the method returns the path with the greatest depth, ie. where
            the first one or more streams are index accesses.
            If no depth other then zero is found, returns the default nesting order.
            </summary>
            <param name="lookupStream">stream to Start look up</param>
            <param name="queryGraph">navigability between streams</param>
            <returns>chain and chain depth</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.ComputeNavigableDepth(System.Int32,System.Int32[],com.espertech.esper.epl.join.plan.QueryGraph)">
            <summary>
            Given a chain of streams to look up and indexing information, compute the index within the
            chain of the first non-index lookup.
            </summary>
            <param name="lookupStream">stream to Start lookup for</param>
            <param name="nextStreams">list of stream numbers next in lookup</param>
            <param name="queryGraph">indexing information</param>
            <returns>
            value between 0 and (nextStreams.Length - 1)
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.BuildNStreamDefaultQuerySpec(com.espertech.esper.events.EventType[])">
            <summary>
            Returns query plan based on all unindexed full table lookups and lookups based
            on a simple nesting order.
            </summary>
            <param name="eventTypes">stream event types</param>
            <returns>query plan</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.BuildDefaultNestingOrder(System.Int32,System.Int32)">
            <summary>
            Returns default nesting order for a given number of streams for a certain stream.
            Example: numStreams = 5, forStream = 2, result = {0, 1, 3, 4}
            The resulting array has all streams except the forStream, in ascdending order.
            </summary>
            <param name="numStreams">number of streams</param>
            <param name="forStream">stream to generate a nesting order for</param>
            <returns>
            int array with all stream numbers Starting at 0 to (numStreams - 1) leaving the
            forStream out
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.BestChainResult">
            <summary> Encapsulates the chain information.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.BestChainResult.#ctor(System.Int32,System.Int32[])">
            <summary> Ctor.</summary>
            <param name="depth">depth this chain resolves into a indexed lookup
            </param>
            <param name="chain">chain for nested lookup
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.BestChainResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.BestChainResult.Depth">
            <summary>
            Returns depth of lookups via index in chain.
            </summary>
            <value>The depth.</value>
            <returns> depth
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.BestChainResult.Chain">
            <summary>
            Returns chain of stream numbers.
            </summary>
            <value>The chain.</value>
            <returns> array of stream numbers
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.IndexedTableLookupPlan">
            <summary>
             Plan to perform an indexed table lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.IndexedTableLookupPlan.#ctor(System.Int32,System.Int32,System.Int32,System.String[])">
            <summary> Ctor.</summary>
            <param name="lookupStream">stream that generates event to look up for
            </param>
            <param name="indexedStream">stream to index table lookup
            </param>
            <param name="indexNum">index number for the table containing the full unindexed contents
            </param>
            <param name="keyProperties">properties to use in lookup event to access index
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.IndexedTableLookupPlan.MakeStrategy(com.espertech.esper.epl.join.table.EventTable[][],com.espertech.esper.events.EventType[])">
            <summary>
            Instantiates the lookup plan into a execution strategy for the lookup.
            </summary>
            <param name="indexesPerStream">tables for each stream</param>
            <param name="eventTypes">types of events in stream</param>
            <returns>lookup strategy instance</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.IndexedTableLookupPlan.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.IndexedTableLookupPlan.KeyProperties">
            <summary> Returns property names to use for lookup in index.</summary>
            <returns> property names.
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.HistoricalDataQueryStrategy">
            <summary> Query strategy for use with <see cref="T:com.espertech.esper.view.HistoricalEventViewable"/>
            to perform lookup for a given stream using the poll method on a viewable.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.HistoricalDataQueryStrategy.#ctor(System.Int32,System.Int32,com.espertech.esper.view.HistoricalEventViewable,System.Boolean,com.espertech.esper.epl.expression.ExprEqualsNode,com.espertech.esper.epl.join.HistoricalIndexLookupStrategy,com.espertech.esper.epl.join.PollResultIndexingStrategy)">
            <summary>Ctor.</summary>
            <param name="myStreamNumber">is the strategy's stream number</param>
            <param name="historicalStreamNumber">is the stream number of the view to be polled</param>
            <param name="historicalEventViewable">is the view to be polled from</param>
            <param name="isOuterJoin">is this is an outer join</param>
            <param name="outerJoinCompareNode">is the node to perform the on-comparison for outer joins</param>
            <param name="indexLookupStrategy">the strategy to use for limiting the cache result setto only those rows that match filter criteria</param>
            <param name="pollResultIndexingStrategy">the strategy for indexing poll-results such that astrategy can use the index instead of a full table scan to resolve rows</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.HistoricalDataQueryStrategy.Lookup(com.espertech.esper.events.EventBean[],com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary>
            Look up events returning tuples of joined events.
            </summary>
            <param name="lookupEvents">events to use to perform the join</param>
            <param name="joinSet">result join tuples of events</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.FullTableScanLookupStrategy">
            <summary>
            Lookup on an unindexed table returning the full table as matching events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.FullTableScanLookupStrategy.#ctor(com.espertech.esper.epl.join.table.UnindexedEventTable)">
            <summary>Ctor.</summary>
            <param name="eventIndex">table to use</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.FullTableScanLookupStrategy.Lookup(com.espertech.esper.events.EventBean)">
            <summary>
            Lookups the specified ev.
            </summary>
            <param name="ev">The ev.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.FullTableScanLookupStrategy.EventIndex">
            <summary>
            Returns the associated table. 
            </summary>
            <returns>table for lookup</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprStddevNode">
            <summary>
            Represents the stddev(...) aggregate function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprStddevNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprStddevNode.ValidateAggregationChild(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Gives the aggregation node a chance to validate the sub-expression types.
            </summary>
            <param name="streamTypeService">is the types per stream</param>
            <param name="methodResolutionService">used for resolving method and function names</param>
            <returns>aggregation function use</returns>
            <throws>ExprValidationException when expression validation failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprStddevNode.EqualsNodeAggregate(com.espertech.esper.epl.expression.ExprAggregateNode)">
            <summary>
            Return true if a expression aggregate node semantically equals the current node, or false if not.
            For use by the EqualsNode implementation which compares the distinct flag.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStddevNode.AggregationFunctionName">
            <summary>
            Returns the aggregation function name for representation in a generate expression string.
            </summary>
            <value></value>
            <returns> aggregation function name
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeSubselectVisitor">
            <summary>Visitor that collects <see cref="T:com.espertech.esper.epl.expression.ExprSubselectNode"/> instances.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeSubselectVisitor.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeSubselectVisitor.Subselects">
            <summary>Returns a list of lookup expression nodes.</summary>
            <returns>lookup nodes</returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DbDriver">
            <summary>
            Database driver semantics are captured in the DbDriver.  Each
            driver instance is completely separate from other instances.
            Drivers encapsulate management of the connection, so specific
            properties are given to it so that it can build its connection
            string.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DbDriver.CreateCommand(System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment},com.espertech.esper.epl.db.ColumnSettings)">
            <summary>
            Creates a database driver command from a collection of fragments.
            </summary>
            <param name="sqlFragments">The SQL fragments.</param>
            <param name="metadataSettings">The metadata settings.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DbDriver.CreateConnection">
            <summary>
            Creates a database connection; this should be used sparingly if possible.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriver.DefaultMetaOriginPolicy">
            <summary>
            Gets the default meta origin policy.
            </summary>
            <value>The default meta origin policy.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriver.Properties">
            <summary>
            Gets or sets the properties for the driver.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriver.ConnectionString">
            <summary>
            Gets the connection string associated with this driver.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.NumIntegerSumAggregator">
            <summary>Sum for any number value.</summary>
        </member>
        <member name="T:com.espertech.esper.core.EPStatementStartMethod">
            <summary>Starts and provides the stop method for EPL statements. </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementStartMethod.#ctor(com.espertech.esper.epl.spec.StatementSpecCompiled,com.espertech.esper.core.EPServicesContext,com.espertech.esper.core.StatementContext)">
            <summary>Ctor. </summary>
            <param name="statementSpec">is a container for the definition of all statement constructs thatmay have been used in the statement, i.e. if defines the select clauses, insert into, outer joins etc. </param>
            <param name="services">is the service instances for dependency injection</param>
            <param name="statementContext">is statement-level information and statement services</param>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementStartMethod.Start(System.Boolean)">
            <summary>Starts the EPL statement. </summary>
            <returns>a viewable to attach to for listening to events, and a stop method to invoke to clean up</returns>
            <param name="isNewStatement">indicator whether the statement is new or a stop-restart statement</param>
            <throws>ExprValidationException when the expression validation fails</throws>
            <throws>ViewProcessingException when views cannot be started</throws>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementStartMethod.DetermineStreamNames(System.Collections.Generic.IList{com.espertech.esper.epl.spec.StreamSpecCompiled})">
            <summary>Returns a stream name assigned for each stream, generated if none was supplied. </summary>
            <param name="streams">stream specifications</param>
            <returns>array of stream names</returns>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementStartMethod.ValidateNodes(com.espertech.esper.epl.spec.StatementSpecCompiled,com.espertech.esper.core.StatementContext,com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.ViewResourceDelegate)">
            <summary>Validate filter and join expression nodes.</summary>
            <param name="statementSpec">the compiled statement</param>
            <param name="statementContext">the statement services</param>
            <param name="typeService">the event types for streams</param>
            <param name="viewResourceDelegate">the delegate to verify expressions that use view resources</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineSettingsService">
            <summary>
            Service for engine-level settings around threading and concurrency.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineSettingsService.#ctor(com.espertech.esper.client.ConfigurationEngineDefaults,System.Collections.Generic.IList{System.Uri})">
            <summary>Ctor.</summary>
            <param name="config">is the configured defaults</param>
            <param name="plugInEventTypeResolutionURIs">is URIs for resolving the event name against plug-inn event representations, if any</param>
        </member>
        <member name="P:com.espertech.esper.epl.core.EngineSettingsService.EngineSettings">
            <summary>
            Gets the engine settings.
            </summary>
            <value>The engine settings.</value>
        </member>
        <member name="P:com.espertech.esper.epl.core.EngineSettingsService.PlugInEventTypeResolutionURIs">
            <summary>
            Gets or sets the URIs for resolving the event name against plug-in event representations, if any.
            </summary>
            <value>The plug in event type resolution UR is.</value>
            <returns>URIs</returns>
        </member>
        <member name="T:com.espertech.esper.core.ConfigurationOperationsImpl">
            <summary>
            Provides runtime engine configuration operations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.#ctor(com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.epl.core.EngineSettingsService,com.espertech.esper.events.vaevent.ValueAddEventService)">
            <summary>
            Ctor.
            </summary>
            <param name="eventAdapterService">is the event wrapper and type service</param>
            <param name="engineImportService">for imported aggregation functions and static functions</param>
            <param name="variableService">provides access to variable values</param>
            <param name="engineSettingsService">some engine settings are writable</param>
            <param name="valueAddEventService">update event handling</param>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.AddEventTypeAutoAlias(System.String)">
            <summary>
            Adds a namespace where event types reside in.
            <para>
            This setting allows an application to place all it's events into one or more namespaces
            and then declare these packages via this method. The engine attempts to resolve an event
            type alias to a class residing in each declared package.
            </para>
            	<para>
            For example, in the statement "select * from MyEvent" the engine attempts to load class "namespace.MyEvent"
            and if successful, uses that class as the event type.
            </para>
            </summary>
            <param name="namespace">the namespace</param>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.AddPlugInAggregationFunction(System.String,System.String)">
            <summary>
            Adds a plug-in aggregation function given a function name and an aggregation class name.
            <p>
            The aggregation class must : the base class <see cref="T:com.espertech.esper.epl.agg.AggregationSupport"/>.
            </p>
            	<p>
            The same function name cannot be added twice.
            </p>
            </summary>
            <param name="functionName">is the new aggregation function name</param>
            <param name="aggregationClassName">is the fully-qualified class name of the class implementing the aggregation function</param>
            <throws>
            ConfigurationException is thrown to indicate a problem adding aggregation function
            </throws>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.AddImport(System.String)">
            <summary>
            Adds a package or class to the list of automatically-imported classes and packages.
            <p>
            To import a single class offering a static method, simply supply the fully-qualified name of the class
            and use the syntax <code>classname.Methodname(...)</code>
            	</p>
            	<p>
            To import a whole package and use the <code>classname.Methodname(...)</code> syntax, specifiy a package
            with wildcard, such as <code>com.mycompany.staticlib.*</code>.
            </p>
            </summary>
            <param name="importName">is a fully-qualified class name or a package name with wildcard</param>
            <throws>
            ConfigurationException if incorrect package or class names are encountered
            </throws>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.IsEventTypeAliasExists(System.String)">
            <summary>
            Checks if an eventTypeAlias has already been registered for that alias name.
            </summary>
            <param name="eventTypeAlias">the alias name</param>
            <returns>true if already registered</returns>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.AddEventTypeAlias(System.String,System.String)">
            <summary>
            Adds the event type alias.
            </summary>
            <param name="eventTypeAlias">The event type alias.</param>
            <param name="eventTypeName">Name of the event type.</param>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.AddEventTypeAlias(System.String,System.Type)">
            <summary>
            Add an alias for an event type represented by plain-old object events.
            <p>
            Allows a second alias to be added for the same type.
            Does not allow the same alias to be used for different types.
            </p>
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="eventType">is the event type for which to create the alias</param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.AddEventTypeAliasSimpleName(System.Type)">
            <summary>
            Add an alias for an event type represented by plain-old object events,
            using the simple name of the type as the alias.
            <para>
            For example, if your class is "com.mycompany.MyEvent", then this method
            adds the alias "MyEvent" for the class.
            </para>
            	<para>
            Allows a second alias to be added for the same type.
            Does not allow the same alias to be used for different types.
            </para>
            </summary>
            <param name="eventType">the event type for which to create the alias from the class simple name</param>
            <throws>ConfigurationException if the alias is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.AddEventTypeAlias(System.String,com.espertech.esper.compat.Properties)">
            <summary>
            Add an alias for an event type that represents DataMap events.
            <p>
            Allows a second alias to be added for the same type.
            Does not allow the same alias to be used for different types.
            </p>
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the type
            (fully qualified classname) of its value in Map event instances.</param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.AddEventTypeAlias(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Add an alias for an event type that represents DataMap events, taking a Map of
            event property and class name as a parameter.
            <p>
            This method is provided for convenience and is same in function to method
            taking a Properties object that contain fully qualified class name as values.
            </p>
            	<p>
            Allows a second alias to be added for the same type.
            Does not allow the same alias to be used for different types.
            </p>
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the type of its value in the Map object</param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.AddEventTypeAliasNestable(System.String,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Add an alias for an event type that represents DataMap events, and for which each property may
            itself be a Map of further properties,with unlimited nesting levels.
            <p>
            Each entry in the type mapping must contain the String property nameand either a Class or further DataMap value.
            </p>
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the type(fully qualified classname) of its value in Map event instances.</param>
            <throws>ConfigurationException if the alias is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.AddNestableEventTypeAlias(System.String,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Add an alias for an event type that represents nestable strong-typed Map events,
            taking a Map of event property and class name as a parameter.
            <para/>
            This method takes a Map of String property names and Object property type. Each
            Object property type can either be a Type to denote a built-in type or application object,
            or can itself also be a Map&lt;String, Object&gt; to describe a property that itself is a
            map of further properties.
            <para/>
            This method is provided for convenience and is same in function to method taking a Properties
            object that contain fully qualified class name as values.
            <para/>
            Allows a second alias to be added for the same type.Does not allow the same alias to be used
            for different types.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the type of its value in the Map object</param>
            <throws>ConfigurationException if the alias is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.AddEventTypeAlias(System.String,com.espertech.esper.client.ConfigurationEventTypeXMLDOM)">
            <summary>
            Add an alias for an event type that represents org.w3c.dom.Node events.
            <p>
            Allows a second alias to be added for the same type.
            Does not allow the same alias to be used for different types.
            </p>
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="xmlDOMEventTypeDesc">descriptor containing property and mapping information for XML-DOM events</param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.core.ConfigurationOperationsImpl.CreatePropertyTypes(com.espertech.esper.compat.Properties)">
            <summary>
            Creates the property types.
            </summary>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.DebugList`1">
            <summary>
            Used to debug calls to a list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.DebugList`1"/> class.
            </summary>
            <param name="subList">The sub list.</param>
        </member>
        <member name="P:com.espertech.esper.compat.DebugList`1.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:com.espertech.esper.compat.DebugList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            
            <returns>
            The element at the specified index.
            </returns>
            
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
        </member>
        <member name="P:com.espertech.esper.compat.DebugList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:com.espertech.esper.compat.DebugList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="T:com.espertech.esper.client.soda.SubqueryExpression">
            <summary>
            Subquery-expression returns values returned by a lookup modelled by a further <see cref="T:com.espertech.esper.client.soda.EPStatementObjectModel"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SubqueryExpression.#ctor(com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="model">is the lookup statement object model</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SubqueryExpression.Model">
            <summary>Gets or sets the lookup statement object model.</summary>
            <returns>lookup model</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.OutputLimitUnit">
            <summary>
            Unit for output rate limiting.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitUnit.MINUTES">
            <summary>The minutes unit.</summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitUnit.SECONDS">
            <summary>The seconds unit.</summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitUnit.EVENTS">
            <summary>The number of events unit.</summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.MinProjectionExpression">
            <summary>
            Minimum of the (distinct) values returned by an expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinProjectionExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without inner expression
            </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project.</summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.MinProjectionExpression.IsDistinct">
            <summary>True if the projection considers distinct values only.</summary>
            <returns>true if distinct</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.AvedevProjectionExpression">
            <summary>
            Mean deviation of the (distinct) values returned by an expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AvedevProjectionExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without inner expression.
            </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.AvedevProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project.</summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.AvedevProjectionExpression.IsDistinct">
            <summary>Gets or sets the true if the projection considers distinct values only.</summary>
            <returns>true if distinct</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.FastPropertyDescriptor">
            <summary>
            Provides a property descriptor that is obtained through a
            property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates whether the value of this property should be
            persisted.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Call the accessor method
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Can not override values with the simple accessor model
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value of the property
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.GetHashCode">
            <summary>
            Returns a hahscode for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.#ctor(System.String,CGLib.FastProperty)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.#ctor(CGLib.FastProperty)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastPropertyDescriptor.IsReadOnly">
            <summary>
            Indicates whether or not the descriptor is readonly
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of component this property is bound to
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastPropertyDescriptor.PropertyType">
            <summary>
            Gets the return type of the property
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.EventSenderURIDesc">
            <summary>
            Descriptor for URI-based event sender for plug-in event representations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventSenderURIDesc.#ctor(com.espertech.esper.plugin.PlugInEventBeanFactory,System.Uri,System.Uri)">
            <summary>Ctor. </summary>
            <param name="beanFactory">factory for events</param>
            <param name="resolutionURI">URI use for resolution</param>
            <param name="representationURI">URI of event representation</param>
        </member>
        <member name="P:com.espertech.esper.events.EventSenderURIDesc.ResolutionURI">
            <summary>URI used for resolution. </summary>
            <returns>resolution URI</returns>
        </member>
        <member name="P:com.espertech.esper.events.EventSenderURIDesc.RepresentationURI">
            <summary>URI of event representation. </summary>
            <returns>URI</returns>
        </member>
        <member name="P:com.espertech.esper.events.EventSenderURIDesc.BeanFactory">
            <summary>Event wrapper for event objects. </summary>
            <returns>factory for events</returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableVersionThreadEntry">
            <summary>
            Thread-specific state in regards to variable versions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableVersionThreadEntry.#ctor(System.Int32,com.espertech.esper.compat.Map{System.Int32,System.Object})">
            <summary>Ctor.</summary>
            <param name="version">
            current version number of the variables visible to thread
            </param>
            <param name="uncommitted">
            the uncommitted values of variables for the thread, if any
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableVersionThreadEntry.Version">
            <summary>Gets or sets the version visible for a thread.</summary>
            <returns>version number</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableVersionThreadEntry.Uncommitted">
            <summary>
            Gets or sets a map of variable number and uncommitted value, or empty
            map or null if none exist
            </summary>
            <returns>uncommitted values</returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.OnSetVariableView">
            <summary>
            A view that handles the setting of variables upon receipt of a triggering event.
            <para>
            Variables are updated atomically and thus a separate commit actually updates the
            new variable values, or a rollback if an exception occured during validation.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.OnSetVariableView.#ctor(com.espertech.esper.epl.spec.OnTriggerSetDesc,com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.core.StatementResultService)">
            <summary>Ctor.</summary>
            <param name="desc">specification for the on-set statement</param>
            <param name="eventAdapterService">for creating statements</param>
            <param name="variableService">for setting variables</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
            <throws>ExprValidationException if the assignment expressions are invalid</throws>
        </member>
        <member name="T:com.espertech.esper.epl.join.PollResultIndexingStrategyNoIndex">
            <summary>
            Strategy of indexing that simply builds an unindexed table of poll results.
            
            For use when caching is disabled or when no proper index could be build because no where-clause or on-clause exists or
            these clauses don't yield indexable columns on analysis.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.PollResultIndexingStrategy">
            <summary>
            A strategy for converting a poll-result into a potentially indexed table.
            
            Some implementations may decide to not index the poll result and simply hold
            a reference to the result. Other implementations may use predetermined index
            properties to index the poll result for faster lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.PollResultIndexingStrategy.Index(System.Collections.Generic.IList{com.espertech.esper.events.EventBean},System.Boolean)">
            <summary>Build and index of a poll result.</summary>
            <param name="pollResult">result of a poll operation</param>
            <param name="isActiveCache">
            true to indicate that caching is active and therefore index building makes sense as
            the index structure is not a throw-away.
            </param>
            <returns>indexed collection of poll results</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.HistoricalIndexLookupStrategyIndex">
            <summary>
            Index lookup strategy into a poll-based cache result.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.HistoricalIndexLookupStrategyIndex.#ctor(com.espertech.esper.events.EventType,System.String[])">
            <summary>Ctor.</summary>
            <param name="eventType">event type to expect for lookup</param>
            <param name="properties">key properties</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.MethodPollingViewableFactory">
            <summary>
            Factory for method-invocation data provider streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingViewableFactory.CreatePollMethodView(System.Int32,com.espertech.esper.epl.spec.MethodStreamSpec,com.espertech.esper.events.EventAdapterService,com.espertech.esper.core.EPStatementHandle,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.schedule.SchedulingService,com.espertech.esper.schedule.ScheduleBucket)">
            <summary>
            Creates a method-invocation polling view for use as a stream that calls a method, or pulls results from cache.
            </summary>
            <param name="streamNumber">the stream number</param>
            <param name="methodStreamSpec">defines the class and method to call</param>
            <param name="eventAdapterService">for creating event types and events</param>
            <param name="epStatementHandle">for time-based callbacks</param>
            <param name="methodResolutionService">for resolving classes and imports</param>
            <param name="engineImportService">for resolving configurations</param>
            <param name="schedulingService">
            for scheduling callbacks in expiry-time based caches
            </param>
            <param name="scheduleBucket">for schedules within the statement</param>
            <returns>pollable view</returns>
            <throws>
            ExprValidationException if the expressions cannot be validated or the method descriptor
            has incorrect class and method names, or parameter number and types don't match
            </throws>
        </member>
        <member name="T:com.espertech.esper.core.ResultDeliveryStrategyMap">
            <summary>A result delivery strategy that uses an "update" method that accepts a pair of map array. </summary>
        </member>
        <member name="M:com.espertech.esper.core.ResultDeliveryStrategyMap.#ctor(System.Object,System.Reflection.MethodInfo,System.String[])">
            <summary>Ctor. </summary>
            <param name="subscriber">the object to deliver to</param>
            <param name="method">the delivery method</param>
            <param name="columnNames">the column names for the map</param>
        </member>
        <member name="T:com.espertech.esper.compat.FactoryDelegate`1">
            <summary>
            Factory pattern delegate that creates an object of type T.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.VariableValueException">
            <summary>Indicates that a variable value could not be assigned. </summary>
        </member>
        <member name="M:com.espertech.esper.client.VariableValueException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">supplies exception details</param>
        </member>
        <member name="T:com.espertech.esper.client.DataCacheDesc">
            <summary>
             Marker for different cache settings.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.LRUCacheDesc">
            <summary>
            LRU cache settings.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.LRUCacheDesc.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="size">is the maximum cache size
            </param>
        </member>
        <member name="M:com.espertech.esper.client.LRUCacheDesc.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.LRUCacheDesc.Size">
            <summary> Returns the maximum cache size.</summary>
            <returns> max cache size
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.ExpiryTimeCacheDesc">
            <summary>
             Expiring cache settings.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ExpiryTimeCacheDesc.#ctor(System.Double,System.Double,com.espertech.esper.client.ConfigurationCacheReferenceType)">
            <summary>
            Ctor.
            </summary>
            <param name="maxAgeSeconds">is the maximum age in seconds</param>
            <param name="purgeIntervalSeconds">is the purge interval</param>
            <param name="configurationCacheReferenceType">cacheReferenceType the reference type may allow garbage collection to remove entries from
            cache unless HARD reference type indicates otherwise</param>
        </member>
        <member name="M:com.espertech.esper.client.ExpiryTimeCacheDesc.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ExpiryTimeCacheDesc.MaxAgeSeconds">
            <summary> Returns the maximum age in seconds.</summary>
            <returns> number of seconds
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ExpiryTimeCacheDesc.PurgeIntervalSeconds">
            <summary> Returns the purge interval length.</summary>
            <returns> purge interval in seconds
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ExpiryTimeCacheDesc.ConfigurationCacheReferenceType">
            <summary>
            Returns the enumeration whether hard, soft or weak reference type are used
            to control whether the garbage collection can remove entries from cache.
            </summary>
            <value>The type of the cache reference.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInAggregationFunction">
            <summary>
            Configuration information for plugging in a custom aggregation function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationPlugInAggregationFunction.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInAggregationFunction.Name">
            <summary>
            Gets or sets the aggregation name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInAggregationFunction.FunctionClassName">
            <summary>
            Gets or sets the aggregation function name.
            </summary>
            <value>The name of the function class.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeLegacy">
            <summary>
            Configuration information for legacy event types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeLegacy.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeLegacy.AddMethodProperty(System.String,System.String)">
            <summary>
            Adds the named event property backed by the named accessor method.
            The accessor method is expected to be a public method with no parameters
            for simple event properties, or with a single integer parameter for indexed
            event properties, or with a single String parameter for mapped event properties.
            </summary>
            <param name="name">is the event property name</param>
            <param name="accessorMethod">is the accessor method name.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeLegacy.AddFieldProperty(System.String,System.String)">
            <summary>
            Adds the named event property backed by the named accessor field.
            </summary>
            <param name="name">is the event property name</param>
            <param name="accessorField">is the accessor field underlying the name</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.AccessorStyle">
            <summary>
            Gets or sets the accessor style.
            </summary>
            <value>The accessor style.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.CodeGeneration">
            <summary>
            Gets or sets the code generation.  Thus controls whether or
            not the engine generates code for access to event property values.
            </summary>
            <value>The code generation.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.PropertyResolutionStyle">
            <summary>
            Gets or sets the property resolution style.
            </summary>
            <value>The property resolution style.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.MethodProperties">
            <summary>
            Returns a list of descriptors specifying explicitly configured method names
            and their property name.
            </summary>
            <returns> list of explicit method-access descriptors
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.FieldProperties">
            <summary> Returns a list of descriptors specifying explicitly configured field names
            and their property name.
            </summary>
            <returns> list of explicit field-access descriptors
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeLegacy.AccessorStyleEnum">
            <summary>
            Accessor style defines the methods of a class that are automatically exposed via event property.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEventTypeLegacy.AccessorStyleEnum.NATIVE">
            <summary> Expose properties only, plus explicitly configured properties.</summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEventTypeLegacy.AccessorStyleEnum.EXPLICIT">
            <summary> Expose only the explicitly configured properties and public members as event properties.</summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEventTypeLegacy.AccessorStyleEnum.PUBLIC">
            <summary> Expose all public properties and public members as event properties, plus explicitly configured properties.</summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeLegacy.CodeGenerationEnum">
            <summary> Enum to control code generation.</summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEventTypeLegacy.CodeGenerationEnum.ENABLED">
            <summary> Enables code generation.</summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEventTypeLegacy.CodeGenerationEnum.DISABLED">
            <summary> Dispables code generation.</summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyFieldPropDesc">
            <summary>
            Encapsulates information about an accessor field backing a named event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyFieldPropDesc.#ctor(System.String,System.String)">
            <summary> Ctor.</summary>
            <param name="name">is the event property name
            </param>
            <param name="accessorFieldName">is the accessor field name
            </param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyFieldPropDesc.Name">
            <summary> Returns the event property name.</summary>
            <returns> event property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyFieldPropDesc.AccessorFieldName">
            <summary> Returns the accessor field name.</summary>
            <returns> accessor field name
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyMethodPropDesc">
            <summary>
            Encapsulates information about an accessor method backing a named event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyMethodPropDesc.#ctor(System.String,System.String)">
            <summary> Ctor.</summary>
            <param name="name">is the event method name
            </param>
            <param name="accessorMethodName">is the accessor method name
            </param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyMethodPropDesc.Name">
            <summary> Returns the event property name.</summary>
            <returns> event property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyMethodPropDesc.AccessorMethodName">
            <summary> Returns the accessor method name.</summary>
            <returns> accessor method name
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewFieldEnum">
            <summary>
            Enumerates the valid values for each view's public fields. The name of the field or property can be used
            to obtain values from the view rather than using the hardcoded String value for the field.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.univariate_STATISTICS__DATAPOINTS">
            <summary> Count.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.univariate_STATISTICS__TOTAL">
            <summary> Sum.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.UNIVARIATE_STATISTICS__AVERAGE">
            <summary> Average.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.UNIVARIATE_STATISTICS__STDDEVPA">
            <summary> Standard dev population.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.UNIVARIATE_STATISTICS__STDDEV">
            <summary> Standard dev.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.UNIVARIATE_STATISTICS__VARIANCE">
            <summary> Variance.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.WEIGHTED_AVERAGE__AVERAGE">
            <summary> Weighted average.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.CORRELATION__CORRELATION">
            <summary> Correlation.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__SLOPE">
            <summary> Slope.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__YINTERCEPT">
            <summary> Y-intercept.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.SIZE_VIEW__SIZE">
            <summary> Size.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.MULTIDIM_OLAP__CUBE">
            <summary> Cube.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.MULTIDIM_OLAP__MEASURES">
            <summary> Measures in an OLAP cube.</summary>
        </member>
        <member name="P:com.espertech.esper.view.ViewFieldEnum.Name">
            <summary> Returns the field name of fields that contain data within a view's posted objects.</summary>
            <returns> field name for use with DataSchema to obtain values out of objects.
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewFactorySupport">
            <summary>
            Abstract base class for view factories that do not make re-useable views and that do
            not share view resources with expression nodes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactorySupport.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.DimensionImpl">
            <summary>
            Implements the dimension interface. Hold the data required for
            serving up dimension data.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.DimensionImpl.#ctor(System.String[])">
            <summary> Constructor.</summary>
            <param name="propertyNames">is the names of the event properties making up the dimension
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.DimensionImpl.setMembers(com.espertech.esper.view.stat.olap.DimensionMember[])">
            <summary> Set the members of the dimension.</summary>
            <param name="members">is an array of members of dimension
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.DimensionImpl.GetMembers">
            <summary>
            Returns the member values for the dimension.
            </summary>
            <returns>array of members</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.olap.DimensionImpl.PropertyNames">
            <summary>
            Returns the event property name or names providing the member values for the dimension.
            </summary>
            <value></value>
            <returns> array of property names
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.ParentAwareView">
            <summary>
            Interface for use by views to indicate that the view must couple to parent views.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.ParentAwareView.ParentAware">
            <summary>
            Sets a flag indicating that the view must couple to parent views.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.ProxyBufferObserver.#ctor(com.espertech.esper.view.internals.BufferObserverDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.view.internals.ProxyBufferObserver"/> class.
            </summary>
            <param name="d">The d.</param>
        </member>
        <member name="M:com.espertech.esper.view.internals.ProxyBufferObserver.NewData(System.Int32,com.espertech.esper.collection.FlushedEventBuffer,com.espertech.esper.collection.FlushedEventBuffer)">
            <summary>
            Receive new and old events from a stream.
            </summary>
            <param name="streamId">the stream number sending the events</param>
            <param name="newEventBuffer">buffer for new events</param>
            <param name="oldEventBuffer">buffer for old events</param>
        </member>
        <member name="T:com.espertech.esper.view.InitializableView">
            <summary>
            Views that require initialization after view instantiation and after view hook-up with the parent view
            can impleeent this interface and get invoked to initialize.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.InitializableView.Initialize">
            <summary>Initializes a view.</summary>
        </member>
        <member name="T:com.espertech.esper.view.ext.TimeOrderView">
            <summary>
            Window retaining timestamped events up to a given number of seconds such that
            older events that arrive later are sorted into the window and released in timestamp order.
            <para/>
            The insert stream consists of all arriving events. The remove stream consists of events in
            order of timestamp value as supplied by each event.
            <para/>
            Timestamp values on events should match engine time. The window compares engine time to timestamp value
            and releases events when the event's timestamp is less then engine time minus interval size (the
            event is older then the window tail).
            <para/>
            The view accepts 2 parameters. The first parameter is the field name to get the event timestamp value from,
            the second parameter defines the interval size.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ext.TimeOrderView.#ctor(com.espertech.esper.core.StatementContext,com.espertech.esper.view.ext.TimeOrderViewFactory,System.String,System.Int64,com.espertech.esper.view.ext.IStreamTimeOrderRandomAccess,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="optionalSortedRandomAccess">
            is the friend class handling the random access, if required by
            expressions
            </param>
            <param name="timeOrderViewFactory">for copying this view in a group-by</param>
            <param name="statementContext">the statement context</param>
            <param name="timestampFieldName">
            the property name of the event supplying timestamp values
            </param>
            <param name="intervalSize">the interval time length</param>
            <param name="isRemoveStreamHandling">
            if the view must handle the remove stream of parent views
            </param>
        </member>
        <member name="M:com.espertech.esper.view.ext.TimeOrderView.Expire">
            <summary>
            This method removes (expires) objects from the window and schedules a new callback for the
            time when the next oldest message would expire from the window.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.ext.TimeOrderView.Parent">
            <summary>
            Gets or sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.TimeOrderView.TimestampFieldName">
            <summary>Returns the timestamp property name.</summary>
            <returns>property name supplying timestamp values</returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.TimeOrderView.IntervalSize">
            <summary>Returns the time interval size.</summary>
            <returns>interval size</returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.TimeOrderView.GetOptionalSortedRandomAccess">
            <summary>
            Returns the friend handling the random access, cal be null if not required.
            </summary>
            <returns>random accessor to sort window contents</returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.TimeOrderView.IsEmpty">
            <summary>True to indicate the sort window is empty, or false if not empty.</summary>
            <returns>true if empty sort window</returns>
        </member>
        <member name="T:com.espertech.esper.util.URIUtil">
            <summary>Utility for inspecting and comparing Uri. </summary>
        </member>
        <member name="M:com.espertech.esper.util.URIUtil.IsOpaque(System.Uri)">
            <summary>
            Determines whether the specified URI is opaque.  A URI is opaque if
            is not hierarchical.  An example of an opaque URL is the mailto URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            	<c>true</c> if the specified URI is opaque; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.URIUtil.FilterSort(System.Uri,com.espertech.esper.compat.Map{System.Uri,System.Object})">
            <summary>
            Given a child Uri and a map of factory URIs, inspect the child Uri against
            the factory URIs and return a collection of entries for which the child Uri falls
            within or is equals to the factory Uri.
            </summary>
            <param name="child">is the child Uri to match against factory URIs</param>
            <param name="uris">is a map of factory Uri and an object</param>
            <returns>matching factory URIs, if any</returns>
        </member>
        <member name="T:com.espertech.esper.util.PlaceholderParseException">
            <summary> Exception to indicate a parse error in parsing placeholders.</summary>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParseException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">is the error message
            </param>
        </member>
        <member name="T:com.espertech.esper.type.ShortValue">
            <summary>
             Placeholder for a short-typed value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.ShortValue.ParseString(System.String)">
            <summary>Parses a string value as a short.</summary>
            <param name="value">to parse</param>
            <returns>short value</returns>
        </member>
        <member name="M:com.espertech.esper.type.ShortValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.ShortValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.ShortValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.ShortValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.ShortValue._Short">
            <summary>
            Set a short value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.timer.TimerCallback">
            <summary>
            Invoked by the internal clocking service at regular intervals.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.Quitable">
            <summary>
            Receiver for quit events for use by guards.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.Quitable.GuardQuit">
            <summary> Indicate guard quitted.</summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalEveryNode">
            <summary>
            This class represents an 'every' operator in the evaluation tree representing an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryNode.NewState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>
            Create the evaluation state node containing the truth value state for each operator in an
            event expression.
            </summary>
            <param name="parentNode">is the parent evaluator node that this node indicates a change in truth value to</param>
            <param name="beginState">is the container for events that makes up the Start state</param>
            <param name="context">is the handle to services required for evaluation</param>
            <param name="stateNodeId">is the new state object's identifier</param>
            <returns>
            state node containing the truth value state for the operator
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexRange">
            <summary>
            Index for filter parameter constants for the range operators (range open/closed/half).
            The implementation is based on the SortedDictionary implementation of SortedDictionary and stores only expression
            parameter values of type DoubleRange.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexRange.#ctor(System.String,com.espertech.esper.filter.FilterOperator,com.espertech.esper.events.EventType)">
            <summary> Constructs the index for matching ranges.</summary>
            <param name="attributeName">is the name of the event attribute field
            </param>
            <param name="filterOperator">is the type of range
            </param>
            <param name="eventType">is type of events handled
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexRange.Remove(System.Object)">
            <summary>
            Remove the event evaluation instance for the given constant. Returns true if
            the constant was found, or false if not.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock method must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">is the value supplied in the filter paremeter</param>
            <returns>
            true if found and removed, false if not found
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexRange.MatchEvent(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Matches the event.
            </summary>
            <param name="eventBean">The event bean.</param>
            <param name="matches">The matches.</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexRange.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:com.espertech.esper.filter.EventEvaluator"/> with the specified expression value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexRange.Count">
            <summary>
            Return the number of distinct filter parameter constants stored.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock method must supply a lock for this purpose.
            </summary>
            <value></value>
            <returns> Number of entries in index
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexRange.ReadWriteLock">
            <summary>
            Supplies the lock for protected access.
            </summary>
            <value></value>
            <returns> lock
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamExprMap">
            <summary>
            A two-sided map for filter parameters mapping filter expression nodes to filter parameters and
            back. For use in optimizing filter expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamExprMap.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamExprMap.Put(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.filter.FilterSpecParam)">
            <summary>
            Add a node and filter param.
            </summary>
            <param name="exprNode">is the node to add</param>
            <param name="param">is null if the expression node has not optimized form</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamExprMap.RemoveEntry(com.espertech.esper.filter.FilterSpecParam)">
            <summary>
            Removes a filter parameter and it's associated expression node
            </summary>
            <param name="param">is the parameter to remove</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamExprMap.RemoveValue(com.espertech.esper.filter.FilterSpecParam)">
            <summary>Remove a filter parameter leaving the expression node in place.</summary>
            <param name="param">filter parameter to remove</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamExprMap.UnassignedExpressions">
            <summary>
            Returns all expression nodes for which no filter parameter exists.
            </summary>
            <value>The unassigned expressions.</value>
            <returns>list of expression nodes</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamExprMap.FilterParams">
            <summary>
            Returns all filter parameters.
            </summary>
            <value>The filter params.</value>
            <returns>filter parameters</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterEventHandler">
            <summary>
            Indicate that an event was evaluated by the <see cref="T:com.espertech.esper.filter.FilterService"/>
            which matches the filter specification <see cref="T:com.espertech.esper.filter.FilterSpecCompiled"/>
            associated with this callback.
            </summary>
            <param name="_event">the event received that matches the filter specification</param>
        </member>
        <member name="T:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor">
            <summary>
            Description of IndexedAccessorPropertyDescriptor.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.IndexedPropertyDescriptor">
            <summary>
            A property descriptor that takes an index.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedPropertyDescriptor.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedPropertyDescriptor.GetValue(System.Object,System.Object)">
            <summary>
            Call the accessor method
            </summary>
            <param name="component">The component.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates whether the value of this property should be
            persisted.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.GetValue(System.Object,System.Object)">
            <summary>
            Call the accessor method
            </summary>
            <param name="component">Object to be queries</param>
            <param name="index">Index of the query</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Call the accessor method
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Can not override values with the simple accessor model
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value of the property
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.GetHashCode">
            <summary>
            Returns a hahscode for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.#ctor(System.String,System.Reflection.MethodInfo)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.IsReadOnly">
            <summary>
            Indicates whether or not the descriptor is readonly
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of component this property is bound to
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.IndexedAccessorPropertyDescriptor.PropertyType">
            <summary>
            Gets the return type of the property
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.CompositeEventType">
            <summary> Event type for events that itself have event properties that are event wrappers.
            <para>
            For use in pattern expression statements in which multiple events match a pattern. There the
            composite event indicates that the whole patterns matched, and indicates the
            individual events that caused the pattern as event properties to the event.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.TaggedCompositeEventType">
            <summary>
            Interface for composite event type in which each property is itself an event.
            <para>
            For use with patterns in which pattern tags are properties in a result event and property values
            are the event itself that is matching in a pattern.
            </para>
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.TaggedCompositeEventType.TaggedEventTypes">
            <summary>Returns the event types for each composing event.</summary>
            <returns>map of tag name and event type</returns>
        </member>
        <member name="M:com.espertech.esper.events.CompositeEventType.#ctor(System.String,com.espertech.esper.compat.Map{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.events.EventType,System.String}})">
            <summary>
            Ctor.
            </summary>
            <param name="alias">the event type alias.</param>
            <param name="taggedEventTypes">is a map of name tags and event type per tag</param>
        </member>
        <member name="M:com.espertech.esper.events.CompositeEventType.GetPropertyType(System.String)">
            <summary>
            Gets the type of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.CompositeEventType.GetGetter(System.String)">
            <summary>
            Gets the getter.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.CompositeEventType.IsProperty(System.String)">
            <summary>
            Determines whether the specified property name is property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>
            	<c>true</c> if the specified property name is property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.CompositeEventType.Alias">
            <summary>
            Gets the event type alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:com.espertech.esper.events.CompositeEventType.UnderlyingType">
            <summary>
            Get the class that represents the type of the event type.
            Returns a bean event class if the schema represents a bean event type.
            Returns Map if the schema represents a collection of values in a Map.
            </summary>
            <value>The type of the underlying.</value>
            <returns> type of the event object
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.CompositeEventType.PropertyNames">
            <summary>
            Get all valid property names for the event type.
            </summary>
            <value>The property names.</value>
            <returns> A string array containing the property names of this typed event data object.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.CompositeEventType.SuperTypes">
            <summary>
            Returns an array of event types that are super to this event type, from which this event type
            inherited event properties.  For object instances underlying the event this method returns the
            event types for all superclasses extended by the object and all interfaces implemented by the
            object.
            </summary>
            <value></value>
            <returns>an array of event types</returns>
        </member>
        <member name="P:com.espertech.esper.events.CompositeEventType.DeepSuperTypes">
            <summary>
            Returns enumerable over all super types to event type, going up the hierarchy and including
            all interfaces (and their extended interfaces) and superclasses as EventType instances.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.events.CompositeEventType.TagEventPropertyGetter">
            <summary>
            An EventPropertyGetter that is based upon a named tag.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.CompositeEventType.TagEventPropertyGetter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.CompositeEventType.TagEventPropertyGetter"/> class.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:com.espertech.esper.events.CompositeEventType.TagEventPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.events.CompositeEventType.NestedEventPropertyGetter">
            <summary>
            An EventPropertyGetter that is based upon a named tag
            and a nester EventPropertyGetter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.CompositeEventType.NestedEventPropertyGetter.#ctor(System.String,com.espertech.esper.events.EventPropertyGetter)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.CompositeEventType.NestedEventPropertyGetter"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="nestedGetter">The nested getter.</param>
        </member>
        <member name="M:com.espertech.esper.events.CompositeEventType.NestedEventPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionTime">
            <summary> Output condition that is satisfied at the end
            of every time interval of a given length.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionTime.#ctor(System.Double,System.Boolean,com.espertech.esper.epl.variable.VariableReader,com.espertech.esper.core.StatementContext,com.espertech.esper.epl.view.OutputCallback)">
            <summary>Constructor.</summary>
            <param name="intervalSize">is the number of minutes or seconds to batch events for.</param>
            <param name="context">is the view context for time scheduling</param>
            <param name="outputCallback">is the callback to make once the condition is satisfied</param>
            <param name="reader">is for reading the variable value, if a variable was supplied, else null</param>
            <param name="isMinutesUnit">is true to indicate the unit is minutes, or false for the unit as seconds</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionTime.UpdateOutputCondition(System.Int32,System.Int32)">
            <summary>
            Update the output condition.
            </summary>
            <param name="newEventsCount">number of new events incoming</param>
            <param name="oldEventsCount">number of old events incoming</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionTime.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionTime.HandleScheduledCallback(com.espertech.esper.core.ExtensionServicesContext)">
            <summary>
            Called by the scheduling service after the requested event has
            occurred.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionTime.ComputeWaitMSec(System.Int64,System.Int64,System.Int64)">
            <summary>
            Given a current time and a reference time and an interval size, compute the amount of
            milliseconds till the next interval.
            </summary>
            <param name="current">is the current time</param>
            <param name="reference">is the reference point</param>
            <param name="interval">is the interval size</param>
            <returns>milliseconds after current time that marks the end of the current interval</returns>
        </member>
        <member name="P:com.espertech.esper.epl.view.OutputConditionTime.MsecIntervalSize">
            <summary> Returns the interval size in milliseconds.</summary>
            <returns> batch size
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SubstitutionParameterExpression">
            <summary>
            Substitution parameter that represents a node in an expression tree for which to supply a parameter value
            before statement creation time.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SubstitutionParameterExpression.#ctor(System.Int32)">
            <summary>Ctor.</summary>
            <param name="index">is the index of the substitution parameter</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SubstitutionParameterExpression.Constant">
            <summary>Gets or sets the constant value that the expression represents.</summary>
            <returns>value of constant</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SubstitutionParameterExpression.IsSatisfied">
            <summary>Returns true if the parameter is satisfied, or false if not.</summary>
            <returns>true if the actual value is supplied, false if not</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SubstitutionParameterExpression.Index">
            <summary>Returns the index of the parameter.</summary>
            <returns>parameter index.</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.rep.Cursor">
            <summary>
            This class supplies position information for <see cref="T:com.espertech.esper.epl.join.exec.LookupInstructionExec"/>
            to use for iterating over events for lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.Cursor.#ctor(com.espertech.esper.events.EventBean,System.Int32,com.espertech.esper.epl.join.rep.Node)">
            <summary>
            Ctor.
            </summary>
            <param name="_event">is the current event</param>
            <param name="stream">is the current stream</param>
            <param name="node">is the node containing the set of events to which the event belongs to</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Cursor.Event">
            <summary> Supplies current event.</summary>
            <returns> event
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Cursor.Stream">
            <summary> Returns current stream the event belongs to.</summary>
            <returns> stream number for event
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Cursor.Node">
            <summary> Returns current result node the event belong to.</summary>
            <returns> result node of event
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinExecutionStrategyImpl">
            <summary> Join execution strategy based on a 3-step GetSelectListEvents of composing a join set, filtering the join set and
            indicating.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinExecutionStrategy">
            <summary>
            Strategy for executing a join.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinExecutionStrategy.Join(com.espertech.esper.events.EventBean[][],com.espertech.esper.events.EventBean[][])">
            <summary> Execute join. The first dimension in the 2-dim arrays is the stream that generated the events,
            and the second dimension is the actual events generated.
            </summary>
            <param name="newDataPerStream">new events for each stream
            </param>
            <param name="oldDataPerStream">old events for each stream
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinExecutionStrategy.StaticJoin">
            <summary>A static join is for use with iterating over join statements.</summary>
            <returns>set of rows, each row with two or more events, one for each stream</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinExecutionStrategyImpl.#ctor(com.espertech.esper.epl.join.JoinSetComposer,com.espertech.esper.epl.join.JoinSetProcessor,com.espertech.esper.epl.join.JoinSetProcessor)">
            <summary> Ctor.</summary>
            <param name="composer">determines join tuple set
            </param>
            <param name="filter">for filtering among tuples
            </param>
            <param name="indicator">for presenting the info to a view
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinExecutionStrategyImpl.Join(com.espertech.esper.events.EventBean[][],com.espertech.esper.events.EventBean[][])">
            <summary>
            Execute join. The first dimension in the 2-dim arrays is the stream that generated the events,
            and the second dimension is the actual events generated.
            </summary>
            <param name="newDataPerStream">new events for each stream</param>
            <param name="oldDataPerStream">old events for each stream</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPreviousNode">
            <summary>
            Represents the 'prev' previous event function in an expression node tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPreviousNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validates the specified stream type service.
            </summary>
            <param name="streamTypeService">The stream type service.</param>
            <param name="methodResolutionService">The method resolution service.</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">The time provider.</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprMinMaxRowNode">
            <summary>
            Represents the MAX(a,b) and MIN(a,b) functions is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMinMaxRowNode.#ctor(com.espertech.esper.type.MinMaxTypeEnum)">
            <summary>
            Ctor.
            </summary>
            <param name="minMaxTypeEnum">type of compare</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMinMaxRowNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">delegates for view resources to expression nodes</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMinMaxRowNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMinMaxRowNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMinMaxRowNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMinMaxRowNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <value></value>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMinMaxRowNode.MinMaxTypeEnum">
            <summary>Returns the indicator for minimum or maximum.</summary>
            <returns>min/max indicator</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMinMaxRowNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprCaseNode">
            <summary>
            Represents the case-when-then-else control flow function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCaseNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="isCase2">is an indicator of which Case statement we are working on.
            <para> True indicates a 'Case2' statement with syntax "case a when a1 then b1 else b2".</para>
            <para> False indicates a 'Case1' statement with syntax "case when a=a1 then b1 else b2".</para>
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCaseNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validates the specified stream type service_.
            </summary>
            <param name="streamTypeService">The stream type service_.</param>
            <param name="methodResolutionService">The method resolution service.</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">The time provider.</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCaseNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCaseNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Returns true if the nodes are equal.
            </summary>
            <param name="node_"></param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCaseNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCaseNode.IsCase2">
            <summary>
            Gets a value indicating whether this instance is a switch-type case or a when-then type.
            Returns true if this is a switch-type case.  Returns false for a when-then type.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCaseNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprBetweenNode">
            <summary>
            Represents the between-clause function in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBetweenNode.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="lowEndpointIncluded">
            is true for the regular 'between' or false for &quot;val in (a:b)&quot; (open range), or
            false if the endpoint is not included
            </param>
            <param name="highEndpointIncluded">
            indicates whether the high endpoint is included
            </param>
            <param name="notBetween">
            is true for 'not between' or 'not in (a:b), or false for a regular between
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBetweenNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">The time provider.</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBetweenNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBetweenNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBetweenNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBetweenNode.IsLowEndpointIncluded">
            <summary>Returns true if the low endpoint is included, false if not</summary>
            <returns>indicator if endppoint is included</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBetweenNode.IsHighEndpointIncluded">
            <summary>Returns true if the high endpoint is included, false if not</summary>
            <returns>indicator if endppoint is included</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBetweenNode.IsNotBetween">
            <summary>
            Returns true for inverted range, or false for regular (openn/close/half-open/half-closed) ranges.
            </summary>
            <returns>true for not betwene, false for between</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBetweenNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBetweenNode.ExprBetweenCompString.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.expression.ExprBetweenNode.ExprBetweenCompString"/> class.
            </summary>
            <param name="lowIncluded">if set to <c>true</c> [low included].</param>
            <param name="isHighIncluded">if set to <c>true</c> [is high included].</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBetweenNode.ExprBetweenCompString.IsBetween(System.Object,System.Object,System.Object)">
            <summary>
            Determines whether the specified value is between.
            </summary>
            <param name="value">The value.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
            <returns>
            	<c>true</c> if the specified value is between; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBetweenNode.ExprBetweenCompString.IsEqualsEndpoint(System.Object,System.Object)">
            <summary>
            Determines whether [is equals endpoint] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="endpoint">The endpoint.</param>
            <returns>
            	<c>true</c> if [is equals endpoint] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBetweenNode.ExprBetweenCompDouble.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.expression.ExprBetweenNode.ExprBetweenCompDouble"/> class.
            </summary>
            <param name="lowIncluded">if set to <c>true</c> [low included].</param>
            <param name="highIncluded">if set to <c>true</c> [high included].</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBetweenNode.ExprBetweenCompDouble.IsBetween(System.Object,System.Object,System.Object)">
            <summary>
            Determines whether the specified value is between.
            </summary>
            <param name="value">The value.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
            <returns>
            	<c>true</c> if the specified value is between; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBetweenNode.ExprBetweenCompLong.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.expression.ExprBetweenNode.ExprBetweenCompLong"/> class.
            </summary>
            <param name="lowIncluded">if set to <c>true</c> [low included].</param>
            <param name="highIncluded">if set to <c>true</c> [high included].</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBetweenNode.ExprBetweenCompLong.IsBetween(System.Object,System.Object,System.Object)">
            <summary>
            Determines whether the specified value is between.
            </summary>
            <param name="value">The value.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
            <returns>
            	<c>true</c> if the specified value is between; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.DbDriverSqlServer">
            <summary>
            A database driver specific to the SQLServer
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.BaseDbDriver">
            <summary>
            An abstract base driver that provides some of the functionality
            that is common to all ADO.NET based drivers, but leaves the specifics
            of the database to the driver implementation.  ADO.NET leaves some
            wholes in its implementation and advises that for maximum performance
            that you use driver specific semantics.  This code exists to allow
            developers to integrate their own database models.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriver.name">
            <summary>
            Connection name
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriver.connectionProperties">
            <summary>
            Connection properties
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriver.connectionString">
            <summary>
            Connection string
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.CreateConnectionStringBuilder">
            <summary>
            Creates a connection string builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.PositionalToNamedTextConverter(System.Int32)">
            <summary>
            Gets the text for the parameter at the given index.
            </summary>
            <param name="parameterIndex">Index of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.PositionalToPositionalTextConverter(System.Int32)">
            <summary>
            Gets the text for the parameter at the given index.
            </summary>
            <param name="parameterIndex">Index of the parameter.</param>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriver.wdbConnection">
            <summary>
            Weak reference to the database connection.  Allows a thread to
            reuse an existing connection rather than opening a new one as
            opening a new connection can be considerably expensive with some
            drivers.  The reference is weak which means that after it is no
            longer is use, the weak reference will go out of scope.  To
            prevent the database connection from going out of scope prematurely
            we keep around a strong reference that is swept on a regular
            interval.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriver.sdbConnectionTable">
            <summary>
            Collects connections across threads and stores them in a strongly
            referenced table.  The table allows us to reuse connections to
            database that are continually accessed on the same thread.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriver.releaseTimer">
            <summary>
            Periodically removes unused connections from the sdbConnectionTable
            and allows them to be reclaimed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.ReleaseConnections(System.Object)">
            <summary>
            Releases the connections.
            </summary>
            <param name="userObject">The user object.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.CreateConnection">
            <summary>
            Factory method that is used to create instance of a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.CreateConnectionInternal">
            <summary>
            Creates a connection using the internal mechanism.  Avoids having
            to make CreateConnection protected internal.  Its primary use is
            by the BaseDbDriverCommand.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.SetTransactionIsolation(System.Data.Common.DbConnection,System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Sets the transaction isolation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.SetCatalog(System.Data.Common.DbConnection,System.String)">
            <summary>
            Sets the catalog.
            </summary>
            <param name="connection">The connection.</param>
            <param name="catalog">The catalog.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.SetAutoCommit(System.Data.Common.DbConnection,System.Nullable{System.Boolean})">
            <summary>
            Sets the automatic commits.
            </summary>
            <param name="connection">The connection.</param>
            <param name="useAutoCommit">The use auto commit.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.ApplyConnectionOptions(System.Data.Common.DbConnection,com.espertech.esper.client.ConnectionSettings)">
            <summary> Method to set connection-level configuration settings.</summary>
            <param name="connection">is the connection to set on
            </param>
            <param name="connectionSettings">are the settings to apply
            </param>
            <throws>  DatabaseConfigException is thrown if an DbException is thrown </throws>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.ApplyConnectionOptions(System.Data.Common.DbConnection)">
            <summary>
            Sets the connection options using the default connection options.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.GetDetail(System.Data.Common.DbException)">
            <summary>
            Gets the detail.
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.CreateCommand(System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment},com.espertech.esper.epl.db.ColumnSettings)">
            <summary>
            Creates a database driver command from a collection of fragments.
            </summary>
            <param name="sqlFragments">The SQL fragments.</param>
            <param name="metadataSettings">The metadata settings.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.DefaultMetaOriginPolicy">
            <summary>
            Gets the default meta origin policy.
            </summary>
            <value>The default meta origin policy.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.ParamPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <value>The param prefix.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.UsePositionalParameters">
            <summary>
            Gets a value indicating whether [use position parameters].
            </summary>
            <value>
            	<c>true</c> if [use position parameters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.ParamToTextConverter">
            <summary>
            Gets the positional to text converter.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.Properties">
            <summary>
            Gets or sets the properties for the driver.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.Name">
            <summary>
            Connection name
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.BaseDbDriver.PositionalToTextConverter">
            <summary>
            Converts a positional parameter into text that can be embedded
            into the command text.
            </summary>
            <param name="parameterIndex"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverSqlServer.CreateConnectionStringBuilder">
            <summary>
            Creates a connection string builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverSqlServer.CreateConnection">
            <summary>
            Factory method that is used to create instance of a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverSqlServer.UsePositionalParameters">
            <summary>
            Gets a value indicating whether [use position parameters].
            </summary>
            <value>
            	<c>true</c> if [use position parameters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverSqlServer.ParamPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <value>The param prefix.</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineImportException">
            <summary>
            Indicates a problem importing classes, aggregation functions and the like.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="msg">exception message</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportException.#ctor(System.String,System.Exception)">
            <summary>Ctor.</summary>
            <param name="msg">exception message</param>
            <param name="ex">inner exception</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.MedianAggregator">
            <summary>Median aggregation.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.MedianAggregator.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="T:com.espertech.esper.core.SubSelectStreamCollection">
            <summary>Holds stream information for subqueries.</summary>
        </member>
        <member name="M:com.espertech.esper.core.SubSelectStreamCollection.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.core.SubSelectStreamCollection.Add(com.espertech.esper.epl.expression.ExprSubselectNode,System.Int32,com.espertech.esper.view.Viewable,com.espertech.esper.view.ViewFactoryChain)">
            <summary>Add subquery.</summary>
            <param name="subselectNode">is the subselect expression node</param>
            <param name="streamNumber">is the lookup stream number</param>
            <param name="viewable">is the lookup viewable</param>
            <param name="viewFactoryChain">is the chain of view factories</param>
        </member>
        <member name="M:com.espertech.esper.core.SubSelectStreamCollection.GetStreamNumber(com.espertech.esper.epl.expression.ExprSubselectNode)">
            <summary>Returns stream number.</summary>
            <param name="subqueryNode">is the lookup node's stream number</param>
            <returns>number of stream</returns>
        </member>
        <member name="M:com.espertech.esper.core.SubSelectStreamCollection.GetRootViewable(com.espertech.esper.epl.expression.ExprSubselectNode)">
            <summary>Returns the lookup viewable, child-most view.</summary>
            <param name="subqueryNode">is the expression node to get this for</param>
            <returns>child viewable</returns>
        </member>
        <member name="M:com.espertech.esper.core.SubSelectStreamCollection.GetViewFactoryChain(com.espertech.esper.epl.expression.ExprSubselectNode)">
            <summary>Returns the lookup's view factory chain.</summary>
            <param name="subqueryNode">is the node to look for</param>
            <returns>view factory chain</returns>
        </member>
        <member name="T:com.espertech.esper.core.EPAdministratorImpl">
            <summary>
            Implementation for the admin interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.#ctor(com.espertech.esper.core.EPServicesContext,com.espertech.esper.client.ConfigurationOperations,com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum)">
            <summary> Constructor - takes the services context as argument.</summary>
            <param name="services">references to services</param>
            <param name="configurationOperations">runtime configuration operations</param>
            <param name="defaultStreamSelector">the configuration for which insert or remove streams (or both) to produce</param>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.CreatePattern(System.String)">
            <summary>
            Create and starts an event pattern statement for the expressing string passed.
            <p>The engine assigns a unique name to the statement.</p>
            </summary>
            <param name="onExpression">must follow the documented syntax for pattern statements</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>  EPException when the expression was not valid </throws>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.CreateEPL(System.String)">
            <summary>
            Create and starts an EPL statement.
            <p>The engine assigns a unique name to the statement.  The returned statement is in started state.</p>
            </summary>
            <param name="eplStatement">is the query language statement</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>  EPException when the expression was not valid </throws>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.CreatePattern(System.String,System.String)">
            <summary>
            Creates the pattern.
            </summary>
            <param name="expression">The expression.</param>
            <param name="statementName">Name of the statement.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.CreateEPL(System.String,System.String)">
            <summary>
            Create and starts an EPL statement.
            <para>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique statement name.
            </para>
            </summary>
            <param name="eplStatement">is the query language statement</param>
            <param name="statementName">is the name to assign to the statement for use in manageing the statement</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.CreatePatternStmt(System.String,System.String)">
            <summary>
            Creates the pattern.
            </summary>
            <param name="expression">The expression.</param>
            <param name="statementName">Name of the statement.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.CreateEPLStmt(System.String,System.String)">
            <summary>
            For round-trip testing of all statements, of a statement to SODA and creation from SODA,
            use below lines:
            <pre>
                String pattern = "select * from pattern[" + expression + "]";
                EPStatementObjectModel model = CompileEPL(pattern);
                return Create(model, statementName);
            </pre>
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.Create(com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>For round-trip testing of all statements, of a statement to SODA and creation from SODA, use below lines:EPStatementObjectModel model = compile(eplStatement);return create(model, statementName);</summary>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.GetStatement(System.String)">
            <summary>
            Returns the statement by the given statement name. Returns null if a statement of that name has not
            been created, or if the statement by that name has been destroyed.
            </summary>
            <param name="name">is the statement name to return the statement for</param>
            <returns>
            statement for the given name, or null if no such started or stopped statement exists
            </returns>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.StartAllStatements">
            <summary>
            Starts all statements that are in stopped state. Statements in started state
            are not affected by this method.
            </summary>
            <throws>EPException when an error occured starting statements.</throws>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.StopAllStatements">
            <summary>
            Stops all statements that are in started state. Statements in stopped state are not affected by this method.
            </summary>
            <throws>EPException when an error occured stopping statements</throws>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.DestroyAllStatements">
            <summary>
            Stops and destroys all statements.
            </summary>
            <throws>EPException when an error occured stopping or destroying statements</throws>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.CompileEPL(System.String,System.String,com.espertech.esper.core.EPServicesContext,com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum)">
            <summary>Compile the EPL.</summary>
            <param name="eplStatement">expression to compile</param>
            <param name="statementName">is the name of the statement</param>
            <param name="services">is the context</param>
            <param name="defaultStreamSelector">the configuration for which insert or remove streams (or both) to produce</param>
            <returns>statement specification</returns>
        </member>
        <member name="M:com.espertech.esper.core.EPAdministratorImpl.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.core.EPAdministratorImpl"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.EPAdministratorImpl.StatementNames">
            <summary>
            Returns the statement names of all started and stopped statements.
            <para>
            This excludes the name of destroyed statements.
            </para>
            </summary>
            <value></value>
            <returns>statement names</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPAdministratorImpl.Configuration">
            <summary>
            Returns configuration operations for runtime engine configuration.
            </summary>
            <value></value>
            <returns>runtime engine configuration operations</returns>
        </member>
        <member name="T:com.espertech.esper.collection.Pair`2">
            <summary>
            General-purpose pair of values of any type. The pair only equals another pair if
            the objects that form the pair equal, ie. first pair first object equals (.equals) the second pair first object,
            and the first pair second object equals the second pair second object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.Pair`2.#ctor(`0,`1)">
            <summary>
            Construct pair of values.
            </summary>
            <param name="first">is the first value</param>
            <param name="second">is the second value</param>
        </member>
        <member name="M:com.espertech.esper.collection.Pair`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.Pair`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.Pair`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.Pair`2.First">
            <summary>
            Gets or sets the first value within pair.
            </summary>
            <value>The first.</value>
        </member>
        <member name="P:com.espertech.esper.collection.Pair`2.Second">
            <summary>
            Gets or sets the second value within pair.
            </summary>
            <value>The second.</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.StaticMethodExpression">
            <summary>
            Static method call consists of a class name and method name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.StaticMethodExpression.#ctor(System.String,System.String,System.Object[])">
            <summary>Ctor.</summary>
            <param name="className">class name providing the static method</param>
            <param name="method">method name</param>
            <param name="parameters">an optiona array of parameters</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.StaticMethodExpression.#ctor(System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="className">class name providing the static method</param>
            <param name="method">method name</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.StaticMethodExpression.ClassName">
            <summary>Gets or sets the class name.</summary>
            <returns>class name</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.StaticMethodExpression.Method">
            <summary>Gets or sets the method name.</summary>
            <returns>method name</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PreviousExpression">
            <summary>
            Previous function for obtaining property values of previous events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PreviousExpression.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PreviousExpression.#ctor(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Ctor.</summary>
            <param name="expression">provides the index to use</param>
            <param name="propertyName">
            is the name of the property to return the value for
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PreviousExpression.#ctor(System.Int32,System.String)">
            <summary>Ctor.</summary>
            <param name="index">provides the index</param>
            <param name="propertyName">
            is the name of the property to return the value for
            </param>
        </member>
        <member name="T:com.espertech.esper.client.soda.MaxProjectionExpression">
            <summary>
            Maximum of the (distinct) values returned by an expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxProjectionExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without inner expression
            </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project.</summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.MaxProjectionExpression.IsDistinct">
            <summary>True if the projection considers distinct values only.</summary>
            <returns>true if distinct</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.LikeExpression">
            <summary>
            SQL-Like expression for matching '%' and '_' wildcard strings following SQL standards.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.LikeExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.LikeExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="left">provides the value to match</param>
            <param name="right">provides the like-expression to match against</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.LikeExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="left">provides the value to match</param>
            <param name="right">provides the like-expression to match against</param>
            <param name="escape">is the expression providing the string escape character</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.ConcatExpression">
            <summary>
            Concatenation expression that concatenates the result of child expressions to the expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ConcatExpression.Add(System.Object)">
            <summary>Add a constant to include in the computation.</summary>
            <param name="object">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ConcatExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to include in the computation.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ConcatExpression.Add(System.String)">
            <summary>Add a property to include in the computation.</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.plugin.PlugInEventBeanReflectorContext">
            <summary>
            Context for use in <see cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/> to provide information to
            help decide whether an event representation can handle the requested resolution
            URI for creating event object wrappers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventBeanReflectorContext.#ctor(System.Uri)">
            <summary>
            Ctor.
            </summary>
            <param name="uri">is the resolution URI provided as part of <see cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Collections.Generic.IEnumerable{System.Uri})"/></param>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventBeanReflectorContext.ResolutionURI">
            <summary>Returns the resolution URI. </summary>
            <returns>resolution URI</returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableReader">
            <summary>
            Reads and writes variable values.
            <para>
            Works closely with <see cref="T:com.espertech.esper.epl.variable.VariableService"/> in determining the version to read.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableReader.#ctor(com.espertech.esper.epl.variable.VariableVersionThreadLocal,System.Type,System.String,System.Int32,com.espertech.esper.epl.variable.VersionedValueList{System.Object})">
            <summary>Ctor.</summary>
            <param name="versionThreadLocal">
            service for returning the threads current version of variable
            </param>
            <param name="type">is the type of the variable returned</param>
            <param name="variableName">variable name</param>
            <param name="variableNumber">number of the variable</param>
            <param name="versions">a list of versioned-values to ask for the version</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableReader.GetValue">
            <summary>
            Returns the value of a variable.
            <para>
            Considers the version set via thread-local for the thread's atomic read of variable values.
            </para>
            </summary>
            <returns>value of variable at the version applicable for the thead</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReader.VariableName">
            <summary>
            Returns the variable name.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReader.VariableNumber">
            <summary>Returns the variable number.</summary>
            <returns>variable index number</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReader.VariableType">
            <summary>Returns the type of the variable.</summary>
            <returns>type</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReader.VersionsHigh">
            <summary>
            For roll-over (overflow) in version numbers, sets a new collection of versioned-values for the variable
            to use when requests over the version rollover boundary are made.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReader.VersionsLow">
            <summary>
            Sets a new list of versioned-values to inquire against, for use when version numbers roll-over.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseElementWildcard">
            <summary>Represents a wildcard as a select clause element. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.RemoveStreamViewCapability">
            <summary>
            View capability requirement that asks views to handle the remove stream posted by parent views, for use with
            named windows since these allow on-delete removal of events from a window.
            <para/>
            Based on being asked to provide the capability, a view factory may need to use a view with a
            different internal collection to provide a remove stream capability that
            has good performance, but may come at the cost of lower insert performance as a view
            may need to build reverse indexes to effeciently remove an event.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowProcessor">
            <summary>
            An instance of this class is associated with a specific named window. The processor provides 
            the views to create-window, on-delete statements and statements selecting from a named window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowProcessor.#ctor(com.espertech.esper.epl.named.NamedWindowService,System.String,com.espertech.esper.events.EventType,com.espertech.esper.core.EPStatementHandle,com.espertech.esper.core.StatementResultService,com.espertech.esper.events.vaevent.ValueAddEventProcessor)">
            <summary>Ctor.</summary>
            <param name="namedWindowService">service for dispatching results</param>
            <param name="windowName">the window name</param>
            <param name="eventType">the type of event held by the named window</param>
            <param name="createWindowStmtHandle">the statement handle of the statement that created the named window</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
            <param name="revisionProcessor">for revision processing</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowProcessor.AddOnExpr(com.espertech.esper.epl.spec.OnTriggerDesc,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.events.EventType,com.espertech.esper.view.StatementStopService,com.espertech.esper.core.InternalEventRouter,com.espertech.esper.epl.core.ResultSetProcessor,com.espertech.esper.core.EPStatementHandle,com.espertech.esper.core.StatementResultService)">
            <summary>Returns a new view for a new on-delete or on-select statement. </summary>
            <param name="onTriggerDesc">descriptor describing the on-trigger specification</param>
            <param name="filterEventType">event type to trigger on</param>
            <param name="statementStopService">to indicate a on-delete was stopped</param>
            <param name="internalEventRouter">for insert-into handling</param>
            <param name="resultSetProcessor">for select-clause processing</param>
            <param name="statementHandle">is the handle to the statement, used for routing/insert-into</param>
            <param name="joinExpr">is the join expression or null if there is none</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
            <returns>on trigger handling view</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowProcessor.AddConsumer(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.core.EPStatementHandle,com.espertech.esper.view.StatementStopService)">
            <summary>Adds a consuming (selecting) statement to the named window. </summary>
            <param name="statementHandle">is the statement's handle for locking</param>
            <param name="statementStopService">for indicating the consuming statement is stopped or destroyed</param>
            <param name="filterList">is a list of filter expressions</param>
            <returns>consumer view</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowProcessor.Destroy">
            <summary>Deletes a named window and removes any associated resources. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowProcessor.TailView">
            <summary>Returns the tail view of the named window, hooked into the view chain after the named window's data window views, as the last view. </summary>
            <returns>tail view</returns>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowProcessor.RootView">
            <summary>Returns the root view of the named window, hooked into the view chain before the named window's data window views, right after the filter stream that filters for insert-into events. </summary>
            <returns>tail view</returns>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowProcessor.NamedWindowType">
            <summary>Returns the event type of the named window. </summary>
            <returns>event type</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinSetComposerStreamToWinImpl">
            <summary>Implements the function to determine a join result for a unidirectional stream-to-window joins, in which a single stream's events are every only evaluated using a query strategy. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetComposerStreamToWinImpl.#ctor(com.espertech.esper.epl.join.table.EventTable[][],System.Int32,com.espertech.esper.epl.join.QueryStrategy)">
            <summary>Ctor. </summary>
            <param name="repositories">for each stream an array of (indexed/unindexed) tables for lookup.</param>
            <param name="streamNumber">is the undirectional stream</param>
            <param name="queryStrategy">is the lookup query strategy for the stream</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.HistoricalIndexLookupStrategyNoIndex">
            <summary>
            Full table scan strategy for a poll-based cache result.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.DataCacheFactory">
            <summary>
            Factory for data caches for use caching database query results and method invocation results.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheFactory.GetDataCache(com.espertech.esper.client.ConfigurationDataCache,com.espertech.esper.core.EPStatementHandle,com.espertech.esper.schedule.SchedulingService,com.espertech.esper.schedule.ScheduleBucket)">
            <summary>
            Creates a cache implementation for the strategy as defined by the cache descriptor.
            </summary>
            <param name="cacheDesc">cache descriptor</param>
            <param name="epStatementHandle">statement handle for timer invocations</param>
            <param name="schedulingService">scheduling service for time-based caches</param>
            <param name="scheduleBucket">for ordered timer invokation</param>
            <returns>data cache implementation</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConnectionLifecycleEnum">
            <summary>
            Enum controlling connection lifecycle.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConnectionLifecycleEnum.RETAIN">
            <summary>Retain connection between lookups, not getting a new connection each lookup.</summary>
        </member>
        <member name="F:com.espertech.esper.client.ConnectionLifecycleEnum.POOLED">
            <summary>Obtain a new connection each lookup closing the connection when done.</summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInView">
            <summary>
            Configuration information for plugging in a custom view.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationPlugInView.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInView.Namespace">
            <summary>Gets or sets  the namespace</summary>
            <returns>namespace</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInView.Name">
            <summary>Gets or sets  the view name.</summary>
            <returns>view name</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInView.FactoryClassName">
            <summary>Gets or sets the view factory class name.</summary>
            <returns>factory class name</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInPatternObject">
            <summary>
            Configuration information for plugging in a custom view.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInPatternObject.Namespace">
            <summary>
            Gets or sets the view namespace
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInPatternObject.Name">
            <summary>
            Gets or sets the view name.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInPatternObject.FactoryClassName">
            <summary>
            Gets or sets the view factory class name.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInPatternObject.PatternObjectType">
            <summary>
            Gets or sets the type of the pattern object for the plug-in.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInPatternObject.PatternObjectTypeEnum">
            <summary>Choice for type of pattern object.</summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationPlugInPatternObject.PatternObjectTypeEnum.OBSERVER">
            <summary>Observer observes externally-supplied events.</summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationPlugInPatternObject.PatternObjectTypeEnum.GUARD">
            <summary>Guard allows or disallows events from child expressions to pass.</summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationInformation">
            <summary>Provides configurations for an engine instance.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EPServicesContextFactoryClassName">
            <summary>Returns the service context factory class name</summary>
            <returns>class name</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypeAliases">
            <summary>Returns the mapping of event type alias to type name.</summary>
            <returns>event type aliases for type names</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypesMapEvents">
            <summary>
            Returns a map keyed by event type alias name, and values being the definition for the
            event type of the property names and types that make up the event.
            </summary>
            <returns>map of event type alias name and definition of event properties</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypesNestableMapEvents">
            <summary>
            Returns a map keyed by event type alias name, and values being the definition for the
            event type of the property names and types that make up the event, for nestable,
            strongly-typed Map-based event representations.
            </summary>
            <returns>map of event type alias name and definition of event properties</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypesXMLDOM">
            <summary>
            Returns the mapping of event type alias to XML DOM event type information.
            </summary>
            <returns>event type aliases mapping to XML DOM configs</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypesLegacy">
            <summary>
            Returns the mapping of event type alias to legacy event type information.
            </summary>
            <returns>event type aliases mapping to legacy type configs</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.Imports">
            <summary>Returns the class and package imports.</summary>
            <returns>imported names</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.DatabaseReferences">
            <summary>
            Returns a map of string database names to database configuration options.
            </summary>
            <returns>map of database configurations</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInViews">
            <summary>Returns a list of configured plug-in views.</summary>
            <returns>list of plug-in view configs</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PluginLoaders">
            <summary>Returns a list of configured plugin loaders.</summary>
            <returns>plugin loaders</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInAggregationFunctions">
            <summary>Returns a list of configured plug-in aggregation functions.</summary>
            <returns>list of configured aggregations</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInPatternObjects">
            <summary>
            Returns a list of configured plug-ins for pattern observers and guards.
            </summary>
            <returns>list of pattern plug-ins</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EngineDefaults">
            <summary>Returns engine default settings.</summary>
            <returns>engine defaults</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.Variables">
            <summary>
            Returns the variables by name as key and type plus initialization value as value
            </summary>
            <returns>map of variable name and variable configuration</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.MethodInvocationReferences">
            <summary>
            Returns a map of class name and cache configurations, for use in
            method invocations in the from-clause of methods provided by the class.
            </summary>
            <returns>
            map of fully-qualified or simple class name and cache configuration
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypeAutoAliasPackages">
            <summary>
            Returns a set of namespaces that event types reside in.
            <para/>
            This setting allows an application to place all it's events into one or more
            namespaces and then declare these namespaces via this method. The engine attempts
            to resolve an event type alias to a type residing in each declared namespaces.
            <para/>
            For example, in the statement "select * from MyEvent" the engine attempts to load
            class "namespace.MyEvent" and if successful, uses that class as the event type.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInEventRepresentation">
            <summary>
            Returns a map of plug-in event representation URI and their event representation class
            and initializer.
            </summary>
            <value>The plug in event representation.</value>
            <returns>map of URI keys and event representation configuration</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInEventTypes">
            <summary>
            Returns a map of event type alias of those event types that will be supplied by a
            plug-in event representation,and their configuration.
            </summary>
            <value>The plug in event types.</value>
            <returns>map of alias to plug-in event type config</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInEventTypeAliasResolutionURIs">
            <summary>
            Returns the URIs that point to plug-in event representations that are given
            a chance to dynamically resolve an eventtype alias to an event type, when a new
            (unseen) event type alias occurs in a new EPL statement.
            <para/>
            The order of the URIs matters as event representations are asked in turn, to accept
            the alias.
            <para/>
            URIs can be child URIs of plug-in event representations and can add additional
            parameters or fragments for use by the event representation.
            </summary>
            <value>The plug in event type alias resolution UR is.</value>
            <returns>URIs for resolving an event type alias</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.RevisionEventTypes">
            <summary>
            Returns a map of revision event type alias and revision event type configuration.
            Revision event types handle updates (new versions)for past events.
            </summary>
            <value>The revision event types.</value>
            <returns>map of alias and revision event type config</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.VariantStreams">
            <summary>
            Returns a map of variant stream alias and variant configuration information.
            Variant streams allows handlingevents of all sorts of different event types the same way.
            </summary>
            <value>The variant streams.</value>
            <returns>map of alias and variant stream config</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationExpiryTimeCache">
            <summary>Expiring cache settings. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationExpiryTimeCache.#ctor(System.Double,System.Double,com.espertech.esper.client.ConfigurationCacheReferenceType)">
            <summary>Ctor. </summary>
            <param name="maxAgeSeconds">is the maximum age in seconds</param>
            <param name="purgeIntervalSeconds">is the purge interval</param>
            <param name="cacheReferenceType">the reference type may allow garbage collection to remove entries fromcache unless HARD reference type indicates otherwise </param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationExpiryTimeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationExpiryTimeCache.CacheReferenceType">
            <summary>
            Gets the type of the cache reference.
            </summary>
            <value>The type of the cache reference.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationExpiryTimeCache.MaxAgeSeconds">
            <summary>
            Gets the max age in seconds.
            </summary>
            <value>The max age seconds.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationExpiryTimeCache.PurgeIntervalSeconds">
            <summary>
            Gets the purge interval in seconds.
            </summary>
            <value>The purge interval seconds.</value>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeBatchViewFactory">
            <summary>Factory for <see cref="T:com.espertech.esper.view.window.TimeBatchView"/>.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeBatchViewFactory.millisecondsBeforeExpiry">
            <summary>Number of msec before expiry.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeBatchViewFactory.optionalReferencePoint">
            <summary>The reference point, or null if none supplied.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeBatchViewFactory.relativeAccessGetterImpl">
            <summary>The access into the data window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeBatchViewFactory.isRemoveStreamHandling">
            <summary>Flag to indicate that the view must handle the removed events from a parent view.</summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.LengthWindowView">
            <summary>
            This view is a moving window extending the specified number of elements into the past.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowView.#ctor(com.espertech.esper.view.window.LengthWindowViewFactory,System.Int32,com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>
            Constructor creates a moving window extending the specified number of elements into the past.
            </summary>
            <param name="size">is the specified number of elements into the past</param>
            <param name="viewUpdatedCollection">
            is a collection that the view must update when receiving events
            </param>
            <param name="lengthWindowViewFactory">for copying this view in a group-by</param>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthWindowView.Size">
            <summary>
            Gets or sets the size of the length window.
            </summary>
            <value>The size.</value>
            <returns> size of length window
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthWindowView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty.</summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthWindowView.ViewUpdatedCollection">
            <summary>
            Returns the (optional) collection handling random access to window contents for prior or previous events.
            </summary>
            <returns>buffer for events</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthWindowView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.window.ExternallyTimedWindowView">
             <summary>
             View for a moving window extending the specified amount of time into the past, driven entirely by external timing
             supplied within long-type timestamp values in a field of the event beans that the view receives.
            
             The view is completely driven by timestamp values that are supplied by the events it receives,
             and does not use the schedule service time.
             It requires a field name as parameter for a field that returns ascending long-type timestamp values.
             It also requires a long-type parameter setting the time length in milliseconds of the time window.
             Events are expected to provide long-type timestamp values in natural order. The view does
             itself not use the current system time for keeping track of the time window, but just the
             timestamp values supplied by the events sent in.
            
             The arrival of new events with a newer timestamp then past events causes the window to be re-evaluated and the oldest
             events pushed out of the window. Ie. Assume event X1 with timestamp T1 is in the window.
             When event Xn with timestamp Tn arrives, and the window time length in milliseconds is t, then if
             ((Tn - T1) > t == true) then event X1 is pushed as oldData out of the window. It is assumed that
             events are sent in in their natural order and the timestamp values are ascending.
             </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.ExternallyTimedWindowView.#ctor(com.espertech.esper.view.window.ExternallyTimedWindowViewFactory,System.String,System.Int64,com.espertech.esper.collection.ViewUpdatedCollection,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="externallyTimedWindowViewFactory">for copying this view in a group-by</param>
            <param name="timestampFieldName">is the field name containing a long timestamp valuethat should be in ascending order for the natural order of events and is intended to reflectSystem.currentTimeInMillis but does not necessarily have to.</param>
            <param name="msecBeforeExpiry">is the number of milliseconds before events gets pushedout of the window as oldData in the update method. The view compareseach events timestamp against the newest event timestamp and those with a deltagreater then secondsBeforeExpiry are pushed out of the window.</param>
            <param name="viewUpdatedCollection">is a collection that the view must update when receiving events</param>
            <param name="isRemoveStreamHandling">flag to indicate that the view must handle the removed events from a parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.window.ExternallyTimedWindowView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.window.ExternallyTimedWindowView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.window.ExternallyTimedWindowView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.ExternallyTimedWindowView.TimestampFieldName">
            <summary>
            Gets or sets the field name to get timestamp values from.
            </summary>
            <value>The name of the timestamp field.</value>
        </member>
        <member name="P:com.espertech.esper.view.window.ExternallyTimedWindowView.MillisecondsBeforeExpiry">
            <summary>
            Gets or sets the window size in milliseconds.
            </summary>
            <value>The milliseconds before expiry.</value>
        </member>
        <member name="P:com.espertech.esper.view.window.ExternallyTimedWindowView.Parent">
            <summary>
            Gets or sets the View's parent viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.ExternallyTimedWindowView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.ExternallyTimedWindowView.IsEmpty">
            <summary>
            Returns true to indicate the window is empty, or false if the view is not empty.
            </summary>
            <returns>true if empty</returns>
        </member>
        <member name="T:com.espertech.esper.view.std.LastElementView">
            <summary> This view is a very simple view presenting the last event posted by the parent view to any subviews.
            Only the very last event object is kept by this view. The update method invoked by the parent view supplies
            new data in an object array, of which the view keeps the very last instance as the 'last' or newest event.
            The view always has the same schema as the parent view and attaches to anything, and accepts no parameters.
            
            Useful is the last view for example for "stocks.time_window(100).last()".
            
            Notice that "stocks.last().Count" and
            "stocks.win:length(10).std:lastevent().std:size()" must always return 0 or 1.
            
            Thus if 5 pieces of new data arrive, the child view receives 5 elements of new data
            and also 4 pieces of old data which is the first 4 elements of new data.
            I.e. New data elements immediatly gets to be old data elements.
            
            Old data received from parent is not handled, it is ignored.
            We thus post old data as follows:
            last event is not null +
            new data from index zero to N-1, where N is the index of the last element in new data
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.std.LastElementView.lastEvent">
            <summary> The last new element posted from a parent view.</summary>
        </member>
        <member name="M:com.espertech.esper.view.std.LastElementView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.std.LastElementView.GetEnumerator(com.espertech.esper.events.EventBean)">
            <summary>
            Gets the enumerator.
            </summary>
            <param name="eventBean">The event bean.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.view.std.LastElementView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.std.LastElementView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.std.LastElementView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.std.GroupByView">
             <summary> The group view splits the data in a stream to multiple subviews, based on a key index.
             The key is one or more fields in the stream. Any view that follows the GROUP view will be executed
             separately on each subview, one per unique key.
            
             The view takes a single parameter which is the field name returning the key value to group.
            
             This view can, for example, be used to calculate the average price per symbol for a list of symbols.
            
             The view treats its child views and their child views as prototypes. It dynamically instantiates copies
             of each child view and their child views, and the child view's child views as so on. When there are
             no more child views or the special merge view is encountered, it ends. The view installs a special merge
             view unto each leaf child view that merges the value key that was grouped by back into the stream
             using the group-by field name.
             </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.GroupByView.#ctor(com.espertech.esper.core.StatementContext,System.String[])">
            <summary>Constructor.</summary>
            <param name="groupFieldNames">
            is the fields from which to pull the values to group by
            </param>
            <param name="statementContext">contains required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.std.GroupByView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="M:com.espertech.esper.view.std.GroupByView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.std.GroupByView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.std.GroupByView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.std.GroupByView.MakeSubViews(com.espertech.esper.view.std.GroupByView,System.Object[],com.espertech.esper.core.StatementContext)">
            <summary> Instantiate subviews for the given group view and the given key value to group-by.
            Makes shallow copies of each child view and its subviews up to the merge point.
            Sets up merge data views for merging the group-by key value back in.
            </summary>
            <param name="groupView">is the parent view for which to copy subviews for
            </param>
            <param name="groupByValues">is the key values to group-by
            </param>
            <param name="statementContext">is the view services that sub-views may need
            </param>
            <returns> a list of views that are copies of the original list, with copied children, with
            data merge views added to the copied child leaf views.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.std.GroupByView.Parent">
            <summary>
            Gets or sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.std.GroupByView.GroupFieldNames">
            <summary>
            Gets or sets the field name that provides the key valie by which to group by.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.std.GroupByView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.StatementStopServiceImpl">
            <summary>
            Provides subscription list for statement stop callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.StatementStopServiceImpl.#ctor">
            <summary>ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.view.StatementStopServiceImpl.AddSubscriber(com.espertech.esper.view.StatementStopCallback)">
            <summary>
            Add a callback to perform for a stop of a statement.
            </summary>
            <param name="callback">is the callback function</param>
        </member>
        <member name="M:com.espertech.esper.view.StatementStopServiceImpl.FireStatementStopped">
            <summary>
            Used by the engine to indicate a statement stopped, invoking any callbacks registered.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.ext.SortWindowIterator">
            <summary>
            Iterator for use by <see cref="T:com.espertech.esper.view.ext.SortWindowView"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowIterator.#ctor(com.espertech.esper.compat.TreeMap{com.espertech.esper.collection.MultiKeyUntyped,System.Collections.Generic.LinkedList{com.espertech.esper.events.EventBean}})">
            <summary> Ctor.</summary>
            <param name="window">sorted map with events
            </param>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowIterator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowIterator.AdvanceChild">
            <summary>
            Advances the currentListIterator to the next item in the
            parent enumerator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowIterator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowIterator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowIterator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowIterator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:com.espertech.esper.view.ext.IStreamTimeOrderRandomAccess">
            <summary>
            rovides random access into a time-ordered-window's data.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ext.IStreamTimeOrderRandomAccess.#ctor(com.espertech.esper.view.window.RandomAccessByIndexObserver)">
            <summary>
            Ctor.
            </summary>
            <param name="updateObserver">for indicating updates to</param>
        </member>
        <member name="M:com.espertech.esper.view.ext.IStreamTimeOrderRandomAccess.Refresh(com.espertech.esper.compat.TreeMap{System.Int64,System.Collections.Generic.IList{com.espertech.esper.events.EventBean}},System.Int32)">
            <summary>
            Refreshes the random access data with the updated information.
            </summary>
            <param name="sortedEvents">is the sorted window contents</param>
            <param name="currentSize">is the current size of the window</param>
        </member>
        <member name="T:com.espertech.esper.util.PlaceholderParser">
            <summary>
            Parser for strings with substitution parameters of the form ${parameter}.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.ParsePlaceholder(System.String)">
            <summary> Parses a string to find placeholders of format ${placeholder}.
            <para>
            Example: "My ${thing} is ${color}"
            </para>
            <para>
            The example above parses into 4 fragements: a text fragment of value "My ",
            a parameter fragment "thing", a text fragement " is " and a parameter
            fragment "color".
            </para>
            </summary>
            <param name="parseString">is the string to parse
            </param>
            <returns> list of fragements that can be either text fragments or placeholder fragments
            </returns>
            <throws>  PlaceholderParseException if the string cannot be parsed to indicate syntax errors </throws>
        </member>
        <member name="T:com.espertech.esper.util.PlaceholderParser.Fragment">
            <summary>
            Fragment is a parse result, a parse results in an ordered list of fragments.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.Fragment.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="value">is the fragment text
            </param>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.Fragment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.util.PlaceholderParser.Fragment.Value">
            <summary> Returns the string text of the fragment.</summary>
            <returns> fragment string
            </returns>
        </member>
        <member name="P:com.espertech.esper.util.PlaceholderParser.Fragment.IsParameter">
            <summary> Returns true to indicate this is a parameter and not a text fragment.</summary>
            <returns> true if parameter fragement, false if text fragment.
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.PlaceholderParser.TextFragment">
            <summary>
            Represents a piece of text in a parse string with placeholder values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.TextFragment.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="value">is the text
            </param>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.TextFragment.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.TextFragment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.TextFragment.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.util.PlaceholderParser.TextFragment.IsParameter">
            <summary>
            Returns true to indicate this is a parameter and not a text fragment.
            </summary>
            <value></value>
            <returns> true if parameter fragement, false if text fragment.
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.PlaceholderParser.ParameterFragment">
            <summary>
             Represents a parameter in a parsed string of texts and parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.ParameterFragment.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="value">is the parameter name
            </param>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.ParameterFragment.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.ParameterFragment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.ParameterFragment.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.util.PlaceholderParser.ParameterFragment.IsParameter">
            <summary>
            Returns true to indicate this is a parameter and not a text fragment.
            </summary>
            <value></value>
            <returns> true if parameter fragement, false if text fragment.
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.SerializableObjectCopier">
            <summary>
            Utility class for copying serializable objects via object input and output streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.SerializableObjectCopier.Copy(System.Object)">
            <summary>Deep copies the input object.</summary>
            <param name="orig">is the object to be copied, must be serializable</param>
            <returns>copied object</returns>
            <throws>IOException if the streams returned an exception</throws>
            <throws>ClassNotFoundException if the de-serialize fails</throws>
        </member>
        <member name="T:com.espertech.esper.type.IntValue">
            <summary>
             Placeholder for an integer value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.IntValue.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.IntValue.#ctor(System.Int32)">
            <summary> Constructor.</summary>
            <param name="intValue">is the value to set to
            </param>
        </member>
        <member name="M:com.espertech.esper.type.IntValue.ParseString(System.String[])">
            <summary> Parse the string array returning a int array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.IntValue.ParseString(System.String)">
            <summary> Parse string value returning a int.</summary>
            <param name="value">to parse
            </param>
            <returns> parsed value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.IntValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.IntValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.IntValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.IntValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.IntValue._Int">
            <summary>
            Set an int value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.type.BoolValue">
            <summary>
            Placeholder for a bool value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.BoolValue.#ctor(System.Boolean)">
            <summary> Constructor.</summary>
            <param name="boolValue">sets the value.
            </param>
        </member>
        <member name="M:com.espertech.esper.type.BoolValue.#ctor">
            <summary> Constructor.</summary>
        </member>
        <member name="M:com.espertech.esper.type.BoolValue.ParseString(System.String)">
            <summary> Parse the bool string.</summary>
            <param name="value">is a bool value
            </param>
            <returns> parsed bool
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.BoolValue.ParseString(System.String[])">
            <summary> Parse the string array returning a bool array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.BoolValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.BoolValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.BoolValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.BoolValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.BoolValue._Boolean">
            <summary>
            Set a bool value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleSlot">
            <summary>
            This class is a slot in a <see cref="T:com.espertech.esper.schedule.ScheduleBucket"/> for sorting schedule service callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSlot.#ctor(System.Int32,System.Int32)">
            <summary> Ctor.</summary>
            <param name="bucketNum">is the number of the bucket the slot belongs to
            </param>
            <param name="slotNum">is the slot number for ordering within the bucket
            </param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSlot.CompareTo(com.espertech.esper.schedule.ScheduleSlot)">
            <summary>
            Compares to.
            </summary>
            <param name="scheduleCallbackSlot">The schedule callback slot.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSlot.CompareTo(System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSlot.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSlot.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSlot.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.schedule.ScheduleSlot.BucketNum">
            <summary>
            Returns the bucket number.
            </summary>
        </member>
        <member name="P:com.espertech.esper.schedule.ScheduleSlot.SlotNum">
            <summary>
            Returns the slot number.
            </summary>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleHandleDelegate">
            <summary>
            Delegate that is invoked as indicated by a schedule added to the scheduling service.
            </summary>
            <param name="extensionServicesContext"></param>
        </member>
        <member name="T:com.espertech.esper.schedule.ProxyScheduleHandleCallback">
            <summary>
            Proxy implementation that allows CLR to use delegates to facilitate the implementation
            of the interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ProxyScheduleHandleCallback.#ctor(com.espertech.esper.schedule.ScheduleHandleDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.schedule.ProxyScheduleHandleCallback"/> class.
            </summary>
            <param name="dg">The dg.</param>
        </member>
        <member name="M:com.espertech.esper.schedule.ProxyScheduleHandleCallback.ScheduledTrigger(com.espertech.esper.core.ExtensionServicesContext)">
            <summary>
            Callback that is invoked as indicated by a schedule added to the scheduling service.
            </summary>
            <param name="extensionServicesContext">is a marker interface for providing custom extension services
            passed to the triggered class</param>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleBucket">
            <summary>
            This class acts as a buckets for sorting schedule service callbacks that are scheduled to occur at the same
            time. Each buckets constists of <see cref="T:com.espertech.esper.schedule.ScheduleSlot"/> slots that callbacks are
            assigned to.
            <para>
            At the time of timer evaluation, callbacks that become triggerable are ordered using the bucket
            as the first-level order, and slot as the second-level order.
            </para>
            <para>
            Each statement at statement creation time allocates a buckets, and each timer within the
            statement allocates a slot. Thus statements that depend on other statements (such as for insert-into),
            and timers within their statement (such as time window or output rate limit timers) behave
            deterministically.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleBucket.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="bucketNum">is a simple integer number for this bucket by which buckets can be sorted
            </param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleBucket.Restart">
            <summary>
            Restart bucket slot numbering wuch as when a statement is reStarted
            and new slots are allocated.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleBucket.AllocateSlot">
            <summary> Returns a new slot in the bucket.</summary>
            <returns> slot
            </returns>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.Guard">
            <summary> Guard instances inspect a matched events and makes a determination on whether to let it pass or not.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.Guard.StartGuard">
            <summary> Start the guard operation.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.Guard.StopGuard">
            <summary> Called when sub-expression quits, or when the pattern Stopped.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.Guard.Inspect(com.espertech.esper.pattern.MatchedEventMap)">
            <summary> Returns true if inspection shows that the match events can pass, or false to not pass.</summary>
            <param name="matchEvent">is the map of matching events
            </param>
            <returns> true to pass, false to not pass
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterServiceProvider">
            <summary> Static factory for implementations of the <see cref="T:com.espertech.esper.filter.FilterService"/> interface.</summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceProvider.NewService">
            <summary> Creates an implementation of the FilterEvaluationService interface.</summary>
            <returns> implementation
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.EventTypeIndex">
            <summary>
            Mapping of event type to a tree-like structure
            containing filter parameter constants in indexes <see cref="T:com.espertech.esper.filter.FilterParamIndexBase"/> and filter callbacks in <see cref="T:com.espertech.esper.filter.FilterHandleSetNode"/>.
            <para>
            This class evaluates events for the purpose of filtering by (1) looking up the event's <see cref="T:com.espertech.esper.events.EventType"/>
            and (2) asking the subtree for this event type to evaluate the event.
            </para>
            <para>
            The class performs all the locking required for multithreaded access.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndex.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndex.Destroy">
            <summary>
            Destroy the service.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndex.Add(com.espertech.esper.events.EventType,com.espertech.esper.filter.FilterHandleSetNode)">
            <summary>
            Add a new event type to the index and use the specified node for the root node of its subtree.
            If the event type already existed, the method will throw an IllegalStateException.
            </summary>
            <param name="eventType">the event type to be added to the index</param>
            <param name="rootNode">the root node of the subtree for filter constant indizes and callbacks</param>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndex.MatchEvent(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Matches the event.
            </summary>
            <param name="ev">The ev.</param>
            <param name="matches">The matches.</param>
        </member>
        <member name="P:com.espertech.esper.filter.EventTypeIndex.Count">
            <summary>Returns the current size of the known event types.</summary>
            <returns>collection size</returns>
        </member>
        <member name="P:com.espertech.esper.filter.EventTypeIndex.Item(com.espertech.esper.events.EventType)">
            <summary>Returns the root node for the given event type, or null if this event type has not been seen before.</summary>
            <param name="eventType">is an event type</param>
            <returns>the subtree's root node</returns>
        </member>
        <member name="T:com.espertech.esper.events.ReflectionPropPropertyGetter">
            <summary>
            Property getter for properties using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.ReflectionPropPropertyGetter.#ctor(System.Reflection.PropertyInfo)">
            <summary> Constructor.</summary>
            <param name="property">is the reflection property info to use to obtain values for a property
            </param>
        </member>
        <member name="M:com.espertech.esper.events.ReflectionPropPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified bean as the key.
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.events.ReflectionPropPropertyGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a property.
            <para>
            Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
            Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
            If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
            does not exists and the method returns false.
            </para>
            	<para>
            For non-dynamic properties, this method always returns true since a getter would not be available
            unless
            </para>
            </summary>
            <param name="eventBean">the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default) properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.ReflectionPropPropertyGetter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.PropertyAccessException">
            <summary>
            This exception is thrown to indicate a problem with a accessing a
            property of an <see cref="T:com.espertech.esper.events.EventBean"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.PropertyAccessException.#ctor(System.String)">
            <summary> Constructor.</summary>
            <param name="message">is the error message
            </param>
        </member>
        <member name="M:com.espertech.esper.events.PropertyAccessException.#ctor(System.String,System.Exception)">
            <summary> Constructor for an inner exception and message.</summary>
            <param name="message">is the error message
            </param>
            <param name="cause">is the inner exception
            </param>
        </member>
        <member name="M:com.espertech.esper.events.PropertyAccessException.#ctor(System.Exception)">
            <summary> Constructor.</summary>
            <param name="cause">is the inner exception
            </param>
        </member>
        <member name="T:com.espertech.esper.events.property.MapPropertyGetter">
            <summary>
            A getter that interrogates a given property in a map which may itself contain
            nested maps or indexed entries.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.MapPropertyGetter.#ctor(System.String,com.espertech.esper.events.EventPropertyGetter)">
            <summary>Ctor.</summary>
            <param name="propertyMap">is the property returning the map to interrogate</param>
            <param name="getter">
            is the getter to use to interrogate the property in the map
            </param>
        </member>
        <member name="T:com.espertech.esper.events.property.MapIndexedPropertyGetter">
            <summary>
            Getter for a dynamic indexed property for maps.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.MapIndexedPropertyGetter.#ctor(System.String,System.Int32)">
            <summary>Ctor.</summary>
            <param name="fieldName">property name</param>
            <param name="index">index to get the element at</param>
        </member>
        <member name="T:com.espertech.esper.events.CompositeEventBean">
            <summary>
            Event bean wrapper for events that consists of a Map of name tags as key values and
            event bean wrappers as value objects, for use by pattern expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.EventBean">
            <summary>
            Interface for event representation. All events have an <see cref="P:com.espertech.esper.events.EventBean.EventType"/>. Events also
            usually have one or more event properties. This interface allows the querying of event type,
            event property values and the underlying event object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventBean.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.EventBean.EventType">
            <summary> Return the <see cref="P:com.espertech.esper.events.EventBean.EventType"/> instance that describes the set of properties available for this event.</summary>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.EventBean.Underlying">
            <summary> Get the underlying data object to this event wrapper.</summary>
            <returns> underlying data object, usually either a Map or a bean instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.EventBean.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="T:com.espertech.esper.events.TaggedCompositeEventBean">
            <summary>
            Interface for composite events in which a property is itself an event.
            <para>
            For use with patterns in which pattern tags are properties in a result event and property values
            are the event itself that is matching in a pattern.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.TaggedCompositeEventBean.GetEventBean(System.String)">
            <summary>Returns the event for the tag.</summary>
            <param name="property">is the tag name</param>
            <returns>event</returns>
        </member>
        <member name="M:com.espertech.esper.events.CompositeEventBean.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="M:com.espertech.esper.events.CompositeEventBean.#ctor(System.Collections.Generic.IDictionary{System.String,com.espertech.esper.events.EventBean},com.espertech.esper.events.EventType)">
            <summary> Ctor.</summary>
            <param name="wrappedEvents">is the event properties map with keys being the property name tages
            and values the wrapped event
            </param>
            <param name="eventType">is the event type instance for the wrapper
            </param>
        </member>
        <member name="P:com.espertech.esper.events.CompositeEventBean.EventType">
            <summary>
            Return the <see cref="P:com.espertech.esper.events.CompositeEventBean.EventType"/> instance that describes the set of properties available for this event.
            </summary>
            <value></value>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.CompositeEventBean.Underlying">
            <summary>
            Get the underlying data object to this event wrapper.
            </summary>
            <value></value>
            <returns> underlying data object, usually either a Map or a bean instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.CompositeEventBean.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="T:com.espertech.esper.events.BeanEventTypeFactory">
            <summary>
            Interface for a factory for obtaining <see cref="T:com.espertech.esper.events.BeanEventType"/> instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventTypeFactory.CreateBeanType(System.String,System.Type)">
            <summary>
            Returns the bean event type for a given class assigning the given alias.
            </summary>
            <param name="alias">is the alias</param>
            <param name="type">is the type for which to generate an event type</param>
            <returns>is the event type for the class</returns>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventTypeFactory.DefaultPropertyResolutionStyle">
            <summary>
            Returns the default property resolution style.
            </summary>
            <value>The default property resolution style.</value>
            <returns>property resolution style</returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewFactory">
            <summary>Factory for output processing views. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewFactory.MakeView(com.espertech.esper.epl.core.ResultSetProcessor,com.espertech.esper.epl.spec.StatementSpecCompiled,com.espertech.esper.core.StatementContext,com.espertech.esper.core.InternalEventRouter)">
            <summary>Creates an output processor view depending on the presence of output limiting requirements. </summary>
            <param name="resultSetProcessor">is the processing for select-clause and grouping</param>
            <param name="statementContext">is the statement-level services</param>
            <param name="internalEventRouter">service for routing events internally</param>
            <param name="statementSpec">the statement specification</param>
            <returns>output processing view</returns>
            <throws>ExprValidationException to indicate</throws>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StatementSpecUnMapResult">
            <summary>
            Return result for unmap operators unmapping an intermal statement representation to the SODA object model.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecUnMapResult.#ctor(com.espertech.esper.client.soda.EPStatementObjectModel,com.espertech.esper.compat.Map{System.Int32,com.espertech.esper.epl.spec.SubstitutionParameterExpression})">
            <summary>Ctor.</summary>
            <param name="objectModel">of the statement</param>
            <param name="indexedParams">a map of parameter index and parameter</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecUnMapResult.ObjectModel">
            <summary>Returns the object model.</summary>
            <returns>object model</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecUnMapResult.IndexedParams">
            <summary>
            Returns the substitution paremeters keyed by the parameter's index.
            </summary>
            <returns>map of index and parameter</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StatementSpecCompiled">
            <summary>
            Specification object representing a complete EPL statement including all EPL constructs.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecCompiled.#ctor(com.espertech.esper.epl.spec.OnTriggerDesc,com.espertech.esper.epl.spec.CreateWindowDesc,com.espertech.esper.epl.spec.CreateVariableDesc,com.espertech.esper.epl.spec.InsertIntoDesc,com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum,com.espertech.esper.epl.spec.SelectClauseSpecCompiled,System.Collections.Generic.IList{com.espertech.esper.epl.spec.StreamSpecCompiled},System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc},com.espertech.esper.epl.expression.ExprNode,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.spec.OutputLimitSpec,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OrderByItem},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprSubselectNode},System.Boolean)">
            <summary>Ctor.</summary>
            <param name="insertIntoDesc">insert into def</param>
            <param name="selectClauseStreamSelectorEnum">stream selection</param>
            <param name="selectClauseSpec">select clause</param>
            <param name="streamSpecs">specs for streams</param>
            <param name="outerJoinDescList">outer join def</param>
            <param name="filterExprRootNode">where filter expr nodes</param>
            <param name="groupByExpressions">group by expression</param>
            <param name="havingExprRootNode">having expression</param>
            <param name="outputLimitSpec">output limit</param>
            <param name="orderByList">order by</param>
            <param name="subSelectExpressions">list of subqueries</param>
            <param name="onTriggerDesc">describes on-delete statements</param>
            <param name="createWindowDesc">describes create-window statements</param>
            <param name="createVariableDesc">describes create-variable statements</param>
            <param name="hasVariables">indicator whether the statement uses variables</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecCompiled.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.CreateWindowDesc">
            <summary>Returns the specification for an create-window statement.</summary>
            <returns>create-window spec, or null if not such a statement</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.CreateVariableDesc">
            <summary>Returns the create-variable statement descriptor.</summary>
            <returns>create-variable spec</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.StreamSpecs">
            <summary>Returns the FROM-clause stream definitions.</summary>
            <returns>list of stream specifications</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.SelectClauseSpec">
            <summary>Returns SELECT-clause list of expressions.</summary>
            <returns>list of expressions and optional name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.FilterExprRootNode">
            <summary>Gets or sets the WHERE-clause root node of filter expression.</summary>
            <returns>filter expression root node</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.FilterRootNode">
            <summary>Gets or sets the WHERE-clause root node of filter expression.</summary>
            <returns>filter expression root node</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.OuterJoinDescList">
            <summary>
            Returns the LEFT/RIGHT/FULL OUTER JOIN-type and property name descriptor, if applicable. Returns null if regular join.
            </summary>
            <returns>outer join type, stream names and property names</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.GroupByExpressions">
            <summary>Returns list of group-by expressions.</summary>
            <returns>group-by expression nodes as specified in group-by clause</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.HavingExprRootNode">
            <summary>
            Returns expression root node representing the having-clause, if present, or null if no having clause was supplied.
            </summary>
            <returns>having-clause expression top node</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.OutputLimitSpec">
            <summary>Returns the output limit definition, if any.</summary>
            <returns>output limit spec</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.InsertIntoDesc">
            <summary>
            Return a descriptor with the insert-into event name and optional list of columns.
            </summary>
            <returns>insert into specification</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.OrderByList">
            <summary>
            Returns the list of order-by expression as specified in the ORDER BY clause.
            </summary>
            <returns>Returns the orderByList.</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.SelectStreamSelectorEnum">
            <summary>Returns the stream selector (rstream/istream).</summary>
            <returns>stream selector</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.SubSelectExpressions">
            <summary>Returns the list of lookup expression nodes.</summary>
            <returns>lookup nodes</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.OnTriggerDesc">
            <summary>Returns the specification for an on-delete or on-select statement.</summary>
            <returns>on-trigger spec, or null if not such a statement</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.HasVariables">
            <summary>Returns true to indicate the statement has vaiables.</summary>
            <returns>true for statements that use variables</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.SelectStreamDirEnum">
            <summary>
            Gets or sets the stream selection.
            </summary>
            <value>The select stream dir enum.</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OuterJoinDesc">
            <summary>
            Contains the ON-clause criteria in an outer join.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OuterJoinDesc.#ctor(com.espertech.esper.type.OuterJoinType,com.espertech.esper.epl.expression.ExprIdentNode,com.espertech.esper.epl.expression.ExprIdentNode,com.espertech.esper.epl.expression.ExprIdentNode[],com.espertech.esper.epl.expression.ExprIdentNode[])">
            <summary>Ctor.</summary>
            <param name="outerJoinType">type of the outer join</param>
            <param name="leftNode">left hand identifier node</param>
            <param name="rightNode">right hand identifier node</param>
            <param name="addLeftNode">additional optional left hand identifier nodes for the on-clause in a logical-and</param>
            <param name="addRightNode">additional optional right hand identifier nodes for the on-clause in a logical-and</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OuterJoinDesc.OuterJoinType">
            <summary> Returns the type of outer join (left/right/full).</summary>
            <returns> outer join type
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OuterJoinDesc.LeftNode">
            <summary> Returns left hand identifier node.</summary>
            <returns> left hand
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OuterJoinDesc.RightNode">
            <summary> Returns right hand identifier node.</summary>
            <returns> right hand
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OuterJoinDesc.AdditionalLeftNodes">
            <summary>Returns additional properties in the on-clause, if any, that are connected via logical-and</summary>
            <returns>additional properties</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OuterJoinDesc.AdditionalRightNodes">
            <summary>Returns additional properties in the on-clause, if any, that are connected via logical-and</summary>
            <returns>additional properties</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.TableLookupExecNode">
            <summary> Execution node for lookup in a table.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.TableLookupExecNode.#ctor(System.Int32,com.espertech.esper.epl.join.exec.TableLookupStrategy)">
            <summary> Ctor.</summary>
            <param name="indexedStream">stream indexed for lookup
            </param>
            <param name="lookupStrategy">strategy to use for lookup (full table/indexed)
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.TableLookupExecNode.Process(com.espertech.esper.events.EventBean,com.espertech.esper.events.EventBean[],System.Collections.Generic.IList{com.espertech.esper.events.EventBean[]})">
            <summary>
            Process single event using the prefill events to compile lookup results.
            </summary>
            <param name="lookupEvent">event to look up for or query for</param>
            <param name="prefillPath">set of events currently in the example tuple to serve
            as a prototype for result rows.</param>
            <param name="result">is the list of tuples to add a result row to</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.TableLookupExecNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Output the execution strategy.
            </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.TableLookupExecNode.LookupStrategy">
            <summary> Returns strategy for lookup.</summary>
            <returns> lookup strategy
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.TableLookupExecNode.IndexedStream">
            <summary> Returns target stream for lookup.</summary>
            <returns> indexed stream
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode">
            <summary>
            Assembly node for an event stream that is a branch with a two or more child nodes (required and optional) below it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary> Ctor.</summary>
            <param name="streamNum">is the stream number
            </param>
            <param name="numStreams">is the number of streams
            </param>
            <param name="allSubStreamsOptional">true if all child nodes to this node are optional, or false if
            one or more child nodes are required for a result.
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.AddChild(com.espertech.esper.epl.join.assemble.BaseAssemblyNode)">
            <summary>
            Add a child node.
            </summary>
            <param name="childNode">to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.Init(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Provides results to assembly nodes for initialization.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.Process(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Process results.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.Result(com.espertech.esper.events.EventBean[],System.Int32,com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.rep.Node)">
            <summary>
            Publish a result row.
            </summary>
            <param name="row">is the result to publish</param>
            <param name="fromStreamNum">is the originitor that publishes the row</param>
            <param name="myEvent">is optional and is the event that led to the row result</param>
            <param name="myNode">is optional and is the result node of the event that led to the row result</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Output this node using writer, not outputting child nodes.
            </summary>
            <param name="indentWriter">to use for output</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.ChildStreamResults">
            <summary> Structure to represent a list of event result rows per stream.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.ChildStreamResults.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="size">number of streams
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.ChildStreamResults.Add(System.Int32,com.espertech.esper.events.EventBean[])">
            <summary> Add result from stream.</summary>
            <param name="fromStreamIndex">from stream
            </param>
            <param name="row">row to add
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.ChildStreamResults.RowsPerStream">
            <summary> Returns rows per stream.</summary>
            <returns> rows per stream
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprRelationalOpNode">
            <summary>
            Represents a lesser or greater then (&lt;/&lt;=/&gt;/&gt;=) expression in a filter expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRelationalOpNode.#ctor(com.espertech.esper.type.RelationalOpEnum)">
            <summary> Ctor.</summary>
            <param name="relationalOpEnum">type of compare, ie. lt, gt, le, ge
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRelationalOpNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRelationalOpNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRelationalOpNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRelationalOpNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRelationalOpNode.RelationalOpEnum">
            <summary>Returns the type of relational op used.</summary>
            <returns>enum with relational op type</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRelationalOpNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprOrNode">
            <summary>
            Represents an OR expression in a filter expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprOrNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">delegates for view resources to expression nodes</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprOrNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprOrNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprOrNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprOrNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <value></value>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprOrNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprLikeNode">
            <summary>
            Represents the like-clause in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprLikeNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="not">is true if this is a "not like", or false if just a like
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprLikeNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprLikeNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprLikeNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="node_">the node to compare against</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprLikeNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprLikeNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprInstanceofNode">
            <summary>
            Represents the INSTANCEOF(a,b,...) function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInstanceofNode.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>Ctor.</summary>
            <param name="typeIdentifiers">is a list of type names to check type for</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprInstanceofNode.TypeIdentifiers">
            <summary>Returns the list of class names or types to check instance of.</summary>
            <returns>class names</returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.DbDriverODBC">
            <summary>
            Generic database driver using ODBC.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverODBC.CreateConnectionStringBuilder">
            <summary>
            Creates a connection string builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverODBC.CreateConnection">
            <summary>
            Factory method that is used to create instance of a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverODBC.UsePositionalParameters">
            <summary>
            Gets a value indicating whether [use position parameters].
            </summary>
            <value>
            	<c>true</c> if [use position parameters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverODBC.ParamPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <value>The param prefix.</value>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.DbDriverMySQL">
            <summary>
            A database driver specific to the MySQL driver.  The MySQL driver
            is a named positional driver.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverMySQL.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.epl.db.drivers.DbDriverMySQL"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverMySQL.CreateConnection">
            <summary>
            Factory method that is used to create instance of a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverMySQL.CreateConnectionStringBuilder">
            <summary>
            Creates a connection string builder.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverMySQL.UsePositionalParameters">
            <summary>
            Gets a value indicating whether [use position parameters].
            </summary>
            <value>
            	<c>true</c> if [use position parameters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverMySQL.ParamPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <value>The param prefix.</value>
        </member>
        <member name="T:com.espertech.esper.epl.db.DataCacheLRUImpl">
            <summary> Query result data cache implementation that uses a least-recently-used algorithm
            to store and evict query results.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheLRUImpl.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="cacheSize">is the maximum cache size
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheLRUImpl.GetCached(System.Object[])">
            <summary> Retrieves an entry from the cache.
            The retrieved entry becomes the MRU (most recently used) entry.
            </summary>
            <param name="lookupKeys">the key whose associated value is to be returned.
            </param>
            <returns> the value associated to this key, or null if no value with this key exists in the cache.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheLRUImpl.PutCached(System.Object[],com.espertech.esper.epl.join.table.EventTable)">
            <summary> Adds an entry to this cache.
            If the cache is full, the LRU (least recently used) entry is dropped.
            </summary>
            <param name="key">the key with which the specified value is to be associated.
            </param>
            <param name="value">a value to be associated with the specified key.
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCacheLRUImpl.CacheSize">
            <summary> Returns the maximum cache size.</summary>
            <returns> maximum cache size
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprJoinWildcardProcessor">
            <summary>
            Processor for select-clause expressions that handles wildcards. Computes results based on matching events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprJoinWildcardProcessor.#ctor(System.String[],com.espertech.esper.events.EventType[],com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.spec.InsertIntoDesc)">
            <summary>Ctor.</summary>
            <param name="streamNames">name of each stream</param>
            <param name="streamTypes">type of each stream</param>
            <param name="eventAdapterService">
            service for generating events and handling event types
            </param>
            <param name="insertIntoDesc">describes the insert-into clause</param>
            <throws>ExprValidationException if the expression validation failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprJoinWildcardProcessor.Process(com.espertech.esper.events.EventBean[],System.Boolean,System.Boolean)">
            <summary>
            Computes the select-clause results and returns an event of the result event type that contains, in it's
            properties, the selected items.
            </summary>
            <param name="eventsPerStream">is per stream the event</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>
            event with properties containing selected items
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.SelectExprJoinWildcardProcessor.ResultEventType">
            <summary>
            Returns the event type that represents the select-clause items.
            </summary>
            <value></value>
            <returns> event type representing select-clause items
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.DuplicatePropertyException">
            <summary> Indicates a property exists in multiple streams.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.DuplicatePropertyException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="msg">exception message
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.CountAggregator">
            <summary>Counts all datapoints including null values.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.CountAggregator.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.CountAggregator.Enter(System.Object)">
            <summary>
            Enters the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.CountAggregator.Leave(System.Object)">
            <summary>
            Leaves the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.CountAggregator.NewAggregator(com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Make a new, initalized aggregation state.
            </summary>
            <param name="methodResolutionService">for use in creating new aggregation method instances as a factory</param>
            <returns>initialized copy of the aggregator</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.CountAggregator.Value">
            <summary>
            Returns the current value held.
            </summary>
            <value></value>
            <returns>current value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.CountAggregator.ValueType">
            <summary>
            Returns the type of the current value.
            </summary>
            <value></value>
            <returns>type of values held</returns>
        </member>
        <member name="T:com.espertech.esper.core.StatementContextFactoryDefault">
            <summary>
            Default implementation for making a statement-specific context class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementContextFactoryDefault.#ctor(com.espertech.esper.epl.spec.PluggableObjectCollection,com.espertech.esper.epl.spec.PluggableObjectCollection)">
            <summary>Ctor.</summary>
            <param name="viewPlugIns">is the view plug-in object descriptions</param>
            <param name="plugInPatternObj">is the pattern plug-in object descriptions</param>
        </member>
        <member name="T:com.espertech.esper.core.ExtensionServicesContext">
            <summary>
            Marker interface for extension services that provide additional engine or statement-level extensions,
            such as views backed by a write-behind store.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.ExtensionServicesContext.Init">
            <summary>
            Invoked to initialize extension services after engine services initialization.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.ExtensionServicesContext.Destroy">
            <summary>
            Invoked to destroy the extension services, when an existing engine is initialized.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.EPServiceProviderImpl">
            <summary>
            Service provider encapsulates the engine's services for runtime and administration interfaces.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPServiceProviderImpl.#ctor(com.espertech.esper.client.Configuration,System.String)">
            <summary> Constructor - initializes services.</summary>
            <param name="configuration">is the engine configuration</param>
            <param name="engineURI">is the engine URI or null if this is the default provider</param>
            <throws>  ConfigurationException is thrown to indicate a configuraton error </throws>
        </member>
        <member name="M:com.espertech.esper.core.EPServiceProviderImpl.Initialize">
            <summary>
            Frees any resources associated with this runtime instance.
            Stops and destroys any event filters, patterns, expressions, views.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPServiceProviderImpl.LoadAdapters(com.espertech.esper.core.EPServicesContext)">
            <summary>
            Loads and initializes adapter loaders.
            </summary>
            <param name="services">the engine instance services</param>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderImpl.URI">
            <summary>
            Gets the engine URI
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderImpl.Configuration">
            <summary>
            Sets the configuration
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderImpl.EventAdapterService">
            <summary>
            Get the EventAdapterService for this engine.
            </summary>
            <value></value>
            <returns>the EventAdapterService</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderImpl.SchedulingService">
            <summary>
            Get the SchedulingService for this engine.
            </summary>
            <value></value>
            <returns>the SchedulingService</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderImpl.FilterService">
            <summary>
            Returns the filter service.
            </summary>
            <value></value>
            <returns>filter service</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderImpl.ExtensionServicesContext">
            <summary>
            Gets the extension services context.
            </summary>
            <value>The extension services context.</value>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderImpl.EnvDirectory">
            <summary>
            Returns the engine environment directory for engine-external
            resources such as adapters.
            </summary>
            <value></value>
            <returns>engine environment directory</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderImpl.EPRuntime">
            <summary>
            Returns a class instance of EPRuntime.
            </summary>
            <value></value>
            <returns> an instance of EPRuntime
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderImpl.EPAdministrator">
            <summary>
            Returns a class instance of EPAdministrator.
            </summary>
            <value></value>
            <returns> an instance of EPAdministrator
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPServiceProviderImpl.IsDestroyed">
            <summary>
            Gets a value indicating whether this instance is destroyed.
            </summary>
            <value>
            	<c>true</c> if this instance is destroyed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:com.espertech.esper.compat.Properties">
            <summary>
            Collection that maps a string to a string.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.ScopedInstance`1">
            <summary>
            Provides a generic item that can be scoped statically as a singleton; avoids the
            need to define a threadstatic variable.  Also provides a consistent model for
            providing this service.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.ScopedInstance`1.Set(`0)">
            <summary>
            Sets the specified instance.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.ScopedInstance`1.Current">
            <summary>
            Gets the current instance value.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:com.espertech.esper.compat.ScopedInstance`1.DisposableScope">
            <summary>
            Disposable scope
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ScopedInstance`1.DisposableScope.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ScopedInstance`1.DisposableScope"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ScopedInstance`1.DisposableScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.collection.RollingEventBuffer">
            <summary>
            Event buffer of a given size provides a random access API into the most current event to prior events
            up to the given size. Oldest events roll out of the buffer first.
            <para>
            Backed by a fixed-size array that is filled forward, then rolls back to the beginning
            keeping track of the current position.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RollingEventBuffer.#ctor(System.Int32)">
            <summary>Ctor.</summary>
            <param name="size">is the maximum number of events in buffer</param>
        </member>
        <member name="M:com.espertech.esper.collection.RollingEventBuffer.Add(com.espertech.esper.events.EventBean[])">
            <summary>Add events to the buffer.</summary>
            <param name="events">to add</param>
        </member>
        <member name="M:com.espertech.esper.collection.RollingEventBuffer.Add(com.espertech.esper.events.EventBean)">
            <summary>Add an event to the buffer.</summary>
            <param name="_event">to add</param>
        </member>
        <member name="M:com.espertech.esper.collection.RollingEventBuffer.Get(System.Int32)">
            <summary>
            Get an event prior to the last event posted given a number of events before the last.
            <para>
            Thus index 0 returns the last event added, index 1 returns the prior to the last event added
            up to the maximum buffer size.
            </para>
            </summary>
            <param name="index">prior event index from zero to max size</param>
            <returns>prior event at given index</returns>
        </member>
        <member name="T:com.espertech.esper.collection.RefCountedMap`2">
            <summary>
            Reference-counting map based on a HashMap implementation that stores as a value a pair of value and reference counter.
            The class provides a reference method that takes a key
            and increments the reference count for the key. It also provides a de-reference method that takes a key and
            decrements the reference count for the key, and removes the key if the reference count reached zero.
            Null values are not allowed as keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedMap`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedMap`2.Reference(`0)">
            <summary> Increase the reference count for a given key by one.
            Throws an ArgumentException if the key was not found.
            </summary>
            <param name="key">is the key to increase the ref count for
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedMap`2.Dereference(`0)">
            <summary> Decreases the reference count for a given key by one. Returns true if the reference count reaches zero.
            Removes the key from the collection when the reference count reaches zero.
            Throw an ArgumentException if the key is not found.
            </summary>
            <param name="key">to de-reference
            </param>
            <returns> true to indicate the reference count reached zero, false to indicate more references to the key exist.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedMap`2.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="P:com.espertech.esper.collection.RefCountedMap`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:V"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternAndExpr">
            <summary>
            Logical AND for use in pattern expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternAndExpr.#ctor">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternAndExpr.#ctor(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr[])">
            <summary>Ctor.</summary>
            <param name="first">a first pattern expression in the AND relationship</param>
            <param name="second">a second pattern expression in the AND relationship</param>
            <param name="patternExprs">
            further optional pattern expressions in the AND relationship
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternAndExpr.Add(com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Adds a pattern expression to the AND relationship between patterns.
            </summary>
            <param name="expr">to add</param>
            <returns>pattern expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.MinRowExpression">
            <summary>
            Minimum-value per-row expression (not aggregating) determines the minimum value among a set of values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinRowExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinRowExpression.#ctor(System.String,System.String,System.String[])">
            <summary>Ctor.</summary>
            <param name="propertyOne">
            the name of the property providing a value to determine the minimum of
            </param>
            <param name="propertyTwo">
            the name of the property providing a value to determine the minimum of
            </param>
            <param name="moreProperties">optional additional properties to consider</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinRowExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="exprOne">provides a value to determine the maximum of</param>
            <param name="exprTwo">provides a value to determine the maximum of</param>
            <param name="moreExpressions">optional additional values to consider</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinRowExpression.Add(System.Object)">
            <summary>Add a constant to include in the computation.</summary>
            <param name="object">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinRowExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to include in the computation.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinRowExpression.Add(System.String)">
            <summary>Add a property to include in the computation.</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.InstanceOfExpression">
            <summary>
            Instance-of expression checks if an expression returns a certain type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.InstanceOfExpression.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="typeNames">
            is the fully-qualified class names or primitive type names or "string"
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InstanceOfExpression.#ctor(com.espertech.esper.client.soda.Expression,System.String,System.String[])">
            <summary>Ctor.</summary>
            <param name="expressionToCheck">provides values to check the type of</param>
            <param name="typeName">
            is one fully-qualified class names or primitive type names or "string"
            </param>
            <param name="moreTypes">
            is additional optional fully-qualified class names or primitive type names or "string"
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InstanceOfExpression.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.InstanceOfExpression.TypeNames">
            <summary>Gets or sets the types to compare to.</summary>
            <returns>list of types to compare to</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantSpec">
            <summary>
            Specification for a variant event stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantSpec.#ctor(System.String,com.espertech.esper.events.EventType[],com.espertech.esper.client.TypeVariance)">
            <summary>Ctor. </summary>
            <param name="variantStreamName">name of variant stream</param>
            <param name="eventTypes">types of events for variant stream, or empty list</param>
            <param name="typeVariance">enum specifying type variance</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantSpec.VariantStreamName">
            <summary>Returns name of variant stream. </summary>
            <returns>name</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantSpec.EventTypes">
            <summary>Returns types allowed for variant streams. </summary>
            <returns>types</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantSpec.TypeVariance">
            <summary>Returns the type variance enum. </summary>
            <returns>type variance</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantPropResolutionStrategyAny">
            <summary>A property resolution strategy that allows any type, wherein all properties are Object type. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropResolutionStrategyAny.#ctor(com.espertech.esper.events.vaevent.VariantSpec)">
            <summary>Ctor. </summary>
            <param name="variantSpec">specified the preconfigured types</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionEventBeanMerge">
            <summary>Merge-event for event revisions. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.#ctor(com.espertech.esper.events.vaevent.RevisionEventType,com.espertech.esper.events.EventBean)">
            <summary>Ctor. </summary>
            <param name="revisionEventType">type</param>
            <param name="underlyingFull">event wrapped</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.GetKeyValue(System.Int32)">
            <summary>Returns a value from the key. </summary>
            <param name="index">within key</param>
            <returns>value</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.GetBaseEventValue(com.espertech.esper.events.vaevent.RevisionGetterParameters)">
            <summary>Returns base event value. </summary>
            <param name="paramList">supplies getter</param>
            <returns>value</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.GetVersionedValue(com.espertech.esper.events.vaevent.RevisionGetterParameters)">
            <summary>Returns a versioned value. </summary>
            <param name="paramList">getter and indexes</param>
            <returns>value</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.IsLatest">
            <summary>Gets or sets the flag that indicates latest or not. </summary>
            <returns>latest flag</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.Key">
            <summary>Gets or sets the key. </summary>
            <returns>key</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.Overlay">
            <summary>Gets or sets overlay values. </summary>
            <returns>overlay</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.LastBaseEvent">
            <summary>Gets or sets last base event. </summary>
            <returns>base event</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.EventType">
            <summary>
            Return the <see cref="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.EventType"/> instance that describes the set of properties
            available for this event.
            </summary>
            <value></value>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.UnderlyingFullOrDelta">
            <summary>Returns wrapped event </summary>
            <returns>event</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.ValueGetter">
            <summary>
            Gets a value from the underlying
            </summary>
            <param name="underlying"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor">
            <summary>
            Provides a simple property descriptor that is obtained through a
            field.  The field should be a public instance field.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates whether the value of this property should be
            persisted.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Call the accessor method
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Can not override values with the simple accessor model
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value of the property
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor.GetHashCode">
            <summary>
            Returns a hahscode for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor.IsReadOnly">
            <summary>
            Indicates whether or not the descriptor is readonly
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of component this property is bound to
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.SimpleFieldPropertyDescriptor.PropertyType">
            <summary>
            Gets the return type of the property
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnDeleteView">
            <summary>
            View for the on-delete statement that handles removing events from a named window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowOnDeleteView.#ctor(com.espertech.esper.view.StatementStopService,com.espertech.esper.epl.named.LookupStrategy,com.espertech.esper.epl.named.NamedWindowRootView,com.espertech.esper.core.StatementResultService)">
            <summary>Ctor.</summary>
            <param name="statementStopService">for indicating a statement was stopped or destroyed for cleanup</param>
            <param name="lookupStrategy">/// for handling trigger events to determine deleted events</param>
            <param name="removeStreamView">to indicate which events to delete</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.FullTableScanLookupStrategy">
            <summary>
            Lookup on an unindexed table returning the full table as matching events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.FullTableScanLookupStrategy.#ctor(com.espertech.esper.epl.join.table.UnindexedEventTable)">
            <summary>Ctor.</summary>
            <param name="eventIndex">table to use</param>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.FullTableScanLookupStrategy.EventIndex">
            <summary>Returns the associated table.</summary>
            <returns>table for lookup.</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprStreamInstanceMethodNode">
            <summary>
            Represents an invocation of a instance method on an event of a given stream in the expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprStreamInstanceMethodNode.#ctor(System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="streamName">
            the declaring class for the method that this node will invoke
            </param>
            <param name="methodName">the name of the method that this node will invoke</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStreamInstanceMethodNode.StreamName">
            <summary>Returns the stream name.</summary>
            <returns>the stream that provides events that provide the instance method</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStreamInstanceMethodNode.MethodName">
            <summary>Returns the method name.</summary>
            <returns>the name of the method</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStreamInstanceMethodNode.ParamTypes">
            <summary>Returns parameter descriptor.</summary>
            <returns>the types of the child nodes of this node</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStreamInstanceMethodNode.StreamId">
            <summary>Returns stream id supplying the property value.</summary>
            <returns>stream number</returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprResultProcessor">
            <summary>A select expression processor that check what type of result (synthetic and natural) event is expected and produces. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprResultProcessor.#ctor(com.espertech.esper.core.StatementResultService,com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.BindProcessor)">
            <summary>Ctor. </summary>
            <param name="statementResultService">for awareness of listeners and subscribers handles output results</param>
            <param name="syntheticProcessor">is the processor generating synthetic events according to the select clause</param>
            <param name="bindProcessor">for generating natural object column results</param>
            <throws>ExprValidationException if the validation failed</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorSimpleTransform">
            <summary>Method to transform an event based on the select expression. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimpleTransform.#ctor(com.espertech.esper.epl.core.ResultSetProcessorBaseSimple)">
            <summary>Ctor. </summary>
            <param name="resultSetProcessor">is applying the select expressions to the events for the transformation</param>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationRevisionEventType">
            <summary>
            Configuration information for revision event types.
            <para/>The configuration information consists of the names of the base event type and
            the delta event types, as well as the names of properties that supply key values, and a strategy.
            <para/>Events of the base event type arrive before delta events; Delta events arriving before
            the base event for the same key value are not processed, as delta events as well as base events
            represent new versions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationRevisionEventType.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationRevisionEventType.AddAliasBaseEventType(System.String)">
            <summary>Add a base event type by it's alias name. </summary>
            <param name="aliasBaseEventType">the name of the base event type to add</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationRevisionEventType.AddAliasDeltaEventType(System.String)">
            <summary>
            Add a delta event type by it's alias name.
            </summary>
            <param name="aliasDeltaEventType">the name of the delta event type to add</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationRevisionEventType.AliasBaseEventTypes">
            <summary>
            Returns the set of event type aliases that are base event types.
            </summary>
            <value>The alias base event types.</value>
            <returns>aliases of base event types</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationRevisionEventType.AliasDeltaEventTypes">
            <summary>
            Returns the set of names of delta event types.
            </summary>
            <value>The alias delta event types.</value>
            <returns>names of delta event types</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationRevisionEventType.PropertyRevision">
            <summary>
            Gets or sets the enumeration value defining the strategy to use for overlay or merging
            multiple versions of an event (instances of base and delta events).
            </summary>
            <returns>strategy enumerator</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationRevisionEventType.KeyPropertyNames">
            <summary>
            Gets or sets the key property names, which are the names of the properties that supply key
            values for relating base and delta events.
            </summary>
            <value>The key property names.</value>
            <returns>array of names of key properties</returns>
        </member>
        <member name="T:com.espertech.esper.client.PropertyRevision">
            <summary>Enumeration for specifying a strategy to use to merge or overlay properties. </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyRevision.OVERLAY_DECLARED">
            <summary>
            A fast strategy for revising events that groups properties provided by base and delta events and
            overlays contributed properties to compute a revision.
            <para/>For use when there is a limited number of combinations of properties that change on an event,
            and such combinations are known in advance.
            <para/>The properties available on the output revision events are all properties of the base event
            type. Delta event types do not add any additional properties that are not present on the base event type.
            <para/>Any null values or non-existing property on a delta (or base) event results in a null values for
            the same property on the output revision event.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyRevision.MERGE_DECLARED">
            <summary>
            A strategy for revising events by merging properties provided by base and delta events, considering
            null values and non-existing (dynamic) properties as well.
            <para/>For use when there is a limited number of combinations of properties that change on an event,
            and such combinations are known in advance.
            <para/>The properties available on the output revision events are all properties of the base event
            type plus all additional properties that any of the delta event types provide.
            <para/>Any null values or non-existing property on a delta (or base) event results in a null values
            for the same property on the output revision event.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyRevision.MERGE_NON_NULL">
            <summary>
            A strategy for revising events by merging properties provided by base and delta events, considering
            only non-null values.
            <para/>For use when there is an unlimited number of combinations of properties that change on an
            event, or combinations are not known in advance.
            <para/>The properties available on the output revision events are all properties of the base event
            type plus all additional properties that any of the delta event types provide.
            <para/>Null values returned by delta (or base) event properties provide no value to output revision
            events, i.e. null values are not merged.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyRevision.MERGE_EXISTS">
            <summary>
            A strategy for revising events by merging properties provided by base and delta events, considering
            only values supplied by event properties that exist.
            <para/>For use when there is an unlimited number of combinations of properties that change on an
            event, or combinations are not known in advance.
            <para/>The properties available on the output revision events are all properties of the base event 
            type plus all additional properties that any of the delta event types provide.
            <para/>All properties are treated as dynamic properties: If an event property does not exist on a
            delta event (or base) event the property provides no value to output revision events, i.e.
            non-existing property values are not merged.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.LengthWindowViewFactory">
            <summary>Factory for <see cref="T:com.espertech.esper.view.window.LengthWindowView"/>.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.LengthWindowViewFactory.size">
            <summary>Size of length window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.LengthWindowViewFactory.randomAccessGetterImpl">
            <summary>The access into the data window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.LengthWindowViewFactory.isRemoveStreamHandling">
            <summary>Flag to indicate that the view must handle the removed events from a parent view.</summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthWindowViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewParameterException">
            <summary>
            Thrown to indicate a validation error in view parameterization.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewParameterException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="message">validation error message</param>
        </member>
        <member name="T:com.espertech.esper.view.std.MergeViewFactory">
            <summary>Factory for <see cref="T:com.espertech.esper.view.std.MergeView"/> instances.</summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.MultidimCubeCellFactory`1">
            <summary>
            Implementations provide a factory for cells to use by <see cref="!:MultidimCubeImpl"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCubeCellFactory`1.NewCell">
            <summary> Supplies an instance of the object representing a cell.</summary>
            <returns> cell object
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.MultidimCubeCellFactory`1.NewCells(System.Int32)">
            <summary> Supplies an array of the type of object representing a cell. The returned array
            should be uninitialized.
            </summary>
            <param name="numElements">number of elements
            </param>
            <returns> cell object array
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.CubeDimensionHelper">
            <summary> Utility methods for dealing with Cube multidimensional tables (OLAP style).
            Enables iterating within dimensions, obtaining cell count for dimension sizes etc..
            Cubes can be 1-dimensional to n-dimensional and these utility methods deal with this variety.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.CubeDimensionHelper.GetTotalCells(System.Int32[])">
            <summary> Returns the number of cells in a cube that has the given dimension sizes.</summary>
            <param name="dimensionSizes">is an array describing the number of dimensions and size of dimensions (number of members)
            </param>
            <returns> total number of cells (size)
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.CubeDimensionHelper.NextIndize(System.Int32[],System.Int32[])">
            <summary> Increments the index values in the dimensionIndizes array given each dimension's size.
            For example, if dimension sizes are [3, 2, 4] then the indizes follow this order:
            [0,0,0]   [1,0,0]  [2,0,0]  [0,1,0] ... [1,0,3] [2,0,3] [0,1,3]  [1,1,3]  [2,1,3]
            This example shows indize Start and end ranges.
            </summary>
            <param name="dimensionSizes">size of each dimension
            </param>
            <param name="dimensionIndizes">index value for each dimension, each value between and dimension size - 1
            </param>
            <throws>  NoSuchElementException when an attempt is made to position indizes past the max </throws>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.CubeDimensionHelper.GetDimensionSizes(com.espertech.esper.view.stat.olap.Dimension[])">
            <summary> Compile an array of dimension sizes. The array contains as many elements as there are dimensions.
            The size of each dimension is returned in each array element.
            For example, a return value of [2,3,4] denotes a 3 dimensions where the first dimension
            has 2 members, the second dimension has 3 members, and the 3rd dimension has 4 members.
            </summary>
            <param name="dimensions">is an array of dimensions
            </param>
            <returns> integer array with size of each dimension
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.CubeDimensionHelper.GetOrdinal(System.Int32[],System.Int32[])">
            <summary> Given index values for each dimension and all dimension sizes this method returns an ordinal value.
            For example, for dimensionIndizes [1, 4, 3] and sizes [2, 5, 4] the ordinal is 1 + 4 * 2 + 3 * 10.
            </summary>
            <param name="dimensionIndizes">index value for each dimension, each value between and dimension size - 1
            </param>
            <param name="dimensionSizes">size of each dimension
            </param>
            <returns> cell ordinal, between 0 and   (dimensionSizes[0] + dimensionSizes[1] * dimensionSizes[0] etc.)  
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.SQLTypeMapUtil">
            <summary>
            Utility for mapping SQL types of <see cref="!:java.sql.Types"/> to native types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.SQLTypeMapUtil.SqlTypeToClass(System.Int32,System.String)">
            <summary>
            Converts a SQLType to a native type.
            </summary>
            <param name="sqlType">to return type for</param>
            <param name="className">
            is the classname that result metadata returns for a column
            </param>
            <returns>Type for sql types</returns>
        </member>
        <member name="T:com.espertech.esper.util.TypeInstantiationException">
            <summary>
            Exception to represent an error instantiating a class from a class name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.TypeInstantiationException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">supplies the detailed description</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeInstantiationException.#ctor(System.String,System.Exception)">
            <summary>Ctor. </summary>
            <param name="message">supplies the detailed description</param>
            <param name="cause">the exception cause</param>
        </member>
        <member name="T:com.espertech.esper.type.PrimitiveValueType">
            <summary>
            Enumeration of types of primitive values.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.BYTE">
            <summary> Byte.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.SHORT">
            <summary> Short.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.INTEGER">
            <summary> Integer.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.LONG">
            <summary> Long.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.FLOAT">
            <summary> Float.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.DOUBLE">
            <summary> Double.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.DECIMAL">
            <summary> Double.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.BOOL">
            <summary> Boolean.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.STRING">
            <summary> String.</summary>
        </member>
        <member name="M:com.espertech.esper.type.PrimitiveValueType.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueType.TypeName">
            <summary> Returns the name of the type.</summary>
            <returns> type name
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.MinMaxTypeEnum">
            <summary>
            Enumeration for the type of arithmatic to use.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.MinMaxTypeEnum.MAX">
            <summary> Max.</summary>
        </member>
        <member name="F:com.espertech.esper.type.MinMaxTypeEnum.MIN">
            <summary> Min.</summary>
        </member>
        <member name="P:com.espertech.esper.type.MinMaxTypeEnum.ExpressionText">
            <summary> Returns textual representation of enum.</summary>
            <returns> text for enum
            </returns>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalRootNode">
            <summary>
            This class is always the root node in the evaluation tree representing an event expression.
            It hold the handle to the EPStatement implementation for notifying when matches are found.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternStarter">
            <summary> Interface for observing when an event expression needs to Start (by adding the first listener).
            The publishing event expression supplies the callback used for indicating matches. The implementation supplies
            as a return value the callback to use to Stop the event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStarter.Start(com.espertech.esper.pattern.PatternMatchCallback,com.espertech.esper.pattern.PatternContext)">
            <summary> An event expression was Started and supplies the callback to use when matching events appear.
            Returns the callback to use to Stop the event expression.
            </summary>
            <param name="matchCallback">must be supplied to indicate what to call when the expression turns true
            </param>
            <param name="context">is the context for handles to services required for evaluation.
            </param>
            <returns> a callback to Stop the expression again
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootNode.Start(com.espertech.esper.pattern.PatternMatchCallback,com.espertech.esper.pattern.PatternContext)">
            <summary>
            Starts the specified callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootNode.NewState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>
            Create the evaluation state node containing the truth value state for each operator in an
            event expression.
            </summary>
            <param name="parentNode">is the parent evaluator node that this node indicates a change in truth value to</param>
            <param name="beginState">is the container for events that makes up the Start state</param>
            <param name="context">is the handle to services required for evaluation</param>
            <param name="stateNodeId">is the new state object's identifier</param>
            <returns>
            state node containing the truth value state for the operator
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.IndexTreePath">
            <summary>
            Encapsulates the information required by <see cref="T:com.espertech.esper.filter.IndexTreeBuilder"/> to maintain the filter parameter tree structure
            when filters are added and removed from the tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreePath.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreePath.Add(com.espertech.esper.filter.FilterParamIndexBase,System.Object)">
            <summary> Add an index to end of the list representing a path through indexes.</summary>
            <param name="index">to add
            </param>
            <param name="filteredForValue">is the value the index filters
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreePath.RemoveFirst">
            <summary> Remove and return first index.</summary>
            <returns> first index
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreePath.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexCompare">
            <summary>
            Index for filter parameter constants for the comparison operators (less, greater, etc).
            The implementation is based on the SortedDictionary implementation of SortedDictionary.
            The index only accepts numeric constants. It keeps a lower and upper bounds of all constants in the index
            for fast range checking, since the assumption is that frequently values fall within a range.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexCompare.#ctor(System.String,com.espertech.esper.filter.FilterOperator,com.espertech.esper.events.EventType)">
            <summary>
            Constructs the index for matching comparison operators (&lt;, &gt;, &lt;=, &gt;=).</summary>
            <param name="propertyName">is the name of the event attribute field</param>
            <param name="filterOperator">is the type of relational comparison operator</param>
            <param name="eventType">describes the event type and is used to obtain a getter instance for the property
            for fast get value access.
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexCompare.Remove(System.Object)">
            <summary>
            Remove the event evaluation instance for the given constant. Returns true if
            the constant was found, or false if not.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock method must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">is the value supplied in the filter paremeter</param>
            <returns>
            true if found and removed, false if not found
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexCompare.MatchEvent(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Matches the event.
            </summary>
            <param name="eventBean">The event bean.</param>
            <param name="matches">The matches.</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexCompare.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:com.espertech.esper.filter.EventEvaluator"/> with the specified filter constant.
            Returns null if no entry found for the constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock method must supply a lock for this purpose.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexCompare.Count">
            <summary>
            Return the number of distinct filter parameter constants stored.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock method must supply a lock for this purpose.
            </summary>
            <value></value>
            <returns> Number of entries in index
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexCompare.ReadWriteLock">
            <summary>
            Supplies the lock for protected access.
            </summary>
            <value></value>
            <returns> lock
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.WrapperEventType">
            <summary>
            An event type that adds zero or more fields to an existing event type.
            <para>
            The additional fields are represented as a Map. Any queries to event properties are first
            held against the additional fields, and secondly are handed through to the underlying event.
            </para>
            <para>
            If this event type is to add information to another wrapper event type (wrapper to wrapper), then it is the
            responsibility of the creating logic to use the existing event type and add to it.
            </para>
            <para>
            Uses a the map event type <see cref="T:com.espertech.esper.events.MapEventType"/> to represent the mapped properties. This is because the additional properties
            can also be beans or complex types and the Map event type handles these nicely.
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.WrapperEventType.underlyingEventType">
            <summary>
            The underlying wrapped event type.
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.WrapperEventType.underlyingMapType">
            <summary>
            The map event type that provides the additional properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventType.#ctor(System.String,com.espertech.esper.events.EventType,System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor.</summary>
            <param name="typeName">is the event type alias name</param>
            <param name="eventType">is the event type of the wrapped events</param>
            <param name="properties">is the additional properties this wrapper adds</param>
            <param name="eventAdapterService">is the ser</param>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventType.GetGetter(System.String)">
            <summary>
            Get the getter for a specified event property. Returns null if the property name is not valid.
            </summary>
            <param name="property">is the property name</param>
            <returns>
            a getter that can be used to obtain property values for event instances of the same event type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventType.GetPropertyType(System.String)">
            <summary>
            Get the type of an event property as returned by the "getter" method for that property. Returns
            unboxed (such as 'typeof(int)') as well as boxed (typeof(int?)) type.
            Returns null if the property name is not valid.
            </summary>
            <param name="property">is the property name</param>
            <returns>
            type of the property, the unboxed or the boxed type.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventType.IsProperty(System.String)">
            <summary>
            Check that the given property name is valid for this event type, ie. that is exists in the event type.
            </summary>
            <param name="property">is the property to check</param>
            <returns>true if exists, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventType.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventType.CheckForRepeatedPropertyNames(com.espertech.esper.events.EventType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Checks for repeated property names.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventType.Alias">
            <summary>
            Gets the event type alias.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventType.DeepSuperTypes">
            <summary>
            Returns enumerable over all super types to event type, going up the hierarchy and including
            all interfaces (and their extended interfaces) and superclasses as EventType instances.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventType.PropertyNames">
            <summary>
            Get all valid property names for the event type.
            </summary>
            <value>The property names.</value>
            <returns> A string array containing the property names of this typed event data object.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventType.SuperTypes">
            <summary>
            Returns an array of event types that are super to this event type, from which this event type
            inherited event properties.  For object instances underlying the event this method returns the
            event types for all superclasses extended by the object and all interfaces implemented by the
            object.
            </summary>
            <value></value>
            <returns>an array of event types</returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventType.UnderlyingType">
            <summary>
            Get the class that represents the type of the event type.
            Returns a bean event class if the schema represents a bean event type.
            Returns Map if the schema represents a collection of values in a Map.
            </summary>
            <value>The type of the underlying.</value>
            <returns> type of the event object
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventType.UnderlyingEventType">
            <summary>
            Gets the type of the underlying event.
            </summary>
            <value>The type of the underlying event.</value>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventType.UnderlyingMapType">
            <summary>
            Gets the type of the underlying map.
            </summary>
            <value>The type of the underlying map.</value>
        </member>
        <member name="T:com.espertech.esper.events.WrapperEventBean">
            <summary>
            Event bean that wraps another event bean adding additional properties.
            <para>
            This can be useful for classes for which the statement adds derived values retaining the original class.
            </para>
            <para>
            The event type of such events is always <see cref="T:com.espertech.esper.events.WrapperEventType"/>. Additional properties are stored in a
            Map.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventBean.#ctor(com.espertech.esper.events.EventBean,com.espertech.esper.compat.Map{System.String,System.Object},com.espertech.esper.events.EventType)">
            <summary>Ctor.</summary>
            <param name="_event">is the wrapped event</param>
            <param name="properties">
            is zero or more property values that embellish the wrapped event
            </param>
            <param name="eventType">is the <see cref="T:com.espertech.esper.events.WrapperEventType"/>.</param>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventBean.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventBean.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventBean.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventBean.EventType">
            <summary>
            Return the <see cref="P:com.espertech.esper.events.WrapperEventBean.EventType"/> instance that describes the set of properties available for this event.
            </summary>
            <value></value>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventBean.Underlying">
            <summary>
            Get the underlying data object to this event wrapper.
            </summary>
            <value></value>
            <returns> underlying data object, usually either a Map or a bean instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventBean.UnderlyingMap">
            <summary>
            Returns the underlying map storing the additional properties, if any.
            </summary>
            <returns>event property IDictionary</returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventBean.DecoratingProperties">
            <summary>
            Returns decorating properties.
            </summary>
            <value></value>
            <returns>property name and values</returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventBean.UnderlyingEvent">
            <summary>Returns the wrapped event.</summary>
            <returns>wrapped event</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.PropertyListBuilderFactory">
            <summary>
            Factory for creates a builder/introspector for determining event property descriptors
            based on a given class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderFactory.CreateBuilder(com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>
            Creates an implementation for a builder considering the accessor style and
            code generation flags for a given class.
            </summary>
            <param name="optionalLegacyClassConfigs">configures how event property listy is build</param>
            <returns>builder/introspector implementation</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.MapNestedPropertyGetter">
            <summary>
            Getter for one or more levels deep nested properties of maps.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.MapNestedPropertyGetter.#ctor(System.Collections.Generic.ICollection{com.espertech.esper.events.EventPropertyGetter},com.espertech.esper.events.BeanEventTypeFactory)">
            <summary>Ctor.</summary>
            <param name="getterChain">is the chain of getters to retrieve each nested property</param>
            <param name="beanEventTypeFactory">is a factory for bean event types</param>
        </member>
        <member name="T:com.espertech.esper.events.property.KeyedPropertyGetter">
            <summary>
            Getter for a key property identified by a given key value, using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.KeyedPropertyGetter.#ctor(com.espertech.esper.events.property.IndexedPropertyDescriptor,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="key">is the key to supply as parameter to the mapped property getter</param>
        </member>
        <member name="M:com.espertech.esper.events.property.KeyedPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.KeyedPropertyGetter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.KeyedPropertyGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a property.
            <para>
            Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
            Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
            If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
            does not exists and the method returns false.
            </para>
            	<para>
            For non-dynamic properties, this method always returns true since a getter would not be available
            unless
            </para>
            </summary>
            <param name="eventBean">the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default) properties
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.KeyedFastPropertyGetter">
            <summary>
            Getter for a key property identified by a given key value, using the CGLIB fast method.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.KeyedFastPropertyGetter.#ctor(CGLib.FastMethod,System.Object)">
            <summary>Constructor.</summary>
            <param name="fastMethod">
            is the method to use to retrieve a value from the object.
            </param>
            <param name="key">
            is the key to supply as parameter to the mapped property getter
            </param>
        </member>
        <member name="T:com.espertech.esper.events.EventAdapterException">
            <summary>
            This exception is thrown to indicate a problem resolving an event type by name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterException.#ctor(System.String,System.Exception)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
            <param name="nested">nested exception
            </param>
        </member>
        <member name="T:com.espertech.esper.events.CGLibPropertyGetter">
            <summary>
            Property getter using CGLib's FastMethod instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.CGLibPropertyGetter.#ctor(CGLib.FastProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.CGLibPropertyGetter"/> class.
            </summary>
            <param name="fastProperty">The fast property.</param>
        </member>
        <member name="M:com.espertech.esper.events.CGLibPropertyGetter.#ctor(CGLib.FastMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.CGLibPropertyGetter"/> class.
            </summary>
            <param name="fastMethod">The fast method.</param>
        </member>
        <member name="M:com.espertech.esper.events.CGLibPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Return the value for the property in the event object specified when the instance was obtained.
            Useful for fast access to event properties. Throws a PropertyAccessException if the getter instance
            doesn't match the EventType it was obtained from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from</param>
            <returns>value of property in event</returns>
            <throws>  PropertyAccessException to indicate that property access failed </throws>
        </member>
        <member name="M:com.espertech.esper.events.CGLibPropertyGetter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.CGLibPropertyGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a property.
            <para>
            Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
            Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
            If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
            does not exists and the method returns false.
            </para>
            	<para>
            For non-dynamic properties, this method always returns true since a getter would not be available
            unless
            </para>
            </summary>
            <param name="eventBean">the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default) properties
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.BeanEventAdapter">
            <summary>
            A factory for <see cref="T:com.espertech.esper.events.BeanEventType"/> instances based on type information
            and using configured settings for 
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.BeanEventAdapter.defaultPropertyResolutionStyle">
            <summary>Default property resolution style.</summary>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventAdapter.#ctor(com.espertech.esper.compat.Map{System.Type,com.espertech.esper.events.BeanEventType})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.BeanEventAdapter"/> class.
            </summary>
            <param name="typesPerBean">The types per bean.</param>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventAdapter.CreateBeanType(System.String,System.Type)">
            <summary>
            Creates a new EventType object for a specified type if this is the first time
            the type has been seen. Else uses a cached EventType instance, i.e. client types
            do not need to cache.
            </summary>
            <param name="alias">is the alias</param>
            <param name="type">the type of the object.</param>
            <returns>EventType implementation for bean class</returns>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventAdapter.DefaultPropertyResolutionStyle">
            <summary>
            Gets or sets the property resolution style.
            </summary>
            <value>The property resolution style.</value>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventAdapter.TypeToLegacyConfigs">
            <summary>
            Sets the additional mappings for legacy types.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StatementSpecMapper">
            <summary>
            Helper for mapping internal representations of a statement to the SODA object model for statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecMapper.Map(com.espertech.esper.client.soda.EPStatementObjectModel,com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.variable.VariableService)">
            <summary>Maps the SODA object model to a statement specification.</summary>
            <param name="sodaStatement">is the object model to map</param>
            <param name="engineImportService">for resolving imports such as plug-in aggregations</param>
            <param name="variableService">provides variable values</param>
            <returns>statement specification, and internal representation of a statement</returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecMapper.Unmap(com.espertech.esper.epl.spec.StatementSpecRaw)">
            <summary>Maps the internal representation of a statement to the SODA object model.</summary>
            <param name="statementSpec">is the internal representation</param>
            <returns>object model of statement</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.rep.SingleCursorIterator">
            <summary>
            A utility class for an iterator that has one element.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.SingleCursorIterator.#ctor(com.espertech.esper.epl.join.rep.Cursor)">
            <summary>
            Ctor.
            </summary>
            <param name="cursor">is the single element.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.SingleCursorIterator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.SingleCursorIterator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.SingleCursorIterator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.SingleCursorIterator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.SingleCursorIterator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.FilterExprAnalyzer">
            <summary> Analyzes a filter expression and builds a query graph model.
            The 'equals' and 'and' expressions in the filter expression are extracted
            and placed in the query graph model as navigable relationships (by key and index
            properties) between streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.FilterExprAnalyzer.Analyze(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.join.plan.QueryGraph)">
            <summary> Analyzes filter expression to build query graph model.</summary>
            <param name="topNode">filter top node
            </param>
            <param name="queryGraph">model containing relationships between streams, to be written to
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.FilterExprAnalyzer.AnalyzeEqualsNode(com.espertech.esper.epl.expression.ExprEqualsNode,com.espertech.esper.epl.join.plan.QueryGraph)">
            <summary> Analye EQUALS (=) node.</summary>
            <param name="equalsNode">node to analyze
            </param>
            <param name="queryGraph">store relationships between stream properties
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.FilterExprAnalyzer.AnalyzeAndNode(com.espertech.esper.epl.expression.ExprAndNode,com.espertech.esper.epl.join.plan.QueryGraph)">
            <summary> Analyze the AND-node.</summary>
            <param name="andNode">node to analyze
            </param>
            <param name="queryGraph">to store relationships between stream properties
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.RootCartProdAssemblyNode">
            <summary>
            Assembly node for an event stream that is a root with a two or more child nodes below it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootCartProdAssemblyNode.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary> Ctor.</summary>
            <param name="streamNum">is the stream number
            </param>
            <param name="numStreams">is the number of streams
            </param>
            <param name="allSubStreamsOptional">true if all substreams are optional and none are required
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootCartProdAssemblyNode.AddChild(com.espertech.esper.epl.join.assemble.BaseAssemblyNode)">
            <summary>
            Add a child node.
            </summary>
            <param name="childNode">to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootCartProdAssemblyNode.Init(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Provides results to assembly nodes for initialization.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootCartProdAssemblyNode.Process(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Process results.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootCartProdAssemblyNode.Result(com.espertech.esper.events.EventBean[],System.Int32,com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.rep.Node)">
            <summary>
            Publish a result row.
            </summary>
            <param name="row">is the result to publish</param>
            <param name="fromStreamNum">is the originitor that publishes the row</param>
            <param name="myEvent">is optional and is the event that led to the row result</param>
            <param name="myNode">is optional and is the result node of the event that led to the row result</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootCartProdAssemblyNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Output this node using writer, not outputting child nodes.
            </summary>
            <param name="indentWriter">to use for output</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootCartProdAssemblyNode.ComputeCombined(System.Int32[][])">
            <summary> Compute an array of supersets of sub stream numbers per stream, for at least 3 or more streams.</summary>
            <param name="subStreamsPerChild">is for each stream number a list of direct child sub streams
            </param>
            <returns> an array in with length (subStreamsPerChild.Length - 2) in which
            array[0] contains the streams for subStreamsPerChild[0] and subStreamsPerChild[1] combined, and
            array[1] contains the streams for subStreamsPerChild[0], subStreamsPerChild[1] and subStreamsPerChild[2] combined
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.AssemblyStrategyTreeBuilder">
            <summary>
            Builds a tree of assembly nodes given a strategy for how to join streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.AssemblyStrategyTreeBuilder.Build(System.Int32,System.Collections.Generic.IDictionary{System.Int32,System.Int32[]},System.Boolean[])">
            <summary> Builds a tree of <see cref="T:com.espertech.esper.epl.join.assemble.BaseAssemblyNode"/> from join strategy information.</summary>
            <param name="rootStream">the root stream supplying the event to evaluate
            </param>
            <param name="streamsJoinedPerStream">a map in which the key is the stream number to supply an event,
            and the value is an array of streams to find events in for the given event
            </param>
            <param name="isRequiredPerStream">indicates which streams are required join streams versus optional streams
            </param>
            <returns> root assembly node
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprMedianNode">
            <summary>
            Represents the median(...) aggregate function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMedianNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMedianNode.ValidateAggregationChild(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Gives the aggregation node a chance to validate the sub-expression types.
            </summary>
            <param name="streamTypeService">is the types per stream</param>
            <param name="methodResolutionService">used for resolving method and function names</param>
            <returns>aggregation function use</returns>
            <throws>ExprValidationException when expression validation failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMedianNode.EqualsNodeAggregate(com.espertech.esper.epl.expression.ExprAggregateNode)">
            <summary>
            Return true if a expression aggregate node semantically equals the current node, or false if not.
            For use by the EqualsNode implementation which compares the distinct flag.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMedianNode.AggregationFunctionName">
            <summary>
            Returns the aggregation function name for representation in a generate expression string.
            </summary>
            <value></value>
            <returns> aggregation function name
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprIdentNode">
            <summary>
            Represents an stream property identifier in a filter expressiun tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNode.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="unresolvedPropertyName">the event property name in unresolved form, ie. unvalidated against streams</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNode.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="unresolvedPropertyName">the event property name in unresolved form, ie. unvalidated against streams</param>
            <param name="streamOrPropertyName">the stream name, or if not a valid stream name a possible nested property name in one of the streams.</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNode.GetTypeFromStream(com.espertech.esper.epl.core.StreamTypeService,System.String,System.String)">
            <summary>
            Determine stream id and property type given an unresolved property name and a
            stream name that may also be part of the property name.
            <para>
            For example: select s0.p1 from...    p1 is the property name, s0 the stream name, however this could also be a nested property
            </para>
            </summary>
            <param name="streamTypeService">service for type infos</param>
            <param name="unresolvedPropertyName">property name</param>
            <param name="streamOrPropertyName">stream name, this can also be the first part of the property name</param>
            <returns>pair of stream number and property type</returns>
            <throws>ExprValidationException if no such property exists</throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNode.EvaluatePropertyExists(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Returns true if the property exists, or false if not.
            </summary>
            <param name="eventsPerStream">each stream's events</param>
            <param name="isNewData">if the stream represents insert or remove stream</param>
            <returns>true if the property exists, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNode.UnresolvedPropertyName">
            <summary>For unit testing, returns unresolved property name.</summary>
            <returns>property name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNode.StreamOrPropertyName">
            <summary>For unit testing, returns stream or property name candidate.</summary>
            <returns>stream name, or property name of a nested property of one of the streams</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNode.FullUnresolvedName">
            <summary>
            Returns the unresolved property name in it's complete form, including
            the stream name if there is one.
            </summary>
            <returns>property name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <value></value>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNode.StreamId">
            <summary>
            Gets the stream id supplying the property value
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNode.ResolvedStreamName">
            <summary>
            Returns stream name as resolved by lookup of property in streams.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNode.ResolvedPropertyName">
            <summary>
            Return property name as resolved by lookup in streams.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprAvedevNode">
            <summary>
            Represents the avedev(...) aggregate function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAvedevNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAvedevNode.ValidateAggregationChild(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">used for resolving method and function names</param>
            <returns>aggregation function use</returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAvedevNode.EqualsNodeAggregate(com.espertech.esper.epl.expression.ExprAggregateNode)">
            <summary>
            Return true if a expression aggregate node semantically equals the current node, or false if not.
            For use by the EqualsNode implementation which compares the distinct flag.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAvedevNode.AggregationFunctionName">
            <summary>
            Returns the aggregation function name for representation in a generate expression string.
            </summary>
            <value></value>
            <returns> aggregation function name
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.DbDriverGeneric">
            <summary>
            A generic database driver.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverGeneric.#ctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.epl.db.drivers.DbDriverGeneric"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverGeneric.CreateConnection">
            <summary>
            Factory method that is used to create instance of a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverGeneric.CreateConnectionStringBuilder">
            <summary>
            Creates a connection string builder.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverGeneric.UsePositionalParameters">
            <summary>
            Gets a value indicating whether [use position parameters].
            </summary>
            <value>
            	<c>true</c> if [use position parameters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverGeneric.ParamPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <value>The param prefix.</value>
        </member>
        <member name="T:com.espertech.esper.client.ParameterModel">
            <summary>
            ParameterModel lets the user specify the way that the parameter
            model works for backend repositories.  ADO.NET allows providers
            to specify the manner in which parameters work.  This causes a
            great deal of ambiguity in how to deal with them in code.  This
            class allows the client to determine how to bind parameters to
            the ADO.NET provider.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ParameterModel"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.#ctor(System.String,com.espertech.esper.client.ParameterStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ParameterModel"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.GetNamedParameter(System.Int32)">
            <summary>
            Gets the formatted version of the named paramter.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.CreateDbCommand(System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment})">
            <summary>
            Creates the db command.
            </summary>
            <param name="parseFragments">The parse fragments.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.CreatePseudoCommand(System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment})">
            <summary>
            Creates the a pseudo sql command that replaces parameters with
            question marks.  The question marks can then be parsed at the
            cache and converted back into native ADO.NET parameters.
            </summary>
            <param name="parseFragments">The parse fragments.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.CreateDbParameters(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates the db parameters.
            </summary>
            <param name="command">The command.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.CreateDbParameters(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment})">
            <summary>
            Creates the db parameters.
            </summary>
            <param name="command">The command.</param>
            <param name="parseFragments">The parse fragments.</param>
        </member>
        <member name="P:com.espertech.esper.client.ParameterModel.Prefix">
            <summary>
            Gets or sets the prefix used before a parameter.
            </summary>
            <value>The parameter prefix.</value>
        </member>
        <member name="P:com.espertech.esper.client.ParameterModel.Style">
            <summary>
            Gets or sets the parameter style.
            </summary>
            <value>The parameter style.</value>
        </member>
        <member name="F:com.espertech.esper.client.ParameterStyle.Named">
            <summary>
            Provider expects parameters to be named.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ParameterStyle.Positional">
            <summary>
            Provider expects parameters to be positional.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.OrderByProcessorSimple">
            <summary>
            An order-by processor that sorts events according to the expressions
            in the order_by clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessorSimple.#ctor(System.Collections.Generic.IList{com.espertech.esper.epl.spec.OrderByItem},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},System.Boolean,com.espertech.esper.epl.agg.AggregationService)">
            <summary>Ctor.</summary>
            <param name="orderByList">the nodes that generate the keys to sort events on</param>
            <param name="groupByNodes">generate the keys for determining aggregation groups</param>
            <param name="needsGroupByKeys">indicates whether this processor needs to have individualgroup by keys to evaluate the sort condition successfully</param>
            <param name="aggregationService">used to evaluate aggregate functions in the group-by andsort-by clauses</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessorSimple.Sort(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[][],System.Boolean)">
            <summary>
            Sorts the specified outgoing events.
            </summary>
            <param name="outgoingEvents">The outgoing events.</param>
            <param name="generatingEvents">The generating events.</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessorSimple.Sort(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[][],com.espertech.esper.collection.MultiKeyUntyped[],System.Boolean)">
            <summary>
            Sorts the specified outgoing events.
            </summary>
            <param name="outgoingEvents">The outgoing events.</param>
            <param name="generatingEvents">The generating events.</param>
            <param name="groupByKeys">The group by keys.</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessorSimple.CompareValues(System.Object,System.Object,System.Boolean)">
            <summary>Compares values for sorting.</summary>
            <param name="valueOne">first value to compare, can be null</param>
            <param name="valueTwo">second value to compare, can be null</param>
            <param name="descending">true if ascending, false if descending</param>
            <returns>0 if equal, -1 if smaller, +1 if larger</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessorSimple.Sort(com.espertech.esper.events.EventBean[],com.espertech.esper.collection.MultiKeyUntyped[])">
            <summary>
            Sort a given array of outgoing events using the sort keys returning a sorted outgoing event array.
            </summary>
            <param name="outgoingEvents">is the events to sort</param>
            <param name="orderKeys">is the keys to sort by</param>
            <returns>sorted events</returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.AliasNodeSwapper">
            <summary> A utility class for replacing select-clause aliases with their
            definitions in expression node trees.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.AliasNodeSwapper.Swap(com.espertech.esper.epl.expression.ExprNode,System.String,com.espertech.esper.epl.expression.ExprNode)">
            <summary> Replace all instances of the node representing the alias with 
            the full expression. 
            </summary>
            <param name="exprTree">the expression node tree to make the changes in 
            </param>
            <param name="alias">the select-clause alias that is to be expanded
            </param>
            <param name="fullExpr">the full expression that the alias represents
            </param>
            <returns> exprTree with the appropriate swaps performed, or fullExpr, 
            if all of exprTree needed to be swapped
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.AliasNodeSwapper.VisitChildren(com.espertech.esper.epl.expression.ExprNode,System.String,com.espertech.esper.epl.expression.ExprNode)">
            <summary> A recursive function that works on the child nodes of a given
            node, replacing any instances of the node representing the alias, 
            and visiting the children of all other nodes.
            </summary>
            <param name="node">the node whose children are to be examined for aliases
            </param>
            <param name="alias">the alias to replace
            </param>
            <param name="fullExpr">the full expression corresponding to the alias
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.AggregationServiceNull">
            <summary>
            A null object implementation of the AggregationServiceinterface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceNull.ApplyEnter(com.espertech.esper.events.EventBean[],com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Apply events as entering a window (new events).
            </summary>
            <param name="eventsPerStream">events for each stream entering window</param>
            <param name="optionalGroupKeyPerRow">can be null if grouping without keys is desired, else the keys
            to use for grouping, each distinct key value results in a new row of aggregation state.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceNull.ApplyLeave(com.espertech.esper.events.EventBean[],com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Apply events as leaving a window (old events).
            </summary>
            <param name="eventsPerStream">events for each stream entering window</param>
            <param name="optionalGroupKeyPerRow">can be null if grouping without keys is desired, else the keys
            to use for grouping, each distinct key value results in a new row of aggregation state.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceNull.SetCurrentRow(com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Set the current aggregation state row - for use when evaluation nodes are asked to evaluate.
            </summary>
            <param name="groupKey">key identify the row of aggregation states</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceNull.GetValue(System.Int32)">
            <summary>
            Returns current aggregation state, for use by expression node representing an aggregation function.
            </summary>
            <param name="column">is assigned to the aggregation expression node and passed as an column (index) into a row</param>
            <returns>current aggragation state</returns>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AggregationServiceNull.ClearResults">
            <summary>
            Clear current aggregation state.
            </summary>
        </member>
        <member name="T:com.espertech.esper.dispatch.DispatchServiceImpl">
            <summary>
            Implements dispatch service using a thread-local linked list of Dispatchable instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.dispatch.DispatchServiceImpl.Dispatch">
            <summary>
            Dispatches events in the queue.
            </summary>
        </member>
        <member name="M:com.espertech.esper.dispatch.DispatchServiceImpl.AddExternal(com.espertech.esper.dispatch.Dispatchable)">
            <summary>
            Add an item to be dispatched.  The item is added to
            the external dispatch queue.
            </summary>
            <param name="dispatchable">to execute later</param>
        </member>
        <member name="T:com.espertech.esper.core.EPStatementHandleCallback">
            <summary>
            Statement resource handle and callback for use with <see cref="T:com.espertech.esper.filter.FilterService"/> and
            <see cref="T:com.espertech.esper.schedule.SchedulingService"/>.
            <para/>
            Links the statement handle identifying a statement and containing the statement resource lock,
            with the actual callback to invoke for a statement together.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementHandleCallback.#ctor(com.espertech.esper.core.EPStatementHandle,com.espertech.esper.filter.FilterHandleCallback)">
            <summary>Ctor.</summary>
            <param name="epStatementHandle">is a statement handle</param>
            <param name="callback">is a filter callback</param>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementHandleCallback.#ctor(com.espertech.esper.core.EPStatementHandle,com.espertech.esper.schedule.ScheduleHandleCallback)">
            <summary>Ctor.</summary>
            <param name="epStatementHandle">is a statement handle</param>
            <param name="callback">is a schedule callback</param>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementHandleCallback.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementHandleCallback.EpStatementHandle">
            <summary>Returns the statement handle.</summary>
            <returns>handle containing a statement resource lock</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementHandleCallback.FilterCallback">
            <summary>
            Returns the statement filter callback, or null if this is a schedule callback handle.
            </summary>
            <returns>filter callback</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementHandleCallback.ScheduleCallback">
            <summary>
            Returns the statement schedule callback, or null if this is a filter callback handle.
            </summary>
            <returns>schedule callback</returns>
        </member>
        <member name="T:com.espertech.esper.compat.WeakDictionary`2">
             <summary>
             A generic dictionary, which allows its keys
             to be garbage collected if there are no other references
             to them than from the dictionary itself.
             </summary>
            
             <remarks>
             If the key of a particular entry in the dictionary has been
             collected, then both the key and value become effectively
             unreachable. However, left-over WeakReference objects for the key
             will physically remain in the dictionary until RemoveCollectedEntries
             is called. This will lead to a discrepancy between the Count property
             and the number of iterations required to visit all of the elements of
             the dictionary using its enumerator or those of the Keys and Values
             collections. Similarly, CopyTo will copy fewer than Count elements
             in this situation.
             </remarks>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WeakDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WeakDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WeakDictionary`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WeakDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.RemoveCollectedEntries">
            <summary>
            Removes the left-over weak references for entries in the dictionary
            whose key or value has already been reclaimed by the garbage
            collector. This will reduce the dictionary's Count by the number
            of dead key-value pairs that were eliminated.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, Starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Get(`0,`1)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then the defaultValue is
            returned.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Get(`0)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Put(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to thenew value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Push(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            If a value was previously mapped it is returned.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.PutAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Puts all values from the source dictionary into
            this dictionary.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Remove(`0,`1@)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.
            </summary>
            <param name="key">Search key into the dictionary</param>
            <param name="value">The value removed from the dictionary (if found).</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.RemoveAndReturn(`0)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  The item if found is returned; if not,
            default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <remarks>
            WARNING: The count returned here may include entries for which
            either the key or value objects have already been garbage
            collected. Call RemoveCollectedEntries to weed out collected
            entries and update the count accordingly.
            </remarks>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.KeysEnum">
            <summary>
            Gets an enumerator that enumerates the keys.
            </summary>
            <value>The keys enum.</value>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:TValue"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.FirstValue">
            <summary>
            Returns the first value in the enumeration of values
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.EventCoordinator">
            <summary>
            Use this to coordinate an event that has multiple participants.
            To use it, have each participant increment the coordinator during
            their initialization and have each participant signal the coordinator
            when they are ready.  An application that is pending coordination
            should call the WaitAll() method to wait for all participants.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.EventCoordinator.Signal">
            <summary>
            Signals this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.EventCoordinator.Increment">
            <summary>
            Increments the counter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.EventCoordinator.WaitAll">
            <summary>
            Waits all.
            </summary>
        </member>
        <member name="T:com.espertech.esper.collection.SingleEventIterator">
            <summary>
            A utility class for an iterator that has one element.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SingleEventIterator.#ctor(com.espertech.esper.events.EventBean)">
            <summary> Constructor, takes the single event to iterate over as a parameter.
            The single event can be null indicating that there are no more elements.
            </summary>
            <param name="eventBean">single bean that the iterator returns, or null for an empty iterator
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.SingleEventIterator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.SingleEventIterator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.SingleEventIterator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:com.espertech.esper.collection.SingleEventIterator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:com.espertech.esper.collection.SingleEventIterator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.SelectClause">
            <summary>
            A select-clause consists of a list of selection elements (expressions, Wildcard(s),
            stream wildcard and the like) and an optional stream selector.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.CreateWildcard">
            <summary>Creates a wildcard select-clause, additional expressions can still be added. </summary>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Create">
            <summary>Creates an empty select-clause to be added to via add methods. </summary>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Create(System.String[])">
            <summary>Creates a select-clause consisting of a list of property names. </summary>
            <param name="propertyNames">is the names of properties to select</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.CreateStreamWildcard(System.String)">
            <summary>Creates a select-clause with a single stream wildcard selector (e.g. select streamAliasName.* from MyStream as streamAliasName) </summary>
            <param name="streamAliasName">is the alias given to a stream</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.CreateWildcard(com.espertech.esper.client.soda.StreamSelector)">
            <summary>Creates a wildcard select-clause, additional expressions can still be added. </summary>
            <param name="streamSelector">can be used to select insert or remove streams</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Create(com.espertech.esper.client.soda.StreamSelector)">
            <summary>Creates an empty select-clause. </summary>
            <param name="streamSelector">can be used to select insert or remove streams</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Create(com.espertech.esper.client.soda.StreamSelector,System.String[])">
            <summary>Creates a select-clause consisting of a list of property names. </summary>
            <param name="propertyNames">is the names of properties to select</param>
            <param name="streamSelector">can be used to select insert or remove streams</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.#ctor(com.espertech.esper.client.soda.StreamSelector,System.Collections.Generic.List{com.espertech.esper.client.soda.SelectClauseElement})">
            <summary>Ctor. </summary>
            <param name="streamSelector">selects the stream</param>
            <param name="selectList">is a list of elements in the select-clause</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Add(System.String[])">
            <summary>Adds property names to be selected. </summary>
            <param name="propertyNames">is a list of property names to add</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.AddWithAlias(System.String,System.String)">
            <summary>Adds a single property name and an "as"-asName for the column. </summary>
            <param name="propertyName">name of property</param>
            <param name="asName">is the "as"-asName for the column</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Adds an expression to the select clause. </summary>
            <param name="expression">to add</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Add(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Adds an expression to the select clause and an "as"-asName for the column. </summary>
            <param name="expression">to add</param>
            <param name="asName">is the "as"-alias for the column</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.AddStreamWildcard(System.String)">
            <summary>Adds to the select-clause a stream wildcard selector (e.g. select streamAliasName.* from MyStream as streamAliasName) </summary>
            <param name="streamAliasName">is the alias given to a stream</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.AddWildcard">
            <summary>Adds to the select-clause a  wildcard selector (e.g. select * from MyStream as streamAliasName) </summary>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.AddStreamWildcard(System.String,System.String)">
            <summary>Adds to the select-clause a stream wildcard selector with column alias (e.g. select streamAliasName.* as colAlias from MyStream as streamAliasName) </summary>
            <param name="streamAliasName">is the alias given to a stream</param>
            <param name="columnAlias">the alias given to the column</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SelectClause.StreamSelector">
            <summary>
            Gets or sets the stream selector
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.soda.SelectClause.SelectList">
            <summary>
            Gets or sets the list of expressions in the select clause.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.Patterns">
            <summary>
            Convenience factory for creating <see cref="T:com.espertech.esper.client.soda.PatternExpr"/> instances, which represent pattern expression trees.
            <para>
            Provides quick-access method to create all possible pattern expressions and provides typical parameter lists to each.
            </para>
            <para>
            Note that only the typical parameter lists are provided and pattern expressions can allow adding
            additional parameters.
            </para>
            <para>
            Many expressions, for example logical AND and OR (conjunction and disjunction), allow
            adding an unlimited number of additional sub-expressions to a pattern expression. For those pattern expressions
            there are additional add methods.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Every(com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Pattern-every expression control the lifecycle of the pattern sub-expression.
            </summary>
            <param name="inner">sub-expression to the every-keyword</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.And">
            <summary>
            Pattern-AND expression, allows adding sub-expressions that are connected by a logical AND.
            </summary>
            <returns>pattern expression representing the AND relationship</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.And(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr[])">
            <summary>
            Pattern-AND expression, allows adding sub-expressions that are connected by a logical AND.
            </summary>
            <param name="first">is the first pattern sub-expression to add to the AND</param>
            <param name="second">is a second pattern sub-expression to add to the AND</param>
            <param name="more">
            is optional additional pattern sub-expression to add to the AND
            </param>
            <returns>pattern expression representing the AND relationship</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Or(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr[])">
            <summary>
            Pattern-OR expression, allows adding sub-expressions that are connected by a logical OR.
            </summary>
            <param name="first">is the first pattern sub-expression to add to the OR</param>
            <param name="second">is a second pattern sub-expression to add to the OR</param>
            <param name="more">
            is optional additional pattern sub-expression to add to the OR
            </param>
            <returns>pattern expression representing the OR relationship</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Or">
            <summary>
            Pattern-OR expression, allows adding sub-expressions that are connected by a logical OR.
            </summary>
            <returns>pattern expression representing the OR relationship</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.FollowedBy(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr[])">
            <summary>
            Pattern followed-by expression, allows adding sub-expressions that are connected by a followed-by.
            </summary>
            <param name="first">
            is the first pattern sub-expression to add to the followed-by
            </param>
            <param name="second">
            is a second pattern sub-expression to add to the followed-by
            </param>
            <param name="more">
            is optional additional pattern sub-expression to add to the followed-by
            </param>
            <returns>pattern expression representing the followed-by relationship</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.FollowedBy">
            <summary>
            Pattern followed-by expression, allows adding sub-expressions that are connected by a followed-by.
            </summary>
            <returns>pattern expression representing the followed-by relationship</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.EveryFilter(System.String)">
            <summary>
            Pattern every-operator and filter in combination, equivalent to the "every MyEvent" syntax.
            </summary>
            <param name="alias">is the event type alias name to filter for</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.EveryFilter(System.String,System.String)">
            <summary>
            Pattern every-operator and filter in combination, equivalent to the "every tag=MyEvent" syntax.
            </summary>
            <param name="alias">is the event type alias name to filter for</param>
            <param name="tagName">is the tag name to assign to matching events</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.EveryFilter(com.espertech.esper.client.soda.Filter)">
            <summary>
            Pattern every-operator and filter in combination, equivalent to the "every MyEvent(vol &gt; 100)" syntax.
            </summary>
            <param name="filter">
            specifies the event type name and filter expression to filter for
            </param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.EveryFilter(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>
            Pattern every-operator and filter in combination, equivalent to the "every tag=MyEvent(vol &gt; 100)" syntax.
            </summary>
            <param name="filter">
            specifies the event type name and filter expression to filter for
            </param>
            <param name="tagName">is the tag name to assign to matching events</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Filter(System.String)">
            <summary>
            Filter expression for use in patterns, equivalent to the simple "MyEvent" syntax.
            </summary>
            <param name="alias">is the event type alias name of the events to filter for</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Filter(System.String,System.String)">
            <summary>
            Filter expression for use in patterns, equivalent to the simple "tag=MyEvent" syntax.
            </summary>
            <param name="alias">is the event type alias name of the events to filter for</param>
            <param name="tagName">is the tag name to assign to matching events</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Filter(com.espertech.esper.client.soda.Filter)">
            <summary>
            Filter expression for use in patterns, equivalent to the "MyEvent(vol &gt; 100)" syntax.
            </summary>
            <param name="filter">
            specifies the event type name and filter expression to filter for
            </param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Filter(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>
            Filter expression for use in patterns, equivalent to the "tag=MyEvent(vol &gt; 100)" syntax.
            </summary>
            <param name="filter">
            specifies the event type name and filter expression to filter for
            </param>
            <param name="tagName">is the tag name to assign to matching events</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Guard(System.String,System.String,System.Object[],com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Guard pattern expression guards a sub-expression, equivalent to the "every MyEvent where timer:within(1 sec)" syntax
            </summary>
            <param name="namespace">is the guard objects namespace, i.e. "timer"</param>
            <param name="name">is the guard objects name, i.e. ""within"</param>
            <param name="parameters">is the guard objects optional parameters, i.e. integer 1 for 1 second</param>
            <param name="guarded">is the pattern sub-expression to be guarded</param>
            <returns>pattern guard expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Observer(System.String,System.String,System.Object[])">
            <summary>
            Observer pattern expression, equivalent to the "every timer:interval(1 sec)" syntax
            </summary>
            <param name="namespace">is the observer objects namespace, i.e. "timer"</param>
            <param name="name">is the observer objects name, i.e. ""within"</param>
            <param name="parameters">is the observer objects optional parameters, i.e. integer 1 for 1 second</param>
            <returns>pattern observer expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.TimerWithin(System.Double,com.espertech.esper.client.soda.PatternExpr)">
            <summary>Timer-within guard expression.</summary>
            <param name="seconds">is the number of seconds for the guard</param>
            <param name="guarded">is the sub-expression to guard</param>
            <returns>pattern guard</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.TimerInterval(System.Double)">
            <summary>Timer-interval observer expression.</summary>
            <param name="seconds">is the number of seconds in the interval</param>
            <returns>pattern observer</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.NotFilter(System.String)">
            <summary>
            Pattern not-operator and filter in combination, equivalent to the "not MyEvent" syntax.
            </summary>
            <param name="alias">is the event type alias name to filter for</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.NotFilter(System.String,System.String)">
            <summary>
            Pattern not-operator and filter in combination, equivalent to the "not tag=MyEvent" syntax.
            </summary>
            <param name="alias">is the event type alias name to filter for</param>
            <param name="tagName">is the tag name to assign to matching events</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.NotFilter(com.espertech.esper.client.soda.Filter)">
            <summary>
            Pattern not-operator and filter in combination, equivalent to the "not MyEvent(vol &gt; 100)" syntax.
            </summary>
            <param name="filter">
            specifies the event type name and filter expression to filter for
            </param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.NotFilter(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>
            Pattern not-operator and filter in combination, equivalent to the "not tag=MyEvent(vol &gt; 100)" syntax.
            </summary>
            <param name="filter">
            specifies the event type name and filter expression to filter for
            </param>
            <param name="tagName">is the tag name to assign to matching events</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Not(com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Not-keyword pattern expression flips the truth-value of the pattern sub-expression.
            </summary>
            <param name="subexpression">is the expression whose truth value to flip</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.TimerAt(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Timer-at observer
            </summary>
            <param name="minutes">a single integer value supplying the minute to fire the timer, or null for any (wildcard) minute</param>
            <param name="hours">a single integer value supplying the hour to fire the timer, or null for any (wildcard) hour</param>
            <param name="daysOfMonth">a single integer value supplying the day of the month to fire the timer, or null for any (wildcard) day of the month</param>
            <param name="month">a single integer value supplying the month to fire the timer, or null for any (wildcard) month</param>
            <param name="daysOfWeek">a single integer value supplying the days of the week to fire the timer, or null for any (wildcard) day of the week</param>
            <param name="seconds">a single integer value supplying the second to fire the timer, or null for any (wildcard) second</param>
            <returns>timer-at observer</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.OuterJoinQualifier">
            <summary>
            Qualifies a join by providing the outer join type (full/left/right) and joined-on properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OuterJoinQualifier.Create(System.String,com.espertech.esper.type.OuterJoinType,System.String)">
            <summary>Creates qualifier.</summary>
            <param name="propertyLeft">is a property name providing joined-on values</param>
            <param name="type">is the type of outer join</param>
            <param name="propertyRight">is a property name providing joined-on values</param>
            <returns>qualifier</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OuterJoinQualifier.#ctor(com.espertech.esper.type.OuterJoinType,com.espertech.esper.client.soda.PropertyValueExpression,com.espertech.esper.client.soda.PropertyValueExpression)">
            <summary>
            Ctor.
            </summary>
            <param name="type">is the type of outer join</param>
            <param name="left">is a property providing joined-on values</param>
            <param name="right">is a property providing joined-on values</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OuterJoinQualifier.#ctor(com.espertech.esper.type.OuterJoinType,com.espertech.esper.client.soda.PropertyValueExpression,com.espertech.esper.client.soda.PropertyValueExpression,System.Collections.Generic.List{com.espertech.esper.collection.Pair{com.espertech.esper.client.soda.PropertyValueExpression,com.espertech.esper.client.soda.PropertyValueExpression}})">
            <summary>
            Ctor.
            </summary>
            <param name="type">is the type of outer join</param>
            <param name="left">is a property providing joined-on values</param>
            <param name="right">is a property providing joined-on values</param>
            <param name="additionalProperties">for any pairs of additional on-clause properties</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OuterJoinQualifier.Add(System.String,System.String)">
            <summary>
            Add additional properties to the on-clause, which are logical-and to existing properties
            </summary>
            <param name="propertyLeft">property providing joined-on value</param>
            <param name="propertyRight">property providing joined-on value</param>
            <returns>outer join qualifier</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OuterJoinQualifier.JoinType">
            <summary>Gets or sets the type of outer join.</summary>
            <returns>outer join type</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OuterJoinQualifier.Left">
            <summary>Gets or sets the property value expression to join on.</summary>
            <returns>expression providing joined-on values</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OuterJoinQualifier.Right">
            <summary>Gets or sets the property value expression to join on.</summary>
            <returns>expression providing joined-on values</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OuterJoinQualifier.AdditionalProperties">
            <summary>
            Gets the optional additional properties in the on-clause of the outer join.
            </summary>
            <value>pairs of properties connected via logical-and in an on-clause</value>
        </member>
        <member name="T:com.espertech.esper.client.UpdateEventHandler">
            <summary>
            Defines a delegate that is notified of new and old events.
            </summary>
            <param name="newEvents"></param>
            <param name="oldEvents"></param>
        </member>
        <member name="M:com.espertech.esper.client.ProxyUpdateListener.#ctor(com.espertech.esper.client.UpdateEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ProxyUpdateListener"/> class.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:com.espertech.esper.client.ProxyUpdateListener.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that new events are available or old events are removed.
            If the call to update contains new (inserted) events, then the first argument will be a non-empty list and
            the second will be empty. Similarly, if the call is a notification of deleted events, then the first argument
            will be empty and the second will be non-empty.
            <para>
            Either the newEvents or oldEvents will be non-null. This method won't be called with both arguments being null,
            but either one could be null. The same is true for zero-length arrays.
            </para>
            	<para>
            Either newEvents or oldEvents will be non-empty. If both are non-empty, then the update is a modification
            notification.
            </para>
            </summary>
            <param name="newEvents">is any new events. This will be null or empty if the update is for old events only.</param>
            <param name="oldEvents">is any old events. This will be null or empty if the update is for new events only.</param>
        </member>
        <member name="M:com.espertech.esper.client.ProxyUpdateListener.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:com.espertech.esper.client.ProxyUpdateListener.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.plugin.PlugInEventRepresentationContext">
            <summary>Context for use in <see cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/> to initialize an implementation. </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventRepresentationContext.#ctor(com.espertech.esper.events.EventAdapterService,System.Uri,System.Object)">
            <summary>Ctor. </summary>
            <param name="eventAdapterService">for creating further event types or wrapping event objects</param>
            <param name="eventRepresentationRootURI">URI of the event representation</param>
            <param name="representationInitializer">initializer objects</param>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventRepresentationContext.EventRepresentationRootURI">
            <summary>Ctor. </summary>
            <returns>URI of event representation instance</returns>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventRepresentationContext.RepresentationInitializer">
            <summary>Returns optional configuration for the event representation, or null if none supplied. An String XML document if the configuration was read from an XML file. </summary>
            <returns>configuration, or null if none supplied</returns>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventRepresentationContext.EventAdapterService">
            <summary>Returns the service for for creating further event types or wrapping event objects. </summary>
            <returns>event adapter service</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.UpdateStrategyNonNull">
            <summary>
            Strategy for merging update properties using only non-null values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategyNonNull.#ctor(com.espertech.esper.events.vaevent.RevisionSpec)">
            <summary>Ctor. </summary>
            <param name="spec">the specification</param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StatementSpecMapContext">
            <summary>
            Context for mapping a SODA statement to a statement specification, or multiple for subqueries,
            and obtaining certain optimization information from a statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecMapContext.#ctor(com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.variable.VariableService)">
            <summary>Ctor.</summary>
            <param name="engineImportService">engine imports</param>
            <param name="variableService">variable names</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecMapContext.EngineImportService">
            <summary>Returns the engine import service.</summary>
            <returns>service</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecMapContext.VariableService">
            <summary>Returns the variable service.</summary>
            <returns>service</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecMapContext.HasVariables">
            <summary>Returns true if a statement has variables.</summary>
            <returns>true for variables found</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseStreamRawSpec">
            <summary>For use in select clauses for specifying a selected stream: select a.* from MyEvent as a, MyOther as b </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseStreamRawSpec.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="streamAliasName">is the stream alias of the stream to select</param>
            <param name="optionalAsName">is the column alias</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamRawSpec.StreamAliasName">
            <summary>Returns the stream alias (e.g. select streamAlias from MyEvent as streamAlias). </summary>
            <returns>alias</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamRawSpec.OptionalAsName">
            <summary>Returns the column alias (e.g. select streamAlias as mycol from MyEvent as streamAlias). </summary>
            <returns>alias</returns>
        </member>
        <member name="T:com.espertech.esper.core.StatementLifecycleEvent">
            <summary>Event indicating statement lifecycle management. </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleEvent.#ctor(com.espertech.esper.client.EPStatement,com.espertech.esper.core.StatementLifecycleEvent.LifecycleEventType,System.Object[])">
            <summary>Ctor. </summary>
            <param name="statement">the statement</param>
            <param name="eventType">the tyoe if event</param>
            <param name="paramList">event parameters</param>
        </member>
        <member name="P:com.espertech.esper.core.StatementLifecycleEvent.Statement">
            <summary>Returns the statement instance for the event. </summary>
            <returns>statement</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementLifecycleEvent.EventType">
            <summary>Returns the event type. </summary>
            <returns>type of event</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementLifecycleEvent.ParamList">
            <summary>Returns event parameters. </summary>
            <returns>paramList</returns>
        </member>
        <member name="T:com.espertech.esper.core.StatementLifecycleEvent.LifecycleEventType">
            <summary>Event types. </summary>
        </member>
        <member name="F:com.espertech.esper.core.StatementLifecycleEvent.LifecycleEventType.CREATE">
            <summary>Statement created. </summary>
        </member>
        <member name="F:com.espertech.esper.core.StatementLifecycleEvent.LifecycleEventType.STATECHANGE">
            <summary>Statement state change. </summary>
        </member>
        <member name="F:com.espertech.esper.core.StatementLifecycleEvent.LifecycleEventType.LISTENER_ADD">
            <summary>listener added </summary>
        </member>
        <member name="F:com.espertech.esper.core.StatementLifecycleEvent.LifecycleEventType.LISTENER_REMOVE">
            <summary>Listener removed. </summary>
        </member>
        <member name="F:com.espertech.esper.core.StatementLifecycleEvent.LifecycleEventType.LISTENER_REMOVE_ALL">
            <summary>All listeners removed. </summary>
        </member>
        <member name="T:com.espertech.esper.core.ResultDeliveryStrategyFactory">
            <summary>
            Factory for creating a dispatch strategy based on the subscriber object and the columns
            produced by a select-clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.ResultDeliveryStrategyFactory.Create(System.Object,System.Type[],System.String[])">
            <summary>Creates a strategy implementation that indicates to subscribers the statement results based on the select-clause columns. </summary>
            <param name="subscriber">to indicate to</param>
            <param name="selectClauseTypes">are the types of each column in the select clause</param>
            <param name="selectClauseColumns">the names of each column in the select clause</param>
            <returns>strategy for dispatching naturals</returns>
            <throws>EPSubscriberException if the subscriber is invalid</throws>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnSetClause">
            <summary>
            A clause to assign new values to variables based on a triggering event arriving.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSetClause.Create(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>
            Creates a new on-set clause for setting variables, and adds a variable to set.
            </summary>
            <param name="variableName">is the variable name</param>
            <param name="expression">
            is the assignment expression providing the new variable value
            </param>
            <returns>on-set clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSetClause.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.OnSetClause"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSetClause.AddAssignment(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>
            Adds a variable to set to the clause.
            </summary>
            <param name="variable">to set</param>
            <param name="expression">expression providing the new variable value</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSetClause.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in EPL.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnSetClause.Assignments">
            <summary>
            Gets or sets the list of variable assignments..
            </summary>
            <value>The list of variable assignments.</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnSelectClause">
            <summary>
            A clause to delete from a named window based on a triggering event arriving and correlated to the named window events to be deleted.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSelectClause.Create(System.String,System.String)">
            <summary>Creates an on-select clause.</summary>
            <param name="windowName">is the named window name</param>
            <param name="optionalAsName">is the optional alias</param>
            <returns>on-select clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSelectClause.#ctor(System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="windowName">is the named window name</param>
            <param name="optionalAsName">is the alias name of the named window</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSelectClause.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnSelectClause.WindowName">
            <summary>
            Gets or sets the name of the named window to select from.
            </summary>
            <value>The name of the window.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnSelectClause.OptionalAsName">
            <summary>
            Gets or sets the as-alias for the named window.
            </summary>
            <value>The name of the optional as.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationException">
            <summary> Thrown to indicate a configuration problem.</summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary> Ctor for an inner exception and message.</summary>
            <param name="message">error message
            </param>
            <param name="cause">inner exception
            </param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationException.#ctor(System.Exception)">
            <summary> Ctor - just an inner exception.</summary>
            <param name="cause">inner exception
            </param>
        </member>
        <member name="T:com.espertech.esper.client.Configuration">
            <summary>
            An instance of <tt>Configuration</tt> allows the application
            to specify properties to be used when
            creating a <tt>EPServiceProvider</tt>. Usually an application will create
            a single <tt>Configuration</tt>, then get one or more instances of
            <see cref="T:com.espertech.esper.client.EPServiceProvider"/> via <see cref="T:com.espertech.esper.client.EPServiceProviderManager"/>.
            The <tt>Configuration</tt> is meant
            only as an initialization-time object. <tt>EPServiceProvider</tt>s are
            immutable and do not retain any association back to the
            <tt>Configuration</tt>.
            <para>
            The format of an Esper XML configuration file is defined in
            <tt>esper-configuration-2.0.xsd</tt>.
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.ESPER_DEFAULT_CONFIG">
            <summary> Default name of the configuration file.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.eventClasses">
            <summary> Map of event name and fully-qualified type name.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.eventTypesXMLDOM">
            <summary> Map of event type alias and XML DOM configuration.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.eventTypesLegacy">
            <summary> Map of event type alias and Legacy-type event configuration.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.mapAliases">
            <summary>
            The type aliases for events that are backed by Map, not containing
            strongly-typed nested maps.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.nestableMapAliases">
            <summary>
            The type aliases for events that are backed by Map, possibly containing
            strongly-typed nested maps.
            <para/>
            Each entries value must be either a Class or a DataMap to define nested maps.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.imports">
            <summary>
            The class and namespace imports that will be used to resolve partial class names.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.isUsingDefaultImports">
            <summary> True until the user calls AddAutoImport().</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.epServicesContextFactoryClassName">
            <summary>Optional classname to use for constructing services context.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.plugInViews">
            <summary>List of configured plug-in views.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.plugInPatternObjects">
            <summary>List of configured plug-in pattern objects.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.plugInAggregationFunctions">
            <summary>List of configured plug-in aggregation functions.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.pluginLoaders">
            <summary>List of adapter loaders.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.engineDefaults">
            <summary>
            Saves engine default configs such as threading settings
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.eventTypeAutoAliasPackages">
            <summary>
            Saves the namespaces to search to resolve event type aliases.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.variables">
            <summary>
            Map of variables.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.methodInvocationReferences">
            <summary>
            Map of class name and configuration for method invocations on that class.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.plugInEventRepresentation">
            <summary>Map of plug-in event representation name and configuration</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.plugInEventTypes">
            <summary>Map of plug-in event types.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.plugInEventTypeAliasResolutionURIs">
            <summary>URIs that point to plug-in event representations that are given a chance to dynamically resolve an event type alias to anevent type, as it occurs in a new EPL statement.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.revisionEventTypes">
            <summary>All revision event types which allow updates to past events.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.variantStreams">
            <summary>Variant streams allow events of disparate types to be treated the same.</summary>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.#ctor">
            <summary>
            Constructs an empty configuration. The auto import values
            are set to System, System.Collections and System.Text
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInAggregationFunction(System.String,System.String)">
            <summary>
            Adds a plug-in aggregation function given a function name and an aggregation class name.
            <p>
            The aggregation class must : the base class <see cref="T:com.espertech.esper.epl.agg.AggregationSupport"/>.
            </p>
            	<p>
            The same function name cannot be added twice.
            </p>
            </summary>
            <param name="functionName">is the new aggregation function name</param>
            <param name="aggregationClassName">is the fully-qualified class name of the class implementing the aggregation function</param>
            <throws>
            ConfigurationException is thrown to indicate a problem adding aggregation function
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddDatabaseReference(System.String,com.espertech.esper.client.ConfigurationDBRef)">
            <summary>
            Add a database reference with a given database name.
            </summary>
            <param name="name">is the database name</param>
            <param name="configurationDBRef">descriptor containing database connection and access policy information</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.IsEventTypeAliasExists(System.String)">
            <summary>
            Checks if an eventTypeAlias has already been registered for that alias name.
            </summary>
            <param name="eventTypeAlias">the alias name</param>
            <returns>true if already registered</returns>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventTypeAlias(System.String,System.String)">
            <summary>
            Add an alias for an event type represented by plain-old object events.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="eventTypeName">fully-qualified class name of the event type</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventTypeAlias(System.String,System.Type)">
            <summary>
            Add an alias for an event type represented by plain-old object events.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="eventType">is the event class for which to create the alias</param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventTypeAliasSimpleName(System.Type)">
            <summary>
            Add an alias for an event type represented by plain-old object events,
            and the alias is the simple class name of the class.
            </summary>
            <param name="eventType">the event type for which to create the alias</param>
            <throws>ConfigurationException if the alias is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventTypeAlias(System.String,com.espertech.esper.compat.Properties)">
            <summary>
            Add an alias for an event type that represents DataMap events.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the type (as a string) of its value in the Map object</param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddNestableEventTypeAlias(System.String,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Add an alias for an event type that represents Map events, and for which each property may
            itself be a Map of further properties,with unlimited nesting levels.
            <para/>
            Each entry in the type mapping must contain the String property name and either a Class or
            further DataMap value.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the Type(fully qualified classname) of its value in Map event instances.</param>
            <throws>ConfigurationException if the alias is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventTypeAlias(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Add an alias for an event type that represents DataMap events, taking a DataMap of
            event property and class name as a parameter.
            <para/>
            This method is provided for convenience and is same in function to method
            taking a Properties object that contain fully qualified class name as values.
            </summary>
            <param name="eventTypeAlias">the alias for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the type of its value in the Map object</param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventTypeAlias(System.String,com.espertech.esper.client.ConfigurationEventTypeXMLDOM)">
            <summary>
            Add an alias for an event type that represents org.w3c.dom.Node events.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="xmlDOMEventTypeDesc">descriptor containing property and mapping information for XML-DOM events</param>
            <throws>
            ConfigurationException if the alias is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventTypeAlias(System.String,System.String,com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>
            Add an alias for an event type that represents legacy type events.
            </summary>
            <param name="eventTypeAlias">is the alias for the event type</param>
            <param name="eventType">fully-qualified class name of the event type</param>
            <param name="legacyEventTypeDesc">descriptor containing property and mapping information for type events</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddImport(System.String)">
            <summary>
            Add a namespace. Adding will suppress the use of the default namespaces.
            </summary>
            <param name="importName">is a fully-qualified class name or a package name with wildcard</param>
            <throws>
            ConfigurationException if incorrect package or class names are encountered
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddMethodRef(System.String,com.espertech.esper.client.ConfigurationMethodRef)">
            <summary>
            Adds a cache configuration for a class providing methods for use in the from-clause.
            </summary>
            <param name="className">the class name (simple or fully-qualified) providing methods</param>
            <param name="methodInvocationConfig">the cache configuration</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddMethodRef(System.Type,com.espertech.esper.client.ConfigurationMethodRef)">
            <summary>
            Adds a cache configuration for a class providing methods for use in the from-clause.
            </summary>
            <param name="clazz">the class providing methods</param>
            <param name="methodInvocationConfig">the cache configuration</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPluginLoader(System.String,System.String,com.espertech.esper.compat.Properties)">
            <summary>Add an input/output plugin loader.</summary>
            <param name="loaderName">is the name of the loader</param>
            <param name="typeName">is the fully-qualified classname of the loader class</param>
            <param name="configuration">is loader cofiguration entries</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInView(System.String,System.String,System.String)">
            <summary>Add a view for plug-in.</summary>
            <param name="_namespace">is the namespace the view should be available under</param>
            <param name="name">is the name of the view</param>
            <param name="viewFactoryClass">is the view factory class to use</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInPatternObserver(System.String,System.String,System.String)">
            <summary>Add a pattern event observer for plug-in.</summary>
            <param name="_namespace">is the namespace the observer should be available under</param>
            <param name="name">is the name of the observer</param>
            <param name="observerFactoryClass">is the observer factory class to use</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInPatternGuard(System.String,System.String,System.String)">
            <summary>Add a pattern guard for plug-in.</summary>
            <param name="_namespace">is the namespace the guard should be available under</param>
            <param name="name">is the name of the guard</param>
            <param name="guardFactoryClass">is the guard factory class to use</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInEventRepresentation(System.Uri,System.String,System.Object)">
            <summary>Adds an event representation responsible for creating event types (event metadata) and event bean instances (events) fora certain kind of object representation that holds the event property values.</summary>
            <param name="eventRepresentationRootURI">uniquely identifies the event representation and acts as a parentfor child URIs used in resolving</param>
            <param name="eventRepresentationClassName">is the name of the class implementing <see cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/>.</param>
            <param name="initializer">is optional configuration or initialization information, or null if none required</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInEventRepresentation(System.Uri,System.Type,System.Object)">
            <summary>Adds an event representation responsible for creating event types (event metadata) and event bean instances (events) fora certain kind of object representation that holds the event property values.</summary>
            <param name="eventRepresentationRootURI">uniquely identifies the event representation and acts as a parentfor child URIs used in resolving</param>
            <param name="eventRepresentationType">is the class implementing <see cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/>.</param>
            <param name="initializer">is optional configuration or initialization information, or null if none required</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.Configure">
            <summary> Use the configuration specified in an application
            resource named <tt>esper.cfg.xml</tt>.
            </summary>
            <returns> Configuration initialized from the resource
            </returns>
            <throws>  EPException thrown to indicate error reading configuration </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.Configure(System.String)">
            <summary> Use the configuration specified in the given application
            resource. The format of the resource is defined in
            <tt>esper-configuration-2.0.xsd</tt>.
            <p/>
            The resource is found via <tt>getConfigurationInputStream(resource)</tt>.
            That method can be overridden to implement an arbitrary lookup strategy.
            <p/>
            See <tt>getResourceAsStream</tt> for information on how the resource name is resolved.
            </summary>
            <param name="resource">if the file name of the resource
            </param>
            <returns> Configuration initialized from the resource
            </returns>
            <throws>  EPException thrown to indicate error reading configuration </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.espertech.esper.client.Configuration.GetConfigurationInputStream(System.String)" -->
        <member name="M:com.espertech.esper.client.Configuration.Configure(System.Uri)">
             <summary> Use the configuration specified by the given URL.
             The format of the document obtained from the URL is defined in
             <tt>esper-configuration-2.0.xsd</tt>.
            
             </summary>
             <param name="url">URL from which you wish to load the configuration
             </param>
             <returns> A configuration configured via the file
             </returns>
             <throws>  EPException </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.Configure(System.IO.FileInfo)">
             <summary> Use the configuration specified in the given application
             file. The format of the file is defined in
             <tt>esper-configuration-2.0.xsd</tt>.
            
             </summary>
             <param name="configFile"><tt>File</tt> from which you wish to load the configuration
             </param>
             <returns> A configuration configured via the file
             </returns>
             <throws>  EPException </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.Configure(System.Xml.XmlDocument)">
             <summary> Use the mappings and properties specified in the given XML document.
             The format of the file is defined in
             <tt>esper-configuration-2.0.xsd</tt>.
            
             </summary>
             <param name="document">an XML document from which you wish to load the configuration
             </param>
             <returns> A configuration configured via the <tt>Document</tt>
             </returns>
             <throws>  EPException if there is problem in accessing the document. </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.GetResourceAsStream(System.String)">
             <summary> Returns an input stream from an application resource in the classpath.
            
             The method first removes the '/' character from the resource name if
             the first character is '/'.
            
             The lookup order is as follows:
            
             If a thread context class loader exists, use <tt>Thread.CurrentThread().getResourceAsStream</tt>
             to obtain an InputStream.
            
             If no input stream was returned, use the <tt>typeof(Configuration).getResourceAsStream</tt>.
             to obtain an InputStream.
            
             If no input stream was returned, use the <tt>typeof(Configuration).GetClassLoader().getResourceAsStream</tt>.
             to obtain an InputStream.
            
             If no input stream was returned, throw an Exception.
            
             </summary>
             <param name="resource">to get input stream for
             </param>
             <returns> input stream for resource
             </returns>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.Reset">
            <summary> Reset to an empty configuration.</summary>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddDefaultImports">
            <summary>
            Use these imports until the user specifies something else.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EPServicesContextFactoryClassName">
            <summary>
            Gets or sets the service context factory type name
            </summary>
            <value></value>
            <returns>class name</returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EventTypeAliases">
            <summary>
            Returns the mapping of event type alias to type name.
            </summary>
            <value></value>
            <returns> event type aliases for type names
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EventTypesMapEvents">
            <summary>
            Returns a map keyed by event type alias name, and values being the definition for the
            event type of the property names and types that make up the event.
            </summary>
            <returns> map of event type alias name and definition of event properties
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EventTypesXMLDOM">
            <summary> Returns the mapping of event type alias to XML DOM event type information.</summary>
            <returns> event type aliases mapping to XML DOM configs
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EventTypesLegacy">
            <summary> Returns the mapping of event type alias to legacy event type information.</summary>
            <returns> event type aliases mapping to legacy type configs
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.Imports">
            <summary> Returns the class and package imports.</summary>
            <returns> imported names
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.DatabaseReferences">
            <summary> Returns a map of string database names to database configuration options.</summary>
            <returns> map of database configurations
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.PlugInViews">
            <summary>Returns a list of configured plug-in views.</summary>
            <returns>list of plug-in view configs</returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.PluginLoaders">
            <summary>Returns a list of configured plugin loaders.</summary>
            <returns>plugin loaders</returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.PlugInAggregationFunctions">
            <summary>Returns a list of configured plug-in aggregation functions.</summary>
            <returns>list of configured aggregations</returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.PlugInPatternObjects">
            <summary>Returns a list of configured plug-ins for pattern observers and guards.</summary>
            <returns>list of pattern plug-ins</returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.Variables">
            <summary>
            Gets the variables.
            </summary>
            <value>The variables.</value>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.MethodInvocationReferences">
            <summary>
            Gets the method invocation references.
            </summary>
            <value>The method invocation references.</value>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EventTypeAutoAliasPackages">
            <summary>
            Returns a set of namespaces that event classes reside in.
            <para>
            This setting allows an application to place all it's events into one or more namespaces
            and then declare these packages via this method. The engine
            attempts to resolve an event type alias to a type residing in each declared package.
            </para>
            <para>
            For example, in the statement "select * from MyEvent" the engine attempts to load
            class "namespace.MyEvent" and if successful, uses that class as the event type.
            </para>
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EngineDefaults">
            <summary>
            Gets the engine default settings.
            </summary>
            <value>The engine defaults.</value>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.VariantStreams">
            <summary>
            Gets the variant streams.
            </summary>
            <value>The variant streams.</value>
        </member>
        <member name="T:com.espertech.esper.antlr.ASTUtil">
            <summary>Utility class for AST node handling.</summary>
        </member>
        <member name="M:com.espertech.esper.antlr.ASTUtil.DumpAST(Antlr.Runtime.Tree.ITree)">
            <summary>
            Dump the AST node to system.out.
            </summary>
            <param name="ast">to dump</param>
        </member>
        <member name="M:com.espertech.esper.antlr.ASTUtil.PrintTokens(Antlr.Runtime.CommonTokenStream)">
            <summary>Print the token stream to the logger.</summary>
            <param name="tokens">to print</param>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeBatchView">
            <summary> A data view that aggregates events in a stream and releases them in one batch at every specified time interval.
            The view works similar to a time_window but in not continuous.
            The view releases the batched events after the interval as new data to child views. The prior batch if
            not empty is released as old data to child view. The view doesn't release intervals with no old or new data.
            It also does not collect old data published by a parent view.
            <para>
            For example, we want to calculate the average of IBM stock every hour, for the last hour.
            The view accepts 2 parameter combinations.
            (1) A time interval is supplied with a reference point - based on this point the intervals are set.
            (1) A time interval is supplied but no reference point - the reference point is set when the first event arrives.
            </para>
            <para>
            If there are no events in the current and prior batch, the view will not invoke the update method of child views.
            In that case also, no next callback is scheduled with the scheduling service until the next event arrives.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchView.#ctor(com.espertech.esper.view.window.TimeBatchViewFactory,com.espertech.esper.core.StatementContext,System.Int64,System.Nullable{System.Int64},com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>Constructor.</summary>
            <param name="msecIntervalSize">
            is the number of milliseconds to batch events for
            </param>
            <param name="referencePoint">
            is the reference point onto which to base intervals, or null if
            there is no such reference point supplied
            </param>
            <param name="viewUpdatedCollection">
            is a collection that the view must update when receiving events
            </param>
            <param name="timeBatchViewFactory">fr copying this view in a group-by</param>
            <param name="statementContext">is required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchView.SendBatch">
            <summary>
            This method updates child views and clears the batch of events.
            We schedule a new callback at this time if there were events in the batch.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchView.ComputeWaitMSec(System.Int64,System.Int64,System.Int64)">
            <summary> Given a current time and a reference time and an interval size, compute the amount of
            milliseconds till the next interval.
            </summary>
            <param name="current">is the current time
            </param>
            <param name="reference">is the reference point
            </param>
            <param name="interval">is the interval size
            </param>
            <returns> milliseconds after current time that marks the end of the current interval
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchView.MsecIntervalSize">
            <summary>
            Gets or sets the interval size in milliseconds.
            </summary>
            <value>The size of the msec interval.</value>
            <returns> batch size
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchView.InitialReferencePoint">
            <summary>
            Gets or sets the reference point to use to anchor interval Start and end dates to.
            </summary>
            <value>The initial reference point.</value>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty.</summary>
            <returns>true if empty</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.RandomAccessByIndexDelegate">
            <summary>
            Delegate used to proxy the RandomAccessByIndexObserver
            </summary>
            <param name="randomAccessByIndex"></param>
        </member>
        <member name="T:com.espertech.esper.view.window.ProxyRandomAccessByIndexObserver">
            <summary>
            Proxies the RandomAccessByIndexObserver with a delegate
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.ProxyRandomAccessByIndexObserver.#ctor(com.espertech.esper.view.window.RandomAccessByIndexDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.view.window.ProxyRandomAccessByIndexObserver"/> class.
            </summary>
            <param name="dg">The dg.</param>
        </member>
        <member name="M:com.espertech.esper.view.window.ProxyRandomAccessByIndexObserver.Updated(com.espertech.esper.view.window.RandomAccessByIndex)">
            <summary>
            Callback to indicate an update
            </summary>
            <param name="randomAccessByIndex">is the collection</param>
        </member>
        <member name="T:com.espertech.esper.view.window.IStreamRelativeAccess">
            <summary>
            Provides relative access to insert stream events for certain window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRelativeAccess.#ctor(com.espertech.esper.view.window.IStreamRelativeAccess.IStreamRelativeAccessUpdateObserver)">
            <summary>Ctor.</summary>
            <param name="updateObserver">is invoked when updates are received</param>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRelativeAccess.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Accepts view insert and remove stream.
            </summary>
            <param name="newData">is the insert stream events or null if no data</param>
            <param name="oldData">is the remove stream events or null if no data</param>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRelativeAccess.GetRelativeToEvent(com.espertech.esper.events.EventBean,System.Int32)">
            <summary>
            Gets the relative to event.
            </summary>
            <param name="_event">The _event.</param>
            <param name="prevIndex">Index of the prev.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRelativeAccess.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.IStreamRelativeAccess.IStreamRelativeAccessUpdateObserver">
            <summary>For indicating that the collection has been updated.</summary>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRelativeAccess.IStreamRelativeAccessUpdateObserver.Updated(com.espertech.esper.view.window.IStreamRelativeAccess,com.espertech.esper.events.EventBean[])">
            <summary>
            Callback to indicate an update.
            </summary>
            <param name="iStreamRelativeAccess">is the collection</param>
            <param name="newData">is the new data available</param>
        </member>
        <member name="T:com.espertech.esper.view.stream.StreamFactoryServiceProvider">
            <summary>
            Static factory for implementations of the StreamFactoryService interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactoryServiceProvider.NewService(System.Boolean)">
            <summary>Creates an implementation of the StreamFactoryService interface.</summary>
            <param name="isReuseViews">
            indicator on whether stream and view resources are to be reused between statements
            </param>
            <returns>implementation</returns>
        </member>
        <member name="T:com.espertech.esper.view.internals.PriorEventViewFactory">
            <summary>
            Factory for making <see cref="T:com.espertech.esper.view.internals.PriorEventView"/> instances.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.internals.PriorEventViewFactory.callbacksPerIndex">
            <summary>
            Map of prior-index and callback to expressions.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.internals.PriorEventViewFactory.isUnbound">
            <summary>
            unbound to indicate the we are not receiving remove stream events (unbound stream, stream without child
            views) therefore must use a different buffer.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.internals.PriorEventViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.view.internals.PriorEventViewFactory.RelativeAccessImpl">
            <summary>
            Adapter to provide access given an index.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventViewFactory.RelativeAccessImpl.#ctor(com.espertech.esper.view.window.RelativeAccessByEventNIndex,System.Int32)">
            <summary>Ctor.</summary>
            <param name="buffer">is the buffer to acces</param>
            <param name="relativeIndex">is the index to pull out</param>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventViewFactory.RelativeAccessImpl.GetRelativeToEvent(com.espertech.esper.events.EventBean,System.Int32)">
            <summary>
            Gets the relative to event.
            </summary>
            <param name="_event">The _event.</param>
            <param name="prevIndex">Index of the prev.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.view.internals.PriorEventBufferMulti">
            <summary>
            Buffers view-posted insert stream (new data) and remove stream (old data) events for
            use with determining prior results in these streams, for multiple different prior events.
            <para>
            Buffers only exactly those events in new data and old data that are being asked for via the
            2 or more 'prior' functions that specify different indexes. For example &quot;select Prior(2, price), Prior(1, price)&quot;
            results in on buffer instance handling both the need to the immediatly prior (1) and the 2-events-ago
            event (2).
            </para>
            <para>
            As all views are required to post new data and post old data that removes the new data to subsequent views,
            this buffer can be attached to all views and should not result in a memory leak.
            </para>
            <para>
            When the buffer receives old data (rstream) events it removes the prior events to the rstream events
            from the buffer the next time it receives a post (not immediatly) to allow queries to the buffer.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventBufferMulti.#ctor(System.Int32[])">
            <summary>Ctor.</summary>
            <param name="priorToIndexSet">
            holds a list of prior-event indexes.
            <para>
            For example, an array {0,4,6} means the current event, 4 events before the current event
            and 6 events before the current event.
            </para>
            </param>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventBufferMulti.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Accepts view insert and remove stream.
            </summary>
            <param name="newData">is the insert stream events or null if no data</param>
            <param name="oldData">is the remove stream events or null if no data</param>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventBufferMulti.GetRelativeToEvent(com.espertech.esper.events.EventBean,System.Int32)">
            <summary>
            Gets the relative to event.
            </summary>
            <param name="_event">The _event.</param>
            <param name="priorToIndex">Index of the prior to.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.util.SimpleTypeCasterFactory">
            <summary>
            Factory for casters, which take an object and safely cast to a given type, 
            performing coercion or dropping precision if required. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.SimpleTypeCasterFactory.GetCaster(System.Type)">
            <summary>
            Returns a caster that casts to a target type.
            </summary>
            <param name="targetType">to cast to</param>
            <returns>
            caster for casting objects to the required type
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.SimpleTypeCasterFactory.GetCaster(System.Type,System.Boolean@)">
            <summary>
            Returns a caster that casts to a target type.
            </summary>
            <param name="targetType">to cast to</param>
            <param name="isNumeric">if set to <c>true</c> [is numeric].</param>
            <returns>
            caster for casting objects to the required type
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.ManagedReadWriteLock">
            <summary>
            Simple read-write lock based on ReaderWriterLock that associates a
            name with the lock and traces read/write locking and unlocking.
            </summary>
        </member>
        <member name="F:com.espertech.esper.util.ManagedReadWriteLock.ACQUIRE_TEXT">
            <summary>Acquire text.</summary>
        </member>
        <member name="F:com.espertech.esper.util.ManagedReadWriteLock.ACQUIRED_TEXT">
            <summary>Acquired text.</summary>
        </member>
        <member name="F:com.espertech.esper.util.ManagedReadWriteLock.TRY_TEXT">
            <summary>Try text.</summary>
        </member>
        <member name="F:com.espertech.esper.util.ManagedReadWriteLock.RELEASE_TEXT">
            <summary>Release text.</summary>
        </member>
        <member name="F:com.espertech.esper.util.ManagedReadWriteLock.RELEASED_TEXT">
            <summary>Released text.</summary>
        </member>
        <member name="M:com.espertech.esper.util.ManagedReadWriteLock.#ctor(System.String,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="name">of lock</param>
            <param name="isFair">true if a fair lock, false if not</param>
        </member>
        <member name="M:com.espertech.esper.util.ManagedReadWriteLock.AcquireWriteLock">
            <summary>Lock write lock.</summary>
        </member>
        <member name="M:com.espertech.esper.util.ManagedReadWriteLock.TryWriteLock(System.Int32)">
            <summary>
            Try write lock with timeout, returning an indicator whether the lock was acquired or not.
            </summary>
            <param name="msec">number of milliseconds to wait for lock</param>
            <returns>indicator as to whether the lock could be acquired or not</returns>
        </member>
        <member name="M:com.espertech.esper.util.ManagedReadWriteLock.ReleaseWriteLock">
            <summary>Unlock write lock.</summary>
        </member>
        <member name="M:com.espertech.esper.util.ManagedReadWriteLock.AcquireReadLock">
            <summary>Lock read lock.</summary>
        </member>
        <member name="M:com.espertech.esper.util.ManagedReadWriteLock.ReleaseReadLock">
            <summary>Unlock read lock.</summary>
        </member>
        <member name="T:com.espertech.esper.util.DatabaseTypeEnum">
            <summary>
            Enumeration of the different built-in types that are used to represent database output column values.
            <para>
            Assigns a name to each type that serves as a short name in mapping, and a type.
            </para>
            <para>
            Provides binding implementations that use the correct ResultSet.get method to pull the correct type
            out of a statement's result set.
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.String">
            <summary>String type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Decimal">
            <summary>Big decimal.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Boolean">
            <summary>Boolean type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Byte">
            <summary>Byte type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Short">
            <summary>Short type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Int">
            <summary>Integer type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Long">
            <summary>Long type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Float">
            <summary>Float type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Double">
            <summary>Double type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.ByteArray">
            <summary>Byte array type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Timestamp">
            <summary>timestamp type.</summary>
        </member>
        <member name="M:com.espertech.esper.util.DatabaseTypeEnum.GetEnum(System.String)">
            <summary>
            Given a type name, matches for simple and fully-qualified type name (case-insensitive)
            as well as case-insensitive type name.
            </summary>
            <param name="type">is the named type</param>
            <returns>type enumeration value for type</returns>
        </member>
        <member name="P:com.espertech.esper.util.DatabaseTypeEnum.DataType">
            <summary>Retuns the type for the name.</summary>
        </member>
        <member name="P:com.espertech.esper.util.DatabaseTypeEnum.BoxedType">
            <summary>
            Gets the boxed data type.
            </summary>
            <value>The type of the boxed.</value>
        </member>
        <member name="P:com.espertech.esper.util.DatabaseTypeEnum.Binding">
            <summary>
            Returns the binding for this enumeration value for
            reading the database result set and returning the right type.
            </summary>
            <value>The binding.</value>
            <returns>mapping of output column type to built-in</returns>
        </member>
        <member name="T:com.espertech.esper.type.ScheduleUnit">
            <summary>
            Enumeration of units in a specification of schedule, which contains elements for each of the following units:
            minute, hour, day of month, month, day of week and seconds.
            Notice: value ranges are the same as the "crontab" standard values.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.SECONDS">
            <summary> Second.</summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.MINUTES">
            <summary> Minute.</summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.HOURS">
            <summary> Hour.</summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.DAYS_OF_MONTH">
            <summary> Day of month.</summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.MONTHS">
            <summary> Month.</summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.DAYS_OF_WEEK">
            <summary> Day of week.</summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.Values">
            <summary>
            Available constant values from this class
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.ScheduleUnit.Min">
            <summary> Returns minimum valid value for the unit.</summary>
            <returns> minimum unit value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.ScheduleUnit.Max">
            <summary> Returns minimum valid value for the unit.</summary>
            <returns> maximum unit value
            </returns>
        </member>
        <member name="T:com.espertech.esper.schedule.SchedulingServiceImpl">
            <summary>
            Implements the schedule service by simply keeping a sorted set of long millisecond
            values and a set of handles for each.
            </summary>
        </member>
        <member name="T:com.espertech.esper.schedule.SchedulingService">
            <summary>
            Interface for a service that allows to add and remove handles (typically storing callbacks)
            for a certain time which are returned when
            the evaluate method is invoked and the current time is on or after the handle's registered time.
            It is the expectation that the setTime method is called
            with same or ascending values for each subsequent call. Handles with are triggered are automatically removed
            by implementations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingService.Add(System.Int64,com.espertech.esper.schedule.ScheduleHandle,com.espertech.esper.schedule.ScheduleSlot)">
            <summary> Add a callback for after the given milliseconds from the current time.
            If the same callback (equals) was already added before, the method will not add a new
            callback or change the existing callback to a new time, but throw an exception.
            </summary>
            <param name="afterMSec">number of millisec to get a callback
            </param>
            <param name="handle">to add
            </param>
            <param name="slot">allows ordering of concurrent callbacks
            </param>
            <throws>  ScheduleServiceException thrown if the add operation did not complete </throws>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingService.Add(com.espertech.esper.schedule.ScheduleSpec,com.espertech.esper.schedule.ScheduleHandle,com.espertech.esper.schedule.ScheduleSlot)">
            <summary> Add a callback for a time specified by the schedule specification passed in based on the current time.
            If the same callback (equals) was already added before, the method will not add a new
            callback or change the existing callback to a new time, but throw an exception.
            </summary>
            <param name="scheduleSpec">holds the crontab-like information defining the next occurance
            </param>
            <param name="handle">to add
            </param>
            <param name="slot">allows ordering of concurrent callbacks
            </param>
            <throws>  ScheduleServiceException thrown if the add operation did not complete </throws>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingService.Remove(com.espertech.esper.schedule.ScheduleHandle,com.espertech.esper.schedule.ScheduleSlot)">
            <summary> Remove a callback.
            If the callback to be removed was not found an exception is thrown.
            </summary>
            <param name="handle">to remove
            </param>
            <param name="slot">for which the callback was added
            </param>
            <throws>  ScheduleServiceException thrown if the callback was not located </throws>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingService.Evaluate(System.Collections.Generic.ICollection{com.espertech.esper.schedule.ScheduleHandle})">
            <summary> Evaluate the current time and perform any callbacks.</summary>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingService.AllocateBucket">
            <summary> Returns a bucket from which slots can be allocated for ordering concurrent callbacks.</summary>
            <returns> bucket
            </returns>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingService.Destroy">
            <summary>
            Destroy the service.
            </summary>
        </member>
        <member name="P:com.espertech.esper.schedule.SchedulingService.TimeHandleCount">
            <summary>Returns time handle count.</summary>
            <returns>count</returns>
        </member>
        <member name="P:com.espertech.esper.schedule.SchedulingService.FurthestTimeHandle">
            <summary>Returns furthest in the future handle.</summary>
            <returns>future handle</returns>
        </member>
        <member name="P:com.espertech.esper.schedule.SchedulingService.ScheduleHandleCount">
            <summary>Returns count of handles.</summary>
            <returns>count</returns>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingServiceImpl.#ctor(com.espertech.esper.timer.TimeSourceService)">
            <summary>
            Constructor.
            </summary>
            <param name="timeSourceService">time source provider</param>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingServiceImpl.AllocateBucket">
            <summary>
            Returns a bucket from which slots can be allocated for ordering concurrent handles.
            </summary>
            <returns>bucket</returns>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingServiceImpl.Add(System.Int64,com.espertech.esper.schedule.ScheduleHandle,com.espertech.esper.schedule.ScheduleSlot)">
            <summary>
            Add a handle for after the given milliseconds from the current time.
            If the same handle (equals) was already added before, the method will not add a new
            handle or change the existing handle to a new time, but throw an exception.
            </summary>
            <param name="afterMSec">number of millisec to get a handle</param>
            <param name="handle">to add</param>
            <param name="slot">allows ordering of concurrent handles</param>
            <throws>  ScheduleServiceException thrown if the add operation did not complete </throws>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingServiceImpl.Add(com.espertech.esper.schedule.ScheduleSpec,com.espertech.esper.schedule.ScheduleHandle,com.espertech.esper.schedule.ScheduleSlot)">
            <summary>
            Adds the specified spec.
            </summary>
            <param name="spec">The spec.</param>
            <param name="handle">The handle.</param>
            <param name="slot">The slot.</param>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingServiceImpl.Remove(com.espertech.esper.schedule.ScheduleHandle,com.espertech.esper.schedule.ScheduleSlot)">
            <summary>
            Remove a handle.
            If the handle to be removed was not found an exception is thrown.
            </summary>
            <param name="handle">to remove</param>
            <param name="slot">for which the handle was added</param>
            <throws>  ScheduleServiceException thrown if the handle was not located </throws>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingServiceImpl.Evaluate(System.Collections.Generic.ICollection{com.espertech.esper.schedule.ScheduleHandle})">
            <summary>
            Evaluate the current time and perform any handles.
            </summary>
        </member>
        <member name="P:com.espertech.esper.schedule.SchedulingServiceImpl.Time">
            <summary>
            Gets the last time known to the scheduling service.
            </summary>
            <value></value>
            <returns> time that has last been set on this service
            </returns>
        </member>
        <member name="P:com.espertech.esper.schedule.SchedulingServiceImpl.TimeHandleCount">
            <summary>Returns time handle count.</summary>
            <returns>count</returns>
        </member>
        <member name="P:com.espertech.esper.schedule.SchedulingServiceImpl.FurthestTimeHandle">
            <summary>Returns furthest in the future handle.</summary>
            <returns>future handle</returns>
        </member>
        <member name="P:com.espertech.esper.schedule.SchedulingServiceImpl.ScheduleHandleCount">
            <summary>Returns count of handles.</summary>
            <returns>count</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternObjectResolutionService">
            <summary>
            Factory service for resolving pattern objects such as guards and observers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternObjectResolutionService.Create(com.espertech.esper.epl.spec.PatternObserverSpec)">
            <summary>
            Creates an observer factory considering configured plugged-in resources.
            </summary>
            <param name="spec">is the namespace, name and parameters for the observer</param>
            <returns>observer factory</returns>
            <throws>PatternObjectException if the observer cannot be resolved</throws>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternObjectResolutionService.Create(com.espertech.esper.epl.spec.PatternGuardSpec)">
            <summary>
            Creates a guard factory considering configured plugged-in resources.
            </summary>
            <param name="spec">is the namespace, name and parameters for the guard</param>
            <returns>guard factory</returns>
            <throws>PatternObjectException if the guard cannot be resolved</throws>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternContext">
            <summary>
            Contains handles to implementations of services needed by
            evaluation nodes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternContext.#ctor(com.espertech.esper.core.StatementContext,System.Int32,com.espertech.esper.pattern.PatternStateFactory)">
            <summary>Constructor.</summary>
            <param name="patternStateFactory">is the state node factory for the pattern</param>
            <param name="statementContext">is the statement context</param>
            <param name="streamNumber">is the stream number</param>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.FilterService">
            <summary>Gets the service to use for filter evaluation.</summary>
            <returns>filter evaluation service implemetation</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.SchedulingService">
            <summary>Gets the service to use for schedule evaluation.</summary>
            <returns>schedule evaluation service implemetation</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.ScheduleBucket">
            <summary>
            Gets the schedule bucket for ordering schedule callbacks within this pattern.
            </summary>
            <returns>schedule bucket</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.EventAdapterService">
            <summary>Gets the service providing event adaptering or wrapping.</summary>
            <returns>event adapter service</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.EpStatementHandle">
            <summary>Gets the statement's resource handle for locking.</summary>
            <returns>handle of statement</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.PatternStateFactory">
            <summary>Gets the pattern state node factory to use.</summary>
            <returns>factory for pattern state</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.StatementId">
            <summary>Gets the statement id.</summary>
            <returns>statement id</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.StatementName">
            <summary>Gets the statement name.</summary>
            <returns>statement name</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.StreamNumber">
            <summary>Gets the stream number.</summary>
            <returns>stream number</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.EngineURI">
            <summary>Gets the engine URI.</summary>
            <returns>engine URI</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.EngineInstanceId">
            <summary>Gets the engine instance id.</summary>
            <returns>engine instance id</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.ExtensionServicesContext">
            <summary>Gets extension services context for statement (statement-specific).</summary>
            <returns>extension services</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.TimerWithinGuard">
            <summary> Guard implementation that keeps a timer instance and quits when the timer expired,
            letting all <see cref="T:com.espertech.esper.pattern.MatchedEventMap"/> instances pass until then.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.TimerWithinGuard.#ctor(System.Int64,com.espertech.esper.pattern.PatternContext,com.espertech.esper.pattern.guard.Quitable)">
            <summary> Ctor.</summary>
            <param name="msec">number of millisecond to guard expiration
            </param>
            <param name="context">contains timer service
            </param>
            <param name="quitable">to use to indicate that the gaurd quitted
            </param>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.TimerWithinGuard.StartGuard">
            <summary>
            Start the guard operation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.TimerWithinGuard.StopGuard">
            <summary>
            Called when sub-expression quits, or when the pattern Stopped.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.TimerWithinGuard.Inspect(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Returns true if inspection shows that the match events can pass, or false to not pass.
            </summary>
            <param name="matchEvent"></param>
            <returns>true to pass, false to not pass</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.TimerWithinGuard.ScheduledTrigger(com.espertech.esper.core.ExtensionServicesContext)">
            <summary>
            Called when a scheduled callback occurs.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.GuardEnum">
            <summary> 
            Enum for all build-in guards.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.guard.GuardEnum.TIMER_WITHIN">
            <summary>
            Timer guard.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.guard.GuardEnum.Values">
            <summary>
            All values available through this pseudo-enum
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardEnum.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.pattern.guard.GuardEnum"/> class.
            </summary>
            <param name="nspace">The nspace.</param>
            <param name="name">The name.</param>
            <param name="clazz">The clazz.</param>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardEnum.ForName(System.String,System.String)">
            <summary>Returns the enum for the given namespace and name.</summary>
            <param name="nspace">guard namespace</param>
            <param name="name">guard name</param>
            <returns>enum</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.guard.GuardEnum.Namespace">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:com.espertech.esper.pattern.guard.GuardEnum.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:com.espertech.esper.pattern.guard.GuardEnum.Clazz">
            <summary>
            Gets the implementation clazz.
            </summary>
            <value>The implementation clazz.</value>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalObserverStateNode">
            <summary>
            This class represents the state of an eventObserver sub-expression
            in the evaluation state tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalObserverNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext)">
            <summary>
            Constructor.
            </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalObserverNode">the factory node associated to the state</param>
            <param name="beginState">contains the events that make up prior matches</param>
            <param name="context">contains handles to services required</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverStateNode.ObserverEvaluateTrue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Indicate an event for evaluation (sub-expression the observer represents has turned true).
            </summary>
            <param name="matchEvent">is the matched events so far</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverStateNode.ObserverEvaluateFalse">
            <summary>
            Indicate that the observer turned permanently false.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverStateNode.Start">
            <summary>
            Starts the event expression or an instance of it.
            Child classes are expected to initialize and Start any event listeners
            or schedule any time-based callbacks as needed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverStateNode.Quit">
            <summary>
            Stops the event expression or an instance of it. Child classes are expected to free resources
            and Stop any event listeners or remove any time-based callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverStateNode.Accept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Accept a visitor. Child classes are expected to invoke the visit method on the visitor instance
            passed in.
            </summary>
            <param name="visitor">on which the visit method is invoked by each node</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverStateNode.ChildrenAccept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Pass the visitor to all child nodes.
            </summary>
            <param name="visitor">is the instance to be passed to all child nodes</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverStateNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalEveryStateSpawnEvaluator">
            <summary>
            This class contains the state of an 'every' operator in the evaluation state tree.
            EVERY nodes work as a factory for new state subnodes. When a child node of an EVERY
            node calls the evaluateTrue method on the EVERY node, the EVERY node will call newState on its child
            node BEFORE it calls evaluateTrue on its parent node. It keeps a reference to the new child in
            its list. (BEFORE because the root node could call Quit on child nodes for stopping all
            listeners).
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalEveryStateNode">
            <summary> Contains the state collected by an "every" operator. The state includes handles to any sub-listeners
            Started by the operator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalEveryNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext)">
            <summary>Constructor.</summary>
            <param name="parentNode">
            is the parent evaluator to call to indicate truth value
            </param>
            <param name="beginState">contains the events that make up prior matches</param>
            <param name="context">contains handles to services required</param>
            <param name="everyNode">is the factory node associated to the state</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryStateNode.Start">
            <summary>
            Starts the event expression or an instance of it.
            Child classes are expected to initialize and Start any event listeners
            or schedule any time-based callbacks as needed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryStateNode.EvaluateFalse(com.espertech.esper.pattern.EvalStateNode)">
            <summary>
            Indicate a change in truth value to false.
            </summary>
            <param name="fromNode">is the node that indicates the change</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryStateNode.EvaluateTrue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.EvalStateNode,System.Boolean)">
            <summary>
            Indicate a change in truth value to true.
            </summary>
            <param name="matchEvent">is the container for events that caused the change in truth value</param>
            <param name="fromNode">is the node that indicates the change</param>
            <param name="isQuitted">is an indication of whether the node continues listenening or Stops listening</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryStateNode.Quit">
            <summary>
            Stops the event expression or an instance of it. Child classes are expected to free resources
            and Stop any event listeners or remove any time-based callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryStateNode.Accept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Accept a visitor. Child classes are expected to invoke the visit method on the visitor instance
            passed in.
            </summary>
            <param name="visitor">on which the visit method is invoked by each node</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryStateNode.ChildrenAccept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Pass the visitor to all child nodes.
            </summary>
            <param name="visitor">is the instance to be passed to all child nodes</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryStateNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamEventProp">
            <summary>
            This class represents a filter parameter containing a reference to another event's property
            in the event pattern result, for use to describe a filter parameter in a <see cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> filter specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamEventProp.#ctor(System.String,com.espertech.esper.filter.FilterOperator,System.String,System.String,System.Boolean,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyName">is the event property name</param>
            <param name="filterOperator">is the type of compare</param>
            <param name="resultEventAsName">is the name of the result event from which to get a property value to compare</param>
            <param name="resultEventProperty">is the name of the property to get from the named result event</param>
            <param name="isMustCoerce">if set to <c>true</c> [is must coerce].</param>
            <param name="coercionType">Type of the coercion.</param>
            <throws>  ArgumentException if an operator was supplied that does not take a single constant value </throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamEventProp.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Return the filter parameter constant to filter for.
            </summary>
            <param name="matchedEvents">is the prior results that can be used to determine filter parameters</param>
            <returns>filter parameter constant's value</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamEventProp.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamEventProp.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamEventProp.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventProp.ResultEventAsName">
            <summary> Returns tag for result event.</summary>
            <returns> tag
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventProp.ResultEventProperty">
            <summary> Returns the property of the result event.</summary>
            <returns> property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventProp.IsMustCoerce">
            <summary>Returns true if numeric coercion is required, or false if not</summary>
            <returns>true to coerce at runtime</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventProp.CoercionType">
            <summary>Returns the numeric coercion type.</summary>
            <returns>type to coerce to</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.MappedProperty">
            <summary>
            Represents a mapped property or array property, ie. a 'value' property
            with read method getValue(int index) or a 'array' property via read
            method Array returning an array.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.MappedProperty.#ctor(System.String,System.String)">
            <summary> Ctor.</summary>
            <param name="propertyName">is the property name of the mapped property
            </param>
            <param name="key">is the key value to access the mapped property
            </param>
        </member>
        <member name="M:com.espertech.esper.events.property.MappedProperty.GetGetter(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns value getter for the property of an event of the given event type.
            </summary>
            <param name="eventType">is the type of event to make a getter for</param>
            <returns>fast property value getter for property</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.MappedProperty.GetPropertyType(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns the property type.
            </summary>
            <param name="eventType">is the event type representing the object</param>
            <returns>property type class</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.MappedProperty.GetPropertyTypeMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the property type for use with Map event representations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.MappedProperty.GetGetterMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the getter-method for use with Map event representations.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.MappedProperty.Key">
            <summary> Returns the key value for mapped access.</summary>
            <returns> key value
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.DBStatementStreamSpec">
            <summary>
            Specification object for historical data poll via database SQL statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.DBStatementStreamSpec.#ctor(System.String,System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},System.String,System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="optionalStreamName">is a stream name optionally given to stream</param>
            <param name="viewSpecs">is a list of views onto the stream</param>
            <param name="databaseName">is the database name to poll</param>
            <param name="sqlWithSubsParams">is the SQL with placeholder parameters</param>
            <param name="metadataSQL">The metadata SQL.</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.DBStatementStreamSpec.Compile(com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.pattern.PatternObjectResolutionService,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.named.NamedWindowService,com.espertech.esper.events.vaevent.ValueAddEventService,com.espertech.esper.epl.variable.VariableService,System.String,System.Collections.Generic.IList{System.Uri})">
            <summary>
            Compiles a raw stream specification consisting event type information and filter expressionsto an validated, optimized form for use with filter service
            </summary>
            <param name="eventAdapterService">supplies type information</param>
            <param name="methodResolutionService">for resolving imports</param>
            <param name="patternObjectResolutionService">for resolving pattern objects</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="namedWindowService">is the service managing named windows</param>
            <param name="valueAddEventService">The value add event service.</param>
            <param name="variableService">provides variable values</param>
            <param name="engineURI">The engine URI.</param>
            <param name="plugInTypeResolutionURIs">The plug in type resolution UR is.</param>
            <returns>compiled stream</returns>
            <throws>ExprValidationException to indicate validation errors</throws>
        </member>
        <member name="P:com.espertech.esper.epl.spec.DBStatementStreamSpec.DatabaseName">
            <summary> Returns the database name.</summary>
            <returns> name of database.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.DBStatementStreamSpec.SqlWithSubsParams">
            <summary> Returns the SQL with substitution parameters.</summary>
            <returns> SQL with parameters embedded as ${stream.param}
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.DBStatementStreamSpec.MetadataSQL">
            <summary>
            Returns the optional sample metadata SQL
            </summary>
            <returns>null if not supplied, or SQL to fire to retrieve metadata</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.TableOuterLookupNode">
            <summary> Specifies exection of a table lookup with outer join using the a specified lookup plan.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableOuterLookupNode.#ctor(com.espertech.esper.epl.join.plan.TableLookupPlan)">
            <summary> Ctor.</summary>
            <param name="tableLookupPlan">plan for performing lookup
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableOuterLookupNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Print a long readable format of the query node to the supplied PrintWriter.
            </summary>
            <param name="writer">is the indentation writer to print to</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableOuterLookupNode.MakeExec(com.espertech.esper.epl.join.table.EventTable[][],com.espertech.esper.events.EventType[])">
            <summary>
            Make execution node from this specification.
            </summary>
            <param name="indexesPerStream">tables build for each stream</param>
            <param name="streamTypes">event type of each stream</param>
            <returns>execution node matching spec</returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.TableOuterLookupNode.LookupStrategySpec">
            <summary> Returns lookup plan.</summary>
            <returns> lookup plan
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.TableLookupNode">
            <summary>
            Specifies exection of a table lookup using the supplied plan for performing the lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableLookupNode.#ctor(com.espertech.esper.epl.join.plan.TableLookupPlan)">
            <summary> Ctor.</summary>
            <param name="tableLookupPlan">plan for performing lookup
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableLookupNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Print a long readable format of the query node to the supplied PrintWriter.
            </summary>
            <param name="writer">is the indentation writer to print to</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableLookupNode.MakeExec(com.espertech.esper.epl.join.table.EventTable[][],com.espertech.esper.events.EventType[])">
            <summary>
            Make execution node from this specification.
            </summary>
            <param name="indexesPerStream">tables build for each stream</param>
            <param name="streamTypes">event type of each stream</param>
            <returns>execution node matching spec</returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.TableLookupNode.LookupStrategySpec">
            <summary> Returns lookup plan.</summary>
            <returns> lookup plan
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryPlanIndex">
            <summary>
            Specifies an index to build as part of an overall query plan.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndex.#ctor(System.String[][],System.Type[][])">
            <summary>Ctor.</summary>
            <param name="indexProps">
            array of property names with the first dimension suplying the number of
            distinct indexes. The second dimension can be empty and indicates a full table scan.
            </param>
            <param name="optCoercionTypes">
            array of coercion types for each index, or null entry for no coercion required
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndex.GetIndexNum(System.String[])">
            <summary> Find a matching index for the property names supplied.</summary>
            <param name="indexFields">property names to search for
            </param>
            <returns> -1 if not found, or offset within indexes if found
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndex.AddIndex(System.String[],System.Type[])">
            <summary>Add an index specification element.</summary>
            <param name="indexProperties">list of property names to index</param>
            <param name="coercionTypes">
            list of coercion types if required, or null if no coercion required
            </param>
            <returns>number indicating position of index that was added</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndex.GetCoercionTypes(System.String[])">
            <summary>Returns a list of coercion types for a given index.</summary>
            <param name="indexProperties">is the index field names</param>
            <returns>coercion types, or null if no coercion is required</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndex.SetCoercionTypes(System.String[],System.Type[])">
            <summary>Sets the coercion types for a given index.</summary>
            <param name="indexProperties">is the index property names</param>
            <param name="coercionTypes">is the coercion types</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndex.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndex.Print(com.espertech.esper.epl.join.plan.QueryPlanIndex[])">
            <summary> Print index specifications in readable format.</summary>
            <param name="indexSpecs">define indexes
            </param>
            <returns> readable format of index info
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryPlanIndex.IndexProps">
            <summary> Returns property names of all indexes.</summary>
            <returns> property names array
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryPlanIndex.CoercionTypesPerIndex">
            <summary>Returns property names of all indexes.</summary>
            <returns>property names array</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.OuterJoinAnalyzer">
            <summary>
            Analyzes an outer join descriptor list and builds a query graph model from it.
            The 'on' expression identifiers are extracted and placed in the query graph
            model as navigable relationships (by key and index properties) between streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterJoinAnalyzer.Analyze(System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc},com.espertech.esper.epl.join.plan.QueryGraph)">
            <summary> Analyzes the outer join descriptor list to build a query graph model.</summary>
            <param name="outerJoinDescList">list of outer join descriptors
            </param>
            <param name="queryGraph">model containing relationships between streams that is written into
            </param>
            <returns> queryGraph object
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSubselectExistsNode">
            <summary>
            Represents an exists-subselect in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectExistsNode.#ctor(com.espertech.esper.epl.spec.StatementSpecRaw)">
            <summary>Ctor.</summary>
            <param name="statementSpec">
            is the lookup statement spec from the parser, unvalidated
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectExistsNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">delegates for view resources to expression nodes</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectExistsNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean,com.espertech.esper.compat.Set{com.espertech.esper.events.EventBean})">
            <summary>
            Evaluate the subquery expression returning an evaluation result object.
            </summary>
            <param name="eventsPerStream">is the events for each stream in a join</param>
            <param name="isNewData">is true for new data, or false for old data</param>
            <param name="matchingEvents">is filtered results from the table of stored subquery events</param>
            <returns>evaluation result</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectExistsNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="T:com.espertech.esper.epl.db.QueryMetaData">
            <summary>
            Holder for query meta data information obtained from interrogating statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.QueryMetaData.#ctor(System.Collections.Generic.IList{System.String},com.espertech.esper.compat.Map{System.String,com.espertech.esper.epl.db.DBOutputTypeDesc})">
            <summary>Ctor.</summary>
            <param name="inputParameters">is the input parameter names</param>
            <param name="outputParameters">is the output column names and types</param>
        </member>
        <member name="P:com.espertech.esper.epl.db.QueryMetaData.InputParameters">
            <summary>Return the input parameters.</summary>
            <returns>input parameter names</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.QueryMetaData.OutputParameters">
            <summary>Returns a map of output column name and type descriptor.</summary>
            <returns>column names and types</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.NonNullCountAggregator">
            <summary>Count all non-null values.</summary>
        </member>
        <member name="T:com.espertech.esper.core.UpdateDispatchViewNonBlocking">
            <summary>
            Convenience view for dispatching view updates received from a parent view to update listeners
            via the dispatch service.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchViewNonBlocking.#ctor(com.espertech.esper.core.StatementResultService,com.espertech.esper.dispatch.DispatchService)">
            <summary>Ctor.</summary>
            <param name="dispatchService">for performing the dispatch</param>
            <param name="statementResultServiceImpl">handles result delivery</param>
        </member>
        <member name="T:com.espertech.esper.core.StatementContext">
            <summary>
            Contains handles to the implementation of the the scheduling service for use in view evaluation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementContext.#ctor(System.String,System.String,System.String,System.String,System.String,com.espertech.esper.schedule.SchedulingService,com.espertech.esper.schedule.ScheduleBucket,com.espertech.esper.events.EventAdapterService,com.espertech.esper.core.EPStatementHandle,com.espertech.esper.view.ViewResolutionService,com.espertech.esper.pattern.PatternObjectResolutionService,com.espertech.esper.core.StatementExtensionSvcContext,com.espertech.esper.view.StatementStopService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.pattern.PatternContextFactory,com.espertech.esper.filter.FilterService,com.espertech.esper.epl.join.JoinSetComposerFactory,com.espertech.esper.epl.view.OutputConditionFactory,com.espertech.esper.epl.named.NamedWindowService,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.core.StatementResultService,System.Collections.Generic.IList{System.Uri},com.espertech.esper.events.vaevent.ValueAddEventService)">
            <summary>Constructor.</summary>
            <param name="engineURI">is the engine URI</param>
            <param name="engineInstanceId">is the name of the engine instance</param>
            <param name="statementId">is the statement is assigned for the statement for which this context exists</param>
            <param name="statementName">is the statement name</param>
            <param name="expression">is the EPL or pattern expression used</param>
            <param name="schedulingService">implementation for schedule registration</param>
            <param name="scheduleBucket">is for ordering scheduled callbacks within the view statements</param>
            <param name="eventAdapterService">service for generating events and handling event types</param>
            <param name="epStatementHandle">is the statements-own handle for use in registering callbacks with services</param>
            <param name="viewResultionService">is a service for resolving view namespace and name to a view factory</param>
            <param name="statementExtensionSvcContext">provide extension points for custom statement resources</param>
            <param name="statementStopService">for registering a callback invoked when a statement is stopped</param>
            <param name="methodResolutionService">is a service for resolving static methods and aggregation functions</param>
            <param name="patternContextFactory">is the pattern-level services and context information factory</param>
            <param name="filterService">is the filtering service</param>
            <param name="patternResolutionService">is the service that resolves pattern objects for the statement</param>
            <param name="joinSetComposerFactory">is the factory for creating service objects that compose join results</param>
            <param name="outputConditionFactory">is the factory for output condition objects</param>
            <param name="namedWindowService">is holding information about the named windows active in the system</param>
            <param name="variableService">provides access to variable values</param>
            <param name="statementResultService">handles awareness of listeners/subscriptions for a statement customizing output produced</param>
            <param name="plugInTypeResolutionURIs">is URIs for resolving the event name against plug-inn event representations, if any</param>
            <param name="valueAddEventService">service that handles update events</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.StatementId">
            <summary>Returns the statement id.</summary>
            <returns>statement id</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.StatementName">
            <summary>Returns the statement name</summary>
            <returns>statement name</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.SchedulingService">
            <summary>Returns service to use for schedule evaluation.</summary>
            <returns>schedule evaluation service implemetation</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.EventAdapterService">
            <summary>Returns service for generating events and handling event types.</summary>
            <returns>event adapter service</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.ScheduleBucket">
            <summary>
            Returns the schedule bucket for ordering schedule callbacks within this pattern.
            </summary>
            <returns>schedule bucket</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.EpStatementHandle">
            <summary>Returns the statement's resource locks.</summary>
            <returns>statement resource lock/handle</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.ViewResolutionService">
            <summary>Returns view resolution svc.</summary>
            <returns>view resolution</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.ExtensionServicesContext">
            <summary>Returns extension context for statements.</summary>
            <returns>context</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.StatementStopService">
            <summary>Returns statement stop subscription taker.</summary>
            <returns>stop service</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.MethodResolutionService">
            <summary>
            Returns service to look up static and aggregation methods or functions.
            </summary>
            <returns>method resolution</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.PatternContextFactory">
            <summary>Returns the pattern context factory for the statement.</summary>
            <returns>pattern context factory</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.Expression">
            <summary>Returns the statement expression text</summary>
            <returns>expression text</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.EngineURI">
            <summary>Returns the engine URI.</summary>
            <returns>engine URI</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.EngineInstanceId">
            <summary>Returns the engine instance id.</summary>
            <returns>instance id</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.FilterService">
            <summary>Returns the filter service.</summary>
            <returns>filter service</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.JoinSetComposerFactory">
            <summary>
            Gets the join set composer factory.
            </summary>
            <value>The join set composer factory.</value>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.OutputConditionFactory">
            <summary>
            Gets the output condition factory.
            </summary>
            <value>The output condition factory.</value>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.PatternResolutionService">
            <summary>
            Gets the pattern resolution service.
            </summary>
            <value>The pattern resolution service.</value>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.NamedWindowService">
            <summary>Returns the named window management service.</summary>
            <returns>service for managing named windows</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.VariableService">
            <summary>Returns variable service.</summary>
            <returns>variable service</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.StatementResultService">
            <summary>
            Returns the service that handles awareness of listeners/subscriptions for a statement
            customizing output produced
            </summary>
            <returns>statement result svc</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.PlugInTypeResolutionURIs">
            <summary>Returns the URIs for resolving the event name against plug-inn event representations, if any</summary>
            <returns>URIs</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementContext.ValueAddEventService">
            <summary>Returns the update event service.</summary>
            <returns>revision service</returns>
        </member>
        <member name="T:com.espertech.esper.core.PatternListenerDispatch">
            <summary>
            Dispatchable for dispatching events to update listeners.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.PatternListenerDispatch.#ctor(com.espertech.esper.compat.Set{com.espertech.esper.client.UpdateEventHandler})">
            <summary>
            Constructor.
            </summary>
            <param name="eventHandlers">The event handlers.</param>
        </member>
        <member name="M:com.espertech.esper.core.PatternListenerDispatch.Add(com.espertech.esper.events.EventBean)">
            <summary>
            Add an event to be dispatched.
            </summary>
            <param name="_event">event to add</param>
        </member>
        <member name="M:com.espertech.esper.core.PatternListenerDispatch.FireUpdateEvent(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Fires the update event.
            </summary>
            <param name="newEvents">The new events.</param>
            <param name="oldEvents">The old events.</param>
        </member>
        <member name="M:com.espertech.esper.core.PatternListenerDispatch.Execute">
            <summary>
            Execute any listeners.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.PatternListenerDispatch.HasData">
            <summary> Returns true if at least one event has been added.</summary>
            <returns> true if it has data, false if not
            </returns>
        </member>
        <member name="T:com.espertech.esper.core.EPStatementHandle">
            <summary>
            Class exists once per statement and hold statement resource Lock(s).
            <para>
            Use by <see cref="T:com.espertech.esper.core.EPRuntimeImpl"/> for determining callback-statement affinity and locking of statement
            resources.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementHandle.#ctor(System.String,com.espertech.esper.util.ManagedLock,System.String,System.Boolean)">
            Ctor.
            @param statementId is the statement id uniquely indentifying the handle
            @param statementLock is the statement resource lock
            @param expressionText is the expression
            @param hasVariables indicator whether the statement uses variables
        </member>
        <member name="M:com.espertech.esper.core.EPStatementHandle.InternalDispatch">
            <summary>
            Invoked by <see cref="T:com.espertech.esper.client.EPRuntime"/> to indicate that a statements's
            filer and schedule processing is done, and now it's time to process join results.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementHandle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementHandle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementHandle.CanSelfJoin">
            <summary>
            Set the statement's self-join flag to indicate the the statement may join to itself,
            that is a single event may dispatch into multiple streams or patterns for the same statement,
            requiring internal dispatch logic to not shortcut evaluation of all filters for the statement
            within one lock, requiring the callback handle to be sorted.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementHandle.IsCanSelfJoin">
            <summary>
            Returns true if the statement potentially self-joins amojng the events it processes.
            </summary>
            <returns>
            true for self-joins possible, false for not possible (most statements)
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementHandle.StatementLock">
            <summary>Returns statement resource lock.</summary>
            <returns>lock</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementHandle.InsertIntoLatchFactory">
            <summary>
            Gets or sets the factory for latches in insert-into guaranteed order of delivery.
            </summary>
            <value>The insert into latch factory.</value>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementHandle.HasVariables">
            <summary>
            Gets a value indicating whether this instance has variables.
            </summary>
            <value>
            	<c>true</c> if this instance has variables; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.core.EPStatementHandle.OptionalDispatchable">
            <summary>
            Provides a callback for use when statement processing for filters and schedules is done,
            for use by join statements that require an explicit indicator that all
            joined streams results have been processed.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.WriterLock">
            <summary>
            Disposable object that acquires a write lock and disposes
            of the lock when it goes out of scope.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.WriterLock.m_uLockName">
            <summary>
            Unmanaged lock name
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.WriterLock.m_uLockObj">
            <summary>
            Unmanaged lock object
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.WriterLock.m_mLockObj">
            <summary>
            Managed lock object
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.WriterLock.m_lockAcquired">
            <summary>
            Indicates if we acquired the lock
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.WriterLock.#ctor(com.espertech.esper.compat.FastReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WriterLock"/> class.
            </summary>
            <param name="lockObj">The lock obj.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WriterLock.#ctor(System.String,com.espertech.esper.compat.FastReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WriterLock"/> class.
            </summary>
            <param name="name">The name of the lock.</param>
            <param name="lockObj">The lock obj.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WriterLock.#ctor(com.espertech.esper.util.ManagedReadWriteLock)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WriterLock"/> class.
            </summary>
            <param name="lockObj">The lock obj.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WriterLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.LockConstants">
            <summary>
            Constants we keep for our locking algorithms.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.LockConstants.MonitorTimeout">
            <summary>
            Number of milliseconds until monitor locks timeout
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.LockConstants.ReaderTimeout">
            <summary>
            Number of milliseconds until read locks timeout
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.LockConstants.WriterTimeout">
            <summary>
            Number of milliseconds until write locks timeout
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.CopyOnWriteList`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.CopyOnWriteList`1"/> class.
            </summary>
            <param name="initialCapacity">The initial capacity.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.ToArray">
            <summary>
            Converts the list to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.ForEach(System.Action{`0})">
            <summary>
            Iterates over each item in the list executing the specified
            action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="itemList">The item list.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="P:com.espertech.esper.compat.CopyOnWriteList`1.WriteLock">
            <summary>
            Gets the write lock.
            </summary>
            <value>The write lock.</value>
        </member>
        <member name="P:com.espertech.esper.compat.CopyOnWriteList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.CopyOnWriteList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.CopyOnWriteList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.collection.TimeWindowIterator">
            <summary>
            Iterator for <see cref="T:com.espertech.esper.collection.TimeWindow"/> to iterate over a timestamp slots that hold events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindowIterator.#ctor(System.Collections.Generic.IEnumerable{com.espertech.esper.collection.Pair{System.Int64,System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean}}})">
            <summary>
            Ctor.
            </summary>
            <param name="window">is the time-slotted collection</param>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindowIterator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindowIterator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindowIterator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:com.espertech.esper.collection.TimeWindowIterator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:com.espertech.esper.collection.TimeWindowIterator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.CurrentTimestampExpression">
            <summary>
            Current timestamp supplies the current engine time in an expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CurrentTimestampExpression.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.ConstantExpression">
            <summary>
            Constant value returns a fixed value for use in expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ConstantExpression.#ctor(System.Object)">
            <summary>Ctor.</summary>
            <param name="constant">
            is the constant value, or null to represent the null value
            </param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ConstantExpression.Constant">
            <summary>Gets or sets the constant value that the expression represents.</summary>
            <returns>value of constant</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.AvgProjectionExpression">
            <summary>
            Average of the (distinct) values returned by an expression.
            <para>
            Expects a single child expression providing the values to aggregate.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AvgProjectionExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without inner expression
            </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.AvgProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project.</summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.AvgProjectionExpression.IsDistinct">
            <summary>Gets or sets the true if the projection considers distinct values only.</summary>
            <returns>true if distinct</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.UpdateStrategyExists">
            <summary>Strategy for merging update properties using only existing property's values. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategyExists.#ctor(com.espertech.esper.events.vaevent.RevisionSpec)">
            <summary>Ctor. </summary>
            <param name="spec">the specification</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionSpec">
            <summary>
            Specification for how to build a revision event type.
            <para/>
            Compiled from the information provided via configuration, which has already been validated
            before building this specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionSpec.#ctor(com.espertech.esper.client.PropertyRevision,com.espertech.esper.events.EventType,com.espertech.esper.events.EventType[],System.String[],System.String[],System.String[],System.String[],System.Boolean,System.Boolean[])">
            <summary>Ctor. </summary>
            <param name="propertyRevision">strategy to use</param>
            <param name="baseEventType">base type</param>
            <param name="deltaTypes">delta types</param>
            <param name="deltaAliases">aliases of delta types</param>
            <param name="keyPropertyNames">names of key properties</param>
            <param name="changesetPropertyNames">names of properties that change</param>
            <param name="baseEventOnlyPropertyNames">properties only available on the base event</param>
            <param name="deltaTypesAddProperties">bool to indicate delta types add additional properties.</param>
            <param name="changesetPropertyDeltaContributed">flag for each property indicating whether its contributed only by a delta event</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.ChangesetPropertyDeltaContributed">
            <summary>Flag for each changeset property to indicate if only the delta contributes the property. </summary>
            <returns>flag per property</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.PropertyRevision">
            <summary>Returns the stratgegy for revisioning. </summary>
            <returns>enum</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.BaseEventType">
            <summary>Returns the base event type. </summary>
            <returns>base type</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.DeltaTypes">
            <summary>Returns the delta event types. </summary>
            <returns>types</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.DeltaAliases">
            <summary>Returns aliases for delta events. </summary>
            <returns>event type alias names for delta events</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.KeyPropertyNames">
            <summary>Returns property names for key properties. </summary>
            <returns>property names</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.ChangesetPropertyNames">
            <summary>Returns property names of properties that change by deltas </summary>
            <returns>prop names</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.BaseEventOnlyPropertyNames">
            <summary>Returns the properies only found on the base event. </summary>
            <returns>base props</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.IsDeltaTypesAddProperties">
            <summary>Returns true if delta types add properties. </summary>
            <returns>flag indicating if delta event types add properties</returns>
        </member>
        <member name="T:com.espertech.esper.events.NaturalEventBean">
            <summary>An event that is carries multiple representations of event properties: A synthetic representation that is designed for delivery as <see cref="T:com.espertech.esper.events.EventBean"/> to client <see cref="T:com.espertech.esper.client.UpdateListener"/> code, and a natural representation as a bunch of Object-type properties for fast delivery to client subscriber objects via method call. </summary>
        </member>
        <member name="M:com.espertech.esper.events.NaturalEventBean.#ctor(com.espertech.esper.events.EventType,System.Object[],com.espertech.esper.events.EventBean)">
            <summary>Ctor. </summary>
            <param name="eventBeanType">the event type of the synthetic event</param>
            <param name="natural">the properties of the event</param>
            <param name="optionalSynthetic">the event bean that is the synthetic event, or null if no synthetic is packed in</param>
        </member>
        <member name="M:com.espertech.esper.events.NaturalEventBean.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.NaturalEventBean.EventType">
            <summary> Return the <see cref="P:com.espertech.esper.events.NaturalEventBean.EventType"/> instance that describes the set of properties available for this event.</summary>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.NaturalEventBean.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.NaturalEventBean.Underlying">
            <summary> Get the underlying data object to this event wrapper.</summary>
            <returns> underlying data object, usually either a Map or a bean instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.NaturalEventBean.Natural">
            <summary>Returns the column object result representation. </summary>
            <returns>select column values</returns>
        </member>
        <member name="P:com.espertech.esper.events.NaturalEventBean.OptionalSynthetic">
            <summary>Returns the synthetic event that can be attached. </summary>
            <returns>synthetic if attached, or null if none attached</returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableStateHandler">
            <summary>
            Interface for a plug-in to <see cref="T:com.espertech.esper.epl.variable.VariableService"/> to handle variable persistent state.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableStateHandler.GetHasState(System.String,System.Int32,System.Type,com.espertech.esper.core.StatementExtensionSvcContext)">
            <summary>
            Returns the current variable state plus Boolean.TRUE if there is a current state since the variable
            may have the value of null; returns Boolean.FALSE and null if there is no current state
            </summary>
            <param name="variableName">variable name</param>
            <param name="variableNumber">number of the variable</param>
            <param name="type">type of the variable</param>
            <param name="statementExtContext">for caches etc.</param>
            <returns>
            indicator whether the variable is known and it's state, or whether it doesn't have state (false)
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableStateHandler.SetState(System.String,System.Int32,System.Object)">
            <summary>Sets the new variable value</summary>
            <param name="variableName">name of the variable</param>
            <param name="variableNumber">number of the variable</param>
            <param name="newValue">new variable value, null values allowed</param>
        </member>
        <member name="T:com.espertech.esper.epl.variable.CurrentValue`1">
            <summary>
            A holder for versioned values that holds a current version-value and a prior version-value pair.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.CurrentValue`1.#ctor(com.espertech.esper.epl.variable.VersionedValue{`0},com.espertech.esper.epl.variable.VersionedValue{`0})">
            <summary>Ctor.</summary>
            <param name="currentVersion">current version and value</param>
            <param name="priorVersion">prior version and value</param>
        </member>
        <member name="P:com.espertech.esper.epl.variable.CurrentValue`1.CurrentVersion">
            <summary>Returns the current version.</summary>
            <returns>current version</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.CurrentValue`1.PriorVersion">
            <summary>Returns the prior version.</summary>
            <returns>prior version</returns>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.TableLookupStrategyNullRow">
            <summary>
            Implementation for a table lookup strategy that returns exactly one row but leaves
            that row as an undefined value.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.MethodPollingExecStrategy">
            <summary>Viewable providing historical data from a database.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingExecStrategy.#ctor(com.espertech.esper.events.EventAdapterService,CGLib.FastMethod,System.Boolean,com.espertech.esper.events.EventType)">
            <summary>Ctor.</summary>
            <param name="eventAdapterService">for generating event beans</param>
            <param name="method">the method to invoke</param>
            <param name="useMapType">is true to indicate that Map-events are generated</param>
            <param name="eventType">is the event type to use</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingExecStrategy.Start">
            <summary>
            Start the poll, called before any poll operation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingExecStrategy.Done">
            <summary>
            Indicate we are done polling and can release resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingExecStrategy.Destroy">
            <summary>
            Indicate we are no going to use this object again.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingExecStrategy.Poll(System.Object[])">
            <summary>
            Poll events using the keys provided.
            </summary>
            <param name="lookupValues">is keys for exeuting a query or such</param>
            <returns>a list of events for the keys</returns>
        </member>
        <member name="T:com.espertech.esper.antlr.NoCaseSensitiveStream">
            <summary>
            For use with ANTLR to create a case-insensitive token stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.antlr.NoCaseSensitiveStream.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="s">string to be parsed</param>
            <throws>IOException to indicate IO errors</throws>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeBatchViewRStream">
            <summary>
            Same as the <see cref="T:com.espertech.esper.view.window.TimeBatchView"/>, this view also supports fast-remove from the batch for remove stream events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewRStream.#ctor(com.espertech.esper.view.window.TimeBatchViewFactory,com.espertech.esper.core.StatementContext,System.Int64,System.Nullable{System.Int64})">
            <summary>Constructor.</summary>
            <param name="msecIntervalSize">
            is the number of milliseconds to batch events for
            </param>
            <param name="referencePoint">
            is the reference point onto which to base intervals, or null if
            there is no such reference point supplied
            </param>
            <param name="timeBatchViewFactory">fr copying this view in a group-by</param>
            <param name="statementContext">is required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewRStream.SendBatch">
            <summary>
            This method updates child views and clears the batch of events.
            We schedule a new callback at this time if there were events in the batch.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchViewRStream.MsecIntervalSize">
            <summary>Returns the interval size in milliseconds.</summary>
            <returns>batch size</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchViewRStream.InitialReferencePoint">
            <summary>
            Gets the reference point to use to anchor interval start and end dates to.
            </summary>
            <returns>is the millisecond reference point.</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchViewRStream.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty.</summary>
            <returns>true if empty</returns>
        </member>
        <member name="T:com.espertech.esper.view.std.AddPropertyValueView">
            <summary>
            This view simply adds a property to the events posted to it. This is useful for the group-merge views.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.AddPropertyValueView.#ctor(com.espertech.esper.core.StatementContext,System.String[],System.Object[],com.espertech.esper.events.EventType)">
            <summary>
            Constructor.
            </summary>
            <param name="statementContext">contains required view services</param>
            <param name="fieldNames">is the name of the field that is added to any events received by this view.</param>
            <param name="mergeValues">is the values of the field that is added to any events received by this view.</param>
            <param name="mergedResultEventType">is the event type that the merge view reports to it's child views</param>
        </member>
        <member name="M:com.espertech.esper.view.std.AddPropertyValueView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="_statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="M:com.espertech.esper.view.std.AddPropertyValueView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            <para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.std.AddPropertyValueView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.std.AddPropertyValueView.AddProperty(com.espertech.esper.events.EventBean,System.String[],System.Object[],com.espertech.esper.events.EventType,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Add a property to the event passed in.
            </summary>
            <param name="originalEvent">event to add property to</param>
            <param name="propertyNames">names of properties to add</param>
            <param name="propertyValues">value of properties to add</param>
            <param name="targetEventType">new event type</param>
            <param name="eventAdapterService">service for generating events and handling event types</param>param>
            <returns>event with added property</returns>
        </member>
        <member name="M:com.espertech.esper.view.std.AddPropertyValueView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.std.AddPropertyValueView.Parent">
            <summary>
            Sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.std.AddPropertyValueView.PropertyNames">
            <summary>
            Gets or sets the field name for which to set the
            merge value for.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.std.AddPropertyValueView.PropertyValues">
            <summary>
            Gets or sets the value to set for the field
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.std.AddPropertyValueView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.ext.IStreamSortedRandomAccess">
            <summary>
            Provides random access into a sorted-window's data.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ext.IStreamSortedRandomAccess.#ctor(com.espertech.esper.view.window.RandomAccessByIndexObserver)">
            <summary>Ctor.</summary>
            <param name="updateObserver">for indicating updates to</param>
        </member>
        <member name="M:com.espertech.esper.view.ext.IStreamSortedRandomAccess.Refresh(com.espertech.esper.compat.TreeMap{com.espertech.esper.collection.MultiKeyUntyped,System.Collections.Generic.LinkedList{com.espertech.esper.events.EventBean}},System.Int32,System.Int32)">
            <summary>Refreshes the random access data with the updated information.</summary>
            <param name="sortedEvents">is the sorted window contents</param>
            <param name="currentSize">is the current size of the window</param>
            <param name="maxSize">is the maximum size of the window</param>
        </member>
        <member name="M:com.espertech.esper.view.ext.IStreamSortedRandomAccess.GetNewData(System.Int32)">
            <summary>
            Returns an new data event given an index.
            </summary>
            <param name="index">to return new data for</param>
            <returns>new data event</returns>
        </member>
        <member name="M:com.espertech.esper.view.ext.IStreamSortedRandomAccess.GetOldData(System.Int32)">
            <summary>
            Returns an old data event given an index.
            </summary>
            <param name="index">to return old data for</param>
            <returns>old data event</returns>
        </member>
        <member name="T:com.espertech.esper.util.GenericFactory`1">
            <summary>
            Factory for an instance of any type. Employs Class.newInstance to instantiate.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.GenericFactory`1.#ctor(System.Type)">
            <summary> Ctor.</summary>
            <param name="clazz">Class of which instace must be created
            </param>
        </member>
        <member name="M:com.espertech.esper.util.GenericFactory`1.Create">
            <summary> Create instance of class.</summary>
            <returns> instance
            </returns>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleSpec">
            <summary> Holds a schedule specification which consists of a set of integer values or a null
            value for each schedule unit to indicate a wildcard.
            There is always an element in the specification for each unit minutes, hours, day of month, month, and day of week.
            There is optionally an element in the specification for the unit seconds.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.#ctor(com.espertech.esper.compat.Map{com.espertech.esper.type.ScheduleUnit,com.espertech.esper.compat.TreeSet{System.Int32}})">
            <summary> Constructor - validates that all mandatory schedule.</summary>
            <param name="unitValues">are the values for each minute, hour, day, month etc.
            </param>
            <throws>  ArgumentException - if validation of value set per unit fails </throws>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.#ctor">
            <summary>
            Constructor - for unit testing, initialize to all wildcards but leave seconds empty.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.AddValue(com.espertech.esper.type.ScheduleUnit,System.Int32)">
            <summary> For unit testing, add a single value, changing wildcards to value sets.</summary>
            <param name="element">to add
            </param>
            <param name="value">to add
            </param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.Equals(System.Object)">
            <summary>
            Returns true if this object equals the other object.
            </summary>
            <param name="otherObject">The other object.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.compress(System.Collections.Generic.IDictionary{com.espertech.esper.type.ScheduleUnit,com.espertech.esper.compat.TreeSet{System.Int32}})">
            <summary> Function to reduce value sets for unit that cover the whole range down to a wildcard.
            I.e. reduce 0,1,2,3,4,5,6 for week value to 'null' indicating the wildcard.
            </summary>
            <param name="unitValues">is the set of valid values per unit
            </param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.Validate(com.espertech.esper.compat.Map{com.espertech.esper.type.ScheduleUnit,com.espertech.esper.compat.TreeSet{System.Int32}})">
            <summary> Validate units and their value sets.</summary>
            <param name="unitValues">is the set of valid values per unit
            </param>
        </member>
        <member name="P:com.espertech.esper.schedule.ScheduleSpec.UnitValues">
            <summary> Return map of ordered set of valid schedule values for minute, hour, day, month etc. units</summary>
            <returns> map of 5 or 6 entries each with a set of integers
            </returns>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.TimerAtObserverFactory">
            <summary>
            Factory for 'crontab' observers that indicate truth when a time point was reached.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.TimerAtObserverFactory.spec">
            <summary>
            The schedule specification for the timer-at.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerAtObserverFactory.ComputeValues(System.Object,com.espertech.esper.type.ScheduleUnit)">
            <summary>
            Computes the values.
            </summary>
            <param name="unitParameter">The unit parameter.</param>
            <param name="unit">The unit.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerAtObserverFactory.MakeObserver(com.espertech.esper.pattern.PatternContext,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.observer.ObserverEventEvaluator,System.Object,System.Object)">
            <summary>
            Make an observer instance.
            </summary>
            <param name="context">services that may be required by observer implementation</param>
            <param name="beginState">Start state for observer</param>
            <param name="observerEventEvaluator">receiver for events observed</param>
            <param name="stateNodeId">optional id for the associated pattern state node</param>
            <param name="observerState">state node for observer</param>
            <returns>observer instance</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.observer.TimerAtObserverFactory.ObserverParameters">
            <summary>
            Sets the observer object parameters.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalNodeAnalysisResult">
            <summary>
            Result of analysis of pattern expression node tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeAnalysisResult.Add(com.espertech.esper.pattern.EvalFilterNode)">
            <summary>Adds a filter node.</summary>
            <param name="filterNode">filter node to add</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeAnalysisResult.Add(com.espertech.esper.pattern.EvalGuardNode)">
            <summary>Adds a guard node.</summary>
            <param name="guardNode">node to add</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeAnalysisResult.Add(com.espertech.esper.pattern.EvalObserverNode)">
            <summary>Adds an observer node.</summary>
            <param name="observerNode">node to add</param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeAnalysisResult.FilterNodes">
            <summary>Returns filter nodes.</summary>
            <returns>filter nodes</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeAnalysisResult.GuardNodes">
            <summary>Returns guard nodes.</summary>
            <returns>guard nodes</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeAnalysisResult.ObserverNodes">
            <summary>Returns observer nodes.</summary>
            <returns>observer nodes</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalGuardNode">
            <summary>
            This class represents a guard in the evaluation tree representing an event expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardNode.#ctor(com.espertech.esper.epl.spec.PatternGuardSpec)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.pattern.EvalGuardNode"/> class.
            </summary>
            <param name="patternGuardSpec">factory for guard construction.</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardNode.NewState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>
            Create the evaluation state node containing the truth value state for each operator in an
            event expression.
            </summary>
            <param name="parentNode">is the parent evaluator node that this node indicates a change in truth value to</param>
            <param name="beginState">is the container for events that makes up the Start state</param>
            <param name="context">is the handle to services required for evaluation</param>
            <param name="stateNodeId">is the new state object's identifier</param>
            <returns>
            state node containing the truth value state for the operator
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalGuardNode.GuardFactory">
            <summary>
            Gets the guard factory.
            </summary>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalGuardNode.PatternGuardSpec">
            <summary>
            Gets the guard object specification to use for instantiating the guard factory and guard.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterValueSet">
            <summary> Contains the filter criteria to sift through events. The filter criteria are the event class to look for and
            a set of parameters (property names, operators and constant/range values).
            </summary>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSet.EventType">
            <summary> Returns type of event to filter for.</summary>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSet.Parameters">
            <summary> Returns list of filter parameters.</summary>
            <returns> list of filter params
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexNotRange">
            <summary>
            Index for filter parameter constants for the not range operators (range open/closed/half).
            The implementation is based on the SortedMap implementation of TreeMap and stores only expression
            parameter values of type DoubleRange.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexNotRange.#ctor(System.String,com.espertech.esper.filter.FilterOperator,com.espertech.esper.events.EventType)">
            <summary>Constructs the index for matching ranges.</summary>
            <param name="attributeName">is the name of the event attribute field</param>
            <param name="filterOperator">is the type of range</param>
            <param name="eventType">is type of events handled</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexNotRange.Remove(System.Object)">
            <summary>
            Remove the event evaluation instance for the given constant. Returns true if
            the constant was found, or false if not.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">is the value supplied in the filter paremeter</param>
            <returns>
            true if found and removed, false if not found
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexNotRange.MatchEvent(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Matches the event.
            </summary>
            <param name="eventBean">The event bean.</param>
            <param name="matches">The matches.</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexNotRange.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:com.espertech.esper.filter.EventEvaluator"/> with the specified expression value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexNotRange.Count">
            <summary>
            Return the number of distinct filter parameter constants stored.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <value></value>
            <returns>Number of entries in index</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexNotRange.ReadWriteLock">
            <summary>
            Supplies the lock for protected access.
            </summary>
            <value></value>
            <returns>lock</returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.XMLEventBean">
            <summary> EventBean wrapper for XML documents. 
            Currently only instances of org.w3c.dom.Node can be used
            </summary>
            <author>  pablo
            </author>
        </member>
        <member name="M:com.espertech.esper.events.xml.XMLEventBean.#ctor(System.Xml.XmlNode,com.espertech.esper.events.EventType)">
            <summary>
            Ctor.
            </summary>
            <param name="_event">is the node with event property information</param>
            <param name="type">is the event type for this event wrapper</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.XMLEventBean.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.xml.XMLEventBean.EventType">
            <summary>
            Return the <see cref="P:com.espertech.esper.events.xml.XMLEventBean.EventType"/> instance that describes the set of properties available for this event.
            </summary>
            <value></value>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.XMLEventBean.Underlying">
            <summary>
            Get the underlying data object to this event wrapper.
            </summary>
            <value></value>
            <returns> underlying data object, usually either a Map or a bean instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.XMLEventBean.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="T:com.espertech.esper.events.ReflectionPropMethodGetter">
            <summary>
            Property getter for methods using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.ReflectionPropMethodGetter.#ctor(System.Reflection.MethodInfo)">
            <summary> Constructor.</summary>
            <param name="method">is the regular reflection method to use to obtain values for a field.
            </param>
        </member>
        <member name="M:com.espertech.esper.events.ReflectionPropMethodGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.ReflectionPropMethodGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a property.
            <para>
            Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
            Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
            If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
            does not exists and the method returns false.
            </para>
            	<para>
            For non-dynamic properties, this method always returns true since a getter would not be available
            unless
            </para>
            </summary>
            <param name="eventBean">the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default) properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.ReflectionPropMethodGetter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.NestedPropertyGetter">
            <summary>
            Getter for one or more levels deep nested properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.NestedPropertyGetter.#ctor(System.Collections.Generic.IList{com.espertech.esper.events.EventPropertyGetter},com.espertech.esper.events.BeanEventTypeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.property.NestedPropertyGetter"/> class.
            </summary>
            <param name="getterChain">the chain of getters to retrieve each nested property.</param>
            <param name="beanEventTypeFactory">the cache and factory for event bean types and event wrappers.</param>
        </member>
        <member name="M:com.espertech.esper.events.property.NestedPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Return the value for the property in the event object specified when the instance was obtained.
            Useful for fast access to event properties. Throws a PropertyAccessException if the getter instance
            doesn't match the EventType it was obtained from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from</param>
            <returns>value of property in event</returns>
            <throws>  PropertyAccessException to indicate that property access failed </throws>
        </member>
        <member name="M:com.espertech.esper.events.property.NestedPropertyGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a property.
            <para>
            Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
            Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
            If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
            does not exists and the method returns false.
            </para>
            	<para>
            For non-dynamic properties, this method always returns true since a getter would not be available
            unless
            </para>
            </summary>
            <param name="eventBean">the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default) properties
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicMappedPropertyGetter">
            <summary>
            Getter for a dynamic mapped property (syntax field.Mapped('key')?), using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicMappedPropertyGetter.#ctor(System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="fieldName">property name</param>
            <param name="key">mapped access key</param>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicMappedPropertyGetter.GetFromDictionary``2(System.Object,``0)">
            <summary>
            Static method to help with the extraction of values from a
            dictionary.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicMappedPropertyGetter.FindGenericDictionaryInterface(System.Type)">
            <summary>
            Finds the generic dictionary interface.
            </summary>
            <param name="clazz">The clazz.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicIndexedProperty">
            <summary>
            Represents a dynamic indexed property of a given name.
            <para>
            Dynamic properties always exist, have an Object type and are resolved to a method during runtime.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicIndexedProperty.#ctor(System.String,System.Int32)">
            <summary>Ctor.</summary>
            <param name="propertyName">is the property name</param>
            <param name="index">is the index of the array or indexed property</param>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicIndexedProperty.GetGetter(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns value getter for the property of an event of the given event type.
            </summary>
            <param name="eventType">is the type of event to make a getter for</param>
            <returns>fast property value getter for property</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicIndexedProperty.GetPropertyType(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns the property type.
            </summary>
            <param name="eventType">is the event type representing the object</param>
            <returns>property type class</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicIndexedProperty.GetPropertyTypeMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the property type for use with Map event representations.
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicIndexedProperty.GetGetterMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the getter-method for use with Map event representations.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StatementSpecUnMapContext">
            <summary>
            Un-mapping context for mapping from an internal specifications to an SODA object model.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecUnMapContext.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecUnMapContext.Add(System.Int32,com.espertech.esper.epl.spec.SubstitutionParameterExpression)">
            <summary>Adds a substitution parameters.</summary>
            <param name="index">is the index of the parameter</param>
            <param name="subsParam">is the parameter expression node</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecUnMapContext.AddAll(com.espertech.esper.compat.Map{System.Int32,com.espertech.esper.epl.spec.SubstitutionParameterExpression})">
            <summary>
            Adds all substitution parameters. Checks if indexes already exists
            and throws an exception if they do.
            </summary>
            <param name="inner">to indexes and parameters to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecUnMapContext.IndexedParams">
            <summary>Returns all indexed parameters.</summary>
            <returns>map of parameter index and parameter expression node</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OrderByItem">
            <summary>
            Specification object to an element in the order-by expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OrderByItem.#ctor(com.espertech.esper.epl.expression.ExprNode,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="exprNode">is the order-by expression node</param>
            <param name="ascending">is true for ascending, or false for descending sort</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OrderByItem.ExprNode">
            <summary>
            Returns the order-by expression node.
            </summary>
            <value>The expr node.</value>
            <returns>expression node.</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OrderByItem.IsDescending">
            <summary>
            Returns true for ascending, false for descending.
            </summary>
            <value>
            	<c>true</c> if this instance is descending; otherwise, <c>false</c>.
            </value>
            <returns>indicator if ascending or descending</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinSetComposerFactoryImpl">
            <summary>
            Factory for building a <see cref="T:com.espertech.esper.epl.join.JoinSetComposer"/> from analyzing filter nodes, for
            fast join tuple result set composition.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetComposerFactoryImpl.MakeComposer(System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc},com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.events.EventType[],System.String[],com.espertech.esper.view.Viewable[],com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum,System.Boolean[],System.Boolean[],System.Boolean[])">
            <summary>
            Builds join tuple composer.
            </summary>
            <param name="outerJoinDescList">list of descriptors for outer join criteria</param>
            <param name="optionalFilterNode">filter tree for analysis to build indexes for fast access</param>
            <param name="streamTypes">types of streams</param>
            <param name="streamNames">names of streams</param>
            <param name="streamViews">leaf view per stream</param>
            <param name="selectStreamSelectorEnum">indicator for rstream or istream-only, for optimization</param>
            <param name="isUnidirectional">an array of indicators for each stream set to true for a unidirectional stream in a join</param>
            <param name="hasChildViews">indicates if child views are declared for a stream</param>
            <param name="isNamedWindow">indicates whether the join is against named windows</param>
            <returns>composer implementation</returns>
            <throws>
            ExprValidationException is thrown to indicate that
            validation of view use in joins failed.
            </throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinSetComposerFactoryImpl.BuildIndex(System.Int32,System.String[],System.Type[],com.espertech.esper.events.EventType)">
            <summary>
            Build an index/table instance using the event properties for the event type.
            </summary>
            <param name="indexedStreamNum">number of stream indexed</param>
            <param name="indexProps">properties to index</param>
            <param name="optCoercionTypes">optional array of coercion types, or null if no coercion is required</param>
            <param name="eventType">type of event to expect</param>
            <returns>table build</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.RootOptionalAssemblyNode">
            <summary>
            Assembly node for an event stream that is a root with a one optional child node below it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootOptionalAssemblyNode.#ctor(System.Int32,System.Int32)">
            <summary> Ctor.</summary>
            <param name="streamNum">is the stream number</param>
            <param name="numStreams">is the number of streams</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootOptionalAssemblyNode.Init(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Provides results to assembly nodes for initialization.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootOptionalAssemblyNode.Process(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Process results.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootOptionalAssemblyNode.Result(com.espertech.esper.events.EventBean[],System.Int32,com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.rep.Node)">
            <summary>
            Publish a result row.
            </summary>
            <param name="row">is the result to publish</param>
            <param name="fromStreamNum">is the originitor that publishes the row</param>
            <param name="myEvent">is optional and is the event that led to the row result</param>
            <param name="myNode">is optional and is the result node of the event that led to the row result</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootOptionalAssemblyNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Output this node using writer, not outputting child nodes.
            </summary>
            <param name="indentWriter">to use for output</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprTimestampNode">
            <summary>
            Represents the CURRENT_TIMESTAMP() function or reserved keyword in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprTimestampNode.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprStaticMethodNode">
            <summary>
            Represents an invocation of a static library method in the expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprStaticMethodNode.#ctor(System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="typeName">the declaring class for the method that this node will invoke</param>
            <param name="methodName">the name of the method that this node will invoke</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprStaticMethodNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprStaticMethodNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">The view resource delegate.</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprStaticMethodNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStaticMethodNode.StaticMethod">
            <summary> Returns the static method.</summary>
            <returns> the static method that this node invokes
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStaticMethodNode.ClassName">
            <summary> Returns the class name.</summary>
            <returns> the class that declared the static method
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStaticMethodNode.MethodName">
            <summary> Returns the method name.</summary>
            <returns> the name of the method
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStaticMethodNode.ParamTypes">
            <summary> Returns parameter descriptor.</summary>
            <returns> the types of the child nodes of this node
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStaticMethodNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStaticMethodNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabaseConfigServiceImpl">
            <summary> Implementation provides database instance services such as connection factory and
            connection settings.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigServiceImpl.#ctor(com.espertech.esper.compat.Map{System.String,com.espertech.esper.client.ConfigurationDBRef},com.espertech.esper.schedule.SchedulingService,com.espertech.esper.schedule.ScheduleBucket)">
            <summary> Ctor.</summary>
            <param name="mapDatabaseRef">is a map of database name and database configuration entries
            </param>
            <param name="schedulingService">is for scheduling callbacks for a cache
            </param>
            <param name="scheduleBucket">is a system bucket for all scheduling callbacks for caches
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigServiceImpl.GetConnectionCache(System.String,System.String)">
            <summary>
            Returns true to indicate a setting to retain connections between lookups.
            </summary>
            <param name="databaseName">is the name of the database</param>
            <param name="preparedStatementText">is the sql text</param>
            <returns>
            a cache implementation to cache connection and prepared statements
            </returns>
            <throws>  DatabaseConfigException is thrown to indicate database configuration errors </throws>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigServiceImpl.GetConnectionFactory(System.String)">
            <summary>
            Returns a connection factory for a configured database.
            </summary>
            <param name="databaseName">is the name of the database</param>
            <returns>
            is a connection factory to use to get connections to the database
            </returns>
            <throws>  DatabaseConfigException is thrown to indicate database configuration errors </throws>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigServiceImpl.GetDataCache(System.String,com.espertech.esper.core.EPStatementHandle)">
            <summary>
            Returns a new cache implementation for this database.
            </summary>
            <param name="databaseName">the name of the database to return a new cache implementation for for</param>
            <param name="epStatementHandle">the statements-own handle for use in registering callbacks with services</param>
            <returns>cache implementation</returns>
            <throws>  DatabaseConfigException is thrown to indicate database configuration errors </throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped">
            <summary>
            Result-set processor for the aggregate-grouped case: there is a group-by and one or more
            non-aggregation event properties in the select clause are not listed in the group by, and 
            there are aggregation functions.
            <para/> This processor does perform grouping by computing 
            MultiKey group-by keys for each row. The processor generates one row for each event entering 
            (new event) and one row for each event leaving (old event).
            <para/>
            Aggregation state is a table of rows held by <see cref="T:com.espertech.esper.epl.agg.AggregationService"/> where the row key
            is the group-by MultiKey.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.epl.agg.AggregationService,System.Collections.Generic.ICollection{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.expression.ExprNode,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="selectExprProcessor">for processing the select expression and generting the readonly output rows</param>
            <param name="orderByProcessor">for sorting outgoing events according to the order-by clause</param>
            <param name="aggregationService">handles aggregation</param>
            <param name="groupKeyNodes">list of group-by expression nodes needed for building the group-by keys</param>
            <param name="optionalHavingNode">expression node representing validated HAVING clause, or null if none given.Aggregation functions in the having node must have been pointed to the AggregationService for evaluation. </param>
            <param name="isSelectRStream">true if remove stream events should be generated</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped.ProcessJoinResult(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},System.Boolean)">
            <summary>
            For use by joins posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newEvents">new events posted by join</param>
            <param name="oldEvents">old events posted by join</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped.ProcessViewResult(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            For use by views posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newData">new events posted by view</param>
            <param name="oldData">old events posted by view</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped.GenerateGroupKey(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>Generates the group-by key for the row </summary>
            <param name="eventsPerStream">is the row of events</param>
            <param name="isNewData">is true for new data</param>
            <returns>grouping keys</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped.ProcessOutputLimitedJoin(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}}}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting.</summary>
            <param name="joinEventsSet">the join results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped.ProcessOutputLimitedView(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.events.EventBean[]}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting.</summary>
            <param name="viewEventsList">the view results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped.ResultEventType">
            <summary>
            Returns the event type of processed results.
            </summary>
            <value>The type of the result event.</value>
            <returns> event type of the resulting events posted by the processor.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped.SelectExprProcessor">
            <summary>Returns the select expression processor </summary>
            <returns>select processor.</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped.OptionalHavingNode">
            <summary>Returns the having node. </summary>
            <returns>having expression</returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineImportUndefinedException">
            <summary>
            Indicates a problem importing classes, aggregation functions and the like.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportUndefinedException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="msg">exception message</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportUndefinedException.#ctor(System.String,System.Exception)">
            <summary>Ctor.</summary>
            <param name="msg">exception message</param>
            <param name="ex">inner exception</param>
        </member>
        <member name="T:com.espertech.esper.core.EPStatementDispatch">
            <summary>
            Interface for statement-level dispatch.
            <para>
            Relevant when a statements callbacks have completed and the join processing must take place.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPStatementDispatch.Execute">
            <summary>Execute dispatch.</summary>
        </member>
        <member name="M:com.espertech.esper.core.DirectoryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.core.DirectoryException"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.DirectoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.core.DirectoryException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:com.espertech.esper.compat.HighResolutionTimerFactory">
            <summary>
            Implementation of the TimerFactory that uses the HighResolutionTimer.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimerFactory.CreateTimer(System.Threading.TimerCallback,System.Int64)">
            <summary>
            Creates a timer.  The timer will begin after dueTime (in milliseconds)
            has passed and will occur at an interval specified by the period.
            </summary>
            <param name="timerCallback"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.RelationalOpExpression">
            <summary>
            Comparison using one of the relational operators (=, !=, &lt;, &lt;=, &gt;, &gt;=).
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.RelationalOpExpression.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="operator">is the relational operator.</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.RelationalOpExpression.#ctor(com.espertech.esper.client.soda.Expression,System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="left">provides a value to compare against</param>
            <param name="operator">is the operator to use</param>
            <param name="right">provides a value to compare against</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.RelationalOpExpression.Operator">
            <summary>Gets or sets the operator to use.</summary>
            <returns>operator.</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternObserverExpr">
            <summary>
            Pattern observer expression observes occurances such as timer-at (crontab) and timer-interval.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternObserverExpr.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
            <param name="namespace">is the guard object namespace</param>
            <param name="name">is the guard object name</param>
            <param name="parameters">is guard object parameters</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternObserverExpr.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
            <param name="namespace">is the guard object namespace</param>
            <param name="name">is the guard object name</param>
            <param name="parameters">is guard object parameters</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.OrderByElement">
            <summary>
            A single entry in an order-by clause consisting of an expression and order ascending or descending flag.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByElement.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="expression">is the expression to order by</param>
            <param name="descending">true for descending sort, false for ascending sort</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByElement.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OrderByElement.Expression">
            <summary>Gets or sets the order-by value expression.</summary>
            <returns>expression</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OrderByElement.IsDescending">
            <summary>
            True for descending sorts for this column, false for ascending sort.
            </summary>
            <returns>true for descending sort</returns>
        </member>
        <member name="T:com.espertech.esper.client.time.CurrentTimeEvent">
            <summary> Event for externally controlling the time within an <see cref="T:com.espertech.esper.client.EPRuntime"/> instance.
            External clocking must be enabled via <see cref="T:com.espertech.esper.client.time.TimerControlEvent"/> before this class can be used
            to externally feed time.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.time.CurrentTimeEvent.#ctor(System.Int64)">
            <summary> Constructor.</summary>
            <param name="timeInMillis">is the time in milliseconds
            </param>
        </member>
        <member name="M:com.espertech.esper.client.time.CurrentTimeEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.time.CurrentTimeEvent.TimeInMillis">
            <summary> Returns the time in milliseconds.</summary>
            <returns> time in milliseconds
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.StatementAwareUpdateEventHandler">
            <summary>
            Notify that new events are available or old events are removed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EmittedListener.Emitted(System.Object)">
            <summary>
            Called to indicate an event emitted from an EPRuntime.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EmittedEventHandler">
            <summary>
            Called to indicate an event emitted from an EPRuntime.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEmittedListener.#ctor(com.espertech.esper.client.EmittedEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ProxyEmittedListener"/> class.
            </summary>
            <param name="dg">The dg.</param>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEmittedListener.Emitted(System.Object)">
            <summary>
            Called to indicate an event emitted from an EPRuntime.
            </summary>
        </member>
        <member name="T:com.espertech.esper.plugin.PlugInEventRepresentation">
            <summary>
            Plug-in event representation that can dynamically create event types and event
            instances based on information available elsewhere.
            <para>
            A plug-in event representation can be useful when your application has existing
            types that carry event metadata and event property values and your application
            does not want to (or cannot) extract or transform such event metadata and event
            data into one of the built-in event representations (objects, DataMap or XML DOM).
            </para>
            <para>
            Further use of a plug-in event representation is to provide a faster or short-cut
            access path to event data. For example, the access to XML event data through a StAX
            Streaming API for XML (StAX) is known to be very efficient.
            </para>
            <para>
            Further, a plug-in event representation can provide network lookup and general
            abstraction of event typing and event sourcing.
            </para>
            <para>
            Before use, an implementation of this interface must be registered via configuration.
            Upon engine initialization, the engine invokes the <see cref="M:com.espertech.esper.plugin.PlugInEventRepresentation.Init(com.espertech.esper.plugin.PlugInEventRepresentationContext)"/> method passing
            configuration information.
            </para>
            <para>
            When a plug-in event type alias is registered via configuration (runtime or configuration
            time), the engine first asks the implementation whether the type is accepted via
            <see cref="M:com.espertech.esper.plugin.PlugInEventRepresentation.AcceptsType(com.espertech.esper.plugin.PlugInEventTypeHandlerContext)"/>. If accepted, the engine follows with a call to <see cref="M:com.espertech.esper.plugin.PlugInEventRepresentation.GetTypeHandler(com.espertech.esper.plugin.PlugInEventTypeHandlerContext)"/>
            for creating and handling the type.
            </para>
            <para>
            An implementation can participate in dynamic resolution of new (unseen) event type
            aliases if the application configures the URI of the event representation, or a child URI
            (parameters possible) via <see cref="P:com.espertech.esper.client.ConfigurationOperations.PlugInEventTypeAliasResolutionURIs"/>.
            </para>
            <para>
            Last, see <see cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Collections.Generic.IEnumerable{System.Uri})"/>. An
            event sender allows dynamic reflection on an incoming event object. At the time such
            an event sender is obtained and a matching URI specified, the
            <see cref="M:com.espertech.esper.plugin.PlugInEventRepresentation.AcceptsEventBeanResolution(com.espertech.esper.plugin.PlugInEventBeanReflectorContext)"/> method indicates that the event representation can
            or cannot inspect events, and the <see cref="T:com.espertech.esper.plugin.PlugInEventBeanFactory"/> returned is used by
            the event sender to wrap event objects for processing. 
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventRepresentation.Init(com.espertech.esper.plugin.PlugInEventRepresentationContext)">
            <summary>
            Initializes the event representation.
            </summary>
            <param name="eventRepresentationContext">URI and optional configuration information</param>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventRepresentation.AcceptsType(com.espertech.esper.plugin.PlugInEventTypeHandlerContext)">
            <summary>
            Returns true to indicate that the event representation can handle the requested event type.
            <para/>
            Called when a new plug-in event type and alias is registered and the its resolution URI
            matches or is a child URI of the event representation URI.
            <para/>
            Also called when a new EPL statement is created with an unseen event type alias and the
            URIs for resolution have been configured.
            </summary>
            <param name="acceptTypeContext">provides the URI specified for resolving the type, and configuration info.</param>
            <returns>
            true to accept the type, false such that another event representation may handle the type request
            </returns>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventRepresentation.GetTypeHandler(com.espertech.esper.plugin.PlugInEventTypeHandlerContext)">
            <summary>
            Returns the event type handler that provides the event type and, upon request, event sender,
            for this type.
            </summary>
            <param name="eventTypeContext">provides the URI specified for resolving the type, and configuration info.</param>
            <returns>provides event type and event sender</returns>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventRepresentation.AcceptsEventBeanResolution(com.espertech.esper.plugin.PlugInEventBeanReflectorContext)">
            <summary>
            For use with <see cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Collections.Generic.IEnumerable{System.Uri})"/>, returns 
            true if the event representation intends to provide event wrappers for event objects passed in.
            </summary>
            <param name="acceptBeanContext">provides the URI specified for resolving the event object reflection</param>
            <returns>
            true to accept the requested URI, false such that another event representation may handle the request
            </returns>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventRepresentation.GetEventBeanFactory(com.espertech.esper.plugin.PlugInEventBeanReflectorContext)">
            <summary>
            For use with <see cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Collections.Generic.IEnumerable{System.Uri})"/>, returns
            the factory that can inspect event objects and provide an event <see cref="T:com.espertech.esper.events.EventBean"/> wrapper.
            </summary>
            <param name="eventBeanContext">provides the URI specified for resolving the event object reflection</param>
            <returns>
            true to accept the requested URI, false such that another event representation may handle the request
            </returns>
        </member>
        <member name="T:com.espertech.esper.plugin.PlugInEventBeanFactory">
            <summary>
            Factory for creating <see cref="T:com.espertech.esper.events.EventBean"/> event object wrapper for a plug-in event representation.
            <para/>
            Implementations typically reflect on the event object to be processed and decides on the proper
            <see cref="!:com.espertech.esper.event.EventType"/> to assign. If the implementation finds that it cannot
            handle the event object, it should return null. Returning null gives another instance of this
            class as specified by the list of URI to handle the event object.
            <para>
            Returns an event wrapper for the event object specific to the plug-in event representation or
            using one of the built-in types, or null if the event object is unknown and cannot be handled.
            </para>
            </summary>
            <param name="event">is the event object to reflect upon and wrap</param>
            <param name="resolutionURI">is the URI used originally for obtaining the event sender</param>
            <returns>
            wrapped event object, or null if the event is of unknown type or content
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantPropertyGetterCache">
            <summary>
            A thread-safe cache for property getters per event type.
            <para/>
            Since most often getters are used in a row for the same type, keeps a row of last
            used getters for fast lookup based on type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropertyGetterCache.#ctor(com.espertech.esper.events.EventType[])">
            <summary>Ctor. </summary>
            <param name="knownTypes">types known at cache construction type, may be an empty list for the ANY type variance.</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropertyGetterCache.AddGetters(System.Int32,System.String)">
            <summary>Adds the getters for a property that is identified by a property number which indexes into array of getters per type. </summary>
            <param name="assignedPropertyNumber">number of property</param>
            <param name="propertyName">to add</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropertyGetterCache.GetGetter(System.Int32,com.espertech.esper.events.EventType)">
            <summary>Fast lookup of a getter for a property and type. </summary>
            <param name="assignedPropertyNumber">number of property to use as index</param>
            <param name="eventType">type of underlying event</param>
            <returns>getter</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantEventType">
            <summary>
            Event type for variant event streams.
            <para/>
            Caches properties after having resolved a property via a resolution strategy.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantEventType.#ctor(com.espertech.esper.events.vaevent.VariantSpec,com.espertech.esper.events.vaevent.VariantPropResolutionStrategy)">
            <summary>Ctor. </summary>
            <param name="variantSpec">the variant specification</param>
            <param name="propertyResStrategy">stragegy for resolving properties</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantEventBean">
            <summary>
            An event bean that represents multiple potentially disparate underlying events and presents
            a unified face across each such types or even any type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantEventBean.#ctor(com.espertech.esper.events.vaevent.VariantEventType,com.espertech.esper.events.EventBean)">
            <summary>Ctor. </summary>
            <param name="variantEventType">the event type</param>
            <param name="underlying">the event</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantEventBean.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantEventBean.EventType">
            <summary>
            Return the <see cref="P:com.espertech.esper.events.vaevent.VariantEventBean.EventType"/> instance that describes the set of properties available for this event.
            </summary>
            <value></value>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantEventBean.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantEventBean.Underlying">
            <summary>
            Get the underlying data object to this event wrapper.
            </summary>
            <value></value>
            <returns> underlying data object, usually either a Map or a bean instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantEventBean.UnderlyingEventBean">
            <summary>Returns the underlying event. </summary>
            <returns>underlying event</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.SimpleProperty">
            <summary>
            Represents a simple property of a given name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleProperty.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="propertyName">is the property name
            </param>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleProperty.GetGetter(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns value getter for the property of an event of the given event type.
            </summary>
            <param name="eventType">is the type of event to make a getter for</param>
            <returns>fast property value getter for property</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleProperty.GetPropertyType(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns the property type.
            </summary>
            <param name="eventType">the event type representing the bean</param>
            <returns>property type class</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleProperty.GetPropertyTypeMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Gets the property type map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleProperty.GetGetterMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Gets the getter map.
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VersionedValue`1">
            <summary>
            Holds a version of a value and a timestamp when that version is taken.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VersionedValue`1.#ctor(System.Int32,`0,System.Int64)">
            <summary>Ctor.</summary>
            <param name="version">version number</param>
            <param name="value">value at that version</param>
            <param name="timestamp">time when version was taken</param>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VersionedValue`1.Version">
            <summary>Returns the version.</summary>
            <returns>version</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VersionedValue`1.Value">
            <summary>Returns the value.</summary>
            <returns>value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VersionedValue`1.Timestamp">
            <summary>Returns the time the version was taken.</summary>
            <returns>time of version</returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableVersionThreadLocal">
            <summary>
            A wrapper for a thread-local to hold the current version for variables visible
            for a thread, as well as uncommitted values of variables for a thread.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableVersionThreadLocal.CreateEntry">
            <summary>
            Creates a new variable version thread entry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableVersionThreadLocal.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableVersionThreadLocal.CurrentThread">
            <summary>
            Returns the version and uncommitted values for the current thread.
            </summary>
            <returns>entry for current thread</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectExprElementStreamRawSpec">
            <summary>
            For use in select clauses for specifying a selected stream: select a.* from MyEvent as a, MyOther as b
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectExprElementStreamRawSpec.#ctor(System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="streamAliasName">is the stream alias of the stream to select</param>
            <param name="optionalAsName">is the column alias</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectExprElementStreamRawSpec.StreamAliasName">
            <summary>
            Returns the stream alias (e.g. select streamAlias from MyEvent as streamAlias).
            </summary>
            <returns>alias</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectExprElementStreamRawSpec.OptionalAsName">
            <summary>
            Returns the column alias (e.g. select streamAlias as mycol from MyEvent as streamAlias).
            </summary>
            <returns>alias</returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprWildcardProcessor">
            <summary>Processor for select-clause expressions that handles wildcards for single streams with no insert-into. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprWildcardProcessor.#ctor(com.espertech.esper.events.EventType)">
            <summary>Ctor. </summary>
            <param name="eventType">is the type of event this processor produces</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException if the expression validation failed</throws>
        </member>
        <member name="T:com.espertech.esper.core.ResultDeliveryStrategyImpl">
            <summary>
            A result delivery strategy that uses a matching "update" method and
            optional start, end, and updateRStream methods, to deliver column-wise
            to parameters of the update method.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.ResultDeliveryStrategyImpl.#ctor(System.Object,com.espertech.esper.core.DeliveryConvertor,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>Ctor. </summary>
            <param name="subscriber">is the subscriber receiving method invocations</param>
            <param name="deliveryConvertor">for converting individual rows</param>
            <param name="method">to deliver the insert stream to</param>
            <param name="startMethod">to call to indicate when delivery starts, or null if no such indication is required</param>
            <param name="endMethod">to call to indicate when delivery ends, or null if no such indication is required</param>
            <param name="rStreamMethod">to deliver the remove stream to, or null if no such indication is required</param>
        </member>
        <member name="M:com.espertech.esper.core.ResultDeliveryStrategyImpl.Execute(com.espertech.esper.collection.UniformPair{com.espertech.esper.events.EventBean[]})">
            <summary>
            Execute the dispatch.
            </summary>
            <param name="result">is the insert and remove stream to indicate</param>
        </member>
        <member name="M:com.espertech.esper.core.ResultDeliveryStrategyImpl.Handle(log4net.ILog,System.Exception,System.Object[],System.Object,CGLib.FastMethod)">
            <summary>Handle the exception, displaying a nice message and converting to <see cref="T:com.espertech.esper.client.EPException"/>. </summary>
            <param name="logger">is the logger to use for error logging</param>
            <param name="e">is the exception</param>
            <param name="paramList">the method parameters</param>
            <param name="subscriber">the object to deliver to</param>
            <param name="method">the method to call</param>
            <throws>EPException converted from the passed invocation exception</throws>
        </member>
        <member name="T:com.espertech.esper.core.EPPreparedExecuteMethod">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPPreparedExecuteMethod.#ctor(com.espertech.esper.epl.spec.StatementSpecCompiled,com.espertech.esper.core.EPServicesContext,com.espertech.esper.core.StatementContext)">
            <summary>Ctor. </summary>
            <param name="statementSpec">is a container for the definition of all statement constructs thatmay have been used in the statement, i.e. if defines the select clauses, insert into, outer joins etc. </param>
            <param name="services">is the service instances for dependency injection</param>
            <param name="statementContext">is statement-level information and statement services</param>
            <throws>ExprValidationException if the preparation failed</throws>
        </member>
        <member name="M:com.espertech.esper.core.EPPreparedExecuteMethod.Execute">
            <summary>Executes the prepared query. </summary>
            <returns>query results</returns>
        </member>
        <member name="P:com.espertech.esper.core.EPPreparedExecuteMethod.EventType">
            <summary>Returns the event type of the prepared statement. </summary>
            <returns>event type</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConnectionFactoryDesc">
            <summary>
            Marker for different connection factory settings.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationVariantStream">
            <summary>Configures a variant stream. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationVariantStream.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationVariantStream.AddEventTypeAlias(System.String)">
            <summary>
            Adds an aliases of an event types that is one of the predefined event typs allowed for the
            variant stream.
            </summary>
            <param name="eventTypeAlias">name of the event type to allow in the variant stream</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationVariantStream.TypeVariance">
            <summary>
            Gets or sets the type variance setting specifying whether the variant stream accepts event
            of only the predefined types or any type.
            </summary>
            <value>The type variance.</value>
            <returns>type variance setting</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationVariantStream.VariantTypeAliases">
            <summary>
            Returns the aliases of event types that a predefined for the variant stream.
            </summary>
            <value>The variant type aliases.</value>
            <returns>predefined types in the variant stream</returns>
        </member>
        <member name="T:com.espertech.esper.client.TypeVariance">
            <summary>
            Enumeration specifying whether only the predefine types or any type of event is accepted
            by the variant stream. </summary>
        </member>
        <member name="F:com.espertech.esper.client.TypeVariance.PREDEFINED">
            <summary>Allow only the predefined types to be inserted into the stream. </summary>
        </member>
        <member name="F:com.espertech.esper.client.TypeVariance.ANY">
            <summary>Allow any types to be inserted into the stream. </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationMethodRef">
            <summary>
            Holds configuration information for data caches for use in method invocations in the from-clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMethodRef.SetLRUCache(System.Int32)">
            <summary>
            Configures a LRU cache of the given size for the method invocation.
            </summary>
            <param name="size">is the maximum number of entries before method invocation results are evicted</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMethodRef.SetExpiryTimeCache(System.Double,System.Double)">
            <summary>
            Configures an expiry-time cache of the given maximum age in seconds and purge interval in seconds.
            <para>
            Specifies the cache reference type to be weak references. Weak reference cache entries become
            eligible for garbage collection and are removed from cache when the garbage collection requires so.
            </para>
            </summary>
            <param name="maxAgeSeconds">is the maximum number of seconds before a method invocation result is considered stale (also known as time-to-live)</param>
            <param name="purgeIntervalSeconds">is the interval at which the engine purges stale data from the cache</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMethodRef.SetExpiryTimeCache(System.Double,System.Double,com.espertech.esper.client.ConfigurationCacheReferenceType)">
            <summary>
            Configures an expiry-time cache of the given maximum age in seconds and purge interval in seconds. Also allows
            setting the reference type indicating whether garbage collection may remove entries from cache.
            </summary>
            <param name="maxAgeSeconds">is the maximum number of seconds before a method invocation result is considered stale (also known as time-to-live)</param>
            <param name="purgeIntervalSeconds">is the interval at which the engine purges stale data from the cache</param>
            <param name="configurationCacheReferenceType">specifies the reference type to use</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationMethodRef.DataCacheDesc">
            <summary>
            Return a method invocation result data cache descriptor.
            </summary>
            <returns>cache descriptor</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.RelativeAccessByEventNIndexGetter">
            <summary>
            Provides random-access into window contents by event and index as a combination.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.RelativeAccessByEventNIndexGetter.Updated(com.espertech.esper.view.window.IStreamRelativeAccess,com.espertech.esper.events.EventBean[])">
            <summary>
            </summary>
            <param name="iStreamRelativeAccess"></param>
            <param name="newData"></param>
            Callback to indicate an update.
            @param iStreamRelativeAccess is the collection
            @param newData is the new data available
        </member>
        <member name="M:com.espertech.esper.view.window.RelativeAccessByEventNIndexGetter.GetAccessor(com.espertech.esper.events.EventBean)">
            <summary>Returns the access into window contents given an event.</summary>
            <param name="_event">to which the method returns relative access from</param>
            <returns>buffer</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.LengthWindowViewRStream">
            <summary>
            This view is a moving window extending the specified number of elements into the past,
            allowing in addition to remove events efficiently for remove-stream events received by the view.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowViewRStream.#ctor(com.espertech.esper.view.window.LengthWindowViewFactory,System.Int32)">
            <summary>
            Constructor creates a moving window extending the specified number of elements into the past.
            </summary>
            <param name="size">is the specified number of elements into the past</param>
            <param name="lengthWindowViewFactory">for copying this view in a group-by</param>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthWindowViewRStream.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty.</summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthWindowViewRStream.Count">
            <summary>Returns the size of the length window.</summary>
            <returns>size of length window</returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewServiceContext">
            <summary>
            Contains handles to the implementation of the the scheduling service for use in view evaluation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceContext.#ctor(com.espertech.esper.schedule.SchedulingService,com.espertech.esper.schedule.ScheduleBucket,com.espertech.esper.events.EventAdapterService)">
            <summary> Constructor.</summary>
            <param name="schedulingService">implementation for schedule registration
            </param>
            <param name="scheduleBucket">is for ordering scheduled callbacks within the view statements
            </param>
            <param name="eventAdapterService">service for generating events and handling event types
            </param>
        </member>
        <member name="P:com.espertech.esper.view.ViewServiceContext.SchedulingService">
            <summary> Returns service to use for schedule evaluation.</summary>
            <returns> schedule evaluation service implemetation
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewServiceContext.EventAdapterService">
            <summary> Returns service for generating events and handling event types.</summary>
            <returns> event adapter service
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewServiceContext.ScheduleBucket">
            <summary> Returns the schedule bucket for ordering schedule callbacks within this pattern.</summary>
            <returns> schedule bucket
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewFactoryChain">
            <summary>
            Holder for the logical chain of view factories.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactoryChain.#ctor(com.espertech.esper.events.EventType,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>Ctor.</summary>
            <param name="streamEventType">is the event type of the event stream</param>
            <param name="viewFactoryChain">is the chain of view factories</param>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryChain.EventType">
            <summary>
            Returns the final event type which is the event type of the last view factory in the chain,
            or if the chain is empty then the stream's event type.
            </summary>
            <returns>final event type of the last view or stream</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryChain.FactoryChain">
            <summary>Returns the chain of view factories.</summary>
            <returns>view factory list</returns>
        </member>
        <member name="T:com.espertech.esper.view.stream.StreamFactorySvcImpl">
            <summary>
            Service implementation to reuse or not reuse event streams and existing filters depending on
            the type of statement.
            <p>
            For non-join statements, the class manages the reuse of event streams when filters match, and thus
            when an event stream is reused such can be the views under the stream. For joins however, this can lead to
            problems in multithread-safety since the statement resource lock would then have to be multiple locks,
            i.e. the reused statement's resource lock and the join statement's own lock, at a minimum.
            </p>
            <p>
            For join statements, always creating a new event stream and
            therefore not reusing view resources, for use with joins.
            </p>
            <p>
            This can be very effective in that if a client applications creates a large number of very similar
            statements in terms of filters and views used then these resources are all re-used
            across statements.
            </p>
            <p>
            The re-use is multithread-safe in that
            (A) statement start/stop is locked against other engine processing
            (B) the first statement supplies the lock for shared filters and views, protecting multiple threads
            from entering into the same view.
            (C) joins statements do not participate in filter and view reuse
            </p>
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactorySvcImpl.#ctor(System.Boolean)">
            <summary>Ctor.</summary>
            <param name="isReuseViews">indicator on whether stream and view resources are to be reused between statements</param>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactorySvcImpl.Destroy">
            <summary>
            Destroy the service.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactorySvcImpl.CreateStream(com.espertech.esper.filter.FilterSpecCompiled,com.espertech.esper.filter.FilterService,com.espertech.esper.core.EPStatementHandle,System.Boolean)">
            <summary>
            See the method of the same name in <see cref="T:com.espertech.esper.view.stream.StreamFactoryService"/>. Always attempts to reuse an existing event stream.
            May thus return a new event stream or an existing event stream depending on whether filter criteria match.
            </summary>
            <param name="filterSpec">is the filter definition</param>
            <param name="filterService">filter service to activate filter if not already active</param>
            <param name="epStatementHandle">is the statement resource lock</param>
            <param name="isJoin">is indicatng whether the stream will participate in a join statement, information
            necessary for stream reuse and multithreading concerns</param>
            <returns>
            newly createdStatement event stream, not reusing existing instances
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactorySvcImpl.DropStream(com.espertech.esper.filter.FilterSpecCompiled,com.espertech.esper.filter.FilterService,System.Boolean)">
            <summary>
            See the method of the same name in <see cref="T:com.espertech.esper.view.stream.StreamFactoryService"/>.
            </summary>
            <param name="filterSpec">is the filter definition</param>
            <param name="filterService">to be used to deactivate filter when the last event stream is dropped</param>
            <param name="isJoin">is indicatng whether the stream will participate in a join statement, information
            necessary for stream reuse and multithreading concerns</param>
        </member>
        <member name="T:com.espertech.esper.view.stat.olap.CubeDerivedValueHelper">
            <summary> Strategy for deriving a measure cube from a fact cube.
            Derives a measure cube consisting of the number of datapoints only.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.olap.CubeDerivedValueHelper.Derive(System.String[],com.espertech.esper.view.stat.olap.MultidimCube{com.espertech.esper.view.stat.BaseStatisticsBean})">
            <summary> Derive given statistical measures from the multidim. cube returning dimensions and cells.</summary>
            <param name="measuresToDerive">is an array with field names for statistic functions
            </param>
            <param name="cube">holds the n-dimensional cells
            </param>
            <returns> dimensions and cells
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.MultiDimStatsView">
             <summary> This view compiles OLAP cubes for the specified fields. New data from the parent view is entered into
             one or more fact cubes (see MultidimCube). Old data from the parent view is removed from a fact cube.
             The dimensions of the fact cube are specified as parameters to the view. The fact cube can be one-dimensional,
             two-dimensional (tabular) or 3-dimenstional (tabular with pages).
             Parameters are:
             A mandatory array of derived measure names, such as "datapoints", "stddev" etc., (see ViewFieldEnum)
             A mandatory measure field name. This field supplies the fact values in the cells of the cube.
             A mandatory column field name. This field supplies the members of dimension zero (column, 1-dim).
             An optional row field name. This field supplies the members of dimension one (row, 2-dim).
             An optional page field name. This field supplies the members of dimension two (page, 3-dim).
            
             The view post new data to child views that contains a Map with the Cube (see Cube). It does not post old data.
             </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.MultiDimStatsView.#ctor(com.espertech.esper.core.StatementContext,System.String[],System.String,System.String,System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="derivedMeasures">
            is an array of ViewFieldEnum names defining the measures to derive
            </param>
            <param name="measureField">defines the field supplying measures</param>
            <param name="columnField">
            defines the field supplying column dimension members
            </param>
            <param name="rowField">
            defines an optional field supplying row dimension members
            </param>
            <param name="pageField">
            defines an optional field supplying page dimension members
            </param>
            <param name="statementContext">contains required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.MultiDimStatsView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="_statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.MultiDimStatsView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.MultiDimStatsView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.MultiDimStatsView.ProcessElement(com.espertech.esper.events.EventBean,System.Boolean)">
            <summary>
            Processes the element.
            </summary>
            <param name="element">The element.</param>
            <param name="isNewData">if set to <c>true</c> [is new data].</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.MultiDimStatsView.CreateEventType(com.espertech.esper.core.StatementContext)">
            <summary>Creates the event type for this view.</summary>
            <param name="statementContext">is the event adapter service</param>
            <returns>event type of view</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.MultiDimStatsView.DerivedMeasures">
            <summary>
            Gets or sets the names of measures to derive from facts.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.stat.MultiDimStatsView.MeasureField">
            <summary>
            Gets or sets the name of the field to extract the measure values from.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.stat.MultiDimStatsView.ColumnField">
            <summary>
            Get or sets the name of the field to extract the column values from.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.stat.MultiDimStatsView.RowField">
            <summary>
            Gets or sets the row field.
            </summary>
            <value>The row field.</value>
        </member>
        <member name="P:com.espertech.esper.view.stat.MultiDimStatsView.PageField">
            <summary> Gets or sets the name of the field to extract the page values from.</summary>
            <returns> field for page values
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.MultiDimStatsView.FactCube">
            <summary> For unit testing, returns fact cube.</summary>
            <returns> fact cube
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.MultiDimStatsView.Parent">
            <summary>
            Gets or sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.MultiDimStatsView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.ext.TimeOrderViewFactory">
            <summary>
            Factory for views for time-ordering events.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.TimeOrderViewFactory.timestampFieldName">
            <summary>The timestamp field name.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.TimeOrderViewFactory.intervalSize">
            <summary>The interval to wait for newer events to arrive.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.TimeOrderViewFactory.randomAccessGetterImpl">
            <summary>The access into the collection for use with 'previous'.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.TimeOrderViewFactory.isRemoveStreamHandling">
            <summary>
            Indicates if the view must handle the remove stream of parent views.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.ext.SortWindowViewFactory">
            <summary>Factory for sort window views.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.SortWindowViewFactory.sortFieldNames">
            <summary>The sort-by field names.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.SortWindowViewFactory.isDescendingValues">
            <summary>The flags defining the ascending or descending sort order.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.SortWindowViewFactory.sortWindowSize">
            <summary>The sort window size.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.SortWindowViewFactory.randomAccessGetterImpl">
            <summary>The access into the collection for use with 'previous'.</summary>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.util.MethodResolver">
            <summary>
            Used for retrieving static and instance method objects. It provides two points of added
            functionality over the standard System.Reflection mechanism of retrieving methods.
            First, class names can be partial, and if the class name is partial
            then import service is searched for the class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.MethodResolver.ResolveMethod(System.Type,System.String,System.Type[],System.Boolean)">
            <summary>Attempts to find the static or instance method described by the parameters,or a method of the same name that will accept the same type ofparameters.</summary>
            <param name="declaringClass">the class to search for the method</param>
            <param name="methodName">the name of the method</param>
            <param name="paramTypes">the parameter types for the method</param>
            <param name="allowInstance">true to allow instance methods as well, false to allow only static method</param>
            <returns>- the Method object for this method</returns>
            <throws>NoSuchMethodException if the method could not be found</throws>
        </member>
        <member name="M:com.espertech.esper.util.MethodResolver.CompareParameterTypes(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Returns -1 if the invocation parameters aren't applicable
            to the method. Otherwise returns the number of parameters
            that have to be converted
            </summary>
            <param name="method"></param>
            <param name="invocationParameters"></param>
        </member>
        <member name="M:com.espertech.esper.util.MethodResolver.IsIdentityConversion(System.Type,System.Type)">
            <summary>
            Identity conversion means no conversion, wrapper conversion,
            or conversion to a supertype
            </summary>
            <param name="declarationType"></param>
            <param name="invocationType"></param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.util.MethodResolver.WideningConversions">
            <summary>Returns the allowable widening conversions.</summary>
            <returns>map where key is the class that we are asking to be widened into, anda set of classes that can be widened from</returns>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleServiceException">
            <summary>
            This exception is thrown to indicate a problem with scheduling.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleServiceException.#ctor(System.String)">
            <summary> Constructor.</summary>
            <param name="message">is the error message
            </param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleServiceException.#ctor(System.String,System.Exception)">
            <summary> Constructor for an inner exception and message.</summary>
            <param name="message">is the error message
            </param>
            <param name="cause">is the inner exception
            </param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleServiceException.#ctor(System.Exception)">
            <summary> Constructor.</summary>
            <param name="cause">is the inner exception
            </param>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternObjectResolutionServiceImpl">
            <summary>
            Resolves pattern object namespace and name to guard or observer factory class, using configuration.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternObjectResolutionServiceImpl.#ctor(com.espertech.esper.epl.spec.PluggableObjectCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.pattern.PatternObjectResolutionServiceImpl"/> class.
            </summary>
            <param name="patternObjects">the pattern plug-in objects configured</param>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.ObserverParameterException">
            <summary>Thrown to indicate a validation error in guard parameterization.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverParameterException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="message">validation error message</param>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.TimerWithinGuardFactory">
            <summary>
            Factory for <see cref="T:com.espertech.esper.pattern.guard.TimerWithinGuard"/> instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.TimerWithinGuardFactory.MakeGuard(com.espertech.esper.pattern.PatternContext,com.espertech.esper.pattern.guard.Quitable,System.Object,System.Object)">
            <summary>
            Constructs a guard instance.
            </summary>
            <param name="context">services for use by guard</param>
            <param name="quitable">to use for indicating the guard has quit</param>
            <param name="stateNodeId">a node id for the state object</param>
            <param name="guardState">state node for guard</param>
            <returns>guard instance</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.guard.TimerWithinGuardFactory.GuardParameters">
            <summary>
            </summary>
            <value></value>
            Sets the guard object parameters.
            @param guardParameters is a list of parameters
            @throws GuardParameterException thrown to indicate a parameter problem
        </member>
        <member name="T:com.espertech.esper.pattern.EvalGuardStateNode">
            <summary>
            This class represents the state of a "within" operator in the evaluation state tree.
            The within operator applies to a subexpression and is thus expected to only
            have one child node.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalGuardNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext,System.Object)">
            <summary>Constructor.</summary>
            <param name="parentNode">
            is the parent evaluator to call to indicate truth value
            </param>
            <param name="beginState">contains the events that make up prior matches</param>
            <param name="context">contains handles to services required</param>
            <param name="evalGuardNode">is the factory node associated to the state</param>
            <param name="stateObjectId">is the state object's id value</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardStateNode.Start">
            <summary>
            Starts the event expression or an instance of it.
            Child classes are expected to initialize and Start any event listeners
            or schedule any time-based callbacks as needed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardStateNode.EvaluateTrue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.EvalStateNode,System.Boolean)">
            <summary>
            Indicate a change in truth value to true.
            </summary>
            <param name="matchEvent">is the container for events that caused the change in truth value</param>
            <param name="fromNode">is the node that indicates the change</param>
            <param name="isQuitted">is an indication of whether the node continues listenening or Stops listening</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardStateNode.EvaluateFalse(com.espertech.esper.pattern.EvalStateNode)">
            <summary>
            Indicate a change in truth value to false.
            </summary>
            <param name="fromNode">is the node that indicates the change</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardStateNode.Quit">
            <summary>
            Stops the event expression or an instance of it. Child classes are expected to free resources
            and Stop any event listeners or remove any time-based callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardStateNode.Accept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Accept a visitor. Child classes are expected to invoke the visit method on the visitor instance
            passed in.
            </summary>
            <param name="visitor">on which the visit method is invoked by each node</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardStateNode.ChildrenAccept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Pass the visitor to all child nodes.
            </summary>
            <param name="visitor">is the instance to be passed to all child nodes</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardStateNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardStateNode.GuardQuit">
            <summary>
            Indicate guard quitted.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFollowedByStateNode">
            <summary>
            This class represents the state of a followed-by operator in the evaluation state tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFollowedByStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalFollowedByNode,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.PatternContext)">
            <summary>
            Constructor.
            </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalFollowedByNode">is the factory node associated to the state</param>
            <param name="beginState">contains the events that make up prior matches</param>
            <param name="context">contains handles to services required</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFollowedByStateNode.Start">
            <summary>
            Starts the event expression or an instance of it.
            Child classes are expected to initialize and Start any event listeners
            or schedule any time-based callbacks as needed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFollowedByStateNode.EvaluateTrue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.EvalStateNode,System.Boolean)">
            <summary>
            Indicate a change in truth value to true.
            </summary>
            <param name="matchEvent">is the container for events that caused the change in truth value</param>
            <param name="fromNode">is the node that indicates the change</param>
            <param name="isQuitted">is an indication of whether the node continues listenening or Stops listening</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFollowedByStateNode.EvaluateFalse(com.espertech.esper.pattern.EvalStateNode)">
            <summary>
            Indicate a change in truth value to false.
            </summary>
            <param name="fromNode">is the node that indicates the change</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFollowedByStateNode.Quit">
            <summary>
            Stops the event expression or an instance of it. Child classes are expected to free resources
            and Stop any event listeners or remove any time-based callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFollowedByStateNode.Accept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Accept a visitor. Child classes are expected to invoke the visit method on the visitor instance
            passed in.
            </summary>
            <param name="visitor">on which the visit method is invoked by each node</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFollowedByStateNode.ChildrenAccept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Pass the visitor to all child nodes.
            </summary>
            <param name="visitor">is the instance to be passed to all child nodes</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFollowedByStateNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexIn">
            <summary>
            Index for filter parameter constants to match using the 'in' operator to match against a supplied set of values
            (i.e. multiple possible exact matches).
            The implementation is based on a regular HashMap.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexIn.#ctor(System.String,com.espertech.esper.events.EventType)">
            <summary>Constructs the index for multiple-exact matches.</summary>
            <param name="propertyName">is the name of the event property</param>
            <param name="eventType">
            describes the event type and is used to obtain a getter instance for the property
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexIn.Remove(System.Object)">
            <summary>
            Remove the event evaluation instance for the given constant. Returns true if
            the constant was found, or false if not.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">is the value supplied in the filter paremeter</param>
            <returns>
            true if found and removed, false if not found
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexIn.MatchEvent(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Matches the event.
            </summary>
            <param name="eventBean">The event bean.</param>
            <param name="matches">The matches.</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexIn.Item(System.Object)">
            <summary>
            Get the event evaluation instance associated with the constant. Returns null if no entry found for the constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock property must supply a lock for this purpose.
            Store the event evaluation instance for the given constant. Can override an existing value
            for the same constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <value></value>
            <returns>
            event evaluator stored for the filter constant, or null if not found
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexIn.Count">
            <summary>
            Return the number of distinct filter parameter constants stored.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <value></value>
            <returns>Number of entries in index</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexIn.ReadWriteLock">
            <summary>
            Supplies the lock for protected access.
            </summary>
            <value></value>
            <returns>lock</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexBooleanExpr">
            <summary>Index that simply maintains a list of bool expressions.</summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexBooleanExpr.#ctor(com.espertech.esper.events.EventType)">
            <summary>Constructs the index for multiple-exact matches.</summary>
            <param name="eventType">
            describes the event type and is used to obtain a getter instance for the property
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexBooleanExpr.Remove(System.Object)">
            <summary>
            Remove the event evaluation instance for the given constant. Returns true if
            the constant was found, or false if not.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">is the value supplied in the filter paremeter</param>
            <returns>
            true if found and removed, false if not found
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexBooleanExpr.MatchEvent(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Matches the event.
            </summary>
            <param name="eventBean">The event bean.</param>
            <param name="matches">The matches.</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexBooleanExpr.Item(System.Object)">
            <summary>
            Get the event evaluation instance associated with the constant. Returns null if no entry found for the constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock property must supply a lock for this purpose.
            Store the event evaluation instance for the given constant. Can override an existing value
            for the same constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <value></value>
            <returns>
            event evaluator stored for the filter constant, or null if not found
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexBooleanExpr.Count">
            <summary>
            Return the number of distinct filter parameter constants stored.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <value></value>
            <returns>Number of entries in index</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexBooleanExpr.ReadWriteLock">
            <summary>
            Supplies the lock for protected access.
            </summary>
            <value></value>
            <returns>lock</returns>
        </member>
        <member name="T:com.espertech.esper.events.TypedEventPropertyGetter">
            <summary> Interface for property getters also returning type information for the property.</summary>
            <author>  pablo
            </author>
        </member>
        <member name="P:com.espertech.esper.events.TypedEventPropertyGetter.ResultClass">
            <summary> Returns type of event property.</summary>
            <returns> class of the objects returned by this getter
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.PropertyListBuilderNative">
            <summary>
            Implementation for a property list builder that considers native properties
            plus any explicitly configured props.
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.property.PropertyListBuilderNative.propertyResolver">
            <summary>
            Creates properties for us.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderNative.#ctor(com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary> Ctor.</summary>
            <param name="optionalLegacyConfig">configures legacy type, or null information
            has been supplied.
            </param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderNative.AssessProperties(System.Type)">
            <summary>
            Introspect the type and deterime exposed event properties.
            </summary>
            <param name="type">type to introspect</param>
            <returns>list of event property descriptors</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.MapMappedPropertyGetter">
            <summary>
            Getter for a dynamic mappeds property for maps.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.MapMappedPropertyGetter.#ctor(System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="fieldName">property name</param>
            <param name="key">get the element at</param>
        </member>
        <member name="T:com.espertech.esper.events.EventAdapterServiceImpl">
            <summary>
            Implementation for resolving event name to event type.
            <para>
            The implementation assigned a unique identifier to each event type.
            For Class-based event types, only one EventType instance and one event type id exists for the same class.
            </para>
            <para>
            Alias names must be unique, that is an alias name must resolve to a single event type.
            </para>
            <para>
            Each event type can have multiple aliases defined for it. For example, expressions such as
            "select * from A" and "select * from B"
            in which A and B are aliases for the same class X the select clauses each fireStatementStopped for events of type X.
            In summary, aliases A and B point to the same underlying event type and therefore event type id.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.EventAdapterService">
            <summary>
            Interface for a service to resolve event names to event type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddTypeByAlias(System.String,com.espertech.esper.events.EventType)">
            <summary>Adds an event type to the registery available for use, and originating outside as a non-adapter.</summary>
            <param name="alias">to add an event type under</param>
            <param name="eventType">the type to add</param>
            <throws>EventAdapterException if the alias is already in used by another type</throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.GetEventTypeByAlias(System.String)">
            <summary>
            Return the event type for a given event name, or null if none is registered for that name.
            </summary>
            <param name="eventTypeAlias">is the event type alias name to return type for</param>
            <returns>
            event type for named event, or null if unknown/unnamed type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddMapType(System.String,com.espertech.esper.compat.Map{System.String,System.Type})">
            <summary>
            Add an event type with the given alias and a given set of properties.
            <para>
            If the alias already exists with the same event property information, returns the
            existing EventType instance.
            </para>
            <para>
            If the alias already exists with different event property information, throws an exception.
            </para>
            <para>
            If the alias does not already exists, adds the alias and constructs a new <see cref="!:com.espertech.esper.event.MapEventType"/>.
            </para>
            </summary>
            <param name="eventTypeAlias">is the alias name for the event type</param>
            <param name="propertyTypes">is the names and types of event properties</param>
            <returns>event type is the type added</returns>
            <throws>
            EventAdapterException if alias already exists and doesn't match property type info
            </throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddNestableMapType(System.String,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Add an event type with the given alias and a given set of properties,where
            in properties may itself be Maps, nested and strongly-typed.
            <para>
            If the alias already exists with the same event property information, returns the
            existing EventType instance.
            </para>
            <para>
            If the alias already exists with different event property information, throws an exception.
            </para>
            <para>
            If the alias does not already exists, adds the alias and constructs a new
            <see cref="!:com.espertech.esper.event.MapEventType"/>.
            </para>
            </summary>
            <param name="eventTypeAlias">is the alias name for the event type</param>
            <param name="propertyTypes">is the names and types of event properties</param>
            <returns>event type is the type added</returns>
            <throws>EventAdapterException if alias already exists and doesn't match property type info</throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddWrapperType(System.String,com.espertech.esper.events.EventType,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Add an event type with the given alias and the given underlying event type,
            as well as the additional given properties.
            </summary>
            <param name="eventTypeAlias">is the alias name for the event type</param>
            <param name="underlyingEventType">is the event type for the event type that this wrapper wraps</param>
            <param name="propertyTypes">is the names and types of any additional properties</param>
            <returns>eventType is the type added</returns>
            <throws>
            EventAdapterException if alias already exists and doesn't match this type's info
            </throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.CreateAnonymousMapType(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Creates a new anonymous EventType instance for an event type that contains a map of name value pairs.
            The method accepts a Map that contains the property names as keys and Type objects as the values.
            The Type instances represent the property types.
            <para>
            New instances are createdStatement by this method on every invocation. Clients to this method need to
            cache the returned EventType instance to reuse EventType's for same-typed events.
            </para>
            </summary>
            <param name="propertyTypes">is a map of String to Type objects</param>
            <returns>
            EventType implementation for map field names and value types
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.CreateMapFromValues(com.espertech.esper.compat.Map{System.String,System.Object},com.espertech.esper.events.EventType)">
            <summary>
            Create an event wrapper bean from a set of event properties (name and value objectes) stored in a EDictionary.
            </summary>
            <param name="properties">is key-value pairs for the event properties</param>
            <param name="eventType">is the type metadata for any maps of that type</param>
            <returns>EventBean instance</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.CreateWrapper(com.espertech.esper.events.EventBean,com.espertech.esper.compat.Map{System.String,System.Object},com.espertech.esper.events.EventType)">
            <summary>
            Creata a wrapper around an event and some additional properties
            </summary>
            <param name="_event">is the wrapped event</param>
            <param name="properties">are the additional properties</param>
            <param name="eventType">os the type metadata for any wrappers of this type</param>
            <returns>wrapper event bean</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddBeanType(System.String,System.String,System.Boolean)">
            <summary>
            Add an event type with the given alias and fully-qualified type name.
            <para>
            If the alias already exists with the same class name, returns the existing EventType instance.
            </para>
            	<para>
            If the alias already exists with different class name, throws an exception.
            </para>
            	<para>
            If the alias does not already exists, adds the alias and constructs a new <see cref="!:com.espertech.esper.event.BeanEventType"/>.
            </para>
            	<para>
            Takes into account all event-type-auto-alias-package names supplied and
            attempts to resolve the class name via the packages if the direct resolution failed.
            </para>
            </summary>
            <param name="eventTypeAlias">is the alias name for the event type</param>
            <param name="fullyQualTypeName">is the fully qualified class name</param>
            <param name="considerAutoAlias">whether auto-alias by namespaces should be considered</param>
            <returns>event type is the type added</returns>
            <throws>
            EventAdapterException if alias already exists and doesn't match class names
            </throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddBeanType(System.String,System.Type)">
            <summary>
            Add an event type with the given alias and type.
            <para>
            If the alias already exists with the same Type, returns the existing EventType instance.
            </para>
            	<para>
            If the alias already exists with different Type name, throws an exception.
            </para>
            	<para>
            If the alias does not already exists, adds the alias and constructs a new <see cref="!:com.espertech.esper.event.BeanEventType"/>.
            </para>
            </summary>
            <param name="eventTypeAlias">is the alias name for the event type</param>
            <param name="clazz">is the fully qualified type</param>
            <returns>event type is the type added</returns>
            <throws>
            EventAdapterException if alias already exists and doesn't match class names
            </throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForBean(System.Object)">
            <summary>
            Wrap the native event returning an <see cref="T:com.espertech.esper.events.EventBean"/>.
            </summary>
            <param name="_event">to be wrapped</param>
            <returns>
            event bean wrapping native underlying event
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForMap(com.espertech.esper.compat.Map{System.String,System.Object},System.String)">
            <summary>
            Wrap the EDictionary-type event returning an <see cref="T:com.espertech.esper.events.EventBean"/> using the event type alias name
            to identify the EventType that the event should carry.
            </summary>
            <param name="_event">to be wrapped</param>
            <param name="eventTypeAlias">alias for the event type of the event</param>
            <returns>
            event bean wrapping native underlying event
            </returns>
            <throws>
            EventAdapterException if the alias has not been declared, or the event cannot be wrapped using that
            alias's event type
            </throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.CreateAddToEventType(com.espertech.esper.events.EventType,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Type})">
            <summary>
            Create an event type based on the original type passed in adding one or more properties.
            </summary>
            <param name="originalType">event type to add property to</param>
            <param name="fieldNames">names of properties</param>
            <param name="fieldTypes">types of properties</param>
            <returns>new event type</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForDOM(System.Xml.XmlNode)">
            <summary>
            Returns an adapter for the XML DOM document that exposes it's data as event properties for use in statements.
            </summary>
            <param name="node">is the node to wrap</param>
            <returns>event wrapper for document</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.CreateAnonymousCompositeType(com.espertech.esper.compat.Map{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.events.EventType,System.String}})">
            <summary>
            Creates an unnamed composite event type with event properties that are name-value pairs
            with values being other event types. Pattern statement generate events of such type.
            </summary>
            <param name="taggedEventTypes">is a map of name keys and event type values</param>
            <returns>
            event type representing a composite event
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForCompositeEvent(com.espertech.esper.events.EventType,com.espertech.esper.compat.Map{System.String,com.espertech.esper.events.EventBean})">
            <summary>
            Creates a wrapper for a composite event type. The wrapper wraps an event that
            consists of name-value pairs in which the values are other already-wrapped events.
            </summary>
            <param name="eventType">is the composite event type</param>
            <param name="taggedEvents">is the name-event map</param>
            <returns>wrapper for composite event</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.CreateAnonymousWrapperType(com.espertech.esper.events.EventType,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Create a new anonymous event type with the given underlying event type,
            as well as the additional given properties.
            </summary>
            <param name="underlyingEventType">is the event type for the event type that this wrapper wraps</param>
            <param name="propertyTypes">is the names and types of any additional properties</param>
            <returns>eventType is the type createdStatement</returns>
            <throws>
            EventAdapterException if alias already exists and doesn't match this type's info
            </throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddXMLDOMType(System.String,com.espertech.esper.client.ConfigurationEventTypeXMLDOM)">
            <summary>
            Adds an XML DOM event type.
            </summary>
            <param name="eventTypeAlias">is the alias to add the type for</param>
            <param name="configurationEventTypeXMLDOM">is the XML DOM config info</param>
            <returns>event type</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddAutoAliasPackage(System.String)">
            <summary>
            Adds a namespace where types reside in.
            </summary>
            <param name="namespace">A namespace where type reside.</param>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddEventRepresentation(System.Uri,com.espertech.esper.plugin.PlugInEventRepresentation)">
            <summary>
            Add a plug-in event representation.
            </summary>
            <param name="eventRepURI">URI is the unique identifier for the event representation</param>
            <param name="pluginEventRep">is the instance</param>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddPlugInEventType(System.String,System.Collections.Generic.IList{System.Uri},System.Object)">
            <summary>
            Adds a plug-in event type.
            </summary>
            <param name="alias">is the name of the event type</param>
            <param name="resolutionURIs">is the URIs of plug-in event representations, or child URIs of such</param>
            <param name="initializer">is configs for the type</param>
            <returns>type</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.GetStaticTypeEventSender(com.espertech.esper.core.EPRuntimeEventSender,System.String)">
            <summary>
            Returns an event sender for a specific type, only generating events of that type.
            </summary>
            <param name="runtimeEventSender">the runtime handle for sending the wrapped type</param>
            <param name="eventTypeAlias">is the name of the event type to return the sender for</param>
            <returns>event sender that is static, single-type</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.GetDynamicTypeEventSender(com.espertech.esper.core.EPRuntimeEventSender,System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Returns an event sender that dynamically decides what the event type for a given object is.
            </summary>
            <param name="runtimeEventSender">the runtime handle for sending the wrapped type</param>
            <param name="uri">is for plug-in event representations to provide implementations, if accepted, to make a wrapped event</param>
            <returns>
            event sender that is dynamic, multi-type based on multiple event bean factories provided byplug-in event representations
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterService.TypeLegacyConfigs">
            <summary>
            Sets the configured legacy type information.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterService.DefaultPropertyResolutionStyle">
            <summary>
            Gets or sets the default resolution style for case-sentitivity.
            </summary>
            <value>The default property resolution style.</value>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterService.AliasResolver">
            <summary>
            Gets or sets the alias resolver.
            </summary>
            <value>The alias resolver.</value>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterService.BeanEventTypeFactory">
            <summary>
            Returns a subset of the functionality of the service specific to creating object event types.
            </summary>
            <value>The bean event type factory.</value>
            <returns>bean event type factory</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.EventAdapterServiceImpl"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.GetDynamicTypeEventSender(com.espertech.esper.core.EPRuntimeEventSender,System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Gets the dynamic type event sender.
            </summary>
            <param name="epRuntime">The ep runtime.</param>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.GetEventTypeByAlias(System.String)">
            <summary>
            Gets the exists type by alias.
            </summary>
            <param name="eventTypeAlias">The event type alias.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AddBeanType(System.String,System.Type)">
            <summary>
            Add an alias and class as an event type.
            </summary>
            <param name="eventTypeAlias">is the alias</param>
            <param name="clazz">is the type to add</param>
            <returns>event type</returns>
            <throws>EventAdapterException to indicate an error constructing the type</throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AdapterForBean(System.Object)">
            <summary>
            Create an event bean given an event of object id.
            </summary>
            <param name="_event">is the event class</param>
            <returns>event</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AddBeanType(System.String,System.String,System.Boolean)">
            <summary>
            Add an event type for the given type name.
            </summary>
            <param name="eventTypeAlias">is the alias</param>
            <param name="fullyQualClassName">is the type name</param>
            <param name="considerAutoAlias">if set to <c>true</c> [consider auto alias].</param>
            <returns>event type</returns>
            <throws>
            EventAdapterException if the Class name cannot resolve or other error occured
            </throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AddMapType(System.String,com.espertech.esper.compat.Map{System.String,System.Type})">
            <summary>
            Add an event type with the given alias and a given set of properties.
            If the alias already exists with the same event property information, returns the
            existing EventType instance.
            If the alias already exists with different event property information, throws an exception.
            If the alias does not already exists, adds the alias and constructs a new <see cref="T:com.espertech.esper.events.MapEventType"/>.
            </summary>
            <param name="eventTypeAlias">is the alias name for the event type</param>
            <param name="propertyTypes">is the names and types of event properties</param>
            <returns>event type is the type added</returns>
            <throws>  EventAdapterException if alias already exists and doesn't match property type info </throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AdapterForMap(com.espertech.esper.compat.Map{System.String,System.Object},System.String)">
            <summary>
            Adapters for map.
            </summary>
            <param name="_event">The _event.</param>
            <param name="eventTypeAlias">The event type alias.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AdapterForDOM(System.Xml.XmlNode)">
            <summary>
            Returns an adapter for the XML DOM document that exposes it's data as event properties for use in statements.
            </summary>
            <param name="node">is the node to wrap</param>
            <returns>event wrapper for document</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AddXMLDOMType(System.String,com.espertech.esper.client.ConfigurationEventTypeXMLDOM)">
            <summary>Add a configured XML DOM event type.</summary>
            <param name="eventTypeAlias">is the alias name of the event type</param>
            <param name="configurationEventTypeXMLDOM">
            configures the event type schema and namespace and XPath
            property information.
            </param>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.CreateMapFromValues(com.espertech.esper.compat.Map{System.String,System.Object},com.espertech.esper.events.EventType)">
            <summary>
            Create an event wrapper bean from a set of event properties (name and value objectes) stored in a Map.
            </summary>
            <param name="properties">is key-value pairs for the event properties</param>
            <param name="eventType">is the type metadata for any maps of that type</param>
            <returns>EventBean instance</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AddWrapperType(System.String,com.espertech.esper.events.EventType,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Add an event type with the given alias and the given underlying event type,
            as well as the additional given properties.
            </summary>
            <param name="eventTypeAlias">is the alias name for the event type</param>
            <param name="underlyingEventType">is the event type for the event type that this wrapper wraps</param>
            <param name="propertyTypes">is the names and types of any additional properties</param>
            <returns>eventType is the type added</returns>
            <throws>
            EventAdapterException if alias already exists and doesn't match this type's info
            </throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.IsCompatibleWrapper(com.espertech.esper.events.EventType,com.espertech.esper.events.EventType,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>Returns true if the wrapper type is compatible with an existing wrapper type, for the reason thatthe underlying event is a subtype of the existing underlying wrapper's type.</summary>
            <param name="existingType">is the existing wrapper type</param>
            <param name="underlyingType">is the proposed new wrapper type's underlying type</param>
            <param name="propertyTypes">is the additional properties</param>
            <returns>true for compatible, or false if not</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.CreateAnonymousMapType(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Creates a new anonymous EventType instance for an event type that contains a map of name value pairs.
            The method accepts a Map that contains the property names as keys and Class objects as the values.
            The Class instances represent the property types.
            <para>
            New instances are created by this method on every invocation. Clients to this method need to
            cache the returned EventType instance to reuse EventType's for same-typed events.
            </para>
            </summary>
            <param name="propertyTypes">is a map of String to Class objects</param>
            <returns>
            EventType implementation for map field names and value types
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.CreateAnonymousWrapperType(com.espertech.esper.events.EventType,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Create a new anonymous event type with the given underlying event type,
            as well as the additional given properties.
            </summary>
            <param name="underlyingEventType">is the event type for the event type that this wrapper wraps</param>
            <param name="propertyTypes">is the names and types of any additional properties</param>
            <returns>eventType is the type createdStatement</returns>
            <throws>
            EventAdapterException if alias already exists and doesn't match this type's info
            </throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.CreateAddToEventType(com.espertech.esper.events.EventType,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Type})">
            <summary>
            Creates the type of the add to event.
            </summary>
            <param name="originalType">Type of the original.</param>
            <param name="fieldNames">The field names.</param>
            <param name="fieldTypes">The field types.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.CreateAnonymousCompositeType(com.espertech.esper.compat.Map{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.events.EventType,System.String}})">
            <summary>
            Creates an unnamed composite event type with event properties that are name-value pairs
            with values being other event types. Pattern statement generate events of such type.
            </summary>
            <param name="taggedEventTypes">is a map of name keys and event type values</param>
            <returns>
            event type representing a composite event
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.CreateWrapper(com.espertech.esper.events.EventBean,com.espertech.esper.compat.Map{System.String,System.Object},com.espertech.esper.events.EventType)">
            <summary>
            Create a wrapper around an event and some additional properties
            </summary>
            <param name="_event">is the wrapped event</param>
            <param name="properties">are the additional properties</param>
            <param name="eventType">os the type metadata for any wrappers of this type</param>
            <returns>wrapper event bean</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AdapterForCompositeEvent(com.espertech.esper.events.EventType,com.espertech.esper.compat.Map{System.String,com.espertech.esper.events.EventBean})">
            <summary>
            Creates a wrapper for a composite event type. The wrapper wraps an event that
            consists of name-value pairs in which the values are other already-wrapped events.
            </summary>
            <param name="eventType">is the composite event type</param>
            <param name="taggedEvents">is the name-event map</param>
            <returns>wrapper for composite event</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AddAutoAliasPackage(System.String)">
            <summary>
            Adds a namespace where types reside in.
            </summary>
            <param name="namespace">A namespace where type reside.</param>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterServiceImpl.BeanEventTypeFactory">
            <summary>
            Gets the bean event type factory.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterServiceImpl.TypeLegacyConfigs">
            <summary>
            Set the legacy type information.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterServiceImpl.DefaultPropertyResolutionStyle">
            <summary>
            Sets the default property resolution style.
            </summary>
            <value>The default property resolution style.</value>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterServiceImpl.AliasResolver">
            <summary>
            Gets or sets the alias resolver.
            </summary>
            <value>The alias resolver.</value>
        </member>
        <member name="T:com.espertech.esper.events.ComponentPropertyDescriptorGetter">
            <summary>
            An EventPropertyGetter that uses the internal PropertyDescriptor
            provided by the ComponentModel.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.ComponentPropertyDescriptorGetter.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:com.espertech.esper.events.ComponentPropertyDescriptorGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified bean as the key.
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.events.ComponentPropertyDescriptorGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a property.
            <para>
            Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
            Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
            If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
            does not exists and the method returns false.
            </para>
            <para>
            For non-dynamic properties, this method always returns true since a getter would not be available
            unless
            </para>
            </summary>
            <param name="eventBean">the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default) properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.ComponentPropertyDescriptorGetter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.BeanEventType">
            <summary>
            Implementation of the EventType interface for handling type classes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventType.#ctor(System.Type,com.espertech.esper.events.BeanEventTypeFactory,com.espertech.esper.client.ConfigurationEventTypeLegacy,System.String)">
            <summary>Constructor takes a object type as an argument.</summary>
            <param name="type">the type of an object</param>
            <param name="beanEventTypeFactory">the cache and factory for event bean types and event wrappers</param>
            <param name="optionalLegacyDef">optional configuration supplying legacy event type information</param>
            <param name="alias">the event type alias for the class</param>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventType.GetPropertyType(System.String)">
            <summary>
            Gets the type of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventType.IsProperty(System.String)">
            <summary>
            Determines whether the specified property name is property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>
            	<c>true</c> if the specified property name is property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventType.GetGetter(System.String)">
            <summary>
            Gets the getter.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventType.GetSimpleProperty(System.String)">
            <summary>
            Looks up and returns a cached simple property's descriptor.
            </summary>
            <param name="propertyName">propertyName to look up</param>
            <returns>property descriptor</returns>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventType.GetSimplePropertyInfo(System.String)">
            <summary>
            Gets the simple property info.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventType.GetMappedProperty(System.String)">
            <summary>
            Looks up and returns a cached mapped property's descriptor.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventType.GetIndexedProperty(System.String)">
            <summary>
            Looks up and returns a cached indexed property's descriptor.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventType.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventType.GetSuperTypes(System.Type,com.espertech.esper.events.BeanEventTypeFactory)">
            <summary>
            Gets the super types.
            </summary>
            <param name="type">The type.</param>
            <param name="beanEventTypeFactory">The bean event adapter.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventType.GetSuper(System.Type,com.espertech.esper.compat.Set{System.Type})">
            <summary>
            Add the given class's implemented interfaces and superclasses to the
            result set of classes.
            </summary>
            <param name="type">The type to introspect.</param>
            <param name="result">The result.</param>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventType.Alias">
            <summary>
            Gets the event alias
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventType.UnderlyingType">
            <summary>
            Gets the type of the underlying.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventType.ResolutionStyle">
            <summary>
            Gets the resolution style.
            </summary>
            <value>The resolution style.</value>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventType.UsesSmartResolutionStyle">
            <summary>
            Gets a value indicating whether the bean type uses a smart resolution style.
            </summary>
            <value>
            	<c>true</c> if [uses smart resolution style]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventType.PropertyNames">
            <summary>
            Get all valid property names for the event type.
            </summary>
            <value>The property names.</value>
            <returns> A string array containing the property names of this typed event data object.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventType.SuperTypes">
            <summary>
            Returns an array of event types that are super to this event type, from which this event type
            inherited event properties.  For object instances underlying the event this method returns the
            event types for all superclasses extended by the object and all interfaces implemented by the
            object.
            </summary>
            <value></value>
            <returns>an array of event types</returns>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventType.DeepSuperTypes">
            <summary>
            Returns enumerable over all super types to event type, going up the hierarchy and including
            all interfaces (and their extended interfaces) and superclasses as EventType instances.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.events.BeanEventBean">
            <summary>
            Wrapper for regular objects the represent events.
            Allows access to event properties, which is done through the getter supplied by the event type.
            <see cref="P:com.espertech.esper.events.BeanEventBean.EventType"/> instances containing type information are obtained from
            <see cref="T:com.espertech.esper.events.BeanEventTypeFactory"/>.  Two BeanEventBean instances are equal if they have the
            same event type and refer to the same instance of event object.  Clients that need to compute
            equality between objects wrapped by this class need to obtain the underlying object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventBean.#ctor(System.Object,com.espertech.esper.events.EventType)">
            <summary>
            Constructor.
            </summary>
            <param name="_event">is the event object</param>
            <param name="eventType">is the schema information for the event object.</param>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventBean.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.BeanEventBean.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventBean.Underlying">
            <summary>
            Get the underlying data object to this event wrapper.
            </summary>
            <value></value>
            <returns> underlying data object, usually either a Map or a bean instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventBean.EventType">
            <summary>
            Return the <see cref="P:com.espertech.esper.events.BeanEventBean.EventType"/> instance that describes the set of properties available for this event.
            </summary>
            <value></value>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.BeanEventBean.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="T:com.espertech.esper.epl.view.FilterExprView">
            <summary>
            Simple filter view filtering events using a filter expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.FilterExprView.#ctor(com.espertech.esper.epl.expression.ExprEvaluator)">
            <summary> Ctor.</summary>
            <param name="exprEvaluator">Filter expression evaluation impl
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.view.FilterExprView.GetEnumerator(System.Collections.Generic.IEnumerator{com.espertech.esper.events.EventBean},com.espertech.esper.epl.expression.ExprEvaluator)">
            <summary>
            Gets the enumerator.
            </summary>
            <param name="source">The source.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.view.FilterExprView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.view.FilterExprView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.FilterExprView.FilterEvents(com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary> Filters events using the supplied evaluator.</summary>
            <param name="exprEvaluator">evaluator to use</param>
            <param name="events">events to filter</param>
            <param name="isNewData">true to indicate filter new data (istream) and not old data (rstream)</param>
            <returns> filtered events, or null if no events got through the filter 
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.view.FilterExprView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.FilterStreamSpecCompiled">
            <summary>
            Specification for building an event stream out of a filter for events (supplying type and basic filter criteria)
            and views onto these events which are staggered onto each other to supply a final stream of events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.FilterStreamSpecCompiled.#ctor(com.espertech.esper.filter.FilterSpecCompiled,System.Collections.Generic.IList{com.espertech.esper.epl.spec.ViewSpec},System.String,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="filterSpec">specifies what events we are interested in.</param>
            <param name="viewSpecs">specifies what view to use to derive data</param>
            <param name="optionalStreamName">stream name, or null if none supplied</param>
            <param name="isUnidirectional">if set to <c>true</c> [is unidirectional].</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.FilterStreamSpecCompiled.FilterSpec">
            <summary>
            Gets or sets the filter specification for which events the stream will getSelectListEvents.
            </summary>
            <returns>filter spec</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryGraphValue">
            <summary>
            Property lists stored as a value for each stream-to-stream relationship, for use by <see cref="T:com.espertech.esper.epl.join.plan.QueryGraph"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraphValue.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraphValue.Add(System.String,System.String)">
            <summary>Add key and index property.</summary>
            <param name="keyProperty">key property</param>
            <param name="indexProperty">index property</param>
            <returns>
            true if added and either property did not exist, false if either already existed
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraphValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryGraphValue.PropertiesLeft">
            <summary>Returns property names for left stream.</summary>
            <returns>property names</returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryGraphValue.PropertiesRight">
            <summary>Returns property names for right stream.</summary>
            <returns>property names</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.LookupInstructionQueryPlanNode">
            <summary> Query plan for executing a set of lookup instructions and assembling an end result via
            a set of assembly instructions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.LookupInstructionQueryPlanNode.#ctor(System.Int32,System.String,System.Int32,System.Boolean[],System.Collections.Generic.IList{com.espertech.esper.epl.join.plan.LookupInstructionPlan},System.Collections.Generic.IList{com.espertech.esper.epl.join.assemble.BaseAssemblyNode})">
            <summary> Ctor.</summary>
            <param name="rootStream">is the stream supplying the lookup event
            </param>
            <param name="rootStreamName">is the name of the stream supplying the lookup event
            </param>
            <param name="numStreams">is the number of streams
            </param>
            <param name="lookupInstructions">is a list of lookups to perform
            </param>
            <param name="requiredPerStream">indicates which streams are required and which are optional in the lookup
            </param>
            <param name="assemblyInstructions">is the bottom-up assembly nodes to assemble a lookup result nodes
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.LookupInstructionQueryPlanNode.MakeExec(com.espertech.esper.epl.join.table.EventTable[][],com.espertech.esper.events.EventType[])">
            <summary>
            Make execution node from this specification.
            </summary>
            <param name="indexesPerStream">tables build for each stream</param>
            <param name="streamTypes">event type of each stream</param>
            <returns>execution node matching spec</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.LookupInstructionQueryPlanNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Print a long readable format of the query node to the supplied PrintWriter.
            </summary>
            <param name="writer">is the indentation writer to print to</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.LookupInstructionPlan">
            <summary>
            Plan for lookup using a from-stream event looking up one or more to-streams
            using a specified lookup plan for each to-stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.LookupInstructionPlan.#ctor(System.Int32,System.String,System.Int32[],com.espertech.esper.epl.join.plan.TableLookupPlan[],System.Boolean[])">
            <summary> Ctor.</summary>
            <param name="fromStream">the stream supplying the lookup event
            </param>
            <param name="fromStreamName">the stream name supplying the lookup event
            </param>
            <param name="toStreams">the set of streams to look up in
            </param>
            <param name="lookupPlans">the plan to use for each stream to look up in
            </param>
            <param name="requiredPerStream">indicates which of the lookup streams are required to build a result and which are not
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.LookupInstructionPlan.MakeExec(com.espertech.esper.epl.join.table.EventTable[][],com.espertech.esper.events.EventType[])">
            <summary> Constructs the executable from the plan.</summary>
            <param name="indexesPerStream">is the index objects for use in lookups
            </param>
            <param name="streamTypes">is the types of each stream
            </param>
            <returns> executable instruction
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.LookupInstructionPlan.Print(com.espertech.esper.util.IndentWriter)">
            <summary> Output the planned instruction.</summary>
            <param name="writer">to output to
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.RootRequiredAssemblyNode">
            <summary>
            Assembly node for an event stream that is a root with a one required child node below it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootRequiredAssemblyNode.#ctor(System.Int32,System.Int32)">
            <summary> Ctor.</summary>
            <param name="streamNum">is the stream number
            </param>
            <param name="numStreams">is the number of streams
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootRequiredAssemblyNode.Init(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Provides results to assembly nodes for initialization.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootRequiredAssemblyNode.Process(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary>
            Process results.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootRequiredAssemblyNode.Result(com.espertech.esper.events.EventBean[],System.Int32,com.espertech.esper.events.EventBean,com.espertech.esper.epl.join.rep.Node)">
            <summary>
            Publish a result row.
            </summary>
            <param name="row">is the result to publish</param>
            <param name="fromStreamNum">is the originitor that publishes the row</param>
            <param name="myEvent">is optional and is the event that led to the row result</param>
            <param name="myNode">is optional and is the result node of the event that led to the row result</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootRequiredAssemblyNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>
            Output this node using writer, not outputting child nodes.
            </summary>
            <param name="indentWriter">to use for output</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSubstitutionNode">
            <summary>
            Represents a substitution value to be substituted in an expression tree, not valid for any purpose of use
            as an expression, however can take a place in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubstitutionNode.#ctor(System.Int32)">
            <summary>Ctor.</summary>
            <param name="index">is the index of the substitution parameter</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubstitutionNode.Index">
            <summary>Returns the substitution parameter index.</summary>
            <returns>index</returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabasePollingViewable">
            <summary>
            Implements a poller viewable that uses a polling strategy, a cache and
            some input parameters extracted from event streams to perform the polling.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.#ctor(System.Int32,System.Collections.Generic.IList{System.String},com.espertech.esper.epl.db.PollExecStrategy,com.espertech.esper.epl.db.DataCache,com.espertech.esper.events.EventType)">
            <summary>
            Ctor.
            </summary>
            <param name="myStreamNumber">is the stream number of the view</param>
            <param name="inputParameters">are the event property names providing input parameter keys</param>
            <param name="pollExecStrategy">is the strategy to use for retrieving results</param>
            <param name="dataCache">is looked up before using the strategy</param>
            <param name="eventType">is the type of events generated by the view</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.Stop">
            <summary>
            Stops the view
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate the view.
            </summary>
            <param name="streamTypeService">supplies the types of streams against which to validate</param>
            <param name="methodResolutionService">for resolving imports and classes and methods</param>
            <param name="timeProvider">for providing current time</param>
            <param name="variableService">for access to variables</param>
            <throws>  ExprValidationException is thrown to indicate an exception in validating the view </throws>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.Poll(com.espertech.esper.events.EventBean[][],com.espertech.esper.epl.join.PollResultIndexingStrategy)">
            <summary>
            Poll for stored historical or reference data using events per stream and
            returing for each event-per-stream row a separate list with events
            representing the poll result.
            </summary>
            <param name="lookupEventsPerStream">is the events per stream where the
            first dimension is a number of rows (often 1 depending on windows used) and
            the second dimension is the number of streams participating in a join.</param>
            <param name="indexingStrategy">the strategy to use for converting poll results into a indexed table for fast lookup</param>
            <returns>
            array of lists with one list for each event-per-stream row
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.AddView(com.espertech.esper.view.View)">
            <summary>
            Add a view to the viewable object.
            </summary>
            <param name="view">to add</param>
            <returns>view to add</returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.RemoveView(com.espertech.esper.view.View)">
            <summary>
            Remove a view.
            </summary>
            <param name="view">to remove</param>
            <returns>
            true to indicate that the view to be removed existed within this view, false if the view to
            remove could not be found
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabasePollingViewable.Views">
            <summary>
            Returns all added views.
            </summary>
            <returns>list of added views</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabasePollingViewable.HasViews">
            <summary>
            Test is there are any views to the Viewable.
            </summary>
            <value></value>
            <returns> true indicating there are child views, false indicating there are no child views
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabasePollingViewable.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns> metadata for the objects in the collection
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:com.espertech.esper.epl.db.DataCacheExpiringImpl" -->
        <member name="M:com.espertech.esper.epl.db.DataCacheExpiringImpl.#ctor(System.Double,System.Double,com.espertech.esper.client.ConfigurationCacheReferenceType,com.espertech.esper.schedule.SchedulingService,com.espertech.esper.schedule.ScheduleSlot,com.espertech.esper.core.EPStatementHandle)">
            <summary>
            Ctor.
            </summary>
            <param name="maxAgeSec">is the maximum age in seconds</param>
            <param name="purgeIntervalSec">is the purge interval in seconds</param>
            <param name="configurationCacheReferenceType">indicates whether hard, soft or weak references are used in the cache</param>
            <param name="schedulingService">is a service for call backs at a scheduled time, for purging</param>
            <param name="scheduleSlot">slot for scheduling callbacks for this cache</param>
            <param name="epStatementHandle">the statements-own handle for use in registering callbacks with services</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheExpiringImpl.GetCached(System.Object[])">
            <summary>
            Ask the cache if the keyed value is cached, returning a list or rows if the key is in the cache,
            or returning null to indicate no such key cached. Zero rows may also be cached.
            </summary>
            <param name="lookupKeys">is the keys to look up in the cache</param>
            <returns>
            a list of rows that can be empty is the key was found in the cache, or null if
            the key is not found in the cache
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheExpiringImpl.PutCached(System.Object[],com.espertech.esper.epl.join.table.EventTable)">
            <summary>
            Puts into the cache a key and a list of rows, or an empty list if zero rows.
            <para>
            The put method is designed to be called when the cache does not contain a key as
            determined by the get method. Implementations typically simply overwrite
            any keys put into the cache that already existed in the cache.
            </para>
            </summary>
            <param name="lookupKeys">is the keys to the cache entry</param>
            <param name="rows">is a number of rows</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheExpiringImpl.ScheduledTrigger(com.espertech.esper.core.ExtensionServicesContext)">
            <summary>
            Called when a scheduled callback occurs.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCacheExpiringImpl.IsActive">
            <summary>
            Returns true if the cache is active and currently caching, or false if the cache is inactive and not currently caching
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
            <returns>true for caching enabled, false for no caching taking place</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCacheExpiringImpl.MaxAgeMSec">
            <summary> Returns the maximum age in milliseconds.</summary>
            <returns> millisecon max age
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCacheExpiringImpl.PurgeIntervalMSec">
            <summary> Returns the purge interval in milliseconds.</summary>
            <returns> millisecond purge interval
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCacheExpiringImpl.Size">
            <summary> Returns the current cache size.</summary>
            <returns> cache size
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorSimple">
            <summary>
            Result set processor for the simplest case: no aggregation functions used in the select clause, and no group-by.
            <para/>
            The processor generates one row for each event entering (new event) and one row for each event leaving (old event).
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.epl.expression.ExprNode,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="selectExprProcessor">for processing the select expression and generting the final output rows</param>
            <param name="orderByProcessor">for sorting the outgoing events according to the order-by clause</param>
            <param name="optionalHavingNode">having clause expression node</param>
            <param name="isSelectRStream">true if remove stream events should be generated</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.ProcessJoinResult(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},System.Boolean)">
            <summary>
            For use by joins posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newEvents">new events posted by join</param>
            <param name="oldEvents">old events posted by join</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.ProcessViewResult(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            For use by views posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newData">new events posted by view</param>
            <param name="oldData">old events posted by view</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.events.EventBean[],System.Boolean,System.Boolean)">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the
            same, i.e. this method does not filter it just transforms the result set.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">orders the outgoing events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},System.Boolean,System.Boolean)">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the
            same, i.e. this method does not filter it just transforms the result set.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">for sorting output events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.events.EventBean[],com.espertech.esper.epl.expression.ExprNode,System.Boolean,System.Boolean)">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the
            same, i.e. this method does not filter it just transforms the result set.
            <para/>
            Also applies a having clause.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">for sorting output events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="optionalHavingNode">supplies the having-clause expression</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.epl.expression.ExprNode,System.Boolean,System.Boolean)">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the
            same, i.e. this method does not filter it just transforms the result set.
            <para/>
            Also applies a having clause.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">for sorting output events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="optionalHavingNode">supplies the having-clause expression</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetEnumerator(com.espertech.esper.view.Viewable)">
            <summary>
            Returns the iterator implementing the group-by and aggregation and order-by logic
            specific to each case of use of these construct.
            </summary>
            <param name="parent">is the parent view iterator</param>
            <returns>event iterator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetEnumerator(com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}})">
            <summary>Returns the iterator for iterating over a join-result.</summary>
            <param name="joinSet">is the join result set</param>
            <returns>iterator over join results</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.Clear">
            <summary>Clear out current state.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.events.EventBean[],System.Boolean,System.Boolean)">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the
            same, i.e. this method does not filter it just transforms the result set.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},System.Boolean,System.Boolean)">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the
            same, i.e. this method does not filter it just transforms the result set.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.events.EventBean[],com.espertech.esper.epl.expression.ExprNode,System.Boolean,System.Boolean)">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the
            same, i.e. this method does not filter it just transforms the result set.
            <para/>
            Also applies a having clause.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="events">input events</param>
            <param name="optionalHavingNode">supplies the having-clause expression</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.epl.expression.ExprNode,System.Boolean,System.Boolean)">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the
            same, i.e. this method does not filter it just transforms the result set.
            <para/>
            Also applies a having clause.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="events">input events</param>
            <param name="optionalHavingNode">supplies the having-clause expression</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.events.EventBean[],System.Boolean,System.Boolean,System.Collections.Generic.List{com.espertech.esper.events.EventBean},System.Collections.Generic.List{com.espertech.esper.collection.MultiKeyUntyped})">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the
            same, i.e. this method does not filter it just transforms the result set.
            </summary>
            <param name="exprProcessor">
            processes each input event and returns output event
            </param>
            <param name="orderByProcessor">
            orders the outgoing events according to the order-by clause
            </param>
            <param name="events">input events</param>
            <param name="isNewData">
            indicates whether we are dealing with new data (istream) or old data (rstream)
            </param>
            <param name="isSynthesize">
            set to true to indicate that synthetic events are required for an iterator result set
            </param>
            <param name="result">is the result event list to populate</param>
            <param name="optSortKeys">
            is the result sort key list to populate, for sorting
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},System.Boolean,System.Boolean,System.Collections.Generic.List{com.espertech.esper.events.EventBean},System.Collections.Generic.List{com.espertech.esper.collection.MultiKeyUntyped})">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the
            same, i.e. this method does not filter it just transforms the result set.
            </summary>
            <param name="exprProcessor">
            processes each input event and returns output event
            </param>
            <param name="orderByProcessor">
            for sorting output events according to the order-by clause
            </param>
            <param name="events">input events</param>
            <param name="isNewData">
            indicates whether we are dealing with new data (istream) or old data (rstream)
            </param>
            <param name="isSynthesize">
            set to true to indicate that synthetic events are required for an iterator result set
            </param>
            <param name="result">is the result event list to populate</param>
            <param name="optSortKeys">
            is the result sort key list to populate, for sorting
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.events.EventBean[],com.espertech.esper.epl.expression.ExprNode,System.Boolean,System.Boolean,System.Collections.Generic.List{com.espertech.esper.events.EventBean},System.Collections.Generic.List{com.espertech.esper.collection.MultiKeyUntyped})">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the
            same, i.e. this method does not filter it just transforms the result set.
            <para/>
            Also applies a having clause.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">for sorting output events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="optionalHavingNode">supplies the having-clause expression</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="result">is the result event list to populate</param>
            <param name="optSortKeys">is the result sort key list to populate, for sorting</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.compat.Set{com.espertech.esper.collection.MultiKey{com.espertech.esper.events.EventBean}},com.espertech.esper.epl.expression.ExprNode,System.Boolean,System.Boolean,System.Collections.Generic.List{com.espertech.esper.events.EventBean},System.Collections.Generic.List{com.espertech.esper.collection.MultiKeyUntyped})">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the
            same, i.e. this method does not filter it just transforms the result set.
            <para/>
            Also applies a having clause.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">for sorting output events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="optionalHavingNode">supplies the having-clause expression</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="result">is the result event list to populate</param>
            <param name="optSortKeys">is the result sort key list to populate, for sorting</param>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorSimple.ResultEventType">
            <summary>
            Returns the event type of processed results.
            </summary>
            <value>The type of the result event.</value>
            <returns> event type of the resulting events posted by the processor.
            </returns>
        </member>
        <member name="T:com.espertech.esper.core.SimpleServiceDirectory">
            <summary>
            Simple implementation of the directory.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.core.SimpleServiceDirectory"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.Lookup(System.String)">
            <summary>
            Lookup an object by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.Bind(System.String,System.Object)">
            <summary>
            Bind an object to a name.  Throws an exception if
            the name is already bound.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.Rebind(System.String,System.Object)">
            <summary>
            Bind an object to a name.  If the object is already
            bound, rebind it.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.Unbind(System.String)">
            <summary>
            Unbind the object at the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.Rename(System.String,System.String)">
            <summary>
            Rename the object at oldName with newName.
            </summary>
            <param name="oldName"></param>
            <param name="newName"></param>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.List(System.String)">
            <summary>
            Enumerates the names bound in the named context.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.StatementExtensionSvcContext">
            <summary>Statement-level extension services.</summary>
        </member>
        <member name="M:com.espertech.esper.core.ActiveDirectory.Lookup(System.String)">
            <summary>
            Lookup an object by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.ActiveDirectory.Bind(System.String,System.Object)">
            <summary>
            Bind an object to a name.  Throws an exception if
            the name is already bound.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.espertech.esper.core.ActiveDirectory.Rebind(System.String,System.Object)">
            <summary>
            Bind an object to a name.  If the object is already
            bound, rebind it.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.espertech.esper.core.ActiveDirectory.Unbind(System.String)">
            <summary>
            Unbind the object at the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:com.espertech.esper.core.ActiveDirectory.Rename(System.String,System.String)">
            <summary>
            Rename the object at oldName with newName.
            </summary>
            <param name="oldName"></param>
            <param name="newName"></param>
        </member>
        <member name="M:com.espertech.esper.core.ActiveDirectory.List(System.String)">
            <summary>
            Enumerates the names bound in the named context.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.collection.TransformEventUtil">
            <summary>
            Utility for reading and transforming a source event iterator.
            Works with a <see cref="T:com.espertech.esper.collection.TransformEventMethod"/> as the transformation method.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.TransformEventUtil.TransformEnumerator(System.Collections.Generic.IEnumerator{com.espertech.esper.events.EventBean},com.espertech.esper.collection.TransformEventMethod)">
            <summary>
            Transforms the enumerator using the transform method supplied.
            </summary>
            <param name="sourceEnum">The source enum.</param>
            <param name="transformEventMethod">The transform event method.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.collection.TimeWindow">
             <summary> Container for events per time slot. The time is provided as long milliseconds by client classes.
             Events are for a specified timestamp and the implementation creates and adds the event to a slot for that timestamp.
             Events can be expired from the window via the expireEvents method when their timestamp is before
             (or less then) an expiry timestamp passed in. Expiry removes the event from the window.
             The window allows iteration through its contents.
            
             It is assumed that the timestamp passed to the add method is ascending. The window is backed by a
             collection reflecting the timestamp order rather then any sorted map or linked hash map for
             performance reasons.
             </summary>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.#ctor(System.Boolean)">
            <summary>Ctor.</summary>
            <param name="isSupportRemoveStream">true to indicate the time window should support effective removal of eventsin the window based on the remove stream events received, or false to not accomodate removal at all</param>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.Add(System.Int64,com.espertech.esper.events.EventBean)">
            <summary> Adds event to the time window for the specified timestamp.</summary>
            <param name="timestamp">the time slot for the event
            </param>
            <param name="bean">event to add
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.Remove(com.espertech.esper.events.EventBean)">
            <summary>
            Removes the event from the window, if remove stream handling is enabled.
            </summary>
            <param name="event">to remove</param>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.ExpireEvents(System.Int64)">
            <summary> Return and remove events in time-slots earlier (less) then the timestamp passed in,
            returning the list of events expired.
            </summary>
            <param name="expireBefore">is the timestamp from which on to keep events in the window
            </param>
            <returns> a list of events expired and removed from the window, or null if none expired
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.GetEnumerator">
            <summary>
            Returns event iterator.
            </summary>
            <returns>iterator over events currently in window</returns>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.GetEnumerator(System.Int64)">
            <summary>
            Gets the enumerator.
            </summary>
            <param name="myGeneration">My generation.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.TimeWindow.OldestTimestamp">
            <summary> Returns the oldest timestamp in the collection if there is at least one entry,
            else it returns null if the window is empty.
            </summary>
            <returns> null if empty, oldest timestamp if not empty
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.TimeWindow.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:com.espertech.esper.collection.TimeWindow.IsEmpty">
            <summary> Returns true if the window is currently empty.</summary>
            <returns> true if empty, false if not
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.TimeWindow.ReverseIndex">
            <summary>
            Returns the reverse index, for testing purposes.
            </summary>
            <value>The index of the reverse.</value>
            <returns>reverse index</returns>
        </member>
        <member name="T:com.espertech.esper.collection.InterchangeablePair`2">
            <summary> General-purpose pair of values of any type. The pair equals another pair if
            the objects that form the pair equal in any order, ie. first pair first object equals (.equals)
            the second pair first object or second object, and the first pair second object equals the second pair first object
            or second object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.InterchangeablePair`2.#ctor(`0,`1)">
            <summary> Construct pair of values.</summary>
            <param name="first">is the first value</param>
            <param name="second">is the second value</param>
        </member>
        <member name="M:com.espertech.esper.collection.InterchangeablePair`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.InterchangeablePair`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.InterchangeablePair`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.InterchangeablePair`2.First">
            <summary>
            Gets or sets the first value within the pair.
            </summary>
        </member>
        <member name="P:com.espertech.esper.collection.InterchangeablePair`2.Second">
            <summary>
            Gets or sets the second value within the pair.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.SubqueryInExpression">
            <summary>
            In-expression for a set of values returned by a lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SubqueryInExpression.#ctor(com.espertech.esper.client.soda.EPStatementObjectModel,System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="model">is the lookup statement object model</param>
            <param name="isNotIn">is true for not-in</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SubqueryInExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.EPStatementObjectModel,System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="expression">is the expression providing the value to match</param>
            <param name="model">is the lookup statement object model</param>
            <param name="isNotIn">is true for not-in</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SubqueryInExpression.IsNotIn">
            <summary>Gets or sets the true for not-in, or false for in-lookup.</summary>
            <returns>true for not-in</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.SubqueryInExpression.Model">
            <summary>Gets or sets the lookup statement object model.</summary>
            <returns>lookup model</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PropertyValueExpression">
            <summary>
            Expression returning a property value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PropertyValueExpression.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="propertyName">is the name of the property</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PropertyValueExpression.PropertyName">
            <summary>Gets or sets the property name.</summary>
            <returns>name of the property</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.OutputLimitClause">
            <summary>
            An output limit clause defines how to limit output of statements and consists of
            a selector specifiying which events to select to output, a frequency and a unit.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.Create(com.espertech.esper.client.soda.OutputLimitSelector,System.Double,com.espertech.esper.client.soda.OutputLimitUnit)">
            <summary>Creates an output limit clause.</summary>
            <param name="selector">is the events to select</param>
            <param name="frequency">a frequency to output at</param>
            <param name="unit">the unit for the frequency</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.Create(com.espertech.esper.client.soda.OutputLimitSelector,System.String,com.espertech.esper.client.soda.OutputLimitUnit)">
            <summary>Creates an output limit clause.</summary>
            <param name="selector">is the events to select</param>
            <param name="unit">the unit for the frequency</param>
            <param name="frequencyVariable">is the variable providing the output limit frequency</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.Create(System.Double,com.espertech.esper.client.soda.OutputLimitUnit)">
            <summary>Creates an output limit clause.</summary>
            <param name="frequency">a frequency to output at</param>
            <param name="unit">the unit for the frequency</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.Create(System.String,com.espertech.esper.client.soda.OutputLimitUnit)">
            <summary>
            Creates an output limit clause.
            </summary>
            <param name="frequencyVariable">is the variable name providing output rate frequency values</param>
            <param name="unit">the unit for the frequency</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor(com.espertech.esper.client.soda.OutputLimitSelector,System.Nullable{System.Double},com.espertech.esper.client.soda.OutputLimitUnit)">
            <summary>
            Ctor.
            </summary>
            <param name="selector">is the events to select</param>
            <param name="frequency">a frequency to output at</param>
            <param name="unit">the unit for the frequency</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor(com.espertech.esper.client.soda.OutputLimitSelector,System.String,com.espertech.esper.client.soda.OutputLimitUnit)">
            <summary>
            Ctor.
            </summary>
            <param name="selector">is the events to select</param>
            <param name="frequencyVariable">is the variable name providing output rate frequency values</param>
            <param name="unit">the unit for the frequency</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor(com.espertech.esper.client.soda.OutputLimitSelector,System.Nullable{System.Double},System.String,com.espertech.esper.client.soda.OutputLimitUnit)">
            <summary>
            Ctor.
            </summary>
            <param name="selector">is the events to select</param>
            <param name="frequency">a frequency to output at</param>
            <param name="frequencyVariable">is the variable name providing output rate frequency values</param>
            <param name="unit">the unit for the frequency</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.ToEPL(System.IO.StringWriter)">
            <summary>
            Renders the clause in textual representation.
            </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.Selector">
            <summary>
            Gets or sets the selector indicating the events to output.
            </summary>
            <value>The selector.</value>
            <returns>selector</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.Frequency">
            <summary>
            Gets or sets the output frequency.
            </summary>
            <value>The frequency.</value>
            <returns>frequency of output</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.FrequencyVariable">
            <summary>
            Gets or sets the variable name of the variable providing output rate frequency
            values, or null if the frequency is a fixed value.
            </summary>
            <value>The frequency variable.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.Unit">
            <summary>
            Gets or sets the unit the frequency is in.
            </summary>
            <value>The unit.</value>
            <returns>unit for the frequency.</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.MedianProjectionExpression">
            <summary>
            Median projection (aggregation) in the distinct and regular form.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MedianProjectionExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without inner expression
            </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MedianProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project.</summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.MedianProjectionExpression.IsDistinct">
            <summary>True if the projection considers distinct values only.</summary>
            <returns>true if distinct</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.MaxRowExpression">
            <summary>
            Maximum-value per-row expression (not aggregating) determines the maximum value among a set of values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxRowExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxRowExpression.#ctor(System.String,System.String,System.String[])">
            <summary>Ctor.</summary>
            <param name="propertyOne">
            the name of the property providing a value to determine the maximum of
            </param>
            <param name="propertyTwo">
            the name of the property providing a value to determine the maximum of
            </param>
            <param name="moreProperties">optional additional properties to consider</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxRowExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="exprOne">provides a value to determine the maximum of</param>
            <param name="exprTwo">provides a value to determine the maximum of</param>
            <param name="moreExpressions">optional additional values to consider</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxRowExpression.Add(System.Object)">
            <summary>Add a constant to include in the computation.</summary>
            <param name="object">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxRowExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to include in the computation.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxRowExpression.Add(System.String)">
            <summary>Add a property to include in the computation.</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.timer.TimeSourceService">
            <summary>
            Allow for different strategies for getting VM (wall clock) time. See JIRA issue
            ESPER-191 Support nano/microsecond resolution for more information on system
            time-call performance, accuracy and drift.
            </summary>
            <author>Jerry Shea</author>
        </member>
        <member name="F:com.espertech.esper.timer.TimeSourceService.IS_SYSTEM_CURRENT_TIME">
            <summary>
            A public variable indicating whether to use the System millisecond time or
            nano time, to be configured through the engine settings.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimeSourceService.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimeSourceService.GetTimeMillis">
            <summary>
            Get time in milliseconds.
            </summary>
            <returns>wall-clock time in milliseconds</returns>
        </member>
        <member name="M:com.espertech.esper.timer.TimeSourceService.GetTimeMicros">
            <summary>
            Get time in microseconds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.timer.TimeSourceService.CalculateResolution">
            <summary>
            Calculate resolution of this timer in microseconds i.e. what is the resolution of the 
            underlying platform's timer.
            </summary>
            <returns>timer resolution</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VAERevisionProcessorDeclared">
            <summary>
            Provides overlay strategy for property group-based versioning.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorDeclared.#ctor(System.String,com.espertech.esper.events.vaevent.RevisionSpec,com.espertech.esper.view.StatementStopService,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="revisionEventTypeAlias">alias</param>
            <param name="spec">specification</param>
            <param name="statementStopService">for stop handling</param>
            <param name="eventAdapterService">for nested property handling</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionStateDeclared">
            <summary>
            State for the overlay (non-merge) strategy.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionStateDeclared.#ctor(com.espertech.esper.events.EventBean,com.espertech.esper.events.vaevent.RevisionBeanHolder[],com.espertech.esper.events.vaevent.RevisionEventBeanDeclared)">
            <summary>Ctor. </summary>
            <param name="baseEventUnderlying">base event</param>
            <param name="holders">revisions</param>
            <param name="lastEvent">prior event</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionStateDeclared.IncRevisionNumber">
            <summary>Increments version number. </summary>
            <returns>incremented version number</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateDeclared.RevisionNumber">
            <summary>Returns revision number. </summary>
            <returns>version number</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateDeclared.BaseEventUnderlying">
            <summary>Gets or sets base event. </summary>
            <returns>base event</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateDeclared.Holders">
            <summary>Gets or sets versions. </summary>
            <returns>versions</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateDeclared.LastEvent">
            <summary>Gets or sets the last event. </summary>
            <returns>last event</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionEventType">
            <summary>Event type of revision events. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventType.#ctor(com.espertech.esper.compat.Map{System.String,com.espertech.esper.events.vaevent.RevisionPropertyTypeDesc},com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="propertyDesc">describes each properties type</param>
            <param name="eventAdapterService">for nested property handling</param>
        </member>
        <member name="T:com.espertech.esper.events.EventSenderXMLDOM">
            <summary>
            Event sender for XML DOM-backed events.
            <para>
            Allows sending only event objects of type Node or Document, does check the root name of the
            XML document which must match the event type root name as configured. Any other event object
            generates an error.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventSenderXMLDOM.Create(com.espertech.esper.core.EPRuntimeEventSender,com.espertech.esper.events.xml.BaseXMLEventType)">
            <summary>
            Creates the specified runtime event sender.
            </summary>
            <param name="runtimeEventSender">The runtime event sender.</param>
            <param name="baseXMLEventType">Type of the base XML event.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseSpecCompiled">
            <summary>
            Encapsulates the parsed select expressions in a select-clause in an EPL statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseSpecCompiled.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseSpecCompiled.#ctor(System.Collections.Generic.IList{com.espertech.esper.epl.spec.SelectClauseElementCompiled})">
            <summary>Ctor. </summary>
            <param name="selectList">for a populates list of select expressions</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseSpecCompiled.Add(com.espertech.esper.epl.spec.SelectClauseElementCompiled)">
            <summary>Adds an select expression within the select clause. </summary>
            <param name="element">is the expression to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseSpecCompiled.SelectExprList">
            <summary>Returns the list of select expressions. </summary>
            <returns>list of expressions</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseSpecCompiled.IsUsingWildcard">
            <summary>Returns true if the select clause contains at least one wildcard. </summary>
            <returns>true if clause contains wildcard, false if not</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseExprRawSpec">
            <summary>
            Represents a single item in a SELECT-clause, potentially unnamed as no "as" tag may have been
            supplied in the syntax.
            <para/> 
            Compare to <see cref="T:com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec"/> which carries a determined name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseExprRawSpec.#ctor(com.espertech.esper.epl.expression.ExprNode,System.String)">
            <summary>Ctor. </summary>
            <param name="selectExpression">the expression node to evaluate for matching events</param>
            <param name="optionalAsName">the name of the item, null if not name supplied</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseExprRawSpec.SelectExpression">
            <summary>Returns the expression node representing the item in the select clause. </summary>
            <returns>expression node for item</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseExprRawSpec.OptionalAsName">
            <summary>Returns the name of the item in the select clause. </summary>
            <returns>name of item</returns>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowTailView">
            <summary>
            This view is hooked into a named window's view chain as the last view and handles dispatching of
            named window insert and remove stream results via <see cref="T:com.espertech.esper.epl.named.NamedWindowService"/> to consuming statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowTailView.#ctor(com.espertech.esper.events.EventType,com.espertech.esper.epl.named.NamedWindowService,com.espertech.esper.epl.named.NamedWindowRootView,com.espertech.esper.core.EPStatementHandle,com.espertech.esper.core.StatementResultService,com.espertech.esper.events.vaevent.ValueAddEventProcessor)">
            <summary>Ctor.</summary>
            <param name="eventType">the event type of the named window</param>
            <param name="namedWindowService">the service for dispatches to consumers for hooking into the dispatch loop</param>
            <param name="namedWindowRootView">the root data window view for indicating remove stream events to be removed from possible on-delete indexes</param>
            <param name="createWindowStmtHandle">statement handle for the statement that created the named window, for safe iteration</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
            <param name="revisionProcessor">handles update events</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowTailView.AddConsumer(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.core.EPStatementHandle,com.espertech.esper.view.StatementStopService)">
            <summary>Adds a consumer view keeping the consuming statement's handle and lock to coordinate dispatches. </summary>
            <param name="statementHandle">the statement handle</param>
            <param name="statementStopService">for when the consumer stops, to unregister the consumer</param>
            <param name="filterList">is a list of filter expressions</param>
            <returns>consumer representative view</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowTailView.RemoveConsumer(com.espertech.esper.epl.named.NamedWindowConsumerView)">
            <summary>Called by the consumer view to indicate it was stopped or destroyed, such that the consumer can be deregistered and further dispatches disregard this consumer. </summary>
            <param name="namedWindowConsumerView">is the consumer representative view</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowTailView.Snapshot">
            <summary>
            Returns a snapshot of window contents, thread-safely
            </summary>
            <returns>window contents</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowTailView.Destroy">
            <summary>Destroy the view. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowTailView.IsParentBatchWindow">
            <summary>Returns true to indicate that the data window view is a batch view.</summary>
            <returns>true if batch view</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.PollResultIndexingStrategyIndex">
            <summary>
            Strategy for building an index out of poll-results knowing the properties to base the index on.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.PollResultIndexingStrategyIndex.#ctor(System.Int32,com.espertech.esper.events.EventType,System.String[])">
            <summary>Ctor.</summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyNames">is the property names to be indexed</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.BindProcessor">
            <summary>Works in conjunction with <see cref="T:com.espertech.esper.epl.core.SelectExprResultProcessor"/> to present a result as an object array for 'natural' delivery. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.BindProcessor.#ctor(System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.SelectClauseElementCompiled},com.espertech.esper.events.EventType[],System.String[])">
            <summary>Ctor. </summary>
            <param name="selectionList">the select clause</param>
            <param name="typesPerStream">the event types per stream</param>
            <param name="streamNames">the stream names</param>
            <throws>ExprValidationException when the validation of the select clause failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.BindProcessor.Process(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>Process select expressions into columns for native dispatch. </summary>
            <param name="eventsPerStream">each stream's events</param>
            <param name="isNewData">true for new events</param>
            <returns>object array with select-clause results</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.BindProcessor.ExpressionTypes">
            <summary>Returns the expression types generated by the select-clause expressions. </summary>
            <returns>types</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.BindProcessor.ColumnNamesAssigned">
            <summary>Returns the column names of select-clause expressions. </summary>
            <returns>column names</returns>
        </member>
        <member name="T:com.espertech.esper.core.UpdateDispatchViewBlockingWait">
            <summary>
            Convenience view for dispatching view updates received from a parent view to update listeners
            via the dispatch service.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchViewBlockingWait.#ctor(com.espertech.esper.core.StatementResultService,com.espertech.esper.dispatch.DispatchService,System.Int64)">
            <summary>Ctor.</summary>
            <param name="dispatchService">for performing the dispatch</param>
            <param name="msecTimeout">timeout for preserving dispatch order through blocking</param>
            <param name="statementResultServiceImpl">handles result delivery</param>
        </member>
        <member name="T:com.espertech.esper.core.StatementResultService">
            <summary>
            Interface for a statement-level service for coordinating the insert/remove stream generation,
            native deliver to subscribers and the presence/absence of listener or subscribers to a statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementResultService.SetContext(com.espertech.esper.core.EPStatementSPI,com.espertech.esper.client.EPServiceProvider,System.Boolean,System.Boolean)">
            <summary>For initialization of the service to provide statement context. </summary>
            <param name="epStatement">the statement</param>
            <param name="epServiceProvider">the engine instance</param>
            <param name="isInsertInto">true if this is insert into</param>
            <param name="isPattern">true if this is a pattern statement</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementResultService.SetSelectClause(System.Type[],System.String[])">
            <summary>For initialize of the service providing select clause column types and names. </summary>
            <param name="selectClauseTypes">types of columns in the select clause</param>
            <param name="selectClauseColumnNames">column names</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementResultService.DispatchOnStop">
            <summary>Dispatch the remaining results, if any, to listeners as the statement is about to be stopped. </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementResultService.SetUpdateListeners(com.espertech.esper.core.EPStatementListenerSet)">
            <summary>Indicate a change in update listener. </summary>
            <param name="updateListeners">is the new listeners and subscriber</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementResultService.Indicate(com.espertech.esper.collection.UniformPair{com.espertech.esper.events.EventBean[]})">
            <summary>Stores for dispatching the statement results. </summary>
            <param name="results">is the insert and remove stream data</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementResultService.Execute">
            <summary>Execution of result indication. </summary>
        </member>
        <member name="P:com.espertech.esper.core.StatementResultService.IsMakeSynthetic">
            <summary>Returns true to indicate that synthetic events should be produced, for use in select expression processing. </summary>
            <returns>true to produce synthetic events</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementResultService.IsMakeNatural">
            <summary>Returns true to indicate that natural events should be produced, for use in select expression processing. </summary>
            <returns>true to produce natural (object[] column) events</returns>
        </member>
        <member name="P:com.espertech.esper.core.StatementResultService.LastIterableEvent">
            <summary>Returns the last iterable event, for use by patterns since these are not iterable. </summary>
            <returns>last event</returns>
        </member>
        <member name="T:com.espertech.esper.core.StatementLifecycleObserver">
            <summary>Observer statement management events. </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementLifecycleObserver.Observe(com.espertech.esper.core.StatementLifecycleEvent)">
            <summary>Observer statement state changes. </summary>
            <param name="event">indicates statement changed</param>
        </member>
        <member name="T:com.espertech.esper.compat.FastThreadStore`1">
            <summary>
            FastThreadStore is a variation of the FastThreadLocal, but it lacks a factory
            for object creation.  While there are plenty of cases where this makes sense,
            we actually did this to work around an issue in .NET 3.5 SP1.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:com.espertech.esper.compat.FastThreadStore`1._threadDataList">
            <summary>
            List of weak reference data.  This list is allocated when the
            class is instantiated and keeps track of data that is allocated
            regardless of thread.  Minimal locks should be used to ensure
            that normal ThreadLocal activity is not placed in the crossfire
            of this structure.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.FastThreadStore`1._threadDataListLock">
            <summary>
            Lock for the _threadDataList
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastThreadStore`1.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.compat.FastThreadStore`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastThreadStore`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastThreadStore`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:com.espertech.esper.compat.FastThreadStore`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FastThreadStore`1.AllocateIndex">
            <summary>
            Allocates a usable index.  This method looks in the indexReclaim
            first to determine if there is a slot that has been released.  If so,
            it is reclaimed.  If no space is available, a new index is allocated.
            This can lead to growth of the static data table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.FastThreadStore`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.FastThreadStore`1"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.FastThreadStore`1.InstanceId">
            <summary>
            Gets the instance id ... if you really must know.
            </summary>
            <value>The instance id.</value>
        </member>
        <member name="P:com.espertech.esper.compat.FastThreadStore`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.DbDriverConfiguration"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.DbDriverConfiguration.DriverName">
            <summary>
            Gets or sets the name of the driver.
            </summary>
            <value>The name of the driver.</value>
        </member>
        <member name="P:com.espertech.esper.client.DbDriverConfiguration.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:com.espertech.esper.client.DbDriverFactoryConnection">
            <summary>
            Connection factory settings for using a DbDriverFactory.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.DbDriverFactoryConnection.driverNamespace">
            <summary>
            Where do drivers in the default search path reside
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.DbDriverFactoryConnection.driver">
            <summary>
            Database driver.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverFactoryConnection.ResolveDriverTypeFromName(System.String)">
            <summary>
            Resolves the driver type from the name provided.  If the driver can not be
            resolved, the method throws an exception to indicate that one could not
            be found.  The method first looks for a class that matches the name of
            the driver.  If one can not be found, it checks in the com.espertech.esper.epl.drivers
            namespace to see if one can be found.  Lastly, if checks in the
            com.espertech.espers.eql.drivers namespace with a variation of the given driver name.
            </summary>
            <param name="driverName">Name of the driver.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverFactoryConnection.ResolveDriverFromName(System.String)">
            <summary>
            Resolves the driver from the name.
            </summary>
            <param name="driverName">Name of the driver.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverFactoryConnection.ResolveDriverFromType(System.Type)">
            <summary>
            Resolves the driver from the type.
            </summary>
            <param name="driverType">Type of the driver.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverFactoryConnection.#ctor(System.Type,com.espertech.esper.compat.Properties)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.DbDriverFactoryConnection"/> class.
            </summary>
            <param name="driverType">Type of the driver.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverFactoryConnection.#ctor(System.String,com.espertech.esper.compat.Properties)">
            <summary>
            Ctor.
            </summary>
            <param name="driverName">Name of the driver.</param>
            <param name="properties">Properties that should be applied to the connection.</param>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverFactoryConnection.#ctor(com.espertech.esper.client.DbDriverConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.DbDriverFactoryConnection"/> class.
            </summary>
            <param name="dbSpecification">The db specification.</param>
        </member>
        <member name="P:com.espertech.esper.client.DbDriverFactoryConnection.Driver">
            <summary>
            Gets the database driver.
            </summary>
            <value>The database driver.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationParser">
            <summary>
            Parser for configuration XML.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationParser.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.client.ConfigurationParser"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationParser.DoConfigure(com.espertech.esper.client.Configuration,System.IO.Stream,System.String)">
            <summary>
            Use the configuration specified in the given input stream.
            </summary>
            <param name="configuration">is the configuration object to populate</param>
            <param name="stream">The stream.</param>
            <param name="resourceName">The name to use in warning/error messages</param>
            <throws>  com.espertech.esper.client.EPException </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationParser.DoConfigure(com.espertech.esper.client.Configuration,System.Xml.XmlDocument)">
            <summary>
            Parse the W3C DOM document.
            </summary>
            <param name="configuration">is the configuration object to populate</param>
            <param name="doc">to parse</param>
            <throws>  com.espertech.esper.client.EPException </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationParser.DoConfigure(com.espertech.esper.client.Configuration,System.Xml.XmlNode)">
            <summary>
            Parse the configuration starting at the specified root node.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="rootNode">The root node.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationParser.GetResourceAsStream(System.String)">
            <summary>
            Returns an input stream from an application resource in the classpath.
            </summary>
            <param name="resource">to get input stream for</param>
            <returns>input stream for resource</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults">
            <summary>
            Provides access to engine configuration defaults for modification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading">
            <summary>Returns threading settings.</summary>
            <returns>threading settings object</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ViewResources">
            <summary>Returns view resources defaults.</summary>
            <returns>view resources defaults</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.EventMeta">
            <summary>Returns event representation default settings.</summary>
            <returns>event representation default settings</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Logging">
            <summary>
            Returns logging settings applicable to the engine, other then Log4J settings.
            </summary>
            <returns>logging settings</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Variables">
            <summary>
            Returns engine defaults applicable to variables.
            </summary>
            <value>The variables.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.StreamSelection">
            <summary>
            Returns engine defaults applicable to streams (insert and remove, insert only
            or remove only) selected for a statement.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.TimeSource">
            <summary>
            Gets the time source configuration.
            </summary>
            <value>The time source.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadSettings">
            <summary>Holds thread settings.</summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadSettings.#ctor">
            <summary>Ctor - sets up defaults.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadSettings.IsListenerDispatchPreserveOrder">
            <summary>
            In multithreaded environments, this setting controls whether dispatches to listeners preserve
            the ordering in which the statement processes events.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadSettings.ListenerDispatchTimeout">
            <summary>
            In multithreaded environments, this setting controls when dispatches to listeners preserve
            the ordering the timeout to complete any outstanding dispatches.
            </summary>
            <value>The listener dispatch timeout.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadSettings.IsInsertIntoDispatchPreserveOrder">
            <summary>
            In multithreaded environments, this setting controls whether insert-into streams preserve
            the order of events inserted into them by one or more statements
            such that statements that consume other statement's events behave deterministic
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadSettings.IsInternalTimerEnabled">
            <summary>
            Sets the use of internal timer.
            <para>
            By setting internal timer to true (the default) the engine starts the internal timer thread
            and relies on internal timer events to supply the time.
            </para>
            <para>
            By setting internal timer to false the engine does not start the internal timer thread
            and relies on external application-supplied timer events to supply the time.
            </para>
            </summary>
            <value>
            	<c>true</c> if this instance is internal timer enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadSettings.InternalTimerMsecResolution">
            <summary>Returns the millisecond resolutuion of the internal timer thread.</summary>
            <returns>number of msec between timer processing intervals</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadSettings.InsertIntoDispatchTimeout">
            <summary>
            Sets the number of milliseconds that a thread may maximually be blocking
            to deliver statement results from a producing statement that employs insert-into
            to a consuming statement.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadSettings.ListenerDispatchLocking">
            <summary>
            Gets or sets the blocking strategy to use when multiple threads deliver results for
            a single statement to listeners, and the guarantee of order of delivery must be maintained.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadSettings.InsertIntoDispatchLocking">
            <summary>
            Gets or sets the blocking strategy to use when multiple threads deliver results for
            a single statement to consuming statements of an insert-into, and the guarantee of
            order of delivery must be maintained.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadSettings.ThreadLocalStyle">
            <summary>
            Gets or sets the thread local style.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.Locking">
            <summary>
            Enumeration of blocking techniques.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEngineDefaults.Locking.SPIN">
            <summary>
            Spin lock blocking is good for locks held very shortly or generally uncontended locks and
            is therefore the default.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEngineDefaults.Locking.SUSPEND">
            <summary>
            Blocking that suspends a thread and notifies a thread to wake up can be
            more expensive then spin locks.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadLocal">
            <summary>
            Enumeration of thread local techniques.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadLocal.FAST">
            <summary>
            Uses customized thread local objects specifically designed for
            high-speed access.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadLocal.SYSTEM">
            <summary>
            Uses LocalDataStoreSlot for thread local objects.  This uses the CLR's
            own mechanisms.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ViewResourceSettings">
            <summary>Holds view resources settings.</summary>
        </member>
        <member name="M:com.espertech.esper.client.ViewResourceSettings.#ctor">
            <summary>Ctor - sets up defaults.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ViewResourceSettings.IsShareViews">
            <summary>
            Gets or sets the flag to instruct the engine shares view resources between statements,
            or if false to instruct the engine to not share view resources between statements.
            </summary>
            <returns>
            indicator whether view resources are shared between statements if
            statements share same-views and the engine sees opportunity to reuse an existing view.
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.EventMetaSettings">
            <summary>Event representation metadata.</summary>
        </member>
        <member name="M:com.espertech.esper.client.EventMetaSettings.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="P:com.espertech.esper.client.EventMetaSettings.ClassPropertyResolutionStyle">
            <summary>
            Gets or sets the property resolution style to use for resolving property names
            of types.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EventMetaSettings.AliasResolver">
            <summary>
            Gets or sets the alias resolver.
            </summary>
            <value>The alias resolver.</value>
        </member>
        <member name="T:com.espertech.esper.client.LogSettings">
            <summary>
            Holds view logging settings other then the Apache commons or Log4net settings.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.LogSettings.#ctor">
            <summary>Ctor - sets up defaults.</summary>
        </member>
        <member name="P:com.espertech.esper.client.LogSettings.IsEnableExecutionDebug">
            <summary>
            Gets or sets a value indicating if execution path debug logging is enabled.
            <para>
            Only if this flag is set to true, in addition to log4net settings set to DEBUG,
            does an engine instance, produce debug out.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.Variables">
            <summary>
            Holds variables settings.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.Variables.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.Variables"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.Variables.MsecVersionRelease">
            <summary>
            Gets or sets the number of milliseconds that a version of a variables is held stable for
            use by very long-running atomic statement execution.
            <para>
            A slow-executing statement such as an SQL join may use variables that, at the time
            the statement starts to execute, have certain values. The engine guarantees that during
            statement execution the value of the variables stays the same as long as the statement
            does not take longer then the given number of milliseconds to execute. If the statement does take longer
            to execute then the variables release time, the current variables value applies instead.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.StreamSelection">
            <summary>
            Holds default settings for stream selection in the select-clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.StreamSelection.#ctor">
            <summary>
            Ctor - sets up defaults.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.StreamSelection.DefaultStreamSelector">
            <summary>
            Returns the default stream selector.
            <para/>
            Statements that select data from streams and that do not use one of the explicit
            streamselection keywords (istream/rstream/irstream), by default, generate selection
            results for the insert stream only, and not for the remove stream.
            <para/>
            This setting can be used to change the default behavior: Use the RSTREAM_ISTREAM_BOTH
            value to have your statements generate both insert and remove stream resultswithout the
            use of the "irstream" keyword in the select clause.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.TimeSource">
            <summary>
            Time source configuration, the default in MILLI (millisecond resolution from System.currentTimeMillis).
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.TimeSource.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.TimeSource.TimeSourceType">
            <summary>Gets or sets the time source type.</summary>
            <returns>time source type enum</returns>
        </member>
        <member name="T:com.espertech.esper.client.TimeSourceType">
            <summary>
            Time source type.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.TimeSourceType.MILLI">
            <summary>Millisecond time source type with time originating from System.currentTimeMillis</summary>
        </member>
        <member name="F:com.espertech.esper.client.TimeSourceType.NANO">
            <summary>Nanosecond time source from a wallclock-adjusted System.nanoTime</summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationDBRef">
            <summary>
            Container for database configuration information, such as
            options around getting a database connection and options to control the lifecycle
            of connections and set connection parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.SetDatabaseDriver(System.String,com.espertech.esper.compat.Properties)">
            <summary>
            Sets the database provider connection.
            </summary>
            <param name="driverName">Name of the driver.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.SetDatabaseDriver(com.espertech.esper.client.DbDriverFactoryConnection)">
            <summary>
            Sets the database driver.
            </summary>
            <param name="dbDriverFactoryConnection">The db driver factory connection.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.SetDatabaseDriver(com.espertech.esper.client.DbDriverFactoryConnection,com.espertech.esper.compat.Properties)">
            <summary>
            Sets the database driver.
            </summary>
            <param name="dbDriverFactoryConnection">The db driver factory connection.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.SetDatabaseDriver(com.espertech.esper.client.DbDriverConfiguration)">
            <summary>
            Sets the database driver.
            </summary>
            <param name="dbSpecification">The db specification.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.SetExpiryTimeCache(System.Double,System.Double)">
            <summary>
            Configures an expiry-time cache of the given maximum age in seconds and purge interval in seconds.
            <para>
            Specifies the cache reference type to be weak references. Weak reference cache entries become
            eligible for garbage collection and are removed from cache when the garbage collection requires so.
            </para>
            </summary>
            <param name="maxAgeSeconds">is the maximum number of seconds before a query result is considered stale (also known as time-to-live)
            </param>
            <param name="purgeIntervalSeconds">is the interval at which the engine purges stale data from the cache
            </param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.SetExpiryTimeCache(System.Double,System.Double,com.espertech.esper.client.ConfigurationCacheReferenceType)">
            <summary>
            Configures an expiry-time cache of the given maximum age in seconds and purge interval in seconds. Also allows
            setting the reference type indicating whether garbage collection may remove entries from cache.
            </summary>
            <param name="maxAgeSeconds">the maximum number of seconds before a query result is considered stale (also known as time-to-live)</param>
            <param name="purgeIntervalSeconds">the interval at which the engine purges stale data from the cache.</param>
            <param name="cacheReferenceType">specifies the reference type to use</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.AddSqlTypeBinding(System.Type,System.Type)">
            <summary>
            Adds the SQL types binding.
            </summary>
            <param name="sqlType">Type of the SQL.</param>
            <param name="desiredType">The desired type.</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ConnectionAutoCommit">
            <summary>
            Gets or sets the auto-commit connection settings for new connections to this database.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ConnectionTransactionIsolation">
            <summary>
            Gets or sets the transaction isolation level on new connections created for this database.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ConnectionCatalog">
            <summary>
            Gets or sets the catalog name for new connections created for this database.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.LRUCache">
            <summary>
            Gets or sets the LRU cache to a given size for the database.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ConnectionSettings">
            <summary> Returns the connection settings for this database.</summary>
            <returns> connection settings
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ConnectionLifecycle">
            <summary>
            Gets or sets the setting to control whether a new connection is obtained
            for each lookup, or connections are retained between lookups. Controls
            whether a new connection is obtained for each lookup, or connections
            are retained between lookups.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ConnectionFactoryDesc">
            <summary>
            Gets the descriptor controlling connection creation settings.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.DataCacheDesc">
            <summary>
            Gets a query result data cache descriptor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.DataTypeMapping">
            <summary>
            Returns the mapping of types that the engine must perform
            when receiving output columns of that sql types.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.MetadataRetrievalEnum">
            <summary>
            Returns an enumeration indicating how the engine retrieves metadata about the columns
            that a given SQL query returns.
            <para/>
            The engine requires to retrieve result column names and types in order to build a resulting
            event type and perform expression type checking.
            </summary>
            <returns>indication how to retrieve metadata</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.MetadataOrigin">
            <summary>
            Gets and sets an indicator that indicates how the engine should retrieve
            metadata about the columns that a given SQL query returns.
            <para>
            The engine requires to retrieve result column names and types in order to build a resulting
            event type and perform expression type checking.
            </para>
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ColumnChangeCase">
            <summary>
            Gets or sets an enum value determining how the engine changes case
            on output column names returned from statement or statement result
            set metadata.
            </summary>
            <returns>change case enums</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationDBRef.MetadataOriginEnum">
            <summary>
            Indicates how the engine retrieves metadata about a statement's output columns.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationDBRef.MetadataOriginEnum.DEFAULT">
            <summary>
            By default, get output column metadata from the prepared statement., unless
            an Oracle connection class is used in which case the behavior is SAMPLE.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationDBRef.MetadataOriginEnum.METADATA">
            <summary>
            Always get output column metadata from the prepared statement regardless of what driver
            or connection is used.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationDBRef.MetadataOriginEnum.SAMPLE">
            <summary>
            Obtain output column metadata by executing a sample query statement at statement
            compilation time. The sample statement
            returns the same columns as the statement executed during event processing.
            See the documentation for the generation or specication of the sample query statement.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationDBRef.ColumnChangeCaseEnum">
            <summary>
            Controls how output column names get reflected in the event type.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationDBRef.ColumnChangeCaseEnum.NONE">
            <summary>
            Leave the column names the way the database driver represents the column.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationDBRef.ColumnChangeCaseEnum.LOWERCASE">
            <summary>
            Change case to lowercase on any column names returned by statement metadata.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationDBRef.ColumnChangeCaseEnum.UPPERCASE">
            <summary>
            Change case to uppercase on any column names returned by statement metadata.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeAccumView">
            <summary>
            A data window view that holds events in a stream and only removes events from a stream (rstream) if
            no more events arrive for a given time interval.
            <para/>
            No batch version of the view exists as the batch version is simply the remove stream of this view, which removes
            in batches.
            <para/>
            The view is continuous, the insert stream consists of arriving events. The remove stream
            only posts current window contents when no more events arrive for a given timer interval.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeAccumView.#ctor(com.espertech.esper.view.window.TimeAccumViewFactory,com.espertech.esper.core.StatementContext,System.Int64,com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>Constructor.</summary>
            <param name="msecIntervalSize">
            is the number of milliseconds to batch events for
            </param>
            <param name="viewUpdatedCollection">
            is a collection that the view must update when receiving events
            </param>
            <param name="timeBatchViewFactory">fr copying this view in a group-by</param>
            <param name="statementContext">is required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeAccumView.SendRemoveStream">
            <summary>This method sends the remove stream for all accumulated events.</summary>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeAccumView.MsecIntervalSize">
            <summary>Returns the interval size in milliseconds.</summary>
            <returns>batch size</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeAccumView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty.</summary>
            <returns>true if empty</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.LengthBatchViewFactory">
            <summary>Factory for <see cref="T:com.espertech.esper.view.window.TimeBatchView"/>.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.LengthBatchViewFactory.size">
            <summary>The length window size.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.LengthBatchViewFactory.relativeAccessGetterImpl">
            <summary>The access into the window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.window.LengthBatchViewFactory.isRemoveStreamHandling">
            <summary>Flag to indicate that the view must handle the removed events from a parent view.</summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthBatchViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewResolutionServiceImpl">
            <summary>
            Resolves view namespace and name to view factory class, using configuration.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewResolutionServiceImpl.#ctor(com.espertech.esper.epl.spec.PluggableObjectCollection)">
            <summary>
            Ctor.
            </summary>
            <param name="viewObjects">is the view objects to use for resolving views, can be both built-in and plug-in views.</param>
        </member>
        <member name="T:com.espertech.esper.view.std.GroupByViewFactory">
            <summary>Factory for <see cref="T:com.espertech.esper.view.std.GroupByView"/> instances.</summary>
        </member>
        <member name="F:com.espertech.esper.view.std.GroupByViewFactory.groupFieldNames">
            <summary>
            List of group-by field names.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.GroupByViewFactory.GetFieldNameParams(System.Collections.Generic.IList{System.Object},System.String)">
            <summary>
            Parses the given view parameters into a list of field names to group-by.
            </summary>
            <param name="viewParameters">is the raw parameter objects</param>
            <param name="viewName">is the name of the view</param>
            <returns>field names</returns>
            <throws>ViewParameterException thrown to indicate a parameter problem</throws>
        </member>
        <member name="P:com.espertech.esper.view.std.GroupByViewFactory.GroupFieldNames">
            <summary>Returns the names of fields to group by</summary>
            <returns>field names</returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.UnivariateStatisticsViewFactory">
            <summary>
            Factory for <see cref="T:com.espertech.esper.view.stat.UnivariateStatisticsView"/> instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{System.Object})">
            <summary>
            Indicates user EPL query view parameters to the view factory.
            </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>
            ViewParameterException if the parameters don't match view parameter needs
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsViewFactory.Attach(com.espertech.esper.events.EventType,com.espertech.esper.core.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>
            Attaches the factory to a parent event type such that the factory can validate
            attach requirements and determine an event type for resulting views.
            </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains the
            parent view factory</param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>
            ViewAttachException is thrown to indicate that this view factories's view would not play
            with the parent view factories view
            </throws>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsViewFactory.CanProvideCapability(com.espertech.esper.view.ViewCapability)">
            <summary>
            Returns true if the view factory can make views that provide a view resource with the
            given capability.
            </summary>
            <param name="viewCapability">is the view resource needed</param>
            <returns>
            true to indicate that the view can provide the resource, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsViewFactory.SetProvideCapability(com.espertech.esper.view.ViewCapability,com.espertech.esper.epl.core.ViewResourceCallback)">
            <summary>
            Indicates to the view factory to provide the view resource indicated.
            </summary>
            <param name="viewCapability">is the required resource descriptor</param>
            <param name="resourceCallback">is the callback to use to supply the resource needed</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsViewFactory.MakeView(com.espertech.esper.core.StatementContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="statementContext">contains view services</param>
            <returns>new view</returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>
            Determines if the given view could be used instead of creating a new view,
            requires the view factory to compare view type, parameters and other capabilities provided.
            </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>
            true if the given view can be reused instead of creating a new view, or false to indicate
            the view is not right for reuse
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.UnivariateStatisticsViewFactory.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted
            by the view.
            </summary>
            <value></value>
            <returns>event type of view's created by the view factory</returns>
        </member>
        <member name="T:com.espertech.esper.util.UuidGenerator">
             <summary>
             Generates a UUID.
            <p>
             A Universally Unique Identifier (UUID) is a 128 bit number generated
             according to an algorithm that is guaranteed to be unique in time and
             space from all other UUIDs.
             </p>
             </summary>
             <author>
             <a href="mailto:jboner@codehaus.org">Jonas BonŽr</a>
             </author>
        </member>
        <member name="M:com.espertech.esper.util.UuidGenerator.Generate(System.Object)">
            <summary>Returns a unique uuid.</summary>
            <param name="obj">the calling object (this)</param>
            <returns>a unique uuid</returns>
        </member>
        <member name="T:com.espertech.esper.util.ThreadLogUtil">
            <summary>
            Utility class for logging threading-related messages.
            <para>
            Prints thread information and lock-specific info.
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.util.ThreadLogUtil.ENABLED_TRACE">
            <summary>Enable trace logging.</summary>
        </member>
        <member name="F:com.espertech.esper.util.ThreadLogUtil.ENABLED_INFO">
            <summary>Enable info logging.</summary>
        </member>
        <member name="F:com.espertech.esper.util.ThreadLogUtil.TRACE">
            <summary>Set trace log level.</summary>
        </member>
        <member name="F:com.espertech.esper.util.ThreadLogUtil.INFO">
            <summary>Set info log level.</summary>
        </member>
        <member name="M:com.espertech.esper.util.ThreadLogUtil.Trace(System.String,System.Object[])">
            <summary>If enabled, logs for trace level the given objects and text</summary>
            <param name="text">to log</param>
            <param name="objects">to write</param>
        </member>
        <member name="M:com.espertech.esper.util.ThreadLogUtil.Info(System.String,System.Object[])">
            <summary>If enabled, logs for info level the given objects and text</summary>
            <param name="text">to log</param>
            <param name="objects">to write</param>
        </member>
        <member name="M:com.espertech.esper.util.ThreadLogUtil.TraceLock(System.String,System.Object)">
            <summary>Logs the lock and action.</summary>
            <param name="lockAction">is the action towards the lock</param>
            <param name="lockObj">is the lock instance</param>
        </member>
        <member name="M:com.espertech.esper.util.ThreadLogUtil.TraceLock(System.String,System.Threading.ReaderWriterLock)">
            <summary>Logs the lock and action.</summary>
            <param name="lockAction">is the action towards the lock</param>
            <param name="lockObj">is the lock instance</param>
        </member>
        <member name="T:com.espertech.esper.util.ResourceLoader">
            <summary>
            Utility class for loading or resolving external resources via URL and class path.
            </summary>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleHandleExistsException">
            <summary>
            This exception is thrown to indicate trying to add a scheduling callback
            that already existed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleHandleExistsException.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="message">is the error message</param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleHandleExistsException.#ctor(System.String,System.Exception)">
            <summary>Constructor for an inner exception and message.</summary>
            <param name="message">is the error message</param>
            <param name="cause">is the inner exception</param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleHandleExistsException.#ctor(System.Exception)">
            <summary>Constructor.</summary>
            <param name="cause">is the inner exception</param>
        </member>
        <member name="T:com.espertech.esper.filter.InSetOfValuesConstant">
            <summary>Constant value in a list of values following an in-keyword.</summary>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesConstant.#ctor(System.Object)">
            <summary>Ctor.</summary>
            <param name="constant">is the constant value</param>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesConstant.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Returns the actual value to filter for from prior matching events
            </summary>
            <param name="matchedEvents">is a map of matching events</param>
            <returns>filter-for value</returns>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesConstant.GetConstant">
            <summary>Returns the constant value.</summary>
            <returns>constant</returns>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesConstant.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesConstant.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterValueSetImpl">
            <summary>
            Container for filter values for use by the <see cref="T:com.espertech.esper.filter.FilterService"/> to filter and distribute incoming events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterValueSetImpl.#ctor(com.espertech.esper.events.EventType,System.Collections.Generic.IList{com.espertech.esper.filter.FilterValueSetParam})">
            <summary> Ctor.</summary>
            <param name="eventType">type of event to filter for</param>
            <param name="parameters">list of filter parameters</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetImpl.EventType">
            <summary> Returns event type to filter for.</summary>
            <returns> event type to filter for
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetImpl.Parameters">
            <summary> Returns list of filter parameters.</summary>
            <returns> list of filter parameters
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexNotIn">
            <summary>
            Index for filter parameter constants to match using the 'not in' operator to match against a
            all other values then the supplied set of values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexNotIn.#ctor(System.String,com.espertech.esper.events.EventType)">
            <summary>Constructs the index for multiple-exact matches.</summary>
            <param name="propertyName">is the name of the event property</param>
            <param name="eventType">
            describes the event type and is used to obtain a getter instance for the property
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexNotIn.Remove(System.Object)">
            <summary>
            Remove the event evaluation instance for the given constant. Returns true if
            the constant was found, or false if not.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">is the value supplied in the filter paremeter</param>
            <returns>
            true if found and removed, false if not found
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexNotIn.MatchEvent(com.espertech.esper.events.EventBean,System.Collections.Generic.IList{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Matches the event.
            </summary>
            <param name="eventBean">The event bean.</param>
            <param name="matches">The matches.</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexNotIn.Item(System.Object)">
            <summary>
            Get the event evaluation instance associated with the constant. Returns null if no entry found for the constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock property must supply a lock for this purpose.
            Store the event evaluation instance for the given constant. Can override an existing value
            for the same constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <returns>
            event evaluator stored for the filter constant, or null if not found
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexNotIn.Count">
            <summary>
            Return the number of distinct filter parameter constants stored.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <value></value>
            <returns>Number of entries in index</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexNotIn.ReadWriteLock">
            <summary>
            Supplies the lock for protected access.
            </summary>
            <value></value>
            <returns>lock</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.PropertyListBuilderExplicit">
            <summary>
            Introspector that considers explicitly configured event properties only.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderExplicit.#ctor(com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary> Ctor.</summary>
            <param name="legacyConfig">is a legacy type specification containing
            information about explicitly configured fields and methods
            </param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderExplicit.AssessProperties(System.Type)">
            <summary>
            Introspect the type and deterime exposed event properties.
            </summary>
            <param name="type">type to introspect</param>
            <returns>list of event property descriptors</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderExplicit.GetExplicitProperties(System.Collections.Generic.IList{com.espertech.esper.events.EventPropertyDescriptor},System.Type,com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>
            Populates explicitly-defined properties into the result list.
            </summary>
            <param name="result">is the resulting list of event property descriptors</param>
            <param name="type">is the class to introspect</param>
            <param name="legacyConfig">supplies specification of explicit methods and fields to expose</param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderExplicit.MakeDesc(System.Type,com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyFieldPropDesc)">
            <summary>
            Creates an event property descriptor for a field or native property
            </summary>
            <param name="type"></param>
            <param name="fieldDesc"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderExplicit.MakeFieldDesc(System.Reflection.FieldInfo,System.String)">
            <summary>
            Makes a simple-type event property descriptor based on a reflected field.
            </summary>
            <param name="field">is the public field</param>
            <param name="name">is the name of the event property</param>
            <returns> property descriptor</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderExplicit.MakeNativeDesc(System.ComponentModel.PropertyDescriptor,System.String)">
            <summary>
            Makes a simple-type event property descriptor based on a reflected property.
            </summary>
            <param name="property">the property descriptor</param>
            <param name="name">the name of the event property</param>
            <returns> property descriptor</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyListBuilderExplicit.MakeMethodDesc(System.Reflection.MethodInfo,System.String)">
            <summary>
            Makes an event property descriptor based on a reflected method, considering
            the methods parameters to determine if this is an indexed or mapped event property.
            </summary>
            <param name="method">is the public method</param>
            <param name="name">is the name of the event property</param>
            <returns> property descriptor</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.ClassicPropertyResolver">
            <summary>
            Resolves properties using the TypeDescriptor in System.ComponentModel.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.ClassicPropertyResolver.GetProperties(System.Type)">
            <summary>
            Gets the properties for a given type.
            </summary>
            <param name="type">Type on which properties are to be resolved</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.ClassicPropertyResolver.GetPropertyFor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Gets a property descriptor for the given property.
            </summary>
            <param name="property">The property.</param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.ClassicPropertyResolver.GetPropertyFor(System.Reflection.FieldInfo,System.String)">
            <summary>
            Gets the property for the given field.
            </summary>
            <param name="field">The field.</param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.events.MapEventType">
            <summary>
            Implementation of the <see cref="T:com.espertech.esper.events.EventType"/> interface for handling plain Maps containing name value pairs.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.#ctor(System.String,com.espertech.esper.compat.Map{System.String,System.Type},com.espertech.esper.events.EventAdapterService)">
            <summary>Constructor takes a type name, map of property names and types.</summary>
            <param name="typeName">
            is the event type name used to distinquish map types that have the same property types,
            empty string for anonymous maps, or for insert-into statements generating map events
            the stream name
            </param>
            <param name="propertyTypes">is pairs of property name and type</param>
            <param name="eventAdapterService">
            is required for access to objects properties within map values
            </param>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.#ctor(System.String,com.espertech.esper.events.EventAdapterService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Constructor takes a type name, map of property names and types, foruse with nestable Map events.</summary>
            <param name="typeName">is the event type name used to distinquish map types that have the same property types,empty string for anonymous maps, or for insert-into statements generating map eventsthe stream name</param>
            <param name="propertyTypes">is pairs of property name and type</param>
            <param name="eventAdapterService">is required for access to objects properties within map values</param>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.GetValue(System.String,com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Gets the value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.GetPropertyType(System.String)">
            <summary>
            Gets the type of property associated with the property name.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.GetGetter(System.String)">
            <summary>
            Gets the getter for the property name.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.IsProperty(System.String)">
            <summary>
            Returns true if the specified property name maps to a property.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.IsEqualsProperties(com.espertech.esper.compat.Map{System.String,System.Type},com.espertech.esper.compat.Map{System.String,System.Type})">
            <summary>Compares two sets of properties and determines if they are the same, allowing forboxed/unboxed types.</summary>
            <param name="setOne">is the first set of properties</param>
            <param name="setTwo">is the second set of properties</param>
            <returns>true if the property set is equivalent, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.IsDeepEqualsProperties(com.espertech.esper.compat.Map{System.String,System.Object},com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>Compares two sets of properties and determines if they are the same, allowing forboxed/unboxed types, and nested map types.</summary>
            <param name="setOne">is the first set of properties</param>
            <param name="setTwo">is the second set of properties</param>
            <returns>true if the property set is equivalent, false if not</returns>
        </member>
        <member name="P:com.espertech.esper.events.MapEventType.Alias">
            <summary>
            Gets the event type alias.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.MapEventType.Types">
            <summary>Returns the name-type map of map properties, each value in the mapcan be a Class or a Map&lt;String, Object&gt; (for nested maps).</summary>
            <returns>is the property name and types</returns>
        </member>
        <member name="P:com.espertech.esper.events.MapEventType.UnderlyingType">
            <summary>
            Get the class that represents the type of the event type.
            Returns a bean event class if the schema represents a bean event type.
            Returns Map if the schema represents a collection of values in a Map.
            </summary>
            <value>The type of the underlying.</value>
            <returns> type of the event object
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.MapEventType.PropertyNames">
            <summary>
            Get all valid property names for the event type.
            </summary>
            <value>The property names.</value>
            <returns> A string array containing the property names of this typed event data object.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.MapEventType.SuperTypes">
            <summary>
            Returns an array of event types that are super to this event type, from which this event type
            inherited event properties.  For object instances underlying the event this method returns the
            event types for all superclasses extended by the object and all interfaces implemented by the
            object.
            </summary>
            <value></value>
            <returns>an array of event types</returns>
        </member>
        <member name="P:com.espertech.esper.events.MapEventType.DeepSuperTypes">
            <summary>
            Returns enumerable over all super types to event type, going up the hierarchy and including
            all interfaces (and their extended interfaces) and superclasses as EventType instances.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.events.MapEventType.SimpleEventPropertyGetter">
            <summary>
            An EventProperty designed to extract the named property from a DataMap.
            This method was originally implemented as an anonymous innerclass in Java.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.SimpleEventPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Return the value for the property in the event object specified when the instance was obtained.
            Useful for fast access to event properties. Throws a PropertyAccessException if the getter instance
            doesn't match the EventType it was obtained from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from</param>
            <returns>value of property in event</returns>
            <throws>  PropertyAccessException to indicate that property access failed </throws>
        </member>
        <member name="M:com.espertech.esper.events.MapEventType.SimpleEventPropertyGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a property.
            <para>
            Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
            Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
            If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
            does not exists and the method returns false.
            </para>
            	<para>
            For non-dynamic properties, this method always returns true since a getter would not be available
            unless
            </para>
            </summary>
            <param name="eventBean">the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default) properties
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.MapEventBean">
            <summary>
            Wrapper for events represented by a Map of key-value pairs that are the event properties.
            MapEventBean instances are equal if they have the same <see cref="P:com.espertech.esper.events.MapEventBean.EventType"/> and all property names
            and values are reference-equal. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.MapEventBean.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.events.EventType)">
            <summary>
            Constructor for initialization with existing values.
            Makes a shallow copy of the supplied values to not be surprised by changing property values.
            </summary>
            <param name="properties">are the event property values</param>
            <param name="eventType">is the type of the event, i.e. describes the map entries</param>
        </member>
        <member name="M:com.espertech.esper.events.MapEventBean.#ctor(com.espertech.esper.events.EventType,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,com.espertech.esper.events.EventBean}})">
            <summary>
            Constructor for initialization with existing values.
            Makes a shallow copy of the supplied values to not be surprised by changing property values.
            </summary>
            <param name="eventType">is the type of the event, i.e. describes the map entries</param>
            <param name="events">are the event property constisting of events</param>
        </member>
        <member name="M:com.espertech.esper.events.MapEventBean.#ctor(com.espertech.esper.events.EventType)">
            <summary>
            Constructor for the mutable functions, e.g. only the type of values is known but not the actual values.
            </summary>
            <param name="eventType">is the type of the event, i.e. describes the map entries</param>
        </member>
        <member name="M:com.espertech.esper.events.MapEventBean.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="M:com.espertech.esper.events.MapEventBean.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.MapEventBean.EventType">
            <summary>
            Return the <see cref="P:com.espertech.esper.events.MapEventBean.EventType"/> instance that describes the set of properties available for this event.
            </summary>
            <value></value>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.MapEventBean.Underlying">
            <summary>
            Get the underlying data object to this event wrapper.
            </summary>
            <value></value>
            <returns> underlying data object.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.MapEventBean.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="T:com.espertech.esper.events.EventPropertyDescriptor">
            <summary>
            Encapsulates the event property information.  In the .NET version we rely upon
            reflection to provide us with the basic abstraction thats necessary here.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventPropertyDescriptor.#ctor(System.String,System.String,System.ComponentModel.PropertyDescriptor,com.espertech.esper.events.EventPropertyType)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">name of property, from getter method</param>
            <param name="listedName">name the property may show up when listed as a valid property, such as indexed[], mapped()</param>
            <param name="propertyDesc">The property descriptor.</param>
            <param name="propertyType">type of property</param>
        </member>
        <member name="M:com.espertech.esper.events.EventPropertyDescriptor.#ctor(System.String,System.String,System.Reflection.MethodInfo,com.espertech.esper.events.EventPropertyType)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.EventPropertyDescriptor"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="listedName">Name of the listed.</param>
            <param name="methodInfo">The method info.</param>
            <param name="propertyType">Type of the property.</param>
        </member>
        <member name="M:com.espertech.esper.events.EventPropertyDescriptor.#ctor(System.String,System.String,System.Reflection.FieldInfo,com.espertech.esper.events.EventPropertyType)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.EventPropertyDescriptor"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="listedName">Name of the listed.</param>
            <param name="fieldInfo">The field info.</param>
            <param name="propertyType">Type of the property.</param>
        </member>
        <member name="M:com.espertech.esper.events.EventPropertyDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventPropertyDescriptor.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="other">The other object.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.EventPropertyDescriptor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.EventPropertyDescriptor.PropertyName">
            <summary> Return the property name, for mapped and indexed properties this is just the property name
            without parantheses or brackets.
            </summary>
            <returns> property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.EventPropertyDescriptor.ListedName">
            <summary> Returns the listed name, which is the name the property would show up as when asking an
            event type for the set of valid properties. The listed name for indexed properties
            is "name[]" since an index is required for valid property access.
            The listed name for mapped properties is "name()".
            </summary>
            <returns> listed name
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.EventPropertyDescriptor.PropertyType">
            <summary> Returns an enum indicating the type of property: simple, mapped, indexed.</summary>
            <returns> enum with property type info
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.EventPropertyDescriptor.Descriptor">
            <summary>
            Gets the property descriptor.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:com.espertech.esper.events.EventPropertyDescriptor.ReturnType">
            <summary>
            Returns the type of the underlying method or field of the event property.
            </summary>
            <value>The type of the return.</value>
            <returns> return type
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StatementSpecRaw">
            <summary>
            Specification object representing a complete EPL statement including all EPL constructs.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecRaw.#ctor(com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum)">
            <summary>Ctor.</summary>
            <param name="defaultStreamSelector">stream selection for the statement</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.StreamSpecs">
            <summary>Returns the FROM-clause stream definitions.</summary>
            <returns>list of stream specifications</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.SelectClauseSpec">
            <summary>Gets or sets the SELECT-clause list of expressions.</summary>
            <returns>list of expressions and optional name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.IsExistsSubstitutionParameters">
            <summary>
            Gets or sets a value indicating if there are one or more substitution parameters
            in the statement of contained-within lookup statements
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.FilterRootNode">
            <summary>Gets or sets the WHERE-clause root node of filter expression.</summary>
            <returns>filter expression root node</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.OuterJoinDescList">
            <summary>
            Returns the LEFT/RIGHT/FULL OUTER JOIN-type and property name descriptor, if applicable. Returns null if regular join.
            </summary>
            <returns>outer join type, stream names and property names</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.GroupByExpressions">
            <summary>Returns list of group-by expressions.</summary>
            <returns>group-by expression nodes as specified in group-by clause</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.HavingExprRootNode">
            <summary>
            Gets or sets the expression root node representing the having-clause, if present,
            or null if no having clause was supplied.
            </summary>
            <returns>having-clause expression top node</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.OutputLimitSpec">
            <summary>Gets or sets the output limit definition, if any.</summary>
            <returns>output limit spec</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.InsertIntoDesc">
            <summary>
            Gets or sets a descriptor with the insert-into event name and optional list of columns.
            </summary>
            <returns>insert into specification</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.OrderByList">
            <summary>
            Returns the list of order-by expression as specified in the ORDER BY clause.
            </summary>
            <returns>Returns the orderByList.</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.SelectStreamSelectorEnum">
             <summary>Returns the stream selector (rstream/istream).</summary>
             <returns>stream selector</returns>
            
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.SelectStreamDirEnum">
            <summary>Gets or sets the stream selector (rstream/istream/both etc).</summary>
            <returns>stream selector</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.CreateWindowDesc">
            <summary>Returns the create-window specification.</summary>
            <returns>descriptor for creating a named window</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.OnTriggerDesc">
            <summary>Returns the on-delete statement specification.</summary>
            <returns>descriptor for creating a an on-delete statement</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.FilterExprRootNode">
            <summary>Gets or sets the where clause.</summary>
            <returns>where clause or null if none</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.HasVariables">
            <summary>Returns true if a statement (or subquery sub-statements) use variables.</summary>
            <returns>indicator if variables are used</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.CreateVariableDesc">
            <summary>Gets or sets the descriptor for create-variable statements.</summary>
            <returns>create-variable info</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OutputLimitSpec">
            <summary>
            Spec for building an EventBatch.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OutputLimitSpec.#ctor(System.Nullable{System.Double},System.String,com.espertech.esper.epl.spec.OutputLimitRateType,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Ctor.For batching events by event count.</summary>
            <param name="rate">is the fixed output rate, or null if by variable</param>
            <param name="displayLimit">indicates whether to output only the first, only the last, or all events</param>
            <param name="variableForRate">an optional variable name instead of the rate</param>
            <param name="rateType">type of the rate</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OutputLimitSpec.DisplayLimit">
            <summary>Returns the type of output limit.</summary>
            <returns>limit</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OutputLimitSpec.RateType">
            <summary>Returns the type of rate.</summary>
            <returns>rate type</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OutputLimitSpec.Rate">
            <summary>Returns the rate, or null or -1 if a variable is used instead</summary>
            <returns>rate if set</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OutputLimitSpec.VariableName">
            <summary>Returns the variable name if set, or null if a fixed rate</summary>
            <returns>variable name</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.FilterStreamSpecRaw">
            <summary>
            Unvalided filter-based stream specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.FilterStreamSpecRaw.#ctor(com.espertech.esper.epl.spec.FilterSpecRaw,System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},System.String,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="rawFilterSpec">is unvalidated filter specification</param>
            <param name="viewSpecs">is the view definition</param>
            <param name="optionalStreamName">is the stream name if supplied, or null if not supplied</param>
            <param name="isUnidirectional">true to indicate a unidirectional stream in a join, applicable for joins</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.FilterStreamSpecRaw.#ctor">
            <summary>Default ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.FilterStreamSpecRaw.ResolveType(System.String,System.String,com.espertech.esper.events.EventAdapterService,System.Collections.Generic.IList{System.Uri})">
            <summary>Resolves a given event alias to an event type.</summary>
            <param name="eventName">is the alias to resolve</param>
            <param name="eventAdapterService">for resolving event types</param>
            <param name="engineURI">the provider URI</param>
            <param name="optionalResolutionURIs">is URIs for resolving the event name against plug-inn event representations, if any</param>
            <returns>event type</returns>
            <throws>ExprValidationException if the info cannot be resolved</throws>
        </member>
        <member name="P:com.espertech.esper.epl.spec.FilterStreamSpecRaw.RawFilterSpec">
            <summary>Returns the unvalided filter spec.</summary>
            <returns>filter def</returns>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTOutputLimitHelper">
            <summary>Builds an output limit spec from an output limit AST node. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTOutputLimitHelper.BuildOutputLimitSpec(Antlr.Runtime.Tree.ITree)">
            <summary>Build an output limit spec from the AST node supplied.  </summary>
            <param name="node">parse node</param>
            <returns>output limit spec</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.FullTableScanLookupPlan">
            <summary> Plan for a full table scan.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.FullTableScanLookupPlan.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> Ctor.</summary>
            <param name="lookupStream">stream that generates event to look up for
            </param>
            <param name="indexedStream">stream to full table scan
            </param>
            <param name="indexNum">index number for the table containing the full unindexed contents
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.FullTableScanLookupPlan.MakeStrategy(com.espertech.esper.epl.join.table.EventTable[][],com.espertech.esper.events.EventType[])">
            <summary>
            Instantiates the lookup plan into a execution strategy for the lookup.
            </summary>
            <param name="indexesPerStream">tables for each stream</param>
            <param name="eventTypes">types of events in stream</param>
            <returns>lookup strategy instance</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.FullTableScanLookupPlan.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.JoinExecStrategyDispatchable">
            <summary>
            This class reacts to any new data buffered by registring with the dispatch service.
            When dispatched via execute, it takes the buffered events and hands these to the join
            execution strategy.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinExecStrategyDispatchable.#ctor(com.espertech.esper.epl.join.JoinExecutionStrategy,System.Int32)">
            <summary> CTor.</summary>
            <param name="joinExecutionStrategy">strategy for executing the join</param>
            <param name="numStreams">number of stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinExecStrategyDispatchable.Execute">
            <summary>
            Execute pending dispatchable items.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.JoinExecStrategyDispatchable.NewData(System.Int32,com.espertech.esper.collection.FlushedEventBuffer,com.espertech.esper.collection.FlushedEventBuffer)">
            <summary>
            Receive new and old events from a stream.
            </summary>
            <param name="streamId">the stream number sending the events</param>
            <param name="newEventBuffer">buffer for new events</param>
            <param name="oldEventBuffer">buffer for old events</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprCastNode">
            <summary>
            Represents the CAST(expression, type) function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCastNode.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="typeIdentifier">the the name of the type to cast to</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCastNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCastNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCastNode.ClassIdentifier">
            <summary>Returns the name of the type of cast to.</summary>
            <returns>type name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCastNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <value></value>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCastNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCastNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabasePollingViewableFactory">
            <summary>
            Factory for a view onto historical data via SQL statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.CreateDBStatementView(System.Int32,com.espertech.esper.epl.spec.DBStatementStreamSpec,com.espertech.esper.epl.db.DatabaseConfigService,com.espertech.esper.events.EventAdapterService,com.espertech.esper.core.EPStatementHandle)">
            <summary> Creates the viewable for polling via database SQL query.</summary>
            <param name="streamNumber">is the stream number of the view</param>
            <param name="databaseStreamSpec">provides the SQL statement, database name and additional info</param>
            <param name="databaseConfigService">for getting database connection and settings</param>
            <param name="eventAdapterService">for generating event beans from database information</param>
            <param name="epStatementHandle">the statements-own handle for use in registering callbacks with services</param>
            <returns>viewable providing poll functionality</returns>
            <exception cref="T:com.espertech.esper.epl.expression.ExprValidationException">the validation failed</exception>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.GetMetaDataSettings(com.espertech.esper.epl.db.DatabaseConfigService,System.String)">
            <summary>
            Gets the meta data settings from the database configuration service for the specified
            database name.
            </summary>
            <param name="databaseConfigService"></param>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.CreateEventType(com.espertech.esper.epl.db.QueryMetaData,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Creates an event type from the query meta data.
            </summary>
            <param name="queryMetaData">The query meta data.</param>
            <param name="eventAdapterService">The event adapter service.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.GetDatabaseConnectionFactory(com.espertech.esper.epl.db.DatabaseConfigService,System.String)">
            <summary>
            Gets the database connection factory.
            </summary>
            <param name="databaseConfigService">The database config service.</param>
            <param name="databaseName">Name of the database.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.GetSqlFragments(com.espertech.esper.epl.spec.DBStatementStreamSpec)">
            <summary>
            Gets the SQL fragments.
            </summary>
            <param name="databaseStreamSpec">The database stream spec.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.GetQueryMetaData(com.espertech.esper.epl.spec.DBStatementStreamSpec,com.espertech.esper.epl.db.DatabaseConfigService,com.espertech.esper.epl.db.DbDriverCommand)">
            <summary>
            Gets the query meta data.
            </summary>
            <param name="databaseStreamSpec">The database stream spec.</param>
            <param name="databaseConfigService">The database config service.</param>
            <param name="dbCommand">The database command.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.LexSampleSQL(System.String)">
            <summary>
            Lexes the sample SQL and inserts a "where 1=0" where-clause.
            </summary>
            <param name="querySQL">to inspect using lexer</param>
            <returns>sample SQL with where-clause inserted</returns>
            <exception cref="T:com.espertech.esper.epl.expression.ExprValidationException">indicates a lexer problem</exception>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.GetExampleQueryMetaData(com.espertech.esper.epl.db.DbDriver,System.String,com.espertech.esper.epl.db.ColumnSettings)">
            <summary>
            Gets the example query meta data.
            </summary>
            <param name="dbDriver">The driver.</param>
            <param name="sampleSQL">The sample SQL.</param>
            <param name="metadataSetting">The metadata setting.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.CreateSamplePlaceholderStatement(System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment})">
            <summary>
            Creates the sample placeholder statement.
            </summary>
            <param name="parseFragements">The parse fragements.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.PropertyResolutionDescriptor">
            <summary> Encapsulates the result of resolving a property and optional stream name against a supplied list of streams
            <see cref="T:com.espertech.esper.epl.core.StreamTypeService"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.PropertyResolutionDescriptor.#ctor(System.String,com.espertech.esper.events.EventType,System.String,System.Int32,System.Type)">
            <summary> Ctor.</summary>
            <param name="streamName">is the stream name
            </param>
            <param name="streamEventType">is the event type of the stream where the property was found
            </param>
            <param name="propertyName">is the regular name of property
            </param>
            <param name="streamNum">is the number offset of the stream
            </param>
            <param name="propertyType">is the type of the property
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.core.PropertyResolutionDescriptor.StreamName">
            <summary> Returns stream name.</summary>
            <returns> stream name
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.PropertyResolutionDescriptor.StreamEventType">
            <summary> Returns event type of the stream that the property was found in.</summary>
            <returns> stream's event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.PropertyResolutionDescriptor.PropertyName">
            <summary> Returns resolved property name of the property as it exists in a stream.</summary>
            <returns> property name as resolved in a stream
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.PropertyResolutionDescriptor.StreamNum">
            <summary> Returns the number of the stream the property was found in.</summary>
            <returns> stream offset number Starting at zero to N-1 where N is the number of streams
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.PropertyResolutionDescriptor.PropertyType">
            <summary> Returns the property type of the resolved property.</summary>
            <returns> class of property
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.OrderByProcessorFactory">
            <summary>
            Factory for <see cref="T:com.espertech.esper.epl.core.OrderByProcessor"/> processors.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessorFactory.GetProcessor(System.Collections.Generic.IList{com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},System.Collections.Generic.IList{com.espertech.esper.epl.spec.OrderByItem},com.espertech.esper.epl.agg.AggregationService,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns processor for order-by clauses.
            </summary>
            <param name="selectionList">is a list of select expressions</param>
            <param name="groupByNodes">is a list of group-by expressions</param>
            <param name="orderByList">is a list of order-by expressions</param>
            <param name="aggregationService">is the service for aggregation, ie. building sums and averages per group or overall</param>
            <param name="eventAdapterService">provides event adapters</param>
            <returns>ordering processor instance</returns>
            <throws>com.espertech.esper.epl.expression.ExprValidationException when validation of expressions fails</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.MethodResolutionServiceImpl">
            <summary>
            Implements method resolution.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.#ctor(com.espertech.esper.epl.core.EngineImportService)">
            <summary>Ctor.</summary>
            <param name="engineImportService">is the engine imports</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.MakePlugInAggregator(System.String)">
            <summary>
            Makes the plug in aggregator.
            </summary>
            <param name="functionName">Name of the function.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.ResolveMethod(System.String,System.String,System.Type[])">
            <summary>
            Resolves a given class, method and list of parameter types to a static method.
            </summary>
            <param name="classNameAlias">is the class name to use</param>
            <param name="methodName">is the method name</param>
            <param name="paramTypes">is parameter types match expression sub-nodes</param>
            <returns>method this resolves to</returns>
            <throws>
            EngineImportException if the method cannot be resolved to a visible static method
            </throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.MakeCountAggregator(System.Boolean)">
            <summary>
            Makes a new count-aggregator.
            </summary>
            <param name="isIgnoreNull">is true to ignore nulls, or false to count nulls</param>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.ResolveAggregation(System.String)">
            <summary>
            Returns a plug-in aggregation method for a given configured aggregation function name.
            </summary>
            <param name="functionName">is the aggregation function name</param>
            <returns>aggregation-providing class</returns>
            <throws>EngineImportUndefinedException is the function name cannot be found</throws>
            <throws>
            EngineImportException if there was an error resolving class information
            </throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.MakeSumAggregator(System.Type)">
            <summary>
            Makes a new sum-aggregator.
            </summary>
            <param name="type">is the type to be summed up, i.e. float, long etc.</param>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.MakeDistinctAggregator(com.espertech.esper.epl.agg.AggregationMethod,System.Type)">
            <summary>
            Makes a new distinct-value-aggregator.
            </summary>
            <param name="aggregationMethod">is the inner aggregation method</param>
            <param name="childType">the return type of the inner expression to aggregate, if any</param>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.MakeAvgAggregator">
            <summary>
            Makes a new avg-aggregator.
            </summary>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.MakeAvedevAggregator">
            <summary>
            Makes a new avedev-aggregator.
            </summary>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.MakeMedianAggregator">
            <summary>
            Makes a new median-aggregator.
            </summary>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.MakeMinMaxAggregator(com.espertech.esper.type.MinMaxTypeEnum,System.Type)">
            <summary>
            Makes the min max aggregator.
            </summary>
            <param name="minMaxTypeEnum">The min max type enum.</param>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.MakeStddevAggregator">
            <summary>
            Makes a new stddev-aggregator.
            </summary>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.NewAggregators(com.espertech.esper.epl.agg.AggregationMethod[],com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Returns a new set of aggregators given an existing prototype-set of aggregators for a given group key.
            </summary>
            <param name="prototypes">is the prototypes</param>
            <param name="groupKey">is the key to group-by for</param>
            <returns>new set of aggregators for this group</returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakKeyComparer`1.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            <remark>
            Note: There are actually 9 cases to handle here.
            Let Wa = Alive Weak Reference
            Let Wd = Dead Weak Reference
            Let S  = Strong Reference
            x  | y  | Equals(x,y)
            -------------------------------------------------
            Wa | Wa | comparer.Equals(x.Target, y.Target)
            Wa | Wd | false
            Wa | S  | comparer.Equals(x.Target, y)
            Wd | Wa | false
            Wd | Wd | x == y
            Wd | S  | false
            S  | Wa | comparer.Equals(x, y.Target)
            S  | Wd | false
            S  | S  | comparer.Equals(x, y)
            -------------------------------------------------
            </remark>
        </member>
        <member name="T:com.espertech.esper.compat.ResourceManager">
            <summary>
            Manages access to named resources
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ResourceManager.AddSearchPathElement(System.String)">
            <summary>
            Adds to the search path
            </summary>
            <param name="searchPathElement"></param>
        </member>
        <member name="M:com.espertech.esper.compat.ResourceManager.ResolveResourceFile(System.String,System.String)">
            <summary>
            Resolves a resource and returns the file info.
            </summary>
            <param name="name">The name.</param>
            <param name="searchPath">The search path.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ResourceManager.ResolveResourceFile(System.String)">
            <summary>
            Resolves a resource and returns the file info.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ResourceManager.ResolveResourceURL(System.String)">
            <summary>
            Resolves a resource and the URL for the resource
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ResourceManager.GetResourceAsStream(System.String)">
            <summary>
            Attempts to retrieve the resource identified by the specified
            name as a stream.  If the stream can not be retrieved, this
            method returns null.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ResourceManager.#cctor">
            <summary>
            Initializes the class
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.ResourceManager.SearchPath">
            <summary>
            Gets or sets the search path.
            </summary>
            <value>The search path.</value>
        </member>
        <member name="T:com.espertech.esper.compat.TreeSet`1">
            <summary>
            An extended set that uses a tree-based backing store.
            As such, the set is always sorted.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.TreeSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TreeSet`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.TreeSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TreeSet`1"/> class.
            </summary>
            <param name="sourceData">The source data.</param>
        </member>
        <member name="M:com.espertech.esper.compat.TreeSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TreeSet`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.TreeSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TreeSet`1"/> class.
            </summary>
            <param name="sourceData">The source data.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.TreeSet`1.TailSet(`0)">
            <summary>
            Returns a set that includes all items that are greater than
            or equal to the index value.
            </summary>
            <param name="from">Value to index from.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.TreeSet`1.AddAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all of the items in the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:com.espertech.esper.compat.TreeSet`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:com.espertech.esper.compat.TreeSet`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.TreeSet`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.TreeSet`1.First">
            <summary>
            Gets the first item in the set.
            </summary>
            <value>The first item in the set.</value>
        </member>
        <member name="P:com.espertech.esper.compat.TreeSet`1.Last">
            <summary>
            Gets the last item in the set.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.StddevProjectionExpression">
            <summary>
            Standard deviation of the (distinct) values returned by an expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.StddevProjectionExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without inner expression
            </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.StddevProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project.</summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.StddevProjectionExpression.IsDistinct">
            <summary>Gets or sets the true if the projection considers distinct values only.</summary>
            <returns>true if distinct</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.NotExpression">
            <summary>
            Negates the contained-within subexpression.
            <para>
            Has a single child expression to be negated.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.NotExpression.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="inner">is the expression to negate</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.NotExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.InsertIntoClause">
            <summary>
            An insert-into clause consists of a stream name and column names and an optional stream selector.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.Create(System.String)">
            <summary>Creates the insert-into clause.</summary>
            <param name="streamName">the name of the stream to insert into</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.Create(System.String,System.String[])">
            <summary>Creates the insert-into clause.</summary>
            <param name="streamName">the name of the stream to insert into</param>
            <param name="columns">is a list of column names</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.Create(System.String,System.Collections.Generic.IList{System.String},com.espertech.esper.client.soda.StreamSelector)">
            <summary>Creates the insert-into clause.</summary>
            <param name="streamName">the name of the stream to insert into</param>
            <param name="columns">is a list of column names</param>
            <param name="streamSelector">selects the stream</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="streamName">is the stream name to insert into</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>Ctor.</summary>
            <param name="streamName">is the stream name to insert into</param>
            <param name="columnNames">column names</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>Ctor.</summary>
            <param name="streamName">is the stream name to insert into</param>
            <param name="columnNames">column names</param>
            <param name="isIStream">is true for selecting the insert stream (default)</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.Add(System.String)">
            <summary>Add a column name to the insert-into clause.</summary>
            <param name="columnName">to add</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.InsertIntoClause.IsIStream">
            <summary>
            Returns true if insert (new data) events are fed, or false for remove (old data) events are fed.
            </summary>
            <returns>true for insert stream, false for remove stream</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.InsertIntoClause.StreamName">
            <summary>Gets or sets the name of stream name to use for insert-into stream.</summary>
            <returns>stream name</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.InsertIntoClause.ColumnNames">
            <summary>
            Returns a list of column names specified optionally in the insert-into clause, or empty if none specified.
            </summary>
            <returns>column names or empty list if none supplied</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.Expressions">
            <summary>
            Convenience factory for creating <see cref="T:com.espertech.esper.client.soda.Expression"/> instances.
            <para>
            Provides quick-access methods to create all possible expressions and provides typical parameter lists to each.
            </para>
            <para>
            Note that only the typical parameter lists are provided and expressions can allow adding
            additional parameters.
            </para>
            <para>
            Many expressions, for example logical AND and OR (conjunction and disjunction), allow
            adding an unlimited number of additional sub-expressions to an expression. For those expressions
            there are additional add methods provided.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.ExistsProperty(System.String)">
            <summary>
            Exists-function for use with dynamic properties to test property existence.
            </summary>
            <param name="propertyName">
            name of the property to test whether it exists or not
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Cast(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>
            Cast function, casts the result on an expression to the desired type, or
            returns null if the type cannot be casted to the type.
            <para/>
            The list of types can include fully-qualified class names plus any of the
            primitive type names: byte, char, short, int, long, float, double, bool.
            Alternatively to "System.String" the simple "string" is also permitted.
            <para/>
            Type checks include all superclasses and interfaces of the value returned by the expression.
            </summary>
            <param name="expression">returns the value to cast</param>
            <param name="typeName">is type to cast to</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Cast(System.String,System.String)">
            <summary>
            Cast function, casts the result on an expression to the desired type, or
            returns null if the type cannot be casted to the type.
            <para/>
            The list of types can include fully-qualified class names plus any of the
            primitive type names: byte, char, short, int, long, float, double, bool.
            Alternatively to "System.String" the simple "string" is also permitted.
            <para/>
            Type checks include all superclasses and interfaces of the value returned by the expression.
            </summary>
            <param name="propertyName">name of the property supplying the value to cast</param>
            <param name="typeName">is type to cast to</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.InstanceOf(com.espertech.esper.client.soda.Expression,System.String,System.String[])">
            <summary>
            Instance-of function, tests if the type of the return value of an expression is in a list of types.
            <para>
            The list of types can include fully-qualified class names plus any of the
            primitive type names: byte, char, short, int, long, float, double, bool.
            Alternatively to "System.String" the simple "string" is also permitted.
            </para>
            	<para>
            Type checks include all superclasses and interfaces of the value returned by the expression.
            </para>
            </summary>
            <param name="expression">returns the value to test whether the type returned is any of the  is the function name</param>
            <param name="typeName">is one type to check for</param>
            <param name="typeNames">is optional additional types to check for in a list</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.InstanceOf(System.String,System.String,System.String[])">
            <summary>
            Instance-of function, tests if the type of the return value of a property is in a list of types.
            <para/>
            Useful with dynamic (unchecked) properties to check the type of property returned.
            <para/>
            The list of types can include fully-qualified class names plus any of the
            primitive type names: byte, char, short, int, long, float, double, bool.
            Alternatively to "System.String" the simple "string" is also permitted.
            <para/>
            Type checks include all superclasses and interfaces of the value returned by the expression.
            </summary>
            <param name="propertyName">name of the property supplying the value to test</param>
            <param name="typeName">is one type to check for</param>
            <param name="typeNames">is optional additional types to check for in a list</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.PlugInAggregation(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Plug-in aggregation function.</summary>
            <param name="functionName">is the function name</param>
            <param name="parameter">provides the values to aggregate</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Regexp(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Regular expression.</summary>
            <param name="left">returns the values to match</param>
            <param name="right">returns the value to match against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Regexp(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Regular expression.</summary>
            <param name="left">returns the values to match</param>
            <param name="right">returns the value to match against</param>
            <param name="escape">is the escape character</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Regexp(System.String,System.String)">
            <summary>Regular expression.</summary>
            <param name="property">the name of the property returning values to match</param>
            <param name="regExExpression">a regular expression to match against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Regexp(System.String,System.String,System.String)">
            <summary>Regular expression.</summary>
            <param name="property">the name of the property returning values to match</param>
            <param name="regExExpression">a regular expression to match against</param>
            <param name="escape">is the escape character</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Array">
            <summary>
            Array expression, representing the syntax of "{1, 2, 3}" returning an integer array of 3 elements valued 1, 2, 3.
            </summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.BinaryAnd">
            <summary>Bitwise (binary) AND.</summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.BinaryOr">
            <summary>Bitwise (binary) OR.</summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.BinaryXor">
            <summary>Bitwise (binary) XOR.</summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Min(System.String,System.String,System.String[])">
            <summary>Minimum value per-row function (not aggregating).</summary>
            <param name="propertyOne">the name of a first property to compare</param>
            <param name="propertyTwo">the name of a second property to compare</param>
            <param name="moreProperties">optional additional properties to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Min(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Minimum value per-row function (not aggregating).</summary>
            <param name="exprOne">returns the first value to compare</param>
            <param name="exprTwo">returns the second value to compare</param>
            <param name="moreExpressions">optional additional values to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Max(System.String,System.String,System.String[])">
            <summary>Maximum value per-row function (not aggregating).</summary>
            <param name="propertyOne">the name of a first property to compare</param>
            <param name="propertyTwo">the name of a second property to compare</param>
            <param name="moreProperties">optional additional properties to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Max(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Maximum value per-row function (not aggregating).</summary>
            <param name="exprOne">returns the first value to compare</param>
            <param name="exprTwo">returns the second value to compare</param>
            <param name="moreExpressions">optional additional values to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Coalesce(System.String,System.String,System.String[])">
            <summary>Coalesce.</summary>
            <param name="propertyOne">
            name of the first property returning value to coealesce
            </param>
            <param name="propertyTwo">
            name of the second property returning value to coealesce
            </param>
            <param name="moreProperties">
            name of the optional additional properties returning values to coealesce
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Coalesce(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Coalesce.</summary>
            <param name="exprOne">returns value to coalesce</param>
            <param name="exprTwo">returns value to coalesce</param>
            <param name="moreExpressions">
            returning optional additional values to coalesce
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Constant(System.Object)">
            <summary>Constant.</summary>
            <param name="value">is the constant value</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CaseWhenThen">
            <summary>Case-when-then expression.</summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CaseSwitch(com.espertech.esper.client.soda.Expression)">
            <summary>Case-switch expresssion.</summary>
            <param name="valueToSwitchOn">provides the switch value</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CaseSwitch(System.String)">
            <summary>Case-switch expresssion.</summary>
            <param name="propertyName">
            the name of the property that provides the switch value
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.In(System.String,System.Object[])">
            <summary>
            In-expression that is equivalent to the syntax of "property in (value, value, ... value)".
            </summary>
            <param name="property">is the name of the property</param>
            <param name="values">are the constants to check against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NotIn(System.String,System.Object[])">
            <summary>
            Not-In-expression that is equivalent to the syntax of "property not in (value, value, ... value)".
            </summary>
            <param name="property">is the name of the property</param>
            <param name="values">are the constants to check against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.In(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>
            In-expression that is equivalent to the syntax of "property in (value, value, ... value)".
            </summary>
            <param name="value">provides values to match</param>
            <param name="set">are expressons that provide match-against values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NotIn(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>
            Not-In-expression that is equivalent to the syntax of "property not in (value, value, ... value)".
            </summary>
            <param name="value">provides values to match</param>
            <param name="set">are expressons that provide match-against values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Not(com.espertech.esper.client.soda.Expression)">
            <summary>
            Not expression negates the sub-expression to the not which is expected to return bool-typed values.
            </summary>
            <param name="inner">is the sub-expression</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.StaticMethod(System.String,System.String,System.Object[])">
            <summary>Static method invocation.</summary>
            <param name="className">the name of the class to invoke a method on</param>
            <param name="method">the name of the method to invoke</param>
            <param name="parameters">
            zero, one or more constants that are the parameters to the static method
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.StaticMethod(System.String,System.String,com.espertech.esper.client.soda.Expression[])">
            <summary>Static method invocation.</summary>
            <param name="className">the name of the class to invoke a method on</param>
            <param name="method">the name of the method to invoke</param>
            <param name="parameters">
            zero, one or more expressions that provide parameters to the static method
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Prior(System.Int32,System.String)">
            <summary>Prior function.</summary>
            <param name="index">the numeric index of the prior event</param>
            <param name="property">the name of the property to obtain the value for</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Previous(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Previous function.</summary>
            <param name="expression">provides the numeric index of the previous event</param>
            <param name="property">the name of the property to obtain the value for</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Previous(System.Int32,System.String)">
            <summary>Previous function.</summary>
            <param name="index">the numeric index of the previous event</param>
            <param name="property">the name of the property to obtain the value for</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.BetweenProperty(System.String,System.String,System.String)">
            <summary>Between.</summary>
            <param name="property">the name of the property supplying data points.</param>
            <param name="lowBoundaryProperty">
            the name of the property supplying lower boundary.
            </param>
            <param name="highBoundaryProperty">
            the name of the property supplying upper boundary.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Between(System.String,System.Object,System.Object)">
            <summary>Between.</summary>
            <param name="property">
            the name of the property that returns the datapoint to check range
            </param>
            <param name="lowBoundary">constant indicating the lower boundary</param>
            <param name="highBoundary">constant indicating the upper boundary</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Between(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Between.</summary>
            <param name="datapoint">returns the datapoint to check range</param>
            <param name="lowBoundary">returns values for the lower boundary</param>
            <param name="highBoundary">returns values for the upper boundary</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Range(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,System.Boolean,System.Boolean)">
            <summary>Between (or range).</summary>
            <param name="datapoint">returns the datapoint to check range</param>
            <param name="lowBoundary">returns values for the lower boundary</param>
            <param name="highBoundary">returns values for the upper boundary</param>
            <param name="isLowIncluded">
            true to indicate lower boundary itself is included in the range
            </param>
            <param name="isHighIncluded">
            true to indicate upper boundary itself is included in the range
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Or">
            <summary>Logical OR disjunction. Use add methods to add expressions.</summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Or(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Logical OR disjunction.</summary>
            <param name="first">an expression returning values to junction</param>
            <param name="second">an expression returning values to junction</param>
            <param name="expressions">
            an optional list of expressions returning values to junction
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.And">
            <summary>Logical AND conjunction. Use add methods to add expressions.</summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.And(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Logical AND conjunction.</summary>
            <param name="first">an expression returning values to junction</param>
            <param name="second">an expression returning values to junction</param>
            <param name="expressions">
            an optional list of expressions returning values to junction
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Ge(System.String,System.Object)">
            <summary>Greater-or-equal between a property and a constant.</summary>
            <param name="propertyName">
            the name of the property providing left hand side values
            </param>
            <param name="value">is the constant to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Ge(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Greater-or-equals between expression results.</summary>
            <param name="left">the expression providing left hand side values</param>
            <param name="right">the expression providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.GeProperty(System.String,System.String)">
            <summary>Greater-or-equal between properties.</summary>
            <param name="propertyLeft">
            the name of the property providing left hand side values
            </param>
            <param name="propertyRight">
            the name of the property providing right hand side values
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Gt(System.String,System.Object)">
            <summary>Greater-then between a property and a constant.</summary>
            <param name="propertyName">
            the name of the property providing left hand side values
            </param>
            <param name="value">is the constant to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Gt(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Greater-then between expression results.</summary>
            <param name="left">the expression providing left hand side values</param>
            <param name="right">the expression providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.GtProperty(System.String,System.String)">
            <summary>Greater-then between properties.</summary>
            <param name="propertyLeft">
            the name of the property providing left hand side values
            </param>
            <param name="propertyRight">
            the name of the property providing right hand side values
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Le(System.String,System.Object)">
            <summary>Less-or-equals between a property and a constant.</summary>
            <param name="propertyName">
            the name of the property providing left hand side values
            </param>
            <param name="value">is the constant to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.LeProperty(System.String,System.String)">
            <summary>Less-or-equal between properties.</summary>
            <param name="propertyLeft">
            the name of the property providing left hand side values
            </param>
            <param name="propertyRight">
            the name of the property providing right hand side values
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Le(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Less-or-equal between expression results.</summary>
            <param name="left">the expression providing left hand side values</param>
            <param name="right">the expression providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Lt(System.String,System.Object)">
            <summary>Less-then between a property and a constant.</summary>
            <param name="propertyName">
            the name of the property providing left hand side values
            </param>
            <param name="value">is the constant to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.LtProperty(System.String,System.String)">
            <summary>Less-then between properties.</summary>
            <param name="propertyLeft">
            the name of the property providing left hand side values
            </param>
            <param name="propertyRight">
            the name of the property providing right hand side values
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Lt(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Less-then between expression results.</summary>
            <param name="left">the expression providing left hand side values</param>
            <param name="right">the expression providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Eq(System.String,System.Object)">
            <summary>Equals between a property and a constant.</summary>
            <param name="propertyName">
            the name of the property providing left hand side values
            </param>
            <param name="value">is the constant to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.EqProperty(System.String,System.String)">
            <summary>Equals between properties.</summary>
            <param name="propertyLeft">
            the name of the property providing left hand side values
            </param>
            <param name="propertyRight">
            the name of the property providing right hand side values
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Eq(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Equals between expression results.</summary>
            <param name="left">the expression providing left hand side values</param>
            <param name="right">the expression providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.IsNotNull(System.String)">
            <summary>Not-null test.</summary>
            <param name="property">
            the name of the property supplying the value to check for null
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.IsNotNull(com.espertech.esper.client.soda.Expression)">
            <summary>Not-null test.</summary>
            <param name="expression">supplies the value to check for null</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Property(System.String)">
            <summary>
            Property value.
            <para/>
            An expression that returns the value of the named property.
            <para/>
            Nested, indexed or mapped properties follow the documented sytnax.
            </summary>
            <param name="propertyName">
            is the name of the property to return the value for.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Like(System.String,System.String)">
            <summary>SQL-Like.</summary>
            <param name="propertyName">the name of the property providing values to match</param>
            <param name="value">is the string to match against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Like(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>SQL-Like.</summary>
            <param name="left">provides value to match</param>
            <param name="right">provides string to match against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Like(System.String,System.Object,System.String)">
            <summary>SQL-Like.</summary>
            <param name="propertyName">the name of the property providing values to match</param>
            <param name="value">is the string to match against</param>
            <param name="escape">the escape Character(s)</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Like(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>SQL-Like.</summary>
            <param name="left">provides value to match</param>
            <param name="right">provides string to match against</param>
            <param name="escape">the escape Character(s)</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Avg(System.String)">
            <summary>Average aggregation function.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Avg(com.espertech.esper.client.soda.Expression)">
            <summary>Average aggregation function.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.AvgDistinct(System.String)">
            <summary>Average aggregation function considering distinct values only.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.AvgDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Average aggregation function considering distinct values only.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Median(System.String)">
            <summary>Median aggregation function.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Median(com.espertech.esper.client.soda.Expression)">
            <summary>Median aggregation function.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.MedianDistinct(System.String)">
            <summary>Median aggregation function considering distinct values only.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.MedianDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Median aggregation function considering distinct values only.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Stddev(System.String)">
            <summary>Standard deviation aggregation function.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Stddev(com.espertech.esper.client.soda.Expression)">
            <summary>Standard deviation aggregation function.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.StddevDistinct(System.String)">
            <summary>Standard deviation function considering distinct values only.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.StddevDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Standard deviation function considering distinct values only.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Avedev(System.String)">
            <summary>Mean deviation aggregation function.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Avedev(com.espertech.esper.client.soda.Expression)">
            <summary>Mean deviation aggregation function.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.AvedevDistinct(System.String)">
            <summary>Mean deviation function considering distinct values only.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.AvedevDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Mean deviation function considering distinct values only.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Sum(System.String)">
            <summary>Sum aggregation function.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Sum(com.espertech.esper.client.soda.Expression)">
            <summary>Sum aggregation function.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SumDistinct(System.String)">
            <summary>Sum aggregation function considering distinct values only.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SumDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Sum aggregation function considering distinct values only.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CountStar">
            <summary>
            Count aggregation function not counting values, equivalent to "count(*)".
            </summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Count(System.String)">
            <summary>Count aggregation function.</summary>
            <param name="propertyName">
            name of the property providing the values to count.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Count(com.espertech.esper.client.soda.Expression)">
            <summary>Count aggregation function.</summary>
            <param name="expression">provides the values to count.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CountDistinct(System.String)">
            <summary>Count aggregation function considering distinct values only.</summary>
            <param name="propertyName">
            name of the property providing the values to count.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CountDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Count aggregation function considering distinct values only.</summary>
            <param name="expression">provides the values to count.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Min(System.String)">
            <summary>Minimum aggregation function.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Min(com.espertech.esper.client.soda.Expression)">
            <summary>Minimum aggregation function.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.MinDistinct(System.String)">
            <summary>Minimum aggregation function considering distinct values only.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.MinDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Minimum aggregation function considering distinct values only.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Max(System.String)">
            <summary>Maximum aggregation function.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Max(com.espertech.esper.client.soda.Expression)">
            <summary>Maximum aggregation function.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.MaxDistinct(System.String)">
            <summary>Maximum aggregation function considering distinct values only.</summary>
            <param name="propertyName">
            name of the property providing the values to aggregate.
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.MaxDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Maximum aggregation function considering distinct values only.</summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Modulo(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Modulo.</summary>
            <param name="left">the expression providing left hand values</param>
            <param name="right">the expression providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Modulo(System.String,System.String)">
            <summary>Modulo.</summary>
            <param name="propertyLeft">
            the name of the property providing left hand values
            </param>
            <param name="propertyRight">
            the name of the property providing right hand values
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Minus(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Subtraction.</summary>
            <param name="left">the expression providing left hand values</param>
            <param name="right">the expression providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Minus(System.String,System.String)">
            <summary>Subtraction.</summary>
            <param name="propertyLeft">
            the name of the property providing left hand values
            </param>
            <param name="propertyRight">
            the name of the property providing right hand values
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Plus(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Addition.</summary>
            <param name="left">the expression providing left hand values</param>
            <param name="right">the expression providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Plus(System.String,System.String)">
            <summary>Addition.</summary>
            <param name="propertyLeft">
            the name of the property providing left hand values
            </param>
            <param name="propertyRight">
            the name of the property providing right hand values
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Multiply(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Multiplication.</summary>
            <param name="left">the expression providing left hand values</param>
            <param name="right">the expression providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Multiply(System.String,System.String)">
            <summary>Multiplication.</summary>
            <param name="propertyLeft">
            the name of the property providing left hand values
            </param>
            <param name="propertyRight">
            the name of the property providing right hand values
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Divide(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Division.</summary>
            <param name="left">the expression providing left hand values</param>
            <param name="right">the expression providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Divide(System.String,System.String)">
            <summary>Division.</summary>
            <param name="propertyLeft">
            the name of the property providing left hand values
            </param>
            <param name="propertyRight">
            the name of the property providing right hand values
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Concat(System.String,System.String[])">
            <summary>Concatenation.</summary>
            <param name="property">the name of property returning values to concatenate</param>
            <param name="properties">
            the names of additional properties returning values to concatenate
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Subquery(com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>Subquery.</summary>
            <param name="model">is the object model of the subquery</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SubqueryIn(System.String,com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Subquery with in-clause, represents the syntax of "value in (select ... from ...)".
            </summary>
            <param name="property">
            is the name of the property that returns the value to match against the values returned by the subquery
            </param>
            <param name="model">is the object model of the subquery</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SubqueryNotIn(System.String,com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Subquery with not-in-clause, represents the syntax of "value not in (select ... from ...)".
            </summary>
            <param name="property">
            is the name of the property that returns the value to match against the values returned by the subquery
            </param>
            <param name="model">is the object model of the subquery</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SubqueryExists(com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Subquery with exists-clause, represents the syntax of "select * from ... where exists (select ... from ...)".
            </summary>
            <param name="model">is the object model of the lookup</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SubqueryIn(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Subquery with in-clause, represents the syntax of "value in (select ... from ...)".
            </summary>
            <param name="expression">returns the value to match against the values returned by the lookup</param>
            <param name="model">is the object model of the lookup</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SubqueryNotIn(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Subquery with not-in-clause, represents the syntax of "value not in (select ... from ...)".
            </summary>
            <param name="expression">returns the value to match against the values returned by the lookup</param>
            <param name="model">is the object model of the lookup</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.ToPropertyExpressions(System.String[])">
            <summary>
            Returns a list of expressions returning property values for the property names passed in.
            </summary>
            <param name="properties">is a list of property names</param>
            <returns>list of property value expressions</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.GetPropExpr(System.String)">
            <summary>
            Returns an expression returning the propertyName value for the propertyName name passed in.
            </summary>
            <param name="propertyName">the name of the property returning property values</param>
            <returns>expression</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.Expressions.CurrentTimestamp">
            <summary>
            Current system time supplies internal-timer provided time or
            the time provided by external timer events.
            </summary>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.CountProjectionExpression">
            <summary>
            Count of the (distinct) values returned by an expression, equivalent to "count(distinct property)"
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CountProjectionExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without inner expression
            </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CountProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project.</summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CountProjectionExpression.IsDistinct">
            <summary>
            Gets or sets the flag indicating whether the projection considers
            distinct values only.
            </summary>
            <returns>true if distinct</returns>
        </member>
        <member name="T:com.espertech.esper.client.EPRuntime">
            <summary>
             Interface to event stream processing runtime services.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.ResetStats">
            <summary>
            Reset number of events received and emitted
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.SendEvent(System.Object)">
            <summary>
            Send an event represented by an object to the event stream processing runtime.
            Use the route method for sending events into the runtime from within UpdateListener code.
            </summary>
            <param name="_object">is the event to sent to the runtime</param>
            <throws>  EPException is thrown when the processing of the event lead to an error </throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.SendEvent(com.espertech.esper.compat.Map{System.String,System.Object},System.String)">
            <summary>
            Send a map containing event property values to the event stream processing runtime.
            Use the route method for sending events into the runtime from within UpdateListener code.
            </summary>
            <param name="map">map that contains event property values. Keys are expected to be of type String while values
            can be of any type. Keys and values should match those declared via Configuration for the given eventTypeAlias.</param>
            <param name="eventTypeAlias">the alias for the (property name, property type) information for this map</param>
            <throws>  EPException - when the processing of the event leads to an error </throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.SendEvent(System.Xml.XmlNode)">
            <summary>
            Send an event represented by a DOM node to the event stream processing runtime.
            Use the route method for sending events into the runtime from within UpdateListener code.
            </summary>
            <param name="node">is the DOM node as an event</param>
            <throws>  EPException is thrown when the processing of the event lead to an error </throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.GetSender(System.String)">
            <summary>
            Gets a delegate that can be used to send mapped events to an alias.
            </summary>
            <param name="eventTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.Emit(System.Object)">
            <summary>
            Emit an event object to any registered EmittedListener instances listening to the default channel.
            </summary>
            <param name="_object">to be emitted to the default channel</param>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.Emit(System.Object,System.String)">
            <summary>
            Emit an event object to any registered EmittedListener instances on the specified channel.
            Event listeners listening to all channels as well as those listening to the specific channel
            are called. Supplying a null value in the channel has the same result as the Emit(Object object) method.
            </summary>
            <param name="_object">to be emitted</param>
            <param name="channel">channel to emit the object to, or null if emitting to the default channel</param>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.AddEmittedListener(com.espertech.esper.client.EmittedListener,System.String)">
            <summary>
            Register an object that listens for events emitted from the event stream processing runtime on the
            specified channel. A null value can be supplied for the channel in which case the
            emit listener will be invoked for events emitted an any channel.
            </summary>
            <param name="listener">called when an event is emitted by the runtime.</param>
            <param name="channel">is the channel to add the listener to, a null value can be used to listen to events emitted
            on all channels</param>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.ClearEmittedListeners">
            <summary>
            Deregister all emitted event listeners.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.Route(System.Object)">
            <summary>
            Route the event object back to the event stream processing runtime for internal dispatching.
            The route event is processed just like it was sent to the runtime, that is any
            active expressions seeking that event receive it. The routed event has priority over other
            events sent to the runtime. In a single-threaded application the routed event is
            processed before the next event is sent to the runtime through the
            EPRuntime.sendEvent method.
            </summary>
            <param name="_event">to route internally for processing by the event stream processing runtime</param>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.GetVariableValue(System.String)">
            <summary>
            Returns the current variable value. A null value is a valid value for a variable.
            </summary>
            <param name="variableName">is the name of the variable to return the value for</param>
            <returns>current variable value</returns>
            <throws>VariableNotFoundException if a variable by that name has not been declared</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.GetVariableValue(com.espertech.esper.compat.Set{System.String})">
            <summary>
            Returns current variable values for each of the variable names passed in,guaranteeing consistency in the face of concurrent updates to the variables.
            </summary>
            <param name="variableNames">is a set of variable names for which to return values</param>
            <returns>map of variable name and variable value</returns>
            <throws>VariableNotFoundException if any of the variable names has not been declared</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.GetVariableValueAll">
            <summary>
            Returns current variable values for all variables,guaranteeing consistency in the face of concurrent updates to the variables.
            </summary>
            <returns>map of variable name and variable value</returns>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.SetVariableValue(System.String,System.Object)">
            <summary>
            Sets the value of a single variable.
            </summary>
            <param name="variableName">is the name of the variable to change the value of</param>
            <param name="variableValue">is the new value of the variable, with null an allowed value</param>
            <throws>VariableValueException if the value does not match variable type or cannot be safely coercedto the variable type</throws>
            <throws>VariableNotFoundException if the variable name has not been declared</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.SetVariableValue(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Sets the value of multiple variables in one update, applying all or none of the changesto variable values in one atomic transaction.
            </summary>
            <param name="variableValues">is the map of variable name and variable value, with null an allowed value</param>
            <throws>VariableValueException if any value does not match variable type or cannot be safely coercedto the variable type</throws>
            <throws>VariableNotFoundException if any of the variable names has not been declared</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.String)">
            <summary>
            Returns a facility to process event objects that are of a known type.
            <para/>
            Given an event type alias this method returns a sender that allows to send in event objects of that
            type. The event objects send in via the event senderare expected to match the event type, thus the
            event sender doesnot inspect the event object other then perform basic checking.
            <para/>
            For events backed by a type (events), the sender ensures that theobject send in matches in class,
            or implements or extends the class underlying the event typefor the given event type alias name.
            <para/>
            For events backed by a DataMap (Map events), the sender does not perform any checking other then
            checking that the event object indeed implements Map.
            <para/>
            For events backed by a System.Xml.XmlNode (XML DOM events), the sender checks that the root element name
            indeed does match the root element name for the event type alias.
            </summary>
            <param name="eventTypeAlias">the name of the event type</param>
            <returns>
            sender for fast-access processing of event objects of known type (and content)
            </returns>
            <throws>EventTypeException thrown to indicate that the alias does not exist</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            For use with plug-in event representations, returns a facility to process event objects that
            are of one of a number of typesthat one or more of the registered plug-in event representation
            extensions can reflect upon and provide anevent for.
            </summary>
            <param name="uris">the URIs that specify which plug-in event representations may process an event object.
            <para/>
            URIs do not need to match event representation URIs exactly, a child (hierarchical) match is enough
            for an event representation to participate.
            <para/>
            The order of URIs is relevant as each event representation's factory is asked in turn to
            process the event, until the first factory processes the event.
            </param>
            <returns>
            sender for processing of event objects of one of the plug-in event representations
            </returns>
            <throws>EventTypeException thrown to indicate that the URI list was invalid</throws>
        </member>
        <member name="P:com.espertech.esper.client.EPRuntime.NumEventsReceived">
            <summary>
            Number of events received over the lifetime of the event stream processing runtime, or
            since the last ResetStats() call
            </summary>
            <value>The num events received.</value>
            <returns>number of events received</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPRuntime.NumEventsEmitted">
            <summary>
            Number of events emitted over the lifetime of the event stream processing runtime, or
            since the last ResetStats() call
            </summary>
            <value>The num events emitted.</value>
            <returns>number of events emitted</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPRuntime.UnmatchedListener">
            <summary>
            Gets or sets a listener to receive events that are unmatched by any statement.
            <para>
            Events that can be unmatched are all events that are send into a runtime via one
            of the sendEvent methods, or that have been generated via insert-into clause.
            </para>
            	<para>
            For an event to be unmatched by any statement, the event must not match any
            statement's event stream filter criteria (a where-clause is NOT a filter criteria for a stream, as below).
            </para>
            	<para>
            Note: In the following statement a MyEvent event does always match
            this statement's event stream filter criteria, regardless of the value of the 'quantity' property.
            <pre>select * from MyEvent where quantity &gt; 5</pre>
            In the following statement only a MyEvent event with a 'quantity' property value of 5 or less does not match
            this statement's event stream filter criteria:
            <pre>select * from MyEvent(quantity &gt; 5)</pre>
            	</para>
            	<para>
            For patterns, if no pattern sub-expression is active for such event, the event is also unmatched.
            </para>
            </summary>
            <value>The unmatched listener.</value>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.UpdateStrategyDeclared">
            <summary>
            Strategy for merging update properties using all declared property's values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategyDeclared.#ctor(com.espertech.esper.events.vaevent.RevisionSpec)">
            <summary>Ctor. </summary>
            <param name="spec">the specification</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionPropertyTypeDesc">
            <summary>
            Property descriptor for use by revision event types to maintain access to
            revision event properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionPropertyTypeDesc.#ctor(com.espertech.esper.events.EventPropertyGetter,com.espertech.esper.events.vaevent.RevisionGetterParameters,System.Type)">
            <summary>Ctor. </summary>
            <param name="revisionGetter">getter to use</param>
            <param name="revisionGetterParams">getter parameters</param>
            <param name="propertyType">type of the property</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionPropertyTypeDesc.RevisionGetter">
            <summary>Returns the getter for the property on the revision event type. </summary>
            <returns>getter</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionPropertyTypeDesc.RevisionGetterParams">
            <summary>Returns parameters for the getter for the property on the revision event type. </summary>
            <returns>getter parameters</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionPropertyTypeDesc.PropertyType">
            <summary>Returns property type. </summary>
            <returns>type</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared">
            <summary>Revision event bean for the overlayed scheme. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.#ctor(com.espertech.esper.events.vaevent.RevisionEventType,com.espertech.esper.events.EventBean)">
            <summary>Ctor. </summary>
            <param name="eventType">revision event type</param>
            <param name="underlying">event wrapped</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.GetVersionedValue(com.espertech.esper.events.vaevent.RevisionGetterParameters)">
            <summary>Returns a versioned value. </summary>
            <param name="paramList">getter parameters</param>
            <returns>value</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.IsLatest">
            <summary>Is true if latest event, or false if not. </summary>
            <returns>indicator if latest</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.Holders">
            <summary>
            Sets versions.
            </summary>
            <value>The holders.</value>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.LastBaseEvent">
            <summary>Gets or sets the last base event. </summary>
            <returns>base event</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.UnderlyingFullOrDelta">
            <summary>Returns wrapped event. </summary>
            <returns>wrapped event</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.Key">
            <summary>Returns the key. </summary>
            <returns>key</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.RevisionEventType">
            <summary>Returns the revision event type. </summary>
            <returns>type</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionBeanHolder">
            <summary>Holds revisions for property groups in an overlay strategy. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionBeanHolder.#ctor(System.Int64,com.espertech.esper.events.EventBean,com.espertech.esper.events.EventPropertyGetter[])">
            <summary>Ctor. </summary>
            <param name="version">the current version</param>
            <param name="eventBean">the new event</param>
            <param name="getters">the getters</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionBeanHolder.GetValueForProperty(System.Int32)">
            <summary>Returns a property value. </summary>
            <param name="propertyNumber">number of property</param>
            <returns>value</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionBeanHolder.Version">
            <summary>Returns current version number. </summary>
            <returns>version</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionBeanHolder.EventBean">
            <summary>Returns the contributing event. </summary>
            <returns>event</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionBeanHolder.Getters">
            <summary>Returns getters for event property access. </summary>
            <returns>getters</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.FastAccessorPropertyDescriptor">
            <summary>
            Provides a simple property descriptor that is obtained through a
            method.  The method should be a read method that has no parameters
            and returns an object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates whether the value of this property should be
            persisted.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Call the accessor method
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Can not override values with the simple accessor model
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value of the property
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.GetHashCode">
            <summary>
            Returns a hahscode for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.#ctor(System.String,CGLib.FastMethod)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.#ctor(System.String,System.Reflection.MethodInfo)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.#ctor(CGLib.FastMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.property.FastAccessorPropertyDescriptor"/> class.
            </summary>
            <param name="accessorMethod">The accessor method.</param>
        </member>
        <member name="P:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.IsReadOnly">
            <summary>
            Indicates whether or not the descriptor is readonly
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of component this property is bound to
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.PropertyType">
            <summary>
            Gets the return type of the property
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowServiceImpl">
            <summary>
            This service hold for each named window a dedicated processor and a lock to the named window.
            This lock is shrared between the named window and on-delete statements.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.named.NamedWindowServiceConstants.ERROR_MSG_DATAWINDOWS">
            <summary>Error message for data windows required.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.named.NamedWindowServiceConstants.ERROR_MSG_NO_DATAWINDOW_ALLOWED">
            <summary>Error message for no data window allowed.</summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowService">
            <summary>
            Service to manage named window dispatches, locks and processors on an engine level.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.IsNamedWindow(System.String)">
            <summary>Returns true to indicate that the name is a named window.</summary>
            <param name="name">is the window name</param>
            <returns>true if a named window, false if not a named window</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.AddProcessor(System.String,com.espertech.esper.events.EventType,com.espertech.esper.core.EPStatementHandle,com.espertech.esper.core.StatementResultService,com.espertech.esper.events.vaevent.ValueAddEventProcessor)">
            <summary>Create a new named window.</summary>
            <param name="name">window name</param>
            <param name="eventType">the event type of the window</param>
            <param name="createWindowStmtHandle">is the handle and lock of the create-named-window statement</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
            <param name="revisionProcessor">handles update events</param>
            <returns>processor for the named window</returns>
            <throws>ViewProcessingException if the named window already exists</throws>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.GetProcessor(System.String)">
            <summary>Returns the processing instance for a given named window.</summary>
            <param name="name">window name</param>
            <returns>processor for the named window</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.RemoveProcessor(System.String)">
            <summary>
            Upon destroy of the named window creation statement, the named window processor must be removed.
            </summary>
            <param name="name">is the named window name</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.Dispatch">
            <summary>
            Dispatch events of the insert and remove stream of named windows to consumers, as part of the
            main event processing or dispatch loop.
            </summary>
            <returns>send events to consuming statements</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.AddDispatch(com.espertech.esper.epl.named.NamedWindowDeltaData,com.espertech.esper.compat.Map{com.espertech.esper.core.EPStatementHandle,System.Collections.Generic.IList{com.espertech.esper.epl.named.NamedWindowConsumerView}})">
            <summary>
            For use to add a result of a named window that must be dispatched to consuming views.
            </summary>
            <param name="delta">is the result to dispatch</param>
            <param name="consumers">
            is the destination of the dispatch, a map of statements to one or more consuming views
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.GetNamedWindowLock(System.String)">
            <summary>
            Returns the statement lock for the named window, to be shared with on-delete statements for the same named window.
            </summary>
            <param name="windowName">is the window name</param>
            <returns>
            the lock for the named window, or null if the window dos not yet exists
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.AddNamedWindowLock(System.String,com.espertech.esper.util.ManagedLock)">
            <summary>Sets the lock to use for a named window.</summary>
            <param name="windowName">is the named window name</param>
            <param name="statementResourceLock">
            is the statement lock for the create window statement
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.Destroy">
            <summary>Clear out the service.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowService.NamedWindows">
            <summary>Returns the names of all named windows known.</summary>
            <returns>named window names</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowServiceImpl.#ctor(com.espertech.esper.core.StatementLockFactory,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Ctor.
            </summary>
            <param name="statementLockFactory">statement lock factory</param>
            <param name="variableService">is for variable access</param>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowServiceImpl.NamedWindows">
            <summary>
            Returns the names of all named windows known.
            </summary>
            <value></value>
            <returns>named window names</returns>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowIndexRepository">
             <summary>
             A repository of index tables for use with a single named window and all it's deleting statements that
             may use the indexes to correlate triggering events with indexed events of the named window.
            
             Maintains index tables and keeps a reference count for user. Allows reuse of indexes for multiple
             deleting statements.
             </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowIndexRepository.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowIndexRepository.AddTable(com.espertech.esper.epl.lookup.JoinedPropDesc[],System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean},com.espertech.esper.events.EventType,System.Boolean)">
            <summary>
            Create a new index table or use an existing index table, by matching the
            join descriptor properties to an existing table.
            </summary>
            <param name="joinedPropDesc">
            must be in sorted natural order and define the properties joined
            </param>
            <param name="prefilledEvents">
            is the events to enter into a new table, if a new table is created
            </param>
            <param name="indexedType">is the type of event to hold in the index</param>
            <param name="mustCoerce">is an indicator whether coercion is required or not.</param>
            <returns>new or existing index table</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowIndexRepository.RemoveTableReference(com.espertech.esper.epl.join.table.EventTable)">
            <summary>
            Remove a reference to an index table, decreasing its reference count.
            If the table is no longer used, discard it and no longer update events into the index.
            </summary>
            <param name="table">to remove a reference to</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowIndexRepository.Destroy">
            <summary>Destroy indexes.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowIndexRepository.Tables">
            <summary>Returns a list of current index tables in the repository.</summary>
            <returns>index tables</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.PollResultIndexer">
            <summary>
            A delegate that mimics the behavior of the PollResultIndexStrategy.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.ProxyPollResultIndexingStrategy">
            <summary>
            An implementation of the PatternMatchCallback that proxies the
            interface through a delegate.
            </summary>
            
        </member>
        <member name="M:com.espertech.esper.epl.join.ProxyPollResultIndexingStrategy.#ctor(com.espertech.esper.epl.join.PollResultIndexer)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.join.ProxyPollResultIndexingStrategy"/> class.
            </summary>
            <param name="_delegate">The _delegate.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.ProxyPollResultIndexingStrategy.Index(System.Collections.Generic.IList{com.espertech.esper.events.EventBean},System.Boolean)">
            <summary>
            Build and index of a poll result.
            </summary>
            <param name="pollResult">result of a poll operation</param>
            <param name="isActiveCache">true to indicate that caching is active and therefore index building makes sense as
            the index structure is not a throw-away.</param>
            <returns>indexed collection of poll results</returns>
        </member>
        <member name="T:com.espertech.esper.core.UpdateDispatchFutureWait">
            <summary>
            UpdateDispatchFutureWait can be added to a dispatch queue that is thread-local. It represents
            is a stand-in for a future dispatching of a statement result to statement listeners.
            <para>
            UpdateDispatchFutureWait is aware of future and past dispatches:
            (newest) DF3   &lt;--&gt;   DF2  &lt;--&gt;  DF1  (oldest)
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchFutureWait.#ctor(com.espertech.esper.core.UpdateDispatchViewBlockingWait,com.espertech.esper.core.UpdateDispatchFutureWait,System.Int64)">
            <summary>
            Ctor.
            </summary>
            <param name="view">is the blocking dispatch view through which to execute a dispatch</param>
            <param name="earlier">is the older future</param>
            <param name="msecTimeout">is the timeout period to wait for listeners to complete a prior dispatch</param>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchFutureWait.#ctor">
            <summary>
            Ctor - use for the first future to indicate completion.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.UpdateDispatchFutureWait.SetLater(com.espertech.esper.core.UpdateDispatchFutureWait)">
            <summary>
            Hand a later future to the dispatch to use for indicating completion via notify.
            </summary>
            <param name="later">is the later dispatch</param>
        </member>
        <member name="P:com.espertech.esper.core.UpdateDispatchFutureWait.IsCompleted">
            <summary>
            Returns true if the dispatch completed for this future.
            </summary>
            <value>
            	<c>true</c> if this instance is completed; otherwise, <c>false</c>.
            </value>
            <returns>true for completed, false if not</returns>
        </member>
        <member name="T:com.espertech.esper.core.InsertIntoLatchWait">
            <summary>
            A suspend-and-notify implementation of a latch for use in guaranteeing delivery between
            a single event produced by a single statement and consumable by another statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.InsertIntoLatchWait.#ctor(com.espertech.esper.core.InsertIntoLatchWait,System.Int64,System.Object)">
            <summary>Ctor.</summary>
            <param name="earlier">
            the latch before this latch that this latch should be waiting for
            </param>
            <param name="msecTimeout">the timeout after which delivery occurs</param>
            <param name="payload">the payload is an event to deliver</param>
        </member>
        <member name="M:com.espertech.esper.core.InsertIntoLatchWait.#ctor">
            <summary>Ctor - use for the first and unused latch to indicate completion.</summary>
        </member>
        <member name="M:com.espertech.esper.core.InsertIntoLatchWait.SetLater(com.espertech.esper.core.InsertIntoLatchWait)">
            <summary>Hand a later latch to use for indicating completion via notify.</summary>
            <param name="later">is the later latch</param>
        </member>
        <member name="M:com.espertech.esper.core.InsertIntoLatchWait.Await">
            <summary>Blcking call that returns only when the earlier latch completed.</summary>
            <returns>payload of the latch</returns>
        </member>
        <member name="M:com.espertech.esper.core.InsertIntoLatchWait.Done">
            <summary>
            Called to indicate that the latch completed and a later latch can start.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.InsertIntoLatchWait.IsCompleted">
            <summary>Returns true if the dispatch completed for this future.</summary>
            <returns>true for completed, false if not</returns>
        </member>
        <member name="T:com.espertech.esper.core.EPRuntimeSPI">
            <summary>SPI interface of the runtime exposes fire-and-forget, non-continuous query functionality. </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeSPI.ExecuteQuery(System.String)">
            <summary>Execute a free-form EPL dynamically, non-continuously, in a fire-and-forget fashion, against named windows. </summary>
            <param name="epl">is the EPL to execute</param>
            <returns>query result</returns>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeSPI.PrepareQuery(System.String)">
            <summary>Prepare a non-continuous, fire-and-forget query for repeated execution. </summary>
            <param name="epl">to prepare</param>
            <returns>proxy to execute upon, that also provides the event type of the returned results</returns>
        </member>
        <member name="M:com.espertech.esper.compat.SetUtil.Union``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Creates the union of two sets.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set1">The set1.</param>
            <param name="set2">The set2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.SetUtil.Intersect``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Creates the intersection of two sets.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set1">The set1.</param>
            <param name="set2">The set2.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInEventRepresentation">
            <summary>
            Configuration object for plug-in event representations.
             </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInEventRepresentation.EventRepresentationTypeName">
            <summary>
            Gets or sets the class name of the class providing the pluggable event representation.
            </summary>
            <value>The name of the event representation type.</value>
            <returns>class name of class implementing <see cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/></returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInEventRepresentation.Initializer">
            <summary>
            Gets or sets the optional initialization or configuration information for the plug-in event
            representation.
            </summary>
            <value>The initializer.</value>
            <returns>
            any configuration object specific to the event representation, or a XML string
            if supplied via configuration XML file, or null if none supplied
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeLengthBatchView">
            <summary>
            A data view that aggregates events in a stream and releases them in one batch if either one of these
            conditions is reached, whichever comes first: One, a time interval passes. Two, a given number of events collected.
            <para/>
            The view releases the batched events after the interval or number of events as new data to child views. The prior batch if
            not empty is released as old data to child view. The view DOES release intervals with no old or new data.
            It does not collect old data published by a parent view.
            If there are no events in the current and prior batch, the view WILL invoke the update method of child views.
            <para/>
            The view starts the first interval when the view is created.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeLengthBatchView.#ctor(com.espertech.esper.view.window.TimeLengthBatchViewFactory,com.espertech.esper.core.StatementContext,System.Int64,System.Int64,System.Boolean,System.Boolean,com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>Constructor.</summary>
            <param name="msecIntervalSize">
            is the number of milliseconds to batch events for
            </param>
            <param name="numberOfEvents">is the event count before the batch fires off</param>
            <param name="viewUpdatedCollection">
            is a collection that the view must update when receiving events
            </param>
            <param name="timeBatchViewFactory">for copying this view in a group-by</param>
            <param name="forceOutput">
            is true if the batch should produce empty output if there is no value to output following time intervals
            </param>
            <param name="statementContext">is required view services</param>
            <param name="isStartEager">is true for start-eager</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeLengthBatchView.SendBatch(System.Boolean)">
            <summary>
            This method updates child views and clears the batch of events.
            We cancel and old callback and schedule a new callback at this time if there were events in the batch.
            </summary>
            <param name="isFromSchedule">true if invoked from a schedule, false if not</param>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeLengthBatchView.MsecIntervalSize">
            <summary>Returns the interval size in milliseconds.</summary>
            <returns>batch size</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeLengthBatchView.IsForceOutput">
            <summary>True for force-output.</summary>
            <returns>indicates force-output</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeLengthBatchView.NumberOfEvents">
            <summary>Returns the length of the batch.</summary>
            <returns>maximum number of events allowed before window gets flushed</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeLengthBatchView.IsStartEager">
            <summary>True for start-eager.</summary>
            <returns>indicates start-eager</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeLengthBatchView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeLengthBatchView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty.</summary>
            <returns>true if empty</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.KeepAllViewFactory">
            <summary>
            Factory for <see cref="T:com.espertech.esper.view.window.KeepAllView"/>.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.KeepAllViewFactory.randomAccessGetterImpl">
            <summary>The access into the data window.</summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.UnivariateStatisticsView">
            <summary> View for computing statistics, which the view exposes via fields representing the sum, count, standard deviation
            for sample and for population and variance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsView.#ctor(com.espertech.esper.core.StatementContext,System.String)">
            <summary>
            Constructor requires the name of the field to use in the parent view to compute the statistics.
            </summary>
            <param name="statementContext">contains required view services</param>
            <param name="fieldName">is the name of the field within the parent view to use to get numeric data points for this view to
            compute the statistics on.</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsView.CloneView(com.espertech.esper.core.StatementContext)">
            <summary>
            Duplicates the view.
            <p>
            Expected to return a same view in initialized state for grouping.
            </p>
            </summary>
            <param name="_statementContext">is services for the view</param>
            <returns>duplicated view</returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsView.Update(com.espertech.esper.events.EventBean[],com.espertech.esper.events.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsView.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsView.CreateEventType(com.espertech.esper.core.StatementContext)">
            <summary>Creates the event type for this view.</summary>
            <param name="statementContext">is the event adapter service</param>
            <returns>event type of view</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.UnivariateStatisticsView.FieldName">
            <summary>
            Gets or sets field name of the field to report statistics on.
            </summary>
            <value>The name of the field.</value>
            <returns> field name
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.UnivariateStatisticsView.Parent">
            <summary>
            Gets or sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.UnivariateStatisticsView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.LikeUtil">
            <summary>
             Utility for performing a SQL Like comparsion.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.LikeUtil.#ctor(System.String,System.Nullable{System.Char},System.Boolean)">
            <summary> Ctor.</summary>
            <param name="pattern">is the SQL-like pattern to</param>
            <param name="escape">is the escape character</param>
            <param name="ignorecase">is true to ignore the case, or false if not</param>
        </member>
        <member name="M:com.espertech.esper.util.LikeUtil.Compare(System.String)">
            <summary> Execute the string.</summary>
            <param name="compareString">is the string to compare
            </param>
            <returns> true if pattern matches, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.LikeUtil.ResetPattern(System.String)">
            <summary> Resets the search pattern.</summary>
            <param name="pattern">is the new pattern to match against
            </param>
        </member>
        <member name="T:com.espertech.esper.util.ConstructorHelper">
            <summary>
            Helper class to find and invoke a class constructors that matches the types
            of arguments supplied.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.ConstructorHelper.InvokeConstructor(System.Type,System.Object[])">
            <summary>
            Find and invoke constructor matching the argument number and types returning
            an instance of given class.
            </summary>
            <param name="type">is the class of instance to construct</param>
            <param name="arguments">is the arguments for the constructor to match in number and type
            </param>
        </member>
        <member name="T:com.espertech.esper.type.RelationalOpEnum">
            <summary>
            Enum representing relational types of operation.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.RelationalOpEnum.GT">
            <summary>Greater then.</summary>
        </member>
        <member name="F:com.espertech.esper.type.RelationalOpEnum.GE">
            <summary>Greater equals.</summary>
        </member>
        <member name="F:com.espertech.esper.type.RelationalOpEnum.LT">
            <summary>Lesser then.</summary>
        </member>
        <member name="F:com.espertech.esper.type.RelationalOpEnum.LE">
            <summary>Lesser equals.</summary>
        </member>
        <member name="F:com.espertech.esper.type.RelationalOpEnum.Values">
            <summary>
            Array of values exposed by this meta-enumeration.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.Parse(System.String)">
            <summary>
            Parses the operator and returns an enum for the operator.
            </summary>
            <param name="op">operand to parse</param>
            <returns>enum representing relational operation</returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.GetComputer(System.Type)">
            <summary>
            Returns the computer to use for the relational operation based on the
            coercion type.
            </summary>
            <param name="coercedType">is the object type</param>
            <returns>computer for performing the relational op</returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.GTStringComputer(System.Object,System.Object)">
            <summary>
            Greater than string computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.GEStringComputer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to string computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.LEStringComputer(System.Object,System.Object)">
            <summary>
            Less-than or equal to string computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.LTStringComputer(System.Object,System.Object)">
            <summary>
            Less-than string computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.GTLongComputer(System.Object,System.Object)">
            <summary>
            Greater-than long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.GELongComputer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.LTLongComputer(System.Object,System.Object)">
            <summary>
            Less-than long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.LELongComputer(System.Object,System.Object)">
            <summary>
            Less-than or equal to long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.GTULongComputer(System.Object,System.Object)">
            <summary>
            Greater-than unsigned long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.GEULongComputer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to unsigned long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.LTULongComputer(System.Object,System.Object)">
            <summary>
            Less-than unsigned long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.LEULongComputer(System.Object,System.Object)">
            <summary>
            Less-than or equal to unsigned long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.GTDoubleComputer(System.Object,System.Object)">
            <summary>
            Greater-than double computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.GEDoubleComputer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to double computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.LTDoubleComputer(System.Object,System.Object)">
            <summary>
            Less-than double computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnum.LEDoubleComputer(System.Object,System.Object)">
            <summary>
            Less-than or equal to double computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.type.RelationalOpEnum.ExpressionText">
            <summary>Returns string rendering of enum.</summary>
            <returns>relational op string</returns>
        </member>
        <member name="T:com.espertech.esper.type.RelationalOpEnum.Computer">
            <summary>
            Delegate for computing a relational operation on two objects.
            </summary>
            <param name="objOne"></param>
            <param name="objTwo"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.type.DoubleValue">
            <summary>
            Placeholder for a double value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.#ctor">
            <summary> Constructor.</summary>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.#ctor(System.Double)">
            <summary> Constructor setting the value.</summary>
            <param name="doubleValue">value to set.
            </param>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.ParseString(System.String)">
            <summary> Parse string value returning a double.</summary>
            <param name="value">to parse
            </param>
            <returns> parsed value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.ParseString(System.String[])">
            <summary> Parse the string array returning a double array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.GetDouble">
            <summary> Return the value as an unboxed.</summary>
            <returns> value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.DoubleValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.DoubleValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.DoubleValue._Double">
            <summary>
            Set a double value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.GuardSupport">
            <summary>
            Abstract class for applications to extend to implement a pattern guard.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardSupport.StartGuard">
            <summary>
            Start the guard operation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardSupport.StopGuard">
            <summary>
            Called when sub-expression quits, or when the pattern Stopped.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardSupport.Inspect(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Returns true if inspection shows that the match events can pass, or false to not pass.
            </summary>
            <param name="matchEvent">is the map of matching events</param>
            <returns>true to pass, false to not pass</returns>
        </member>
        <member name="T:com.espertech.esper.filter.RangeValueDouble">
            <summary>
            A Double-typed value as a filter parameter representing a range.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueDouble.#ctor(System.Double)">
            <summary> Ctor.</summary>
            <param name="doubleValue">is the value of the range endpoint
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueDouble.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Returns the filter value representing the endpoint.
            </summary>
            <param name="matchedEvents">is the prior results</param>
            <returns>filter value</returns>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueDouble.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueDouble.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueDouble.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.RangeValueDouble.DoubleValue">
            <summary>
            Returns the constant value.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.InSetOfValuesEventProp">
            <summary>
            Event property value in a list of values following an in-keyword.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesEventProp.#ctor(System.String,System.String,System.Boolean,System.Type)">
            <summary>Ctor.</summary>
            <param name="resultEventAsName">is the event tag</param>
            <param name="resultEventProperty">is the event property name</param>
            <param name="isMustCoerce">
            indicates on whether numeric coercion must be performed
            </param>
            <param name="coercionType">indicates the numeric coercion type to use</param>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesEventProp.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.InSetOfValuesEventProp.ResultEventAsName">
            <summary>Returns the tag used for the event property.</summary>
            <returns>tag</returns>
        </member>
        <member name="P:com.espertech.esper.filter.InSetOfValuesEventProp.ResultEventProperty">
            <summary>Returns the event property name.</summary>
            <returns>property name</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamConstant">
            <summary>
            This class represents a single, constant value filter parameter in an <see cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> filter specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamConstant.#ctor(System.String,com.espertech.esper.filter.FilterOperator,System.Object)">
            <summary> Constructor.</summary>
            <param name="propertyName">is the event property name
            </param>
            <param name="filterOperator">is the type of compare
            </param>
            <param name="filterConstant">contains the value to match against the event's property value
            </param>
            <throws>  ArgumentException if an operator was supplied that does not take a single constant value </throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamConstant.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Return the filter parameter constant to filter for.
            </summary>
            <param name="matchedEvents">is the prior results that can be used to determine filter parameters</param>
            <returns>filter parameter constant's value</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamConstant.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamConstant.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamConstant.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamConstant.FilterConstant">
            <summary>Returns the constant value.</summary>
            <returns>constant value</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecCompiled">
            <summary>
            Contains the filter criteria to sift through events. The filter criteria are the event class to look for and
            a set of parameters (attribute names, operators and constant/range values).
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiled.#ctor(com.espertech.esper.events.EventType,System.String,System.Collections.Generic.List{com.espertech.esper.filter.FilterSpecParam})">
            <summary>Constructor - validates parameter list against event type, throws exception if invalidproperty names or mismatcing filter operators are found.</summary>
            <param name="eventType">is the event type</param>
            <param name="parameters">is a list of filter parameters</param>
            <param name="eventTypeAlias">is the alias name of the event type</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiled.GetValueSet(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Returns the values for the filter, using the supplied result events to ask filter parameters
            for the value to filter for.
            </summary>
            <param name="matchedEvents">contains the result events to use for determining filter values</param>
            <returns>filter values</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiled.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiled.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiled.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecCompiled.EventTypeAlias">
            <summary>
            Gets the event type alias name.
            </summary>
            <value>The event type alias.</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecCompiled.EventType">
            <summary>
            Returns type of event to filter for.
            </summary>
            <value>The type of the event.</value>
            <returns>event type</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecCompiled.Parameters">
            <summary>
            Returns list of filter parameters.
            </summary>
            <value>The parameters.</value>
            <returns>list of filter params</returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.XPathPropertyGetter">
            <summary>Getter for properties of DOM xml events.</summary>
            <author>pablo</author>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathPropertyGetter.#ctor(System.String,System.Xml.XPath.XPathExpression,System.Type,System.Type)">
            <summary>Ctor.</summary>
            <param name="propertyName">is the name of the event property for which this getter gets values</param>
            <param name="xPathExpression">is a compile XPath expression</param>
            <param name="resultType">is the resulting type</param>
            <param name="optionalCastToType">if non-null then the return value of the xpath expression is cast to this value</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathPropertyGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Gets the property from the specified event bean.
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathPropertyGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a property.
            <para>
            Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
            Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
            If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
            does not exists and the method returns false.
            </para>
            	<para>
            For non-dynamic properties, this method always returns true since a getter would not be available
            unless
            </para>
            </summary>
            <param name="eventBean">the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default) properties
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.XPathPropertyGetter.ResultClass">
            <summary>
            Returns type of event property.
            </summary>
            <value></value>
            <returns> class of the objects returned by this getter
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.ReflectionPropFieldGetter">
            <summary>
            Property getter for fields using CLR vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.ReflectionPropFieldGetter.#ctor(System.Reflection.FieldInfo)">
            <summary> Constructor.</summary>
            <param name="field">is the regular reflection field to use to obtain values for a property
            </param>
        </member>
        <member name="M:com.espertech.esper.events.ReflectionPropFieldGetter.GetValue(com.espertech.esper.events.EventBean)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified bean as the key.
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.events.ReflectionPropFieldGetter.IsExistsProperty(com.espertech.esper.events.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a property.
            <para>
            Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
            Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?".
            If any of the properties in the path of a dynamic nested property return null, the dynamic nested property
            does not exists and the method returns false.
            </para>
            	<para>
            For non-dynamic properties, this method always returns true since a getter would not be available
            unless
            </para>
            </summary>
            <param name="eventBean">the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default) properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.ReflectionPropFieldGetter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicMappedProperty">
            <summary>
            Represents a dynamic mapped property of a given name.
            <para>
            Dynamic properties always exist, have an Object type and are resolved to a method during runtime.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicMappedProperty.#ctor(System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="propertyName">is the property name</param>
            <param name="key">is the mapped access key</param>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicMappedProperty.GetPropertyType(com.espertech.esper.events.BeanEventType)">
            <summary>
            Returns the property type.
            </summary>
            <param name="eventType">is the event type representing the object</param>
            <returns>property type class</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicMappedProperty.GetPropertyTypeMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the property type for use with Map event representations.
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicMappedProperty.GetGetterMap(com.espertech.esper.compat.Map{System.String,System.Object})">
            <summary>
            Returns the getter-method for use with Map event representations.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicIndexedPropertyGetter">
            <summary>
            Getter for a dynamic indexed property (syntax field.indexed[0]?),
            using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicIndexedPropertyGetter.#ctor(System.String,System.Int32)">
            <summary>Ctor.</summary>
            <param name="fieldName">property name</param>
            <param name="index">index to get the element at</param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectExprElementRawSpec">
            <summary>
            Represents a single item in a SELECT-clause, potentially unnamed
            as no "as" tag may have been supplied in the syntax.
            <para>
            Compare to <see cref="T:com.espertech.esper.epl.spec.SelectExprElementCompiledSpec"/> which carries a determined name.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectExprElementRawSpec.#ctor(com.espertech.esper.epl.expression.ExprNode,System.String)">
            <summary>Ctor.</summary>
            <param name="selectExpression">
            the expression node to evaluate for matching events
            </param>
            <param name="optionalAsName">the name of the item, null if not name supplied</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectExprElementRawSpec.SelectExpression">
            <summary>
            Returns the expression node representing the item in the select clause.
            </summary>
            <returns>expression node for item</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectExprElementRawSpec.OptionalAsName">
            <summary>Returns the name of the item in the select clause.</summary>
            <returns>name of item</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectExprElementCompiledSpec">
            <summary>
            Represents a single item in a SELECT-clause, with a name assigned
            either by the engine or by the user specifying an "as" tag name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectExprElementCompiledSpec.#ctor(com.espertech.esper.epl.expression.ExprNode,System.String)">
            <summary>Ctor.</summary>
            <param name="selectExpression">
            the expression node to evaluate for matching events
            </param>
            <param name="assignedName">
            cannot be null as a name is always assigned or
            system-determined
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectExprElementCompiledSpec.SelectExpression">
            <summary>
            Returns the expression node representing the item in the select clause.
            </summary>
            <returns>expression node for item</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectExprElementCompiledSpec.AssignedName">
            <summary>Returns the name of the item in the select clause.</summary>
            <returns>name of item</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PluggableObjectType">
            <summary>
            Enumeration for types of plug-in objects.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.PluggableObjectType.PATTERN_GUARD">
            <summary>
            Pattern guard object type.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.PluggableObjectType.PATTERN_OBSERVER">
            <summary>
            Pattern observer object type.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.PluggableObjectType.VIEW">
            <summary>
            View object type.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPropertyExistsNode">
            <summary>Represents the EXISTS(property) function in an expression tree.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPropertyExistsNode.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprCoalesceNode">
            <summary>
            Represents the COALESCE(a,b,...) function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCoalesceNode.Validate(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.ViewResourceDelegate,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Validate node.
            </summary>
            <param name="streamTypeService">serves stream event type info</param>
            <param name="methodResolutionService">for resolving class names in library method invocations</param>
            <param name="viewResourceDelegate">delegates for view resources to expression nodes</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="variableService">provides access to variable values</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCoalesceNode.Evaluate(com.espertech.esper.events.EventBean[],System.Boolean)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCoalesceNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCoalesceNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCoalesceNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <value></value>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCoalesceNode.ExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DbDriverSchema">
            <summary>
            Provides the schema associated with a command.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverSchema.ColumnNames">
            <summary>
            Gets the column names.
            </summary>
            <value>The column names.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverSchema.ColumnInfo">
            <summary>
            Gets the column info.
            </summary>
            <value>The column info.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverSchema.Item(System.String)">
            <summary>
            Gets the <see cref="T:com.espertech.esper.epl.db.DBOutputTypeDesc"/> associated
            with the given column name.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.epl.core.StreamTypeServiceImpl">
            <summary>
            Implementation that provides stream number and property type information.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.StreamTypeService">
            <summary>
            Service supplying stream number and property type information.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeService.ResolveByPropertyName(System.String)">
            <summary>
            Returns the offset of the stream and the type of the property for the given property name,
            by looking through the types offered and matching up.
            <para>
            This method considers only a property name and looks at all streams to resolve the property name.
            </para>
            </summary>
            <param name="propertyName">property name in event</param>
            <returns>
            descriptor with stream number, property type and property name
            </returns>
            <throws>  DuplicatePropertyException to indicate property was found twice </throws>
            <throws>  PropertyNotFoundException to indicate property could not be resolved </throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeService.ResolveByStreamAndPropName(System.String,System.String)">
            <summary>
            Returns the offset of the stream and the type of the property for the given property name,
            by using the specified stream name to resolve the property.
            <para>
            This method considers and explicit stream name and property name, both parameters are required.
            </para>
            </summary>
            <param name="streamName">name of stream, required</param>
            <param name="propertyName">property name in event, , required</param>
            <returns>
            descriptor with stream number, property type and property name
            </returns>
            <throws>  PropertyNotFoundException to indicate property could not be resolved </throws>
            <throws>  StreamNotFoundException to indicate stream name could not be resolved </throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeService.ResolveByStreamAndPropName(System.String)">
            <summary>
            Returns the offset of the stream and the type of the property for the given property name,
            by looking through the types offered and matching up.
            <para>
            This method considers a single property name that may or may not be prefixed by a stream name.
            The resolution first attempts to find the property name itself, then attempts
            to consider a stream name that may be part of the property name.
            </para>
            </summary>
            <param name="streamAndPropertyName">stream name and property name (e.g. s0.p0) or just a property name (p0)</param>
            <returns>
            descriptor with stream number, property type and property name
            </returns>
            <throws>  DuplicatePropertyException to indicate property was found twice </throws>
            <throws>  PropertyNotFoundException to indicate property could not be resolved </throws>
        </member>
        <member name="P:com.espertech.esper.epl.core.StreamTypeService.StreamNames">
            <summary> Returns an array of event stream names in the order declared.</summary>
            <returns> stream names
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.StreamTypeService.EventTypes">
            <summary> Returns an array of event types for each event stream in the order declared.</summary>
            <returns> event types
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeServiceImpl.#ctor(com.espertech.esper.events.EventType[],System.String[],System.String,System.String[])">
            <summary>
            Ctor.
            </summary>
            <param name="eventTypes">array of event types, one for each stream</param>
            <param name="streamNames">array of stream names, one for each stream</param>
            <param name="engineURI">engine URI</param>
            <param name="eventTypeAlias">alias name of the event type</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeServiceImpl.#ctor(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.events.EventType,System.String}}},System.String,System.Boolean,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="namesAndTypes">is the ordered list of stream names and event types available (stream zero to N)</param>
            <param name="isStreamZeroUnambigous">indicates whether when a property is found in stream zero and another stream an exception should bethrown or the stream zero should be assumed</param>
            <param name="engineURI">uri of the engine</param>
            <param name="requireStreamNames">is true to indicate that stream names are required for any non-zero streams (for subqueries)</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeServiceImpl.ResolveByPropertyName(System.String)">
            <summary>
            Returns the offset of the stream and the type of the property for the given property name,
            by looking through the types offered and matching up.
            <para>
            This method considers only a property name and looks at all streams to resolve the property name.
            </para>
            </summary>
            <param name="propertyName">property name in event</param>
            <returns>
            descriptor with stream number, property type and property name
            </returns>
            <throws>  DuplicatePropertyException to indicate property was found twice </throws>
            <throws>  PropertyNotFoundException to indicate property could not be resolved </throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeServiceImpl.ResolveByStreamAndPropName(System.String,System.String)">
            <summary>
            Returns the offset of the stream and the type of the property for the given property name,
            by using the specified stream name to resolve the property.
            <para>
            This method considers and explicit stream name and property name, both parameters are required.
            </para>
            </summary>
            <param name="streamName">name of stream, required</param>
            <param name="propertyName">property name in event, , required</param>
            <returns>
            descriptor with stream number, property type and property name
            </returns>
            <throws>  PropertyNotFoundException to indicate property could not be resolved </throws>
            <throws>  StreamNotFoundException to indicate stream name could not be resolved </throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeServiceImpl.ResolveByStreamAndPropName(System.String)">
            <summary>
            Returns the offset of the stream and the type of the property for the given property name,
            by looking through the types offered and matching up.
            <para>
            This method considers a single property name that may or may not be prefixed by a stream name.
            The resolution first attempts to find the property name itself, then attempts
            to consider a stream name that may be part of the property name.
            </para>
            </summary>
            <param name="streamAndPropertyName">stream name and property name (e.g. s0.p0) or just a property name (p0)</param>
            <returns>
            descriptor with stream number, property type and property name
            </returns>
            <throws>  DuplicatePropertyException to indicate property was found twice </throws>
            <throws>  PropertyNotFoundException to indicate property could not be resolved </throws>
        </member>
        <member name="P:com.espertech.esper.epl.core.StreamTypeServiceImpl.EventTypes">
            <summary>
            Returns an array of event types for each event stream in the order declared.
            </summary>
            <value></value>
            <returns> event types
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.StreamTypeServiceImpl.StreamNames">
            <summary>
            Returns an array of event stream names in the order declared.
            </summary>
            <value></value>
            <returns> stream names
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprEvalProcessor">
            <summary>
            Processor for select-clause expressions that handles a list of selection items
            represented by expression nodes. Computes results based on matching events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprEvalProcessor.#ctor(System.Collections.Generic.IList{com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec},com.espertech.esper.epl.spec.InsertIntoDesc,System.Boolean,com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.vaevent.ValueAddEventService)">
            <summary>Ctor.</summary>
            <param name="selectionList">list of select-clause items</param>
            <param name="insertIntoDesc">descriptor for insert-into clause contains column names overriding select clause names</param>
            <param name="isUsingWildcard">true if the wildcard (*) appears in the select clause</param>
            <param name="typeService">service for information about streams</param>
            <param name="eventAdapterService">service for generating events and handling event types</param>
            <param name="revisionService">service that handles update events</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException thrown if any of the expressions don't validate</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineImportServiceImpl">
            <summary>Implementation for engine-level imports.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportServiceImpl.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportServiceImpl.AddMethodRefs(com.espertech.esper.compat.Map{System.String,com.espertech.esper.client.ConfigurationMethodRef})">
            <summary>Adds cache configs for method invocations for from-clause.</summary>
            <param name="configs">cache configs</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportServiceImpl.ResolveTypeInternal(System.String)">
            <summary>
            Finds a class by class name using the auto-import information provided.
            </summary>
            <param name="className">is the class name to find</param>
            <returns>class</returns>
            <throws>ClassNotFoundException if the class cannot be loaded</throws>
        </member>
        <member name="P:com.espertech.esper.epl.core.EngineImportServiceImpl.Imports">
            <summary>For testing, returns imports.</summary>
            <returns>returns auto-import list as array</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.AvedevAggregator">
            <summary>
            Standard deviation always generates double-types numbers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AvedevAggregator.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AvedevAggregator.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AvedevAggregator.Enter(System.Object)">
            <summary>
            Enters the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AvedevAggregator.Leave(System.Object)">
            <summary>
            Leaves the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.AvedevAggregator.NewAggregator(com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>
            Make a new, initalized aggregation state.
            </summary>
            <param name="methodResolutionService">for use in creating new aggregation method instances as a factory</param>
            <returns>initialized copy of the aggregator</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.AvedevAggregator.Value">
            <summary>
            Returns the current value held.
            </summary>
            <value></value>
            <returns>current value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.agg.AvedevAggregator.ValueType">
            <summary>
            Returns the type of the current value.
            </summary>
            <value></value>
            <returns>type of values held</returns>
        </member>
        <member name="T:com.espertech.esper.core.SubSelectHolder">
            <summary>
            Entry holding lookup resource references for use by <see cref="T:com.espertech.esper.core.SubSelectStreamCollection"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.SubSelectHolder.#ctor(System.Int32,com.espertech.esper.view.Viewable,com.espertech.esper.view.ViewFactoryChain)">
            <summary>Ctor.</summary>
            <param name="streamNumber">is the lookup stream number</param>
            <param name="viewable">is the root viewable</param>
            <param name="viewFactoryChain">is the view chain</param>
        </member>
        <member name="P:com.espertech.esper.core.SubSelectHolder.StreamNumber">
            <summary>Returns lookup stream number.</summary>
            <returns>stream num</returns>
        </member>
        <member name="P:com.espertech.esper.core.SubSelectHolder.Viewable">
            <summary>Returns the lookup child viewable.</summary>
            <returns>child-most viewable</returns>
        </member>
        <member name="P:com.espertech.esper.core.SubSelectHolder.ViewFactoryChain">
            <summary>Returns the lookup view factory chain</summary>
            <returns>view factory chain</returns>
        </member>
        <member name="T:com.espertech.esper.core.EPRuntimeImpl">
            <summary>
            Implements runtime interface. Also accepts timer callbacks for synchronizing time
            events with regular events sent in.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.ResetStats">
            <summary>
            Resets the statistics.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.CreateLocalData">
            <summary>
            Creates a local data object.
            </summary>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.core.EPRuntimeImpl.threadLocalData">
            <summary>
            Data that remains local to the thread.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.#ctor(com.espertech.esper.core.EPServicesContext)">
            <summary> Constructor.</summary>
            <param name="services">references to services
            </param>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.TimerCallback">
            <summary>
            Invoked by the internal clocking service at regular intervals.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.SendEvent(System.Object)">
            <summary>
            Sends the event.
            </summary>
            <param name="_event">The _event.</param>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.SendEvent(System.Xml.XmlNode)">
            <summary>
            Sends the event.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.SendEvent(com.espertech.esper.compat.Map{System.String,System.Object},System.String)">
            <summary>
            Send a map containing event property values to the event stream processing runtime.
            Use the route method for sending events into the runtime from within UpdateListener code.
            </summary>
            <param name="map">map that contains event property values. Keys are expected to be of type String while values
            can be of any type. Keys and values should match those declared via Configuration for the given eventTypeAlias.</param>
            <param name="eventTypeAlias">the alias for the (property name, property type) information for this map</param>
            <throws>  EPException - when the processing of the event leads to an error </throws>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.GetSender(System.String)">
            <summary>
            Creates a delegate that can be used to send mapped events to the runtime.  This method
            eliminates the costs associated with the lookup of an event type or any other form of
            initialization that would normally be incurred.
            </summary>
            <param name="eventTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.Route(System.Object)">
            <summary>
            Route the event object back to the event stream processing runtime for internal dispatching.
            The route event is processed just like it was sent to the runtime, that is any
            active expressions seeking that event receive it. The routed event has priority over other
            events sent to the runtime. In a single-threaded application the routed event is
            processed before the next event is sent to the runtime through the
            EPRuntime.sendEvent method.
            </summary>
            <param name="_event"></param>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.Route(com.espertech.esper.events.EventBean,com.espertech.esper.core.EPStatementHandle)">
            <summary>
            Internal route of events via insert-into, holds a statement lock
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.Emit(System.Object)">
            <summary>
            Emit an event object to any registered EmittedListener instances listening to the default channel.
            </summary>
            <param name="_object"></param>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.Emit(System.Object,System.String)">
            <summary>
            Emit an event object to any registered EmittedListener instances on the specified channel.
            Event listeners listening to all channels as well as those listening to the specific channel
            are called. Supplying a null value in the channel has the same result as the Emit(Object object) method.
            </summary>
            <param name="_object"></param>
            <param name="channel">channel to emit the object to, or null if emitting to the default channel</param>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.AddEmittedListener(com.espertech.esper.client.EmittedListener,System.String)">
            <summary>
            Register an object that listens for events emitted from the event stream processing runtime on the
            specified channel. A null value can be supplied for the channel in which case the
            emit listener will be invoked for events emitted an any channel.
            </summary>
            <param name="listener">called when an event is emitted by the runtime.</param>
            <param name="channel">is the channel to add the listener to, a null value can be used to listen to events emitted
            on all channels</param>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.ClearEmittedListeners">
            <summary>
            Deregister all emitted event listeners.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.ProcessEvent(System.Object)">
            <summary>
            Processes the event.
            </summary>
            <param name="_event">The _event.</param>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.ProcessTimeEvent(com.espertech.esper.client.time.TimerEvent)">
            <summary>
            Processes the time event.
            </summary>
            <param name="_event">The _event.</param>
        </member>
        <member name="M:com.espertech.esper.core.EPRuntimeImpl.Destroy">
            <summary>
            Destroy for destroying an engine instance: sets references to null and clears thread-locals
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.EPRuntimeImpl.NumEventsReceived">
            <summary>
            Number of events received over the lifetime of the event stream processing runtime.
            </summary>
            <value></value>
            <returns> number of events received
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPRuntimeImpl.NumEventsEmitted">
            <summary>
            Number of events emitted over the lifetime of the event stream processing runtime.
            </summary>
            <value></value>
            <returns> number of events emitted
            </returns>
        </member>
        <member name="P:com.espertech.esper.core.EPRuntimeImpl.LocalData">
            <summary>
            Gets the local data.
            </summary>
            <value>The local data.</value>
        </member>
        <member name="P:com.espertech.esper.core.EPRuntimeImpl.UnmatchedListener">
            <summary>
            Gets or sets the unmatched listener.
            </summary>
            <value>The unmatched listener.</value>
        </member>
        <member name="T:com.espertech.esper.core.EPRuntimeImpl.ThreadLocalData">
            <summary>
            Group of data that is associated with the thread.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.WeakKeyReference`1">
            <summary>
            Provides a weak reference to an object of the given type to be used in
            a WeakDictionary along with the given comparer.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.LinkedHashSet`1">
            <summary>
            Description of LinkedHashSet.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashSet`1.ToArray">
            <summary>
            Converts the set to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashSet`1.AddAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all of the items in the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashSet`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, Starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.LinkedHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashSet`1.First">
            <summary>
            Returns the first item in the set
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashSet`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.LinkedHashSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.compat.OverrideNameAttribute">
            <summary>
            Allows for a class to override the name of a property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.OverrideNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.OverrideNameAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:com.espertech.esper.compat.OverrideNameAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:com.espertech.esper.compat.HashSet`1">
            <summary>
            An extended set using a hashing algorithm.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor with set for source data.
            </summary>
            <param name="sourceData"></param>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.AsList">
            <summary>
            Returns the set as a list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.ToArray">
            <summary>
            Converts the set to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.AddAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all of the items in the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.HashSet`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.HashSet`1.First">
            <summary>
            Returns the first item in the set
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.HashSet`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.compat.HashSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.HashSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.collection.NumberSetPermutationEnumeration">
            <summary> Based on the <see cref="T:com.espertech.esper.collection.PermutationEnumeration"/> this enumeration provides, among a set of supplied integer
            values, all permutations of order these values can come in, ie.
            Example: {0, 2, 3} results in 6 enumeration values ending in {3, 2, 0}.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.NumberSetPermutationEnumeration.#ctor(System.Int32[])">
            <summary>
            Constructor
            </summary>
            <param name="numberSet">set of integer numbers to permutate and provide each combination.</param>
        </member>
        <member name="M:com.espertech.esper.collection.NumberSetPermutationEnumeration.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.NumberSetPermutationEnumeration.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.NumberSetPermutationEnumeration.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:com.espertech.esper.collection.NumberSetPermutationEnumeration.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:com.espertech.esper.collection.NumberSetPermutationEnumeration.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PropertyExistsExpression">
            <summary>
            Property-exists checks if a dynamic property exists.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PropertyExistsExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PropertyExistsExpression.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="propertyName">is the name of the property to check existence</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PropertyExistsExpression.ToEPL(System.IO.StringWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternNotExpr">
            <summary>
            Not-expression for negating a pattern sub-expression for use in pattern expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternNotExpr.#ctor">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternNotExpr.#ctor(com.espertech.esper.client.soda.PatternExpr)">
            <summary>Ctor.</summary>
            <param name="inner">is the pattern expression to negate</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.FromClause">
            <summary>
            The from-clause names the streams to select upon.
            <para/>
            The most common projected stream is a filter-based stream which is created by <see cref="T:com.espertech.esper.client.soda.FilterStream"/>.
            <para/>
            Multiple streams can be joined by adding each stream individually.
            <para/>
            Outer joins are also handled by this class. To create an outer join consisting of 2 streams,
            add one <see cref="T:com.espertech.esper.client.soda.OuterJoinQualifier"/> that defines the outer join relationship between the 2 streams. The outer joins between
            N streams, add N-1 <see cref="T:com.espertech.esper.client.soda.OuterJoinQualifier"/> qualifiers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.Create">
            <summary>
            Creates an empty from-clause to which one adds streams via the add methods.
            </summary>
            <returns>empty from clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.Create(com.espertech.esper.client.soda.Stream,com.espertech.esper.client.soda.OuterJoinQualifier,com.espertech.esper.client.soda.Stream)">
            <summary>
            Creates a from-clause that lists 2 projected streams joined via outer join.
            </summary>
            <param name="stream">first stream in outer join</param>
            <param name="outerJoinQualifier">qualifies the outer join</param>
            <param name="streamSecond">second stream in outer join</param>
            <returns>from clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.Create(com.espertech.esper.client.soda.Stream[])">
            <summary>
            Creates a from clause that selects from a single stream.
            <para/>
            Use <see cref="T:com.espertech.esper.client.soda.FilterStream"/> to create filter-based streams to add.
            </summary>
            <param name="streams">is one or more streams to add to the from clause.</param>
            <returns>from clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.#ctor(com.espertech.esper.client.soda.Stream,com.espertech.esper.client.soda.OuterJoinQualifier,com.espertech.esper.client.soda.Stream)">
            <summary>Ctor for an outer join between two streams.</summary>
            <param name="streamOne">first stream in outer join</param>
            <param name="outerJoinQualifier">type of outer join and fields joined on</param>
            <param name="streamTwo">second stream in outer join</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.#ctor(com.espertech.esper.client.soda.Stream[])">
            <summary>Ctor.</summary>
            <param name="streamsList">is zero or more streams in the from-clause.</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.Add(com.espertech.esper.client.soda.Stream)">
            <summary>
            Adds a stream.
            <para/>
            Use <see cref="T:com.espertech.esper.client.soda.FilterStream"/> to add filter-based streams.
            </summary>
            <param name="stream">to add</param>
            <returns>from clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.Add(com.espertech.esper.client.soda.OuterJoinQualifier)">
            <summary>
            Adds an outer join descriptor that defines how the streams are related via outer joins.
            <para/>
            For joining N streams, add N-1 outer join qualifiers.
            </summary>
            <param name="outerJoinQualifier">
            is the type of outer join and the fields in the outer join
            </param>
            <returns>from clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.ToEPL(System.IO.StringWriter)">
            <summary>Renders the from-clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.FromClause.Streams">
            <summary>Gets or sets the list of streams in the from-clause.</summary>
            <returns>list of streams</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.FromClause.OuterJoinQualifiers">
            <summary>
            Returns the outer join descriptors, if this is an outer join, or an empty list if
            none of the streams are outer joined.
            </summary>
            <returns>list of outer join qualifiers</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.CoalesceExpression">
            <summary>
            Coalesce-function which returns the first non-null value in a list of values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CoalesceExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CoalesceExpression.#ctor(System.String,System.String,System.String[])">
            <summary>Ctor.</summary>
            <param name="propertyOne">the first property in the expression</param>
            <param name="propertyTwo">the second property in the expression</param>
            <param name="moreProperties">optional more properties in the expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CoalesceExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="exprOne">provides the first value in the expression</param>
            <param name="exprTwo">provides the second value in the expression</param>
            <param name="moreExpressions">
            optional more expressions that are part of the function
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CoalesceExpression.Add(System.Object)">
            <summary>Add a constant to include in the computation.</summary>
            <param name="object">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CoalesceExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to include in the computation.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CoalesceExpression.Add(System.String)">
            <summary>Add a property to include in the computation.</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="F:com.espertech.esper.client.PropertyResolutionStyle.CASE_SENSITIVE">
            <summary>
            Properties are only matched if the names are identical in name
            and case to the original property name.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyResolutionStyle.CASE_INSENSITIVE">
            <summary>
            Properties are matched if the names are identical.  A case insensitive
            search is used and will choose the first property that matches
            the name exactly or the first property that matches case insensitively
            should no match be found.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyResolutionStyle.DISTINCT_CASE_INSENSITIVE">
            <summary>
            Properties are matched if the names are identical.  A case insensitive
            search is used and will choose the first property that matches
            the name exactly case insensitively.  If more than one 'name' can be
            mapped to the property an exception is thrown.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.PropertyResolutionStyleHelper">
            <summary>
            A class that helps with the use of the PropertyResolutionStyle.  Among other
            things it allows developers to get or set the property resolution style that 
            should be used when one is not specified.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.PropertyResolutionStyleHelper.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.client.PropertyResolutionStyleHelper"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.PropertyResolutionStyleHelper.DefaultPropertyResolutionStyle">
            <summary>
            Gets or sets the property resolution style that should be used whe
            one is not specified.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPSender">
            <summary>
            Send a map containing event property values to the event stream processing runtime.
            Use the route method for sending events into the runtime from within UpdateListener code.
            </summary>
            <param name="mappedEvent">map that contains event property values. Keys are expected to be of type String while values
            can be of any type. Keys and values should match those declared via Configuration for the given eventTypeAlias. 
            </param>
            <throws>  EPException - when the processing of the event leads to an error </throws>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.ValueAddEventServiceImpl">
            <summary>
            Service for handling revision event types.
            <para/>
            Each named window instance gets a dedicated revision processor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventServiceImpl.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventServiceImpl.Init(com.espertech.esper.compat.Map{System.String,com.espertech.esper.client.ConfigurationRevisionEventType},com.espertech.esper.compat.Map{System.String,com.espertech.esper.client.ConfigurationVariantStream},com.espertech.esper.events.EventAdapterService)">
            <summary>
            Inits the specified config revision.
            </summary>
            <param name="configRevision">The config revision.</param>
            <param name="configVariant">The config variant.</param>
            <param name="eventAdapterService">The event adapter service.</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventServiceImpl.AddRevisionEventType(System.String,com.espertech.esper.client.ConfigurationRevisionEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Adds the type of the revision event.
            </summary>
            <param name="revisionEventTypeAlias">The revision event type alias.</param>
            <param name="config">The config.</param>
            <param name="eventAdapterService">The event adapter service.</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionGetterParameters">
            <summary>
            Getter parameters for revision events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionGetterParameters.#ctor(System.String,System.Int32,com.espertech.esper.events.EventPropertyGetter,System.Int32[])">
            <summary>Ctor. </summary>
            <param name="propertyName">the property this gets</param>
            <param name="propertyNumber">the property number</param>
            <param name="fullGetter">the getter of the base event to use, if any</param>
            <param name="authoritySets">is the group numbers that the getter may access to obtain a property value</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionGetterParameters.PropertyGroups">
            <summary>Returns the group numbers to look for updated properties comparing version numbers. </summary>
            <returns>groups</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionGetterParameters.PropertyNumber">
            <summary>Returns the property number. </summary>
            <returns>property number</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionGetterParameters.BaseGetter">
            <summary>Returns the getter for the base event type. </summary>
            <returns>base getter</returns>
        </member>
        <member name="T:com.espertech.esper.events.MapEventBeanEntryPropertyGetter">
            <summary>
            A getter that works on EventBean events residing within a Map as an event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.MapEventBeanEntryPropertyGetter.#ctor(System.String,com.espertech.esper.events.EventPropertyGetter)">
            <summary>Ctor. </summary>
            <param name="propertyMap">the property to look at</param>
            <param name="eventBeanEntryGetter">the getter for the map entry</param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectExprElementStreamCompiledSpec">
            <summary>
            Mirror class to <see cref="T:com.espertech.esper.epl.spec.SelectExprElementStreamRawSpec"/> but added the stream number for the alias.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectExprElementStreamCompiledSpec.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="streamAliasName">is the stream alias of the stream to select</param>
            <param name="optionalAliasName">is the column alias</param>
            <param name="streamNumber">is the number of the stream</param>
            <param name="isTaggedEvent">
            is true to indicate that we are meaning to select a tagged event in a pattern
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectExprElementStreamCompiledSpec.StreamAliasName">
            <summary>
            Returns the stream alias (e.g. select streamAlias from MyEvent as streamAlias).
            </summary>
            <returns>alias</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectExprElementStreamCompiledSpec.OptionalAliasName">
            <summary>
            Returns the column alias (e.g. select streamAlias as mycol from MyEvent as streamAlias).
            </summary>
            <returns>alias</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectExprElementStreamCompiledSpec.StreamNumber">
            <summary>Returns the stream number of the stream for the stream alias.</summary>
            <returns>stream number</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectExprElementStreamCompiledSpec.IsTaggedEvent">
            <summary>
            Returns true to indicate that we are meaning to select a tagged event in a pattern, or false if
            selecting an event from a stream.
            </summary>
            <returns>true for tagged event in pattern, false for stream</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerWindowDesc">
            <summary>Specification for the on-delete statement.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerWindowDesc.#ctor(System.String,System.String,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="windowName">the window name</param>
            <param name="optionalAsName">the optional alias</param>
            <param name="isOnDelete">true for on-delete and false for on-select</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerWindowDesc.WindowName">
            <summary>Returns the window name.</summary>
            <returns>window name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerWindowDesc.OptionalAsName">
            <summary>Returns the alias, or null if none defined.</summary>
            <returns>alias</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.MethodStreamSpec">
            <summary>
            Specification object for historical data poll via database SQL statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.MethodStreamSpec.#ctor(System.String,System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},System.String,System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode})">
            <summary>Ctor.</summary>
            <param name="optionalStreamName">is the stream name or null if none defined</param>
            <param name="viewSpecs">is an list of view specifications</param>
            <param name="ident">the prefix in the clause</param>
            <param name="className">the class name</param>
            <param name="methodName">the method name</param>
            <param name="expressions">the parameter expressions</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.MethodStreamSpec.Compile(com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.pattern.PatternObjectResolutionService,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.named.NamedWindowService,com.espertech.esper.events.vaevent.ValueAddEventService,com.espertech.esper.epl.variable.VariableService,System.String,System.Collections.Generic.IList{System.Uri})">
            <summary>
            Compiles a raw stream specification consisting event type information and filter expressionsto an validated, optimized form for use with filter service
            </summary>
            <param name="eventAdapterService">supplies type information</param>
            <param name="methodResolutionService">for resolving imports</param>
            <param name="patternObjectResolutionService">for resolving pattern objects</param>
            <param name="timeProvider">provides engine current time</param>
            <param name="namedWindowService">is the service managing named windows</param>
            <param name="valueAddEventService">The value add event service.</param>
            <param name="variableService">provides variable values</param>
            <param name="engineURI">The engine URI.</param>
            <param name="plugInTypeResolutionURIs">The plug in type resolution UR is.</param>
            <returns>compiled stream</returns>
            <throws>ExprValidationException to indicate validation errors</throws>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MethodStreamSpec.Ident">
            <summary>Returns the prefix (method) for the method invocation syntax.</summary>
            <returns>identifier</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MethodStreamSpec.ClassName">
            <summary>Returns the class name.</summary>
            <returns>class name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MethodStreamSpec.MethodName">
            <summary>Returns the method name.</summary>
            <returns>method name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MethodStreamSpec.Expressions">
            <summary>Returns the parameter expressions.</summary>
            <returns>parameter expressions</returns>
        </member>
        <member name="T:com.espertech.esper.epl.named.LookupStrategyTableScan">
            <summary>
            Determine events to be deleted from a named window using the where-clause and full table scan.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.LookupStrategyTableScan.#ctor(com.espertech.esper.epl.expression.ExprNode,System.Collections.Generic.IEnumerable{com.espertech.esper.events.EventBean})">
            <summary>Ctor.</summary>
            <param name="joinExpr">is the where clause</param>
            <param name="iterable">is the named window's data window iterator</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.PollResultIndexingStrategyIndexCoerce">
            <summary>
            Strategy for building an index out of poll-results knowing the properties to base
            the index on, and their coercion types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.PollResultIndexingStrategyIndexCoerce.#ctor(System.Int32,com.espertech.esper.events.EventType,System.String[],System.Type[])">
            <summary>Ctor.</summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyNames">is the property names to be indexed</param>
            <param name="coercionTypes">is the types to coerce to for keys and values</param>
        </member>
        <member name="T:com.espertech.esper.core.StatementResultServiceImpl">
            <summary>Implements tracking of statement listeners and subscribers for a given statement such as to efficiently dispatch in situations where 0, 1 or more listeners are attached and/or 0 or 1 subscriber (such as iteration-only statement). </summary>
        </member>
        <member name="F:com.espertech.esper.core.StatementResultServiceImpl.lastResults">
            <summary>Buffer for holding dispatchable events. </summary>
        </member>
        <member name="M:com.espertech.esper.core.StatementResultServiceImpl.#ctor(com.espertech.esper.core.StatementLifecycleSvc)">
            <summary>Ctor. </summary>
            <param name="statementLifecycleSvc">handles persistence for statements</param>
        </member>
        <member name="M:com.espertech.esper.core.StatementResultServiceImpl.DispatchOnStop">
            <summary>Dispatches when the statement is stopped any remaining results. </summary>
        </member>
        <member name="F:com.espertech.esper.compat.ReferenceMap`2.dictionary">
            <summary>
            Underlying dictionary must be opaque to match the semantics of
            the reference types.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.ReferenceMap`2.keyReferenceType">
            <summary>
            Defines the way that keys are maintained in the dictionary
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.ReferenceMap`2.valueReferenceType">
            <summary>
            Defines the way that values are maintained in the dictionary
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.ReferenceMap`2.pruneList">
            <summary>
            List of dictionary keys that need to be removed
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.#ctor(com.espertech.esper.compat.ReferenceType,com.espertech.esper.compat.ReferenceType)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ReferenceMap`2"/> class.
            </summary>
            <param name="keyReferenceType">Type of the key reference.</param>
            <param name="valueReferenceType">Type of the value reference.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.#ctor(System.Int32,com.espertech.esper.compat.ReferenceType,com.espertech.esper.compat.ReferenceType)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ReferenceMap`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="keyReferenceType">Type of the key reference.</param>
            <param name="valueReferenceType">Type of the value reference.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.SetValue(`0,`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Prune(System.Object)">
            <summary>
            Adds the specified dictionary key to the prune list.
            </summary>
            <param name="dictKey">The dict key.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Prune">
            <summary>
            Removes all 'dead' references that have been added to the
            prune list.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Purge">
            <summary>
            Removes the left-over weak references for entries in the dictionary
            whose key or value has already been reclaimed by the garbage
            collector. This will reduce the dictionary's Count by the number
            of dead key-value pairs that were eliminated.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, Starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Get(`0,`1)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then the defaultValue is
            returned.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Get(`0)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Put(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to thenew value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Push(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            If a value was previously mapped it is returned.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.PutAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Puts all values from the source dictionary into
            this dictionary.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.Remove(`0,`1@)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.
            </summary>
            <param name="key">Search key into the dictionary</param>
            <param name="value">The value removed from the dictionary (if found).</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.RemoveAndReturn(`0)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  The item if found is returned; if not,
            default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.ReferenceMap`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <remarks>
            WARNING: The count returned here may include entries for which
            either the key or value objects have already been garbage
            collected. Call RemoveCollectedEntries to weed out collected
            entries and update the count accordingly.
            </remarks>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.ReferenceMap`2.KeysEnum">
            <summary>
            Gets an enumerator that enumerates the keys.
            </summary>
            <value>The keys enum.</value>
        </member>
        <member name="P:com.espertech.esper.compat.ReferenceMap`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.ReferenceMap`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.ReferenceMap`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:TValue"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.ReferenceMap`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.ReferenceMap`2.FirstValue">
            <summary>
            Returns the first value in the enumeration of values
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.ReferenceMap`2.IReferenceAdapter`1">
            <summary>
            Converts items from their reference for to their dictionary form and
            vice-versa.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.IReferenceAdapter`1.ReferenceToDictionary(`2)">
            <summary>
            Converts the item from a reference item to a dictionary item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.IReferenceAdapter`1.DictionaryToReference(System.Object,`2@)">
            <summary>
            Converts the item from a dictionary item to a reference item.
            Returns true if the dictionary item is still alive.
            </summary>
            <param name="item">The item.</param>
            <param name="refItem">The reference item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.HardReferenceAdapter`1.ReferenceToDictionary(`2)">
            <summary>
            Converts the item from a reference item to a dictionary item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.HardReferenceAdapter`1.DictionaryToReference(System.Object,`2@)">
            <summary>
            Converts the item from a dictionary item to a reference item.
            </summary>
            <param name="item">The item.</param>
            <param name="refItem">The reference item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.HardReferenceAdapter`1.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.HardReferenceAdapter`1.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.SoftReferenceAdapter`1.ReferenceToDictionary(`2)">
            <summary>
            Converts the item from a reference item to a dictionary item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.SoftReferenceAdapter`1.DictionaryToReference(System.Object,`2@)">
            <summary>
            Converts the item from a dictionary item to a reference item.
            </summary>
            <param name="item">The item.</param>
            <param name="refItem">The reference item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.SoftReferenceAdapter`1.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            <remark>
            Note: There are actually 9 cases to handle here.
            Let Wa = Alive Weak Reference
            Let Wd = Dead Weak Reference
            Let S  = Strong Reference
            x  | y  | Equals(x,y)
            -------------------------------------------------
            Wa | Wa | comparer.Equals(x.Target, y.Target)
            Wa | Wd | false
            Wa | S  | comparer.Equals(x.Target, y)
            Wd | Wa | false
            Wd | Wd | x == y
            Wd | S  | false
            S  | Wa | comparer.Equals(x, y.Target)
            S  | Wd | false
            S  | S  | comparer.Equals(x, y)
            -------------------------------------------------
            </remark>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.SoftReferenceAdapter`1.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReferenceMap`2.SoftReferenceAdapter`1.GetTarget(System.Object,System.Boolean@)">
            <summary>
            Gets the target of the object.  The target can only be a WeakReference of T or
            T itself.  This method distinguishes between the two and returns the actual
            target object.  Status of the target is returned through the out parameter.
            </summary>
            <param name="obj">The obj.</param>
            <param name="isDead">if set to <c>true</c> [is dead].</param>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.compat.ReferenceType.HARD">
            <summary>
            Hard references keep references to the object and prevent the
            garbage collector from collecting the item.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.ReferenceType.SOFT">
            <summary>
            Soft references allow the garbage collector to collect items
            that are not in use.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.SelectClauseStreamWildcard">
            <summary>
            For use in a select clause, this element in a select clause defines that for a given stream we want to
            select the underlying type. Most often used in joins to select wildcard from one of the joined streams.
            <para>
            For example:
            <pre>select streamOne.* from StreamOne as streamOne, StreamTwo as streamTwo</pre>
            </para>
            <para>
            There may also be an alias such that the event ends up in
            </para>
            <para>
            For example:
            <pre>select streamOne.* from StreamOne as streamOne, StreamTwo as streamTwo</pre>
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseStreamWildcard.#ctor(System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="streamAliasName">is the alias name assigned to a stream</param>
            <param name="optionalColumnAlias">
            is the name to assign to the column carrying the streams generated events, or
            null if the event should not appear in a column
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseStreamWildcard.ToEPLElement(System.IO.StringWriter)">
            <summary>Renders the element in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SelectClauseStreamWildcard.StreamAliasName">
            <summary>
            Returns the stream alias name (e.g. select streamAliasName.* as colAlias from MyStream as streamAliasName)
            </summary>
            <returns>alias</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.SelectClauseStreamWildcard.OptionalColumnAlias">
            <summary>
            Returns the optional column alias name (e.g. select streamAliasName.* as colAlias from MyStream as streamAliasName)
            </summary>
            <returns>alias of column, or null if none defined</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.SelectClauseExpression">
            <summary>
            Part of a select-clause to describe individual select-clause expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseExpression.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="expression">is the selection expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseExpression.#ctor(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Ctor.</summary>
            <param name="expression">is the selection expression</param>
            <param name="optionalAsName">is the &quot;as&quot;-tag for the expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseExpression.GetExpression">
            <summary>Returns the selection expression.</summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseExpression.SetExpression(com.espertech.esper.client.soda.Expression)">
            <summary>Sets the selection expression.</summary>
            <param name="expression">is the selection expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseExpression.GetAsName">
            <summary>
            Returns the optional &quot;as&quot;-name of the expression, or null if not defined
            </summary>
            <returns>tag or null for selection expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseExpression.SetAsName(System.String)">
            <summary>
            Sets the optional &quot;as&quot;-name of the expression, or null if not defined
            </summary>
            <param name="asName">column alias or null for selection expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseExpression.ToEPLElement(System.IO.StringWriter)">
            <summary>Renders the element in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SelectClauseExpression.Expression">
            <summary>
            Gets or sets the selection expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.SafeEnumerator`1">
            <summary>
            A concurrency-safe iterator that iterates over events representing statement results (pull API)
            in the face of concurrent event processing by further threads.
            <para>
            In comparison to the regular iterator, the safe iterator guarantees correct results even
            as events are being processed by other threads. The cost is that the iterator holds
            one or more locks that must be released via the close method. Any locks are acquired
            at the time an instance is created.
            </para>
            <para>
            NOTE: An application MUST explicitly close the safe iterator instance using the close method, to release locks held by the
            iterator. The call to the close method should be done in a finally block to make sure
            the iterator gets closed.
            </para>
            <para>
            Multiple safe iterators may be not be used at the same time by different application threads.
            A single application thread may hold and use multiple safe iterators however this is discouraged.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPSubscriberException">
            <summary>
            This exception is thrown to indicate that a subscriber registration failed
            such as when the subscribe does not expose an acceptable method to receive
            statement results.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPSubscriberException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
        </member>
        <member name="T:com.espertech.esper.client.ConnectionSettings">
            <summary>
            Supplies connection-level settings for a given database name.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConnectionSettings.AutoCommit">
            <summary> Returns a bool indicating auto-commit, or null if not set and default accepted.</summary>
            <returns> true for auto-commit on, false for auto-commit off, or null to accept the default
            </returns>
            <summary> Indicates whether to set any new connections for this database to auto-commit.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConnectionSettings.Catalog">
            <summary> Gets the name of the catalog to set on new database connections, or null for default.</summary>
            <returns> name of the catalog to set, or null to accept the default
            </returns>
            <summary> Sets the name of the catalog on new database connections.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConnectionSettings.TransactionIsolation">
            <summary> Returns the connection settings for transaction isolation level.</summary>
            <returns> transaction isolation level
            </returns>
            <summary>
            Sets the transaction isolation level for new database connections,
            can be null to accept the default.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInEventType">
            <summary>
            Configuration for a plug-in event type, which is an event type resolved via
            plug-in event representation.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInEventType.EventRepresentationResolutionURIs">
            <summary>
            Gets or sets the URIs to use to resolve the new event type against the plug-in event representations registered.
            </summary>
            <value>The event representation resolution UR is.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInEventType.Initializer">
            <summary>
            Gets or sets the optional initialization information that the plug-in event representation may use to set up the event type.
            </summary>
            <value>The initializer.</value>
        </member>
    </members>
</doc>
